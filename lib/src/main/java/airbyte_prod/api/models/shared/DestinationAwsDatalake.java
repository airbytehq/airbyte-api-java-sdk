/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package airbyte_prod.api.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DestinationAwsDatalake - The values required to configure the destination.
 */
public class DestinationAwsDatalake {
    /**
     * target aws account id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aws_account_id")
    public String awsAccountId;
    public DestinationAwsDatalake withAwsAccountId(String awsAccountId) {
        this.awsAccountId = awsAccountId;
        return this;
    }
    
    /**
     * The name of the S3 bucket. Read more &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("bucket_name")
    public String bucketName;
    public DestinationAwsDatalake withBucketName(String bucketName) {
        this.bucketName = bucketName;
        return this;
    }
    
    /**
     * S3 prefix
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucket_prefix")
    public String bucketPrefix;
    public DestinationAwsDatalake withBucketPrefix(String bucketPrefix) {
        this.bucketPrefix = bucketPrefix;
        return this;
    }
    
    /**
     * Choose How to Authenticate to AWS.
     */
    @JsonProperty("credentials")
    public Object credentials;
    public DestinationAwsDatalake withCredentials(Object credentials) {
        this.credentials = credentials;
        return this;
    }
    
    @JsonProperty("destinationType")
    public DestinationAwsDatalakeAwsDatalakeEnum destinationType;
    public DestinationAwsDatalake withDestinationType(DestinationAwsDatalakeAwsDatalakeEnum destinationType) {
        this.destinationType = destinationType;
        return this;
    }
    
    /**
     * Format of the data output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public Object format;
    public DestinationAwsDatalake withFormat(Object format) {
        this.format = format;
        return this;
    }
    
    /**
     * Cast float/double as decimal(38,18). This can help achieve higher accuracy and represent numbers correctly as received from the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("glue_catalog_float_as_decimal")
    public Boolean glueCatalogFloatAsDecimal;
    public DestinationAwsDatalake withGlueCatalogFloatAsDecimal(Boolean glueCatalogFloatAsDecimal) {
        this.glueCatalogFloatAsDecimal = glueCatalogFloatAsDecimal;
        return this;
    }
    
    /**
     * Add a default tag key to databases created by this destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lakeformation_database_default_tag_key")
    public String lakeformationDatabaseDefaultTagKey;
    public DestinationAwsDatalake withLakeformationDatabaseDefaultTagKey(String lakeformationDatabaseDefaultTagKey) {
        this.lakeformationDatabaseDefaultTagKey = lakeformationDatabaseDefaultTagKey;
        return this;
    }
    
    /**
     * Add default values for the `Tag Key` to databases created by this destination. Comma separate for multiple values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lakeformation_database_default_tag_values")
    public String lakeformationDatabaseDefaultTagValues;
    public DestinationAwsDatalake withLakeformationDatabaseDefaultTagValues(String lakeformationDatabaseDefaultTagValues) {
        this.lakeformationDatabaseDefaultTagValues = lakeformationDatabaseDefaultTagValues;
        return this;
    }
    
    /**
     * The default database this destination will use to create tables in per stream. Can be changed per connection by customizing the namespace.
     */
    @JsonProperty("lakeformation_database_name")
    public String lakeformationDatabaseName;
    public DestinationAwsDatalake withLakeformationDatabaseName(String lakeformationDatabaseName) {
        this.lakeformationDatabaseName = lakeformationDatabaseName;
        return this;
    }
    
    /**
     * Whether to create tables as LF governed tables.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lakeformation_governed_tables")
    public Boolean lakeformationGovernedTables;
    public DestinationAwsDatalake withLakeformationGovernedTables(Boolean lakeformationGovernedTables) {
        this.lakeformationGovernedTables = lakeformationGovernedTables;
        return this;
    }
    
    /**
     * Partition data by cursor fields when a cursor field is a date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partitioning")
    public DestinationAwsDatalakeChooseHowToPartitionDataEnum partitioning;
    public DestinationAwsDatalake withPartitioning(DestinationAwsDatalakeChooseHowToPartitionDataEnum partitioning) {
        this.partitioning = partitioning;
        return this;
    }
    
    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    @JsonProperty("region")
    public DestinationAwsDatalakeS3BucketRegionEnum region;
    public DestinationAwsDatalake withRegion(DestinationAwsDatalakeS3BucketRegionEnum region) {
        this.region = region;
        return this;
    }
    
}
