/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package airbyte_prod.api;

import airbyte_prod.api.utils.HTTPClient;
import airbyte_prod.api.utils.HTTPRequest;
import java.net.http.HttpResponse;

public class Health {
	
    /**
	 * GET_HEALTH_CHECK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] GET_HEALTH_CHECK_SERVERS = {
        /**
         * Override base path for health checks
         */
        "https://api.airbyte.com/",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Health(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Health Check
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public airbyte_prod.api.models.operations.GetHealthCheckResponse getHealthCheck() throws Exception {
        return this.getHealthCheck(null);
    }

    /**
     * Health Check
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public airbyte_prod.api.models.operations.GetHealthCheckResponse getHealthCheck(String serverURL) throws Exception {
        String baseUrl = GET_HEALTH_CHECK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = airbyte_prod.api.utils.Utils.generateURL(baseUrl, "/health");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        airbyte_prod.api.models.operations.GetHealthCheckResponse res = new airbyte_prod.api.models.operations.GetHealthCheckResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}