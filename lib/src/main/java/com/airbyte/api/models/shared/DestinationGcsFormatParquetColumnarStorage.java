/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DestinationGcsFormatParquetColumnarStorage - Output data format. One of the following formats must be selected - &lt;a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-avro#advantages_of_avro"&gt;AVRO&lt;/a&gt; format, &lt;a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-parquet#parquet_schemas"&gt;PARQUET&lt;/a&gt; format, &lt;a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-csv#loading_csv_data_into_a_table"&gt;CSV&lt;/a&gt; format, or &lt;a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-json#loading_json_data_into_a_new_table"&gt;JSONL&lt;/a&gt; format.
 */
public class DestinationGcsFormatParquetColumnarStorage {
    /**
     * This is the size of a row group being buffered in memory. It limits the memory usage when writing. Larger values will improve the IO when reading, but consume more memory when writing. Default: 128 MB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_size_mb")
    public Long blockSizeMb;

    public DestinationGcsFormatParquetColumnarStorage withBlockSizeMb(Long blockSizeMb) {
        this.blockSizeMb = blockSizeMb;
        return this;
    }
    
    /**
     * The compression algorithm used to compress data pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compression_codec")
    public DestinationGcsFormatParquetColumnarStorageCompressionCodecEnum compressionCodec;

    public DestinationGcsFormatParquetColumnarStorage withCompressionCodec(DestinationGcsFormatParquetColumnarStorageCompressionCodecEnum compressionCodec) {
        this.compressionCodec = compressionCodec;
        return this;
    }
    
    /**
     * Default: true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dictionary_encoding")
    public Boolean dictionaryEncoding;

    public DestinationGcsFormatParquetColumnarStorage withDictionaryEncoding(Boolean dictionaryEncoding) {
        this.dictionaryEncoding = dictionaryEncoding;
        return this;
    }
    
    /**
     * There is one dictionary page per column per row group when dictionary encoding is used. The dictionary page size works like the page size but for dictionary. Default: 1024 KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dictionary_page_size_kb")
    public Long dictionaryPageSizeKb;

    public DestinationGcsFormatParquetColumnarStorage withDictionaryPageSizeKb(Long dictionaryPageSizeKb) {
        this.dictionaryPageSizeKb = dictionaryPageSizeKb;
        return this;
    }
    
    @JsonProperty("format_type")
    public DestinationGcsFormatParquetColumnarStorageFormatTypeEnum formatType;

    public DestinationGcsFormatParquetColumnarStorage withFormatType(DestinationGcsFormatParquetColumnarStorageFormatTypeEnum formatType) {
        this.formatType = formatType;
        return this;
    }
    
    /**
     * Maximum size allowed as padding to align row groups. This is also the minimum size of a row group. Default: 8 MB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_padding_size_mb")
    public Long maxPaddingSizeMb;

    public DestinationGcsFormatParquetColumnarStorage withMaxPaddingSizeMb(Long maxPaddingSizeMb) {
        this.maxPaddingSizeMb = maxPaddingSizeMb;
        return this;
    }
    
    /**
     * The page size is for compression. A block is composed of pages. A page is the smallest unit that must be read fully to access a single record. If this value is too small, the compression will deteriorate. Default: 1024 KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size_kb")
    public Long pageSizeKb;

    public DestinationGcsFormatParquetColumnarStorage withPageSizeKb(Long pageSizeKb) {
        this.pageSizeKb = pageSizeKb;
        return this;
    }
    
    public DestinationGcsFormatParquetColumnarStorage(@JsonProperty("format_type") DestinationGcsFormatParquetColumnarStorageFormatTypeEnum formatType) {
        this.formatType = formatType;
  }
}
