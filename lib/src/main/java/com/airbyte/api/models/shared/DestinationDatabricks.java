/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DestinationDatabricks - The values required to configure the destination.
 */
public class DestinationDatabricks {
    /**
     * You must agree to the Databricks JDBC Driver &lt;a href="https://databricks.com/jdbc-odbc-driver-license"&gt;Terms &amp; Conditions&lt;/a&gt; to use this connector.
     */
    @JsonProperty("accept_terms")
    public Boolean acceptTerms;

    public DestinationDatabricks withAcceptTerms(Boolean acceptTerms) {
        this.acceptTerms = acceptTerms;
        return this;
    }
    
    /**
     * Storage on which the delta lake is built.
     */
    @JsonProperty("data_source")
    public Object dataSource;

    public DestinationDatabricks withDataSource(Object dataSource) {
        this.dataSource = dataSource;
        return this;
    }
    
    /**
     * The name of the catalog. If not specified otherwise, the "hive_metastore" will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("database")
    public String database;

    public DestinationDatabricks withDatabase(String database) {
        this.database = database;
        return this;
    }
    
    /**
     * Databricks Cluster HTTP Path.
     */
    @JsonProperty("databricks_http_path")
    public String databricksHttpPath;

    public DestinationDatabricks withDatabricksHttpPath(String databricksHttpPath) {
        this.databricksHttpPath = databricksHttpPath;
        return this;
    }
    
    /**
     * Databricks Personal Access Token for making authenticated requests.
     */
    @JsonProperty("databricks_personal_access_token")
    public String databricksPersonalAccessToken;

    public DestinationDatabricks withDatabricksPersonalAccessToken(String databricksPersonalAccessToken) {
        this.databricksPersonalAccessToken = databricksPersonalAccessToken;
        return this;
    }
    
    /**
     * Databricks Cluster Port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databricks_port")
    public String databricksPort;

    public DestinationDatabricks withDatabricksPort(String databricksPort) {
        this.databricksPort = databricksPort;
        return this;
    }
    
    /**
     * Databricks Cluster Server Hostname.
     */
    @JsonProperty("databricks_server_hostname")
    public String databricksServerHostname;

    public DestinationDatabricks withDatabricksServerHostname(String databricksServerHostname) {
        this.databricksServerHostname = databricksServerHostname;
        return this;
    }
    
    @JsonProperty("destinationType")
    public DestinationDatabricksDatabricks destinationType;

    public DestinationDatabricks withDestinationType(DestinationDatabricksDatabricks destinationType) {
        this.destinationType = destinationType;
        return this;
    }
    
    /**
     * Default to 'true'. Switch it to 'false' for debugging purpose.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purge_staging_data")
    public Boolean purgeStagingData;

    public DestinationDatabricks withPurgeStagingData(Boolean purgeStagingData) {
        this.purgeStagingData = purgeStagingData;
        return this;
    }
    
    /**
     * The default schema tables are written. If not specified otherwise, the "default" will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    public String schema;

    public DestinationDatabricks withSchema(String schema) {
        this.schema = schema;
        return this;
    }
    
    public DestinationDatabricks(@JsonProperty("accept_terms") Boolean acceptTerms, @JsonProperty("data_source") Object dataSource, @JsonProperty("databricks_http_path") String databricksHttpPath, @JsonProperty("databricks_personal_access_token") String databricksPersonalAccessToken, @JsonProperty("databricks_server_hostname") String databricksServerHostname, @JsonProperty("destinationType") DestinationDatabricksDatabricks destinationType) {
        this.acceptTerms = acceptTerms;
        this.dataSource = dataSource;
        this.databricksHttpPath = databricksHttpPath;
        this.databricksPersonalAccessToken = databricksPersonalAccessToken;
        this.databricksServerHostname = databricksServerHostname;
        this.destinationType = destinationType;
  }
}
