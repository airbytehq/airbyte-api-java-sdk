/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DestinationBigqueryLoadingMethodGCSStaging - Loading method used to send select the way data will be uploaded to BigQuery. &lt;br/&gt;&lt;b&gt;Standard Inserts&lt;/b&gt; - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. &lt;br/&gt;&lt;b&gt;GCS Staging&lt;/b&gt; - Writes large batches of records to a file, uploads the file to GCS, then uses &lt;b&gt;COPY INTO table&lt;/b&gt; to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging &lt;a href="https://docs.airbyte.com/integrations/destinations/bigquery#gcs-staging"&gt;here&lt;/a&gt;.
 */

public class DestinationBigqueryLoadingMethodGCSStaging {
    /**
     * An HMAC key is a type of credential and can be associated with a service account or a user account in Cloud Storage. Read more &lt;a href="https://cloud.google.com/storage/docs/authentication/hmackeys"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("credential")
    public Object credential;

    public DestinationBigqueryLoadingMethodGCSStaging withCredential(Object credential) {
        this.credential = credential;
        return this;
    }
    
    /**
     * Number of file buffers allocated for writing data. Increasing this number is beneficial for connections using Change Data Capture (CDC) and up to the number of streams within a connection. Increasing the number of file buffers past the maximum number of streams has deteriorating effects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_buffer_count")
    public Long fileBufferCount;

    public DestinationBigqueryLoadingMethodGCSStaging withFileBufferCount(Long fileBufferCount) {
        this.fileBufferCount = fileBufferCount;
        return this;
    }
    
    /**
     * The name of the GCS bucket. Read more &lt;a href="https://cloud.google.com/storage/docs/naming-buckets"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("gcs_bucket_name")
    public String gcsBucketName;

    public DestinationBigqueryLoadingMethodGCSStaging withGcsBucketName(String gcsBucketName) {
        this.gcsBucketName = gcsBucketName;
        return this;
    }
    
    /**
     * Directory under the GCS bucket where data will be written.
     */
    @JsonProperty("gcs_bucket_path")
    public String gcsBucketPath;

    public DestinationBigqueryLoadingMethodGCSStaging withGcsBucketPath(String gcsBucketPath) {
        this.gcsBucketPath = gcsBucketPath;
        return this;
    }
    
    /**
     * This upload method is supposed to temporary store records in GCS bucket. By this select you can chose if these records should be removed from GCS when migration has finished. The default "Delete all tmp files from GCS" value is used if not set explicitly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keep_files_in_gcs-bucket")
    public DestinationBigqueryLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing keepFilesInGcsBucket;

    public DestinationBigqueryLoadingMethodGCSStaging withKeepFilesInGcsBucket(DestinationBigqueryLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing keepFilesInGcsBucket) {
        this.keepFilesInGcsBucket = keepFilesInGcsBucket;
        return this;
    }
    
    @JsonProperty("method")
    public DestinationBigqueryLoadingMethodGCSStagingMethod method;

    public DestinationBigqueryLoadingMethodGCSStaging withMethod(DestinationBigqueryLoadingMethodGCSStagingMethod method) {
        this.method = method;
        return this;
    }
    
    public DestinationBigqueryLoadingMethodGCSStaging(@JsonProperty("credential") Object credential, @JsonProperty("gcs_bucket_name") String gcsBucketName, @JsonProperty("gcs_bucket_path") String gcsBucketPath, @JsonProperty("method") DestinationBigqueryLoadingMethodGCSStagingMethod method) {
        this.credential = credential;
        this.gcsBucketName = gcsBucketName;
        this.gcsBucketPath = gcsBucketPath;
        this.method = method;
  }
}
