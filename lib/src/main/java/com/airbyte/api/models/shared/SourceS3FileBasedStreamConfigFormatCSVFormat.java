/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SourceS3FileBasedStreamConfigFormatCSVFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
 */

public class SourceS3FileBasedStreamConfigFormatCSVFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delimiter")
    public String delimiter;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withDelimiter(String delimiter) {
        this.delimiter = delimiter;
        return this;
    }
    
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("double_quote")
    public Boolean doubleQuote;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withDoubleQuote(Boolean doubleQuote) {
        this.doubleQuote = doubleQuote;
        return this;
    }
    
    /**
     * The character encoding of the CSV data. Leave blank to default to &lt;strong&gt;UTF8&lt;/strong&gt;. See &lt;a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank"&gt;list of python encodings&lt;/a&gt; for allowable options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encoding")
    public String encoding;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withEncoding(String encoding) {
        this.encoding = encoding;
        return this;
    }
    
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("escape_char")
    public String escapeChar;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withEscapeChar(String escapeChar) {
        this.escapeChar = escapeChar;
        return this;
    }
    
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("false_values")
    public String[] falseValues;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withFalseValues(String[] falseValues) {
        this.falseValues = falseValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filetype")
    public SourceS3FileBasedStreamConfigFormatCSVFormatFiletype filetype;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withFiletype(SourceS3FileBasedStreamConfigFormatCSVFormatFiletype filetype) {
        this.filetype = filetype;
        return this;
    }
    
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("header_definition")
    public Object headerDefinition;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withHeaderDefinition(Object headerDefinition) {
        this.headerDefinition = headerDefinition;
        return this;
    }
    
    /**
     * How to infer the types of the columns. If none, inference default to strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inference_type")
    public SourceS3FileBasedStreamConfigFormatCSVFormatInferenceType inferenceType;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withInferenceType(SourceS3FileBasedStreamConfigFormatCSVFormatInferenceType inferenceType) {
        this.inferenceType = inferenceType;
        return this;
    }
    
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("null_values")
    public String[] nullValues;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withNullValues(String[] nullValues) {
        this.nullValues = nullValues;
        return this;
    }
    
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quote_char")
    public String quoteChar;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withQuoteChar(String quoteChar) {
        this.quoteChar = quoteChar;
        return this;
    }
    
    /**
     * The number of rows to skip after the header row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_rows_after_header")
    public Long skipRowsAfterHeader;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withSkipRowsAfterHeader(Long skipRowsAfterHeader) {
        this.skipRowsAfterHeader = skipRowsAfterHeader;
        return this;
    }
    
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_rows_before_header")
    public Long skipRowsBeforeHeader;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withSkipRowsBeforeHeader(Long skipRowsBeforeHeader) {
        this.skipRowsBeforeHeader = skipRowsBeforeHeader;
        return this;
    }
    
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strings_can_be_null")
    public Boolean stringsCanBeNull;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withStringsCanBeNull(Boolean stringsCanBeNull) {
        this.stringsCanBeNull = stringsCanBeNull;
        return this;
    }
    
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("true_values")
    public String[] trueValues;

    public SourceS3FileBasedStreamConfigFormatCSVFormat withTrueValues(String[] trueValues) {
        this.trueValues = trueValues;
        return this;
    }
    
    public SourceS3FileBasedStreamConfigFormatCSVFormat(){}
}
