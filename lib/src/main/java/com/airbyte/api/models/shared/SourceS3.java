/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.DateTimeDeserializer;
import com.airbyte.api.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * SourceS3 - NOTE: When this Spec is changed, legacy_config_transformer.py must also be modified to uptake the changes
 * because it is responsible for converting legacy S3 v3 configs into v4 configs using the File-Based CDK.
 */

public class SourceS3 {
    /**
     * In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aws_access_key_id")
    public String awsAccessKeyId;

    public SourceS3 withAwsAccessKeyId(String awsAccessKeyId) {
        this.awsAccessKeyId = awsAccessKeyId;
        return this;
    }
    
    /**
     * In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aws_secret_access_key")
    public String awsSecretAccessKey;

    public SourceS3 withAwsSecretAccessKey(String awsSecretAccessKey) {
        this.awsSecretAccessKey = awsSecretAccessKey;
        return this;
    }
    
    /**
     * Name of the S3 bucket where the file(s) exist.
     */
    @JsonProperty("bucket")
    public String bucket;

    public SourceS3 withBucket(String bucket) {
        this.bucket = bucket;
        return this;
    }
    
    /**
     * Deprecated and will be removed soon. Please do not use this field anymore and use streams.name instead. The name of the stream you would like this source to output. Can contain letters, numbers, or underscores.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset")
    public String dataset;

    public SourceS3 withDataset(String dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * Endpoint to an S3 compatible service. Leave empty to use AWS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoint")
    public String endpoint;

    public SourceS3 withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }
    
    /**
     * Deprecated and will be removed soon. Please do not use this field anymore and use streams.format instead. The format of the files you'd like to replicate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public Object format;

    public SourceS3 withFormat(Object format) {
        this.format = format;
        return this;
    }
    
    /**
     * Deprecated and will be removed soon. Please do not use this field anymore and use streams.globs instead. A regular expression which tells the connector which files to replicate. All files which match this pattern will be replicated. Use | to separate multiple patterns. See &lt;a href="https://facelessuser.github.io/wcmatch/glob/" target="_blank"&gt;this page&lt;/a&gt; to understand pattern syntax (GLOBSTAR and SPLIT flags are enabled). Use pattern &lt;strong&gt;**&lt;/strong&gt; to pick up all files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path_pattern")
    public String pathPattern;

    public SourceS3 withPathPattern(String pathPattern) {
        this.pathPattern = pathPattern;
        return this;
    }
    
    /**
     * Deprecated and will be removed soon. Please do not use this field anymore and use bucket, aws_access_key_id, aws_secret_access_key and endpoint instead. Use this to load files from S3 or S3-compatible services
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    public SourceS3S3AmazonWebServices provider;

    public SourceS3 withProvider(SourceS3S3AmazonWebServices provider) {
        this.provider = provider;
        return this;
    }
    
    /**
     * Deprecated and will be removed soon. Please do not use this field anymore and use streams.input_schema instead. Optionally provide a schema to enforce, as a valid JSON string. Ensure this is a mapping of &lt;strong&gt;{ "column" : "type" }&lt;/strong&gt;, where types are valid &lt;a href="https://json-schema.org/understanding-json-schema/reference/type.html" target="_blank"&gt;JSON Schema datatypes&lt;/a&gt;. Leave as {} to auto-infer the schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    public String schema;

    public SourceS3 withSchema(String schema) {
        this.schema = schema;
        return this;
    }
    
    @JsonProperty("sourceType")
    public SourceS3S3 sourceType;

    public SourceS3 withSourceType(SourceS3S3 sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_date")
    public OffsetDateTime startDate;

    public SourceS3 withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    @JsonProperty("streams")
    public SourceS3FileBasedStreamConfig[] streams;

    public SourceS3 withStreams(SourceS3FileBasedStreamConfig[] streams) {
        this.streams = streams;
        return this;
    }
    
    public SourceS3(@JsonProperty("bucket") String bucket, @JsonProperty("sourceType") SourceS3S3 sourceType, @JsonProperty("streams") SourceS3FileBasedStreamConfig[] streams) {
        this.bucket = bucket;
        this.sourceType = sourceType;
        this.streams = streams;
  }
}
