/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SourceS3FormatJsonl - This connector uses &lt;a href="https://arrow.apache.org/docs/python/json.html" target="_blank"&gt;PyArrow&lt;/a&gt; for JSON Lines (jsonl) file parsing.
 */
public class SourceS3FormatJsonl {
    /**
     * The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_size")
    public Long blockSize;
    public SourceS3FormatJsonl withBlockSize(Long blockSize) {
        this.blockSize = blockSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filetype")
    public SourceS3FormatJsonlFiletypeEnum filetype;
    public SourceS3FormatJsonl withFiletype(SourceS3FormatJsonlFiletypeEnum filetype) {
        this.filetype = filetype;
        return this;
    }
    
    /**
     * Whether newline characters are allowed in JSON values. Turning this on may affect performance. Leave blank to default to False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newlines_in_values")
    public Boolean newlinesInValues;
    public SourceS3FormatJsonl withNewlinesInValues(Boolean newlinesInValues) {
        this.newlinesInValues = newlinesInValues;
        return this;
    }
    
    /**
     * How JSON fields outside of explicit_schema (if given) are treated. Check &lt;a href="https://arrow.apache.org/docs/python/generated/pyarrow.json.ParseOptions.html" target="_blank"&gt;PyArrow documentation&lt;/a&gt; for details
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unexpected_field_behavior")
    public Object unexpectedFieldBehavior;
    public SourceS3FormatJsonl withUnexpectedFieldBehavior(Object unexpectedFieldBehavior) {
        this.unexpectedFieldBehavior = unexpectedFieldBehavior;
        return this;
    }
    
    public SourceS3FormatJsonl(){}
}
