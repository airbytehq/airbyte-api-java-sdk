/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api;

import com.airbyte.api.models.errors.SDKError;
import com.airbyte.api.models.operations.SDKMethodInterfaces.*;
import com.airbyte.api.utils.HTTPClient;
import com.airbyte.api.utils.HTTPRequest;
import com.airbyte.api.utils.JSON;
import com.airbyte.api.utils.SerializedBody;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class Jobs implements
            MethodCallCancelJob,
            MethodCallCreateJob,
            MethodCallGetJob,
            MethodCallListJobs {

    private final SDKConfiguration sdkConfiguration;

    Jobs(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.airbyte.api.models.operations.CancelJobRequestBuilder cancelJob() {
        return new com.airbyte.api.models.operations.CancelJobRequestBuilder(this);
    }

    /**
     * Cancel a running Job
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.CancelJobResponse cancelJob(
            com.airbyte.api.models.operations.CancelJobRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                com.airbyte.api.models.operations.CancelJobRequest.class,
                baseUrl,
                "/jobs/{jobId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.CancelJobResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.CancelJobResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.CancelJobResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.JobResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.JobResponse>() {});
                res.withJobResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
        }

        return res;
    }


    public com.airbyte.api.models.operations.CreateJobRequestBuilder createJob() {
        return new com.airbyte.api.models.operations.CreateJobRequestBuilder(this);
    }

    /**
     * Trigger a sync or reset job of a connection
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.CreateJobResponse createJob(
            com.airbyte.api.models.shared.JobCreateRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                baseUrl,
                "/jobs");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.airbyte.api.models.shared.JobCreateRequest>() {});
        SerializedBody serializedRequestBody = com.airbyte.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.CreateJobResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.CreateJobResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.CreateJobResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.JobResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.JobResponse>() {});
                res.withJobResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403) {
        }

        return res;
    }


    public com.airbyte.api.models.operations.GetJobRequestBuilder getJob() {
        return new com.airbyte.api.models.operations.GetJobRequestBuilder(this);
    }

    /**
     * Get Job status and details
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.GetJobResponse getJob(
            com.airbyte.api.models.operations.GetJobRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                com.airbyte.api.models.operations.GetJobRequest.class,
                baseUrl,
                "/jobs/{jobId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.GetJobResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.GetJobResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.GetJobResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.JobResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.JobResponse>() {});
                res.withJobResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
        }

        return res;
    }


    public com.airbyte.api.models.operations.ListJobsRequestBuilder listJobs() {
        return new com.airbyte.api.models.operations.ListJobsRequestBuilder(this);
    }

    /**
     * List Jobs by sync type
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.ListJobsResponse listJobs(
            com.airbyte.api.models.operations.ListJobsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                baseUrl,
                "/jobs");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.airbyte.api.utils.Utils.getQueryParams(
                com.airbyte.api.models.operations.ListJobsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.ListJobsResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.ListJobsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.ListJobsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.JobsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.JobsResponse>() {});
                res.withJobsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 403) {
        }

        return res;
    }

}
