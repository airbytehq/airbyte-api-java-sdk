/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.operations;

import com.airbyte.api.utils.SpeakeasyMetadata;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetDestinationRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=destinationId")
    private String destinationId;

    /**
     * Rather than return *** for secret properties include the secret coordinate information
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeSecretCoordinates")
    private Optional<Boolean> includeSecretCoordinates;

    @JsonCreator
    public GetDestinationRequest(
            String destinationId,
            Optional<Boolean> includeSecretCoordinates) {
        Utils.checkNotNull(destinationId, "destinationId");
        Utils.checkNotNull(includeSecretCoordinates, "includeSecretCoordinates");
        this.destinationId = destinationId;
        this.includeSecretCoordinates = includeSecretCoordinates;
    }
    
    public GetDestinationRequest(
            String destinationId) {
        this(destinationId, Optional.empty());
    }

    @JsonIgnore
    public String destinationId() {
        return destinationId;
    }

    /**
     * Rather than return *** for secret properties include the secret coordinate information
     */
    @JsonIgnore
    public Optional<Boolean> includeSecretCoordinates() {
        return includeSecretCoordinates;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetDestinationRequest withDestinationId(String destinationId) {
        Utils.checkNotNull(destinationId, "destinationId");
        this.destinationId = destinationId;
        return this;
    }

    /**
     * Rather than return *** for secret properties include the secret coordinate information
     */
    public GetDestinationRequest withIncludeSecretCoordinates(boolean includeSecretCoordinates) {
        Utils.checkNotNull(includeSecretCoordinates, "includeSecretCoordinates");
        this.includeSecretCoordinates = Optional.ofNullable(includeSecretCoordinates);
        return this;
    }

    /**
     * Rather than return *** for secret properties include the secret coordinate information
     */
    public GetDestinationRequest withIncludeSecretCoordinates(Optional<Boolean> includeSecretCoordinates) {
        Utils.checkNotNull(includeSecretCoordinates, "includeSecretCoordinates");
        this.includeSecretCoordinates = includeSecretCoordinates;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDestinationRequest other = (GetDestinationRequest) o;
        return 
            Objects.deepEquals(this.destinationId, other.destinationId) &&
            Objects.deepEquals(this.includeSecretCoordinates, other.includeSecretCoordinates);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            destinationId,
            includeSecretCoordinates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDestinationRequest.class,
                "destinationId", destinationId,
                "includeSecretCoordinates", includeSecretCoordinates);
    }
    
    public final static class Builder {
 
        private String destinationId;
 
        private Optional<Boolean> includeSecretCoordinates = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder destinationId(String destinationId) {
            Utils.checkNotNull(destinationId, "destinationId");
            this.destinationId = destinationId;
            return this;
        }

        /**
         * Rather than return *** for secret properties include the secret coordinate information
         */
        public Builder includeSecretCoordinates(boolean includeSecretCoordinates) {
            Utils.checkNotNull(includeSecretCoordinates, "includeSecretCoordinates");
            this.includeSecretCoordinates = Optional.ofNullable(includeSecretCoordinates);
            return this;
        }

        /**
         * Rather than return *** for secret properties include the secret coordinate information
         */
        public Builder includeSecretCoordinates(Optional<Boolean> includeSecretCoordinates) {
            Utils.checkNotNull(includeSecretCoordinates, "includeSecretCoordinates");
            this.includeSecretCoordinates = includeSecretCoordinates;
            return this;
        }
        
        public GetDestinationRequest build() {
            return new GetDestinationRequest(
                destinationId,
                includeSecretCoordinates);
        }
    }
}
