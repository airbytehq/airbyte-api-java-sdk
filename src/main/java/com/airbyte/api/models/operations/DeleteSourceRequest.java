/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.operations;

import com.airbyte.api.utils.SpeakeasyMetadata;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class DeleteSourceRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=sourceId")
    private String sourceId;

    @JsonCreator
    public DeleteSourceRequest(
            String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
    }

    @JsonIgnore
    public String sourceId() {
        return sourceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DeleteSourceRequest withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteSourceRequest other = (DeleteSourceRequest) o;
        return 
            Objects.deepEquals(this.sourceId, other.sourceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sourceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteSourceRequest.class,
                "sourceId", sourceId);
    }
    
    public final static class Builder {
 
        private String sourceId;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }
        
        public DeleteSourceRequest build() {
            return new DeleteSourceRequest(
                sourceId);
        }
    }
}
