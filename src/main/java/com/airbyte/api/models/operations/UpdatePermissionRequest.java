/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.operations;


import com.airbyte.api.models.shared.PermissionUpdateRequest;
import com.airbyte.api.utils.SpeakeasyMetadata;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class UpdatePermissionRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private PermissionUpdateRequest permissionUpdateRequest;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=permissionId")
    private String permissionId;

    @JsonCreator
    public UpdatePermissionRequest(
            PermissionUpdateRequest permissionUpdateRequest,
            String permissionId) {
        Utils.checkNotNull(permissionUpdateRequest, "permissionUpdateRequest");
        Utils.checkNotNull(permissionId, "permissionId");
        this.permissionUpdateRequest = permissionUpdateRequest;
        this.permissionId = permissionId;
    }

    @JsonIgnore
    public PermissionUpdateRequest permissionUpdateRequest() {
        return permissionUpdateRequest;
    }

    @JsonIgnore
    public String permissionId() {
        return permissionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdatePermissionRequest withPermissionUpdateRequest(PermissionUpdateRequest permissionUpdateRequest) {
        Utils.checkNotNull(permissionUpdateRequest, "permissionUpdateRequest");
        this.permissionUpdateRequest = permissionUpdateRequest;
        return this;
    }

    public UpdatePermissionRequest withPermissionId(String permissionId) {
        Utils.checkNotNull(permissionId, "permissionId");
        this.permissionId = permissionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePermissionRequest other = (UpdatePermissionRequest) o;
        return 
            Objects.deepEquals(this.permissionUpdateRequest, other.permissionUpdateRequest) &&
            Objects.deepEquals(this.permissionId, other.permissionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            permissionUpdateRequest,
            permissionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatePermissionRequest.class,
                "permissionUpdateRequest", permissionUpdateRequest,
                "permissionId", permissionId);
    }
    
    public final static class Builder {
 
        private PermissionUpdateRequest permissionUpdateRequest;
 
        private String permissionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder permissionUpdateRequest(PermissionUpdateRequest permissionUpdateRequest) {
            Utils.checkNotNull(permissionUpdateRequest, "permissionUpdateRequest");
            this.permissionUpdateRequest = permissionUpdateRequest;
            return this;
        }

        public Builder permissionId(String permissionId) {
            Utils.checkNotNull(permissionId, "permissionId");
            this.permissionId = permissionId;
            return this;
        }
        
        public UpdatePermissionRequest build() {
            return new UpdatePermissionRequest(
                permissionUpdateRequest,
                permissionId);
        }
    }
}

