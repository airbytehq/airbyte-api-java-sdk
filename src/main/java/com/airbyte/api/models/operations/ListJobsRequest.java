/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.operations;

import com.airbyte.api.models.shared.JobStatusEnum;
import com.airbyte.api.models.shared.JobTypeEnum;
import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.SpeakeasyMetadata;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListJobsRequest {

    /**
     * Filter the Jobs by connectionId.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=connectionId")
    private Optional<String> connectionId;

    /**
     * The end date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=createdAtEnd")
    private Optional<OffsetDateTime> createdAtEnd;

    /**
     * The start date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=createdAtStart")
    private Optional<OffsetDateTime> createdAtStart;

    /**
     * Filter the Jobs by jobType.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=jobType")
    private Optional<? extends JobTypeEnum> jobType;

    /**
     * Set the limit on the number of Jobs returned. The default is 20 Jobs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Integer> limit;

    /**
     * Set the offset to start at when returning Jobs. The default is 0.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Integer> offset;

    /**
     * The field and method to use for ordering
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orderBy")
    private Optional<String> orderBy;

    /**
     * The Job status you want to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private Optional<? extends JobStatusEnum> status;

    /**
     * The end date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updatedAtEnd")
    private Optional<OffsetDateTime> updatedAtEnd;

    /**
     * The start date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updatedAtStart")
    private Optional<OffsetDateTime> updatedAtStart;

    /**
     * The UUIDs of the workspaces you wish to list jobs for. Empty list will retrieve all allowed workspaces.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=workspaceIds")
    private Optional<? extends List<String>> workspaceIds;

    @JsonCreator
    public ListJobsRequest(
            Optional<String> connectionId,
            Optional<OffsetDateTime> createdAtEnd,
            Optional<OffsetDateTime> createdAtStart,
            Optional<? extends JobTypeEnum> jobType,
            Optional<Integer> limit,
            Optional<Integer> offset,
            Optional<String> orderBy,
            Optional<? extends JobStatusEnum> status,
            Optional<OffsetDateTime> updatedAtEnd,
            Optional<OffsetDateTime> updatedAtStart,
            Optional<? extends List<String>> workspaceIds) {
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(createdAtEnd, "createdAtEnd");
        Utils.checkNotNull(createdAtStart, "createdAtStart");
        Utils.checkNotNull(jobType, "jobType");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(orderBy, "orderBy");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(updatedAtEnd, "updatedAtEnd");
        Utils.checkNotNull(updatedAtStart, "updatedAtStart");
        Utils.checkNotNull(workspaceIds, "workspaceIds");
        this.connectionId = connectionId;
        this.createdAtEnd = createdAtEnd;
        this.createdAtStart = createdAtStart;
        this.jobType = jobType;
        this.limit = limit;
        this.offset = offset;
        this.orderBy = orderBy;
        this.status = status;
        this.updatedAtEnd = updatedAtEnd;
        this.updatedAtStart = updatedAtStart;
        this.workspaceIds = workspaceIds;
    }
    
    public ListJobsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Filter the Jobs by connectionId.
     */
    @JsonIgnore
    public Optional<String> connectionId() {
        return connectionId;
    }

    /**
     * The end date to filter by
     */
    @JsonIgnore
    public Optional<OffsetDateTime> createdAtEnd() {
        return createdAtEnd;
    }

    /**
     * The start date to filter by
     */
    @JsonIgnore
    public Optional<OffsetDateTime> createdAtStart() {
        return createdAtStart;
    }

    /**
     * Filter the Jobs by jobType.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<JobTypeEnum> jobType() {
        return (Optional<JobTypeEnum>) jobType;
    }

    /**
     * Set the limit on the number of Jobs returned. The default is 20 Jobs.
     */
    @JsonIgnore
    public Optional<Integer> limit() {
        return limit;
    }

    /**
     * Set the offset to start at when returning Jobs. The default is 0.
     */
    @JsonIgnore
    public Optional<Integer> offset() {
        return offset;
    }

    /**
     * The field and method to use for ordering
     */
    @JsonIgnore
    public Optional<String> orderBy() {
        return orderBy;
    }

    /**
     * The Job status you want to filter by
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<JobStatusEnum> status() {
        return (Optional<JobStatusEnum>) status;
    }

    /**
     * The end date to filter by
     */
    @JsonIgnore
    public Optional<OffsetDateTime> updatedAtEnd() {
        return updatedAtEnd;
    }

    /**
     * The start date to filter by
     */
    @JsonIgnore
    public Optional<OffsetDateTime> updatedAtStart() {
        return updatedAtStart;
    }

    /**
     * The UUIDs of the workspaces you wish to list jobs for. Empty list will retrieve all allowed workspaces.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> workspaceIds() {
        return (Optional<List<String>>) workspaceIds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Filter the Jobs by connectionId.
     */
    public ListJobsRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = Optional.ofNullable(connectionId);
        return this;
    }

    /**
     * Filter the Jobs by connectionId.
     */
    public ListJobsRequest withConnectionId(Optional<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * The end date to filter by
     */
    public ListJobsRequest withCreatedAtEnd(OffsetDateTime createdAtEnd) {
        Utils.checkNotNull(createdAtEnd, "createdAtEnd");
        this.createdAtEnd = Optional.ofNullable(createdAtEnd);
        return this;
    }

    /**
     * The end date to filter by
     */
    public ListJobsRequest withCreatedAtEnd(Optional<OffsetDateTime> createdAtEnd) {
        Utils.checkNotNull(createdAtEnd, "createdAtEnd");
        this.createdAtEnd = createdAtEnd;
        return this;
    }

    /**
     * The start date to filter by
     */
    public ListJobsRequest withCreatedAtStart(OffsetDateTime createdAtStart) {
        Utils.checkNotNull(createdAtStart, "createdAtStart");
        this.createdAtStart = Optional.ofNullable(createdAtStart);
        return this;
    }

    /**
     * The start date to filter by
     */
    public ListJobsRequest withCreatedAtStart(Optional<OffsetDateTime> createdAtStart) {
        Utils.checkNotNull(createdAtStart, "createdAtStart");
        this.createdAtStart = createdAtStart;
        return this;
    }

    /**
     * Filter the Jobs by jobType.
     */
    public ListJobsRequest withJobType(JobTypeEnum jobType) {
        Utils.checkNotNull(jobType, "jobType");
        this.jobType = Optional.ofNullable(jobType);
        return this;
    }

    /**
     * Filter the Jobs by jobType.
     */
    public ListJobsRequest withJobType(Optional<? extends JobTypeEnum> jobType) {
        Utils.checkNotNull(jobType, "jobType");
        this.jobType = jobType;
        return this;
    }

    /**
     * Set the limit on the number of Jobs returned. The default is 20 Jobs.
     */
    public ListJobsRequest withLimit(int limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Set the limit on the number of Jobs returned. The default is 20 Jobs.
     */
    public ListJobsRequest withLimit(Optional<Integer> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Set the offset to start at when returning Jobs. The default is 0.
     */
    public ListJobsRequest withOffset(int offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    /**
     * Set the offset to start at when returning Jobs. The default is 0.
     */
    public ListJobsRequest withOffset(Optional<Integer> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    /**
     * The field and method to use for ordering
     */
    public ListJobsRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }

    /**
     * The field and method to use for ordering
     */
    public ListJobsRequest withOrderBy(Optional<String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    /**
     * The Job status you want to filter by
     */
    public ListJobsRequest withStatus(JobStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The Job status you want to filter by
     */
    public ListJobsRequest withStatus(Optional<? extends JobStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The end date to filter by
     */
    public ListJobsRequest withUpdatedAtEnd(OffsetDateTime updatedAtEnd) {
        Utils.checkNotNull(updatedAtEnd, "updatedAtEnd");
        this.updatedAtEnd = Optional.ofNullable(updatedAtEnd);
        return this;
    }

    /**
     * The end date to filter by
     */
    public ListJobsRequest withUpdatedAtEnd(Optional<OffsetDateTime> updatedAtEnd) {
        Utils.checkNotNull(updatedAtEnd, "updatedAtEnd");
        this.updatedAtEnd = updatedAtEnd;
        return this;
    }

    /**
     * The start date to filter by
     */
    public ListJobsRequest withUpdatedAtStart(OffsetDateTime updatedAtStart) {
        Utils.checkNotNull(updatedAtStart, "updatedAtStart");
        this.updatedAtStart = Optional.ofNullable(updatedAtStart);
        return this;
    }

    /**
     * The start date to filter by
     */
    public ListJobsRequest withUpdatedAtStart(Optional<OffsetDateTime> updatedAtStart) {
        Utils.checkNotNull(updatedAtStart, "updatedAtStart");
        this.updatedAtStart = updatedAtStart;
        return this;
    }

    /**
     * The UUIDs of the workspaces you wish to list jobs for. Empty list will retrieve all allowed workspaces.
     */
    public ListJobsRequest withWorkspaceIds(List<String> workspaceIds) {
        Utils.checkNotNull(workspaceIds, "workspaceIds");
        this.workspaceIds = Optional.ofNullable(workspaceIds);
        return this;
    }

    /**
     * The UUIDs of the workspaces you wish to list jobs for. Empty list will retrieve all allowed workspaces.
     */
    public ListJobsRequest withWorkspaceIds(Optional<? extends List<String>> workspaceIds) {
        Utils.checkNotNull(workspaceIds, "workspaceIds");
        this.workspaceIds = workspaceIds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListJobsRequest other = (ListJobsRequest) o;
        return 
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.createdAtEnd, other.createdAtEnd) &&
            Objects.deepEquals(this.createdAtStart, other.createdAtStart) &&
            Objects.deepEquals(this.jobType, other.jobType) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.offset, other.offset) &&
            Objects.deepEquals(this.orderBy, other.orderBy) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.updatedAtEnd, other.updatedAtEnd) &&
            Objects.deepEquals(this.updatedAtStart, other.updatedAtStart) &&
            Objects.deepEquals(this.workspaceIds, other.workspaceIds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectionId,
            createdAtEnd,
            createdAtStart,
            jobType,
            limit,
            offset,
            orderBy,
            status,
            updatedAtEnd,
            updatedAtStart,
            workspaceIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListJobsRequest.class,
                "connectionId", connectionId,
                "createdAtEnd", createdAtEnd,
                "createdAtStart", createdAtStart,
                "jobType", jobType,
                "limit", limit,
                "offset", offset,
                "orderBy", orderBy,
                "status", status,
                "updatedAtEnd", updatedAtEnd,
                "updatedAtStart", updatedAtStart,
                "workspaceIds", workspaceIds);
    }
    
    public final static class Builder {
 
        private Optional<String> connectionId = Optional.empty();
 
        private Optional<OffsetDateTime> createdAtEnd = Optional.empty();
 
        private Optional<OffsetDateTime> createdAtStart = Optional.empty();
 
        private Optional<? extends JobTypeEnum> jobType = Optional.empty();
 
        private Optional<Integer> limit;
 
        private Optional<Integer> offset;
 
        private Optional<String> orderBy = Optional.empty();
 
        private Optional<? extends JobStatusEnum> status = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAtEnd = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAtStart = Optional.empty();
 
        private Optional<? extends List<String>> workspaceIds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter the Jobs by connectionId.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = Optional.ofNullable(connectionId);
            return this;
        }

        /**
         * Filter the Jobs by connectionId.
         */
        public Builder connectionId(Optional<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * The end date to filter by
         */
        public Builder createdAtEnd(OffsetDateTime createdAtEnd) {
            Utils.checkNotNull(createdAtEnd, "createdAtEnd");
            this.createdAtEnd = Optional.ofNullable(createdAtEnd);
            return this;
        }

        /**
         * The end date to filter by
         */
        public Builder createdAtEnd(Optional<OffsetDateTime> createdAtEnd) {
            Utils.checkNotNull(createdAtEnd, "createdAtEnd");
            this.createdAtEnd = createdAtEnd;
            return this;
        }

        /**
         * The start date to filter by
         */
        public Builder createdAtStart(OffsetDateTime createdAtStart) {
            Utils.checkNotNull(createdAtStart, "createdAtStart");
            this.createdAtStart = Optional.ofNullable(createdAtStart);
            return this;
        }

        /**
         * The start date to filter by
         */
        public Builder createdAtStart(Optional<OffsetDateTime> createdAtStart) {
            Utils.checkNotNull(createdAtStart, "createdAtStart");
            this.createdAtStart = createdAtStart;
            return this;
        }

        /**
         * Filter the Jobs by jobType.
         */
        public Builder jobType(JobTypeEnum jobType) {
            Utils.checkNotNull(jobType, "jobType");
            this.jobType = Optional.ofNullable(jobType);
            return this;
        }

        /**
         * Filter the Jobs by jobType.
         */
        public Builder jobType(Optional<? extends JobTypeEnum> jobType) {
            Utils.checkNotNull(jobType, "jobType");
            this.jobType = jobType;
            return this;
        }

        /**
         * Set the limit on the number of Jobs returned. The default is 20 Jobs.
         */
        public Builder limit(int limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Set the limit on the number of Jobs returned. The default is 20 Jobs.
         */
        public Builder limit(Optional<Integer> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Set the offset to start at when returning Jobs. The default is 0.
         */
        public Builder offset(int offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * Set the offset to start at when returning Jobs. The default is 0.
         */
        public Builder offset(Optional<Integer> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        /**
         * The field and method to use for ordering
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * The field and method to use for ordering
         */
        public Builder orderBy(Optional<String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }

        /**
         * The Job status you want to filter by
         */
        public Builder status(JobStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The Job status you want to filter by
         */
        public Builder status(Optional<? extends JobStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The end date to filter by
         */
        public Builder updatedAtEnd(OffsetDateTime updatedAtEnd) {
            Utils.checkNotNull(updatedAtEnd, "updatedAtEnd");
            this.updatedAtEnd = Optional.ofNullable(updatedAtEnd);
            return this;
        }

        /**
         * The end date to filter by
         */
        public Builder updatedAtEnd(Optional<OffsetDateTime> updatedAtEnd) {
            Utils.checkNotNull(updatedAtEnd, "updatedAtEnd");
            this.updatedAtEnd = updatedAtEnd;
            return this;
        }

        /**
         * The start date to filter by
         */
        public Builder updatedAtStart(OffsetDateTime updatedAtStart) {
            Utils.checkNotNull(updatedAtStart, "updatedAtStart");
            this.updatedAtStart = Optional.ofNullable(updatedAtStart);
            return this;
        }

        /**
         * The start date to filter by
         */
        public Builder updatedAtStart(Optional<OffsetDateTime> updatedAtStart) {
            Utils.checkNotNull(updatedAtStart, "updatedAtStart");
            this.updatedAtStart = updatedAtStart;
            return this;
        }

        /**
         * The UUIDs of the workspaces you wish to list jobs for. Empty list will retrieve all allowed workspaces.
         */
        public Builder workspaceIds(List<String> workspaceIds) {
            Utils.checkNotNull(workspaceIds, "workspaceIds");
            this.workspaceIds = Optional.ofNullable(workspaceIds);
            return this;
        }

        /**
         * The UUIDs of the workspaces you wish to list jobs for. Empty list will retrieve all allowed workspaces.
         */
        public Builder workspaceIds(Optional<? extends List<String>> workspaceIds) {
            Utils.checkNotNull(workspaceIds, "workspaceIds");
            this.workspaceIds = workspaceIds;
            return this;
        }
        
        public ListJobsRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (offset == null) {
                offset = _SINGLETON_VALUE_Offset.value();
            }
            return new ListJobsRequest(
                connectionId,
                createdAtEnd,
                createdAtStart,
                jobType,
                limit,
                offset,
                orderBy,
                status,
                updatedAtEnd,
                updatedAtStart,
                workspaceIds);
        }

        private static final LazySingletonValue<Optional<Integer>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<Integer>>() {});

        private static final LazySingletonValue<Optional<Integer>> _SINGLETON_VALUE_Offset =
                new LazySingletonValue<>(
                        "offset",
                        "0",
                        new TypeReference<Optional<Integer>>() {});
    }
}
