/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.operations;

import com.airbyte.api.utils.SpeakeasyMetadata;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ListUsersRequest {

    /**
     * List of user emails to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=emails")
    private Optional<? extends java.util.List<String>> emails;

    /**
     * List of user IDs to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ids")
    private Optional<? extends java.util.List<String>> ids;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=organizationId")
    private Optional<? extends String> organizationId;

    @JsonCreator
    public ListUsersRequest(
            Optional<? extends java.util.List<String>> emails,
            Optional<? extends java.util.List<String>> ids,
            Optional<? extends String> organizationId) {
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(ids, "ids");
        Utils.checkNotNull(organizationId, "organizationId");
        this.emails = emails;
        this.ids = ids;
        this.organizationId = organizationId;
    }
    
    public ListUsersRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * List of user emails to filter by
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> emails() {
        return (Optional<java.util.List<String>>) emails;
    }

    /**
     * List of user IDs to filter by
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> ids() {
        return (Optional<java.util.List<String>>) ids;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> organizationId() {
        return (Optional<String>) organizationId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of user emails to filter by
     */
    public ListUsersRequest withEmails(java.util.List<String> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    /**
     * List of user emails to filter by
     */
    public ListUsersRequest withEmails(Optional<? extends java.util.List<String>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * List of user IDs to filter by
     */
    public ListUsersRequest withIds(java.util.List<String> ids) {
        Utils.checkNotNull(ids, "ids");
        this.ids = Optional.ofNullable(ids);
        return this;
    }

    /**
     * List of user IDs to filter by
     */
    public ListUsersRequest withIds(Optional<? extends java.util.List<String>> ids) {
        Utils.checkNotNull(ids, "ids");
        this.ids = ids;
        return this;
    }

    public ListUsersRequest withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }

    public ListUsersRequest withOrganizationId(Optional<? extends String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListUsersRequest other = (ListUsersRequest) o;
        return 
            java.util.Objects.deepEquals(this.emails, other.emails) &&
            java.util.Objects.deepEquals(this.ids, other.ids) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            emails,
            ids,
            organizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListUsersRequest.class,
                "emails", emails,
                "ids", ids,
                "organizationId", organizationId);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> emails = Optional.empty();
 
        private Optional<? extends java.util.List<String>> ids = Optional.empty();
 
        private Optional<? extends String> organizationId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of user emails to filter by
         */
        public Builder emails(java.util.List<String> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        /**
         * List of user emails to filter by
         */
        public Builder emails(Optional<? extends java.util.List<String>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * List of user IDs to filter by
         */
        public Builder ids(java.util.List<String> ids) {
            Utils.checkNotNull(ids, "ids");
            this.ids = Optional.ofNullable(ids);
            return this;
        }

        /**
         * List of user IDs to filter by
         */
        public Builder ids(Optional<? extends java.util.List<String>> ids) {
            Utils.checkNotNull(ids, "ids");
            this.ids = ids;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        public Builder organizationId(Optional<? extends String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }
        
        public ListUsersRequest build() {
            return new ListUsersRequest(
                emails,
                ids,
                organizationId);
        }
    }
}

