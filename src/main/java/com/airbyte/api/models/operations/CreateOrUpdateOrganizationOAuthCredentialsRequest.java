/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.operations;

import com.airbyte.api.models.shared.OrganizationOAuthCredentialsRequest;
import com.airbyte.api.utils.SpeakeasyMetadata;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class CreateOrUpdateOrganizationOAuthCredentialsRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private OrganizationOAuthCredentialsRequest organizationOAuthCredentialsRequest;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organizationId")
    private String organizationId;

    @JsonCreator
    public CreateOrUpdateOrganizationOAuthCredentialsRequest(
            OrganizationOAuthCredentialsRequest organizationOAuthCredentialsRequest,
            String organizationId) {
        Utils.checkNotNull(organizationOAuthCredentialsRequest, "organizationOAuthCredentialsRequest");
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationOAuthCredentialsRequest = organizationOAuthCredentialsRequest;
        this.organizationId = organizationId;
    }

    @JsonIgnore
    public OrganizationOAuthCredentialsRequest organizationOAuthCredentialsRequest() {
        return organizationOAuthCredentialsRequest;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CreateOrUpdateOrganizationOAuthCredentialsRequest withOrganizationOAuthCredentialsRequest(OrganizationOAuthCredentialsRequest organizationOAuthCredentialsRequest) {
        Utils.checkNotNull(organizationOAuthCredentialsRequest, "organizationOAuthCredentialsRequest");
        this.organizationOAuthCredentialsRequest = organizationOAuthCredentialsRequest;
        return this;
    }

    public CreateOrUpdateOrganizationOAuthCredentialsRequest withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrUpdateOrganizationOAuthCredentialsRequest other = (CreateOrUpdateOrganizationOAuthCredentialsRequest) o;
        return 
            Objects.deepEquals(this.organizationOAuthCredentialsRequest, other.organizationOAuthCredentialsRequest) &&
            Objects.deepEquals(this.organizationId, other.organizationId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            organizationOAuthCredentialsRequest,
            organizationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrUpdateOrganizationOAuthCredentialsRequest.class,
                "organizationOAuthCredentialsRequest", organizationOAuthCredentialsRequest,
                "organizationId", organizationId);
    }
    
    public final static class Builder {
 
        private OrganizationOAuthCredentialsRequest organizationOAuthCredentialsRequest;
 
        private String organizationId;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder organizationOAuthCredentialsRequest(OrganizationOAuthCredentialsRequest organizationOAuthCredentialsRequest) {
            Utils.checkNotNull(organizationOAuthCredentialsRequest, "organizationOAuthCredentialsRequest");
            this.organizationOAuthCredentialsRequest = organizationOAuthCredentialsRequest;
            return this;
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }
        
        public CreateOrUpdateOrganizationOAuthCredentialsRequest build() {
            return new CreateOrUpdateOrganizationOAuthCredentialsRequest(
                organizationOAuthCredentialsRequest,
                organizationId);
        }
    }
}
