/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.operations;

import com.airbyte.api.utils.SpeakeasyMetadata;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ListTagsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=workspaceIds")
    private Optional<? extends List<String>> workspaceIds;

    @JsonCreator
    public ListTagsRequest(
            Optional<? extends List<String>> workspaceIds) {
        Utils.checkNotNull(workspaceIds, "workspaceIds");
        this.workspaceIds = workspaceIds;
    }
    
    public ListTagsRequest() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> workspaceIds() {
        return (Optional<List<String>>) workspaceIds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ListTagsRequest withWorkspaceIds(List<String> workspaceIds) {
        Utils.checkNotNull(workspaceIds, "workspaceIds");
        this.workspaceIds = Optional.ofNullable(workspaceIds);
        return this;
    }

    public ListTagsRequest withWorkspaceIds(Optional<? extends List<String>> workspaceIds) {
        Utils.checkNotNull(workspaceIds, "workspaceIds");
        this.workspaceIds = workspaceIds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListTagsRequest other = (ListTagsRequest) o;
        return 
            Objects.deepEquals(this.workspaceIds, other.workspaceIds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            workspaceIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListTagsRequest.class,
                "workspaceIds", workspaceIds);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> workspaceIds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder workspaceIds(List<String> workspaceIds) {
            Utils.checkNotNull(workspaceIds, "workspaceIds");
            this.workspaceIds = Optional.ofNullable(workspaceIds);
            return this;
        }

        public Builder workspaceIds(Optional<? extends List<String>> workspaceIds) {
            Utils.checkNotNull(workspaceIds, "workspaceIds");
            this.workspaceIds = workspaceIds;
            return this;
        }
        
        public ListTagsRequest build() {
            return new ListTagsRequest(
                workspaceIds);
        }
    }
}
