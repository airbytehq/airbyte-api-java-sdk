/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceRecurly {

    /**
     * Recurly API Key. See the  &lt;a href="https://docs.airbyte.com/integrations/sources/recurly"&gt;docs&lt;/a&gt; for more information on how to generate this key.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * ISO8601 timestamp from which the replication from Recurly API will start from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("begin_time")
    private Optional<String> beginTime;

    /**
     * ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_time")
    private Optional<String> endTime;

    @JsonProperty("sourceType")
    private Recurly sourceType;

    @JsonCreator
    public SourceRecurly(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("begin_time") Optional<String> beginTime,
            @JsonProperty("end_time") Optional<String> endTime) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(beginTime, "beginTime");
        Utils.checkNotNull(endTime, "endTime");
        this.apiKey = apiKey;
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceRecurly(
            String apiKey) {
        this(apiKey, Optional.empty(), Optional.empty());
    }

    /**
     * Recurly API Key. See the  &lt;a href="https://docs.airbyte.com/integrations/sources/recurly"&gt;docs&lt;/a&gt; for more information on how to generate this key.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * ISO8601 timestamp from which the replication from Recurly API will start from.
     */
    @JsonIgnore
    public Optional<String> beginTime() {
        return beginTime;
    }

    /**
     * ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.
     */
    @JsonIgnore
    public Optional<String> endTime() {
        return endTime;
    }

    @JsonIgnore
    public Recurly sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Recurly API Key. See the  &lt;a href="https://docs.airbyte.com/integrations/sources/recurly"&gt;docs&lt;/a&gt; for more information on how to generate this key.
     */
    public SourceRecurly withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * ISO8601 timestamp from which the replication from Recurly API will start from.
     */
    public SourceRecurly withBeginTime(String beginTime) {
        Utils.checkNotNull(beginTime, "beginTime");
        this.beginTime = Optional.ofNullable(beginTime);
        return this;
    }

    /**
     * ISO8601 timestamp from which the replication from Recurly API will start from.
     */
    public SourceRecurly withBeginTime(Optional<String> beginTime) {
        Utils.checkNotNull(beginTime, "beginTime");
        this.beginTime = beginTime;
        return this;
    }

    /**
     * ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.
     */
    public SourceRecurly withEndTime(String endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.
     */
    public SourceRecurly withEndTime(Optional<String> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceRecurly other = (SourceRecurly) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.beginTime, other.beginTime) &&
            Objects.deepEquals(this.endTime, other.endTime) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            beginTime,
            endTime,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceRecurly.class,
                "apiKey", apiKey,
                "beginTime", beginTime,
                "endTime", endTime,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> beginTime = Optional.empty();
 
        private Optional<String> endTime = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Recurly API Key. See the  &lt;a href="https://docs.airbyte.com/integrations/sources/recurly"&gt;docs&lt;/a&gt; for more information on how to generate this key.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * ISO8601 timestamp from which the replication from Recurly API will start from.
         */
        public Builder beginTime(String beginTime) {
            Utils.checkNotNull(beginTime, "beginTime");
            this.beginTime = Optional.ofNullable(beginTime);
            return this;
        }

        /**
         * ISO8601 timestamp from which the replication from Recurly API will start from.
         */
        public Builder beginTime(Optional<String> beginTime) {
            Utils.checkNotNull(beginTime, "beginTime");
            this.beginTime = beginTime;
            return this;
        }

        /**
         * ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.
         */
        public Builder endTime(String endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.
         */
        public Builder endTime(Optional<String> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }
        
        public SourceRecurly build() {
            return new SourceRecurly(
                apiKey,
                beginTime,
                endTime);
        }

        private static final LazySingletonValue<Recurly> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"recurly\"",
                        new TypeReference<Recurly>() {});
    }
}

