/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceFinnworlds {

    /**
     * For example 10y, 5y, 2y...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bond_type")
    private Optional<? extends List<Object>> bondType;

    /**
     * Options Available: beef, cheese, oil, ...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commodities")
    private Optional<? extends List<Object>> commodities;

    /**
     * brazil, united states, italia, japan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countries")
    private Optional<? extends List<Object>> countries;

    @JsonProperty("key")
    private String key;

    /**
     * Choose isin, ticker, reg_lei or cik
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list")
    private Optional<String> list;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_countries_for_bonds")
    private Optional<String> listCountriesForBonds;

    @JsonProperty("sourceType")
    private Finnworlds sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * AAPL, T, MU, GOOG
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tickers")
    private Optional<? extends List<Object>> tickers;

    @JsonCreator
    public SourceFinnworlds(
            @JsonProperty("bond_type") Optional<? extends List<Object>> bondType,
            @JsonProperty("commodities") Optional<? extends List<Object>> commodities,
            @JsonProperty("countries") Optional<? extends List<Object>> countries,
            @JsonProperty("key") String key,
            @JsonProperty("list") Optional<String> list,
            @JsonProperty("list_countries_for_bonds") Optional<String> listCountriesForBonds,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("tickers") Optional<? extends List<Object>> tickers) {
        Utils.checkNotNull(bondType, "bondType");
        Utils.checkNotNull(commodities, "commodities");
        Utils.checkNotNull(countries, "countries");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(list, "list");
        Utils.checkNotNull(listCountriesForBonds, "listCountriesForBonds");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(tickers, "tickers");
        this.bondType = bondType;
        this.commodities = commodities;
        this.countries = countries;
        this.key = key;
        this.list = list;
        this.listCountriesForBonds = listCountriesForBonds;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.tickers = tickers;
    }
    
    public SourceFinnworlds(
            String key,
            OffsetDateTime startDate) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), key, Optional.empty(), Optional.empty(), startDate, Optional.empty());
    }

    /**
     * For example 10y, 5y, 2y...
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> bondType() {
        return (Optional<List<Object>>) bondType;
    }

    /**
     * Options Available: beef, cheese, oil, ...
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> commodities() {
        return (Optional<List<Object>>) commodities;
    }

    /**
     * brazil, united states, italia, japan
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> countries() {
        return (Optional<List<Object>>) countries;
    }

    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * Choose isin, ticker, reg_lei or cik
     */
    @JsonIgnore
    public Optional<String> list() {
        return list;
    }

    @JsonIgnore
    public Optional<String> listCountriesForBonds() {
        return listCountriesForBonds;
    }

    @JsonIgnore
    public Finnworlds sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * AAPL, T, MU, GOOG
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> tickers() {
        return (Optional<List<Object>>) tickers;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * For example 10y, 5y, 2y...
     */
    public SourceFinnworlds withBondType(List<Object> bondType) {
        Utils.checkNotNull(bondType, "bondType");
        this.bondType = Optional.ofNullable(bondType);
        return this;
    }

    /**
     * For example 10y, 5y, 2y...
     */
    public SourceFinnworlds withBondType(Optional<? extends List<Object>> bondType) {
        Utils.checkNotNull(bondType, "bondType");
        this.bondType = bondType;
        return this;
    }

    /**
     * Options Available: beef, cheese, oil, ...
     */
    public SourceFinnworlds withCommodities(List<Object> commodities) {
        Utils.checkNotNull(commodities, "commodities");
        this.commodities = Optional.ofNullable(commodities);
        return this;
    }

    /**
     * Options Available: beef, cheese, oil, ...
     */
    public SourceFinnworlds withCommodities(Optional<? extends List<Object>> commodities) {
        Utils.checkNotNull(commodities, "commodities");
        this.commodities = commodities;
        return this;
    }

    /**
     * brazil, united states, italia, japan
     */
    public SourceFinnworlds withCountries(List<Object> countries) {
        Utils.checkNotNull(countries, "countries");
        this.countries = Optional.ofNullable(countries);
        return this;
    }

    /**
     * brazil, united states, italia, japan
     */
    public SourceFinnworlds withCountries(Optional<? extends List<Object>> countries) {
        Utils.checkNotNull(countries, "countries");
        this.countries = countries;
        return this;
    }

    public SourceFinnworlds withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * Choose isin, ticker, reg_lei or cik
     */
    public SourceFinnworlds withList(String list) {
        Utils.checkNotNull(list, "list");
        this.list = Optional.ofNullable(list);
        return this;
    }

    /**
     * Choose isin, ticker, reg_lei or cik
     */
    public SourceFinnworlds withList(Optional<String> list) {
        Utils.checkNotNull(list, "list");
        this.list = list;
        return this;
    }

    public SourceFinnworlds withListCountriesForBonds(String listCountriesForBonds) {
        Utils.checkNotNull(listCountriesForBonds, "listCountriesForBonds");
        this.listCountriesForBonds = Optional.ofNullable(listCountriesForBonds);
        return this;
    }

    public SourceFinnworlds withListCountriesForBonds(Optional<String> listCountriesForBonds) {
        Utils.checkNotNull(listCountriesForBonds, "listCountriesForBonds");
        this.listCountriesForBonds = listCountriesForBonds;
        return this;
    }

    public SourceFinnworlds withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * AAPL, T, MU, GOOG
     */
    public SourceFinnworlds withTickers(List<Object> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = Optional.ofNullable(tickers);
        return this;
    }

    /**
     * AAPL, T, MU, GOOG
     */
    public SourceFinnworlds withTickers(Optional<? extends List<Object>> tickers) {
        Utils.checkNotNull(tickers, "tickers");
        this.tickers = tickers;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFinnworlds other = (SourceFinnworlds) o;
        return 
            Objects.deepEquals(this.bondType, other.bondType) &&
            Objects.deepEquals(this.commodities, other.commodities) &&
            Objects.deepEquals(this.countries, other.countries) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.list, other.list) &&
            Objects.deepEquals(this.listCountriesForBonds, other.listCountriesForBonds) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.tickers, other.tickers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bondType,
            commodities,
            countries,
            key,
            list,
            listCountriesForBonds,
            sourceType,
            startDate,
            tickers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFinnworlds.class,
                "bondType", bondType,
                "commodities", commodities,
                "countries", countries,
                "key", key,
                "list", list,
                "listCountriesForBonds", listCountriesForBonds,
                "sourceType", sourceType,
                "startDate", startDate,
                "tickers", tickers);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Object>> bondType = Optional.empty();
 
        private Optional<? extends List<Object>> commodities = Optional.empty();
 
        private Optional<? extends List<Object>> countries = Optional.empty();
 
        private String key;
 
        private Optional<String> list;
 
        private Optional<String> listCountriesForBonds;
 
        private OffsetDateTime startDate;
 
        private Optional<? extends List<Object>> tickers = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * For example 10y, 5y, 2y...
         */
        public Builder bondType(List<Object> bondType) {
            Utils.checkNotNull(bondType, "bondType");
            this.bondType = Optional.ofNullable(bondType);
            return this;
        }

        /**
         * For example 10y, 5y, 2y...
         */
        public Builder bondType(Optional<? extends List<Object>> bondType) {
            Utils.checkNotNull(bondType, "bondType");
            this.bondType = bondType;
            return this;
        }

        /**
         * Options Available: beef, cheese, oil, ...
         */
        public Builder commodities(List<Object> commodities) {
            Utils.checkNotNull(commodities, "commodities");
            this.commodities = Optional.ofNullable(commodities);
            return this;
        }

        /**
         * Options Available: beef, cheese, oil, ...
         */
        public Builder commodities(Optional<? extends List<Object>> commodities) {
            Utils.checkNotNull(commodities, "commodities");
            this.commodities = commodities;
            return this;
        }

        /**
         * brazil, united states, italia, japan
         */
        public Builder countries(List<Object> countries) {
            Utils.checkNotNull(countries, "countries");
            this.countries = Optional.ofNullable(countries);
            return this;
        }

        /**
         * brazil, united states, italia, japan
         */
        public Builder countries(Optional<? extends List<Object>> countries) {
            Utils.checkNotNull(countries, "countries");
            this.countries = countries;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * Choose isin, ticker, reg_lei or cik
         */
        public Builder list(String list) {
            Utils.checkNotNull(list, "list");
            this.list = Optional.ofNullable(list);
            return this;
        }

        /**
         * Choose isin, ticker, reg_lei or cik
         */
        public Builder list(Optional<String> list) {
            Utils.checkNotNull(list, "list");
            this.list = list;
            return this;
        }

        public Builder listCountriesForBonds(String listCountriesForBonds) {
            Utils.checkNotNull(listCountriesForBonds, "listCountriesForBonds");
            this.listCountriesForBonds = Optional.ofNullable(listCountriesForBonds);
            return this;
        }

        public Builder listCountriesForBonds(Optional<String> listCountriesForBonds) {
            Utils.checkNotNull(listCountriesForBonds, "listCountriesForBonds");
            this.listCountriesForBonds = listCountriesForBonds;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * AAPL, T, MU, GOOG
         */
        public Builder tickers(List<Object> tickers) {
            Utils.checkNotNull(tickers, "tickers");
            this.tickers = Optional.ofNullable(tickers);
            return this;
        }

        /**
         * AAPL, T, MU, GOOG
         */
        public Builder tickers(Optional<? extends List<Object>> tickers) {
            Utils.checkNotNull(tickers, "tickers");
            this.tickers = tickers;
            return this;
        }
        
        public SourceFinnworlds build() {
            if (list == null) {
                list = _SINGLETON_VALUE_List.value();
            }
            if (listCountriesForBonds == null) {
                listCountriesForBonds = _SINGLETON_VALUE_ListCountriesForBonds.value();
            }
            return new SourceFinnworlds(
                bondType,
                commodities,
                countries,
                key,
                list,
                listCountriesForBonds,
                startDate,
                tickers);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_List =
                new LazySingletonValue<>(
                        "list",
                        "\"ticker\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_ListCountriesForBonds =
                new LazySingletonValue<>(
                        "list_countries_for_bonds",
                        "\"country\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Finnworlds> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"finnworlds\"",
                        new TypeReference<Finnworlds>() {});
    }
}
