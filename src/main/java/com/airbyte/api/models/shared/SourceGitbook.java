/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceGitbook {

    /**
     * Personal access token for authenticating with the GitBook API. You can view and manage your access tokens in the Developer settings of your GitBook user account.
     */
    @JsonProperty("access_token")
    private String accessToken;

    @JsonProperty("sourceType")
    private Gitbook sourceType;

    @JsonProperty("space_id")
    private String spaceId;

    @JsonCreator
    public SourceGitbook(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("space_id") String spaceId) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(spaceId, "spaceId");
        this.accessToken = accessToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.spaceId = spaceId;
    }

    /**
     * Personal access token for authenticating with the GitBook API. You can view and manage your access tokens in the Developer settings of your GitBook user account.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    @JsonIgnore
    public Gitbook sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public String spaceId() {
        return spaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Personal access token for authenticating with the GitBook API. You can view and manage your access tokens in the Developer settings of your GitBook user account.
     */
    public SourceGitbook withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    public SourceGitbook withSpaceId(String spaceId) {
        Utils.checkNotNull(spaceId, "spaceId");
        this.spaceId = spaceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGitbook other = (SourceGitbook) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.spaceId, other.spaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            sourceType,
            spaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGitbook.class,
                "accessToken", accessToken,
                "sourceType", sourceType,
                "spaceId", spaceId);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private String spaceId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Personal access token for authenticating with the GitBook API. You can view and manage your access tokens in the Developer settings of your GitBook user account.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        public Builder spaceId(String spaceId) {
            Utils.checkNotNull(spaceId, "spaceId");
            this.spaceId = spaceId;
            return this;
        }
        
        public SourceGitbook build() {
            return new SourceGitbook(
                accessToken,
                spaceId);
        }

        private static final LazySingletonValue<Gitbook> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"gitbook\"",
                        new TypeReference<Gitbook>() {});
    }
}
