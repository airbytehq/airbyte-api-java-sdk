/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourcePartnerstack {

    /**
     * The Live Private Key for a Partnerstack account.
     */
    @JsonProperty("private_key")
    private String privateKey;

    /**
     * The Live Public Key for a Partnerstack account.
     */
    @JsonProperty("public_key")
    private String publicKey;

    @JsonProperty("sourceType")
    private Partnerstack sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    @JsonCreator
    public SourcePartnerstack(
            @JsonProperty("private_key") String privateKey,
            @JsonProperty("public_key") String publicKey,
            @JsonProperty("start_date") Optional<String> startDate) {
        Utils.checkNotNull(privateKey, "privateKey");
        Utils.checkNotNull(publicKey, "publicKey");
        Utils.checkNotNull(startDate, "startDate");
        this.privateKey = privateKey;
        this.publicKey = publicKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourcePartnerstack(
            String privateKey,
            String publicKey) {
        this(privateKey, publicKey, Optional.empty());
    }

    /**
     * The Live Private Key for a Partnerstack account.
     */
    @JsonIgnore
    public String privateKey() {
        return privateKey;
    }

    /**
     * The Live Public Key for a Partnerstack account.
     */
    @JsonIgnore
    public String publicKey() {
        return publicKey;
    }

    @JsonIgnore
    public Partnerstack sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The Live Private Key for a Partnerstack account.
     */
    public SourcePartnerstack withPrivateKey(String privateKey) {
        Utils.checkNotNull(privateKey, "privateKey");
        this.privateKey = privateKey;
        return this;
    }

    /**
     * The Live Public Key for a Partnerstack account.
     */
    public SourcePartnerstack withPublicKey(String publicKey) {
        Utils.checkNotNull(publicKey, "publicKey");
        this.publicKey = publicKey;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourcePartnerstack withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourcePartnerstack withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePartnerstack other = (SourcePartnerstack) o;
        return 
            Objects.deepEquals(this.privateKey, other.privateKey) &&
            Objects.deepEquals(this.publicKey, other.publicKey) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            privateKey,
            publicKey,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePartnerstack.class,
                "privateKey", privateKey,
                "publicKey", publicKey,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String privateKey;
 
        private String publicKey;
 
        private Optional<String> startDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Live Private Key for a Partnerstack account.
         */
        public Builder privateKey(String privateKey) {
            Utils.checkNotNull(privateKey, "privateKey");
            this.privateKey = privateKey;
            return this;
        }

        /**
         * The Live Public Key for a Partnerstack account.
         */
        public Builder publicKey(String publicKey) {
            Utils.checkNotNull(publicKey, "publicKey");
            this.publicKey = publicKey;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourcePartnerstack build() {
            return new SourcePartnerstack(
                privateKey,
                publicKey,
                startDate);
        }

        private static final LazySingletonValue<Partnerstack> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"partnerstack\"",
                        new TypeReference<Partnerstack>() {});
    }
}
