/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SourceCoinmarketcap {

    /**
     * Your API Key. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * /latest: Latest market ticker quotes and averages for cryptocurrencies and exchanges. /historical: Intervals of historic market data like OHLCV data or data for use in charting libraries. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Endpoint-Overview"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("data_type")
    private DataType dataType;

    @JsonProperty("sourceType")
    private Coinmarketcap sourceType;

    /**
     * Cryptocurrency symbols. (only used for quotes stream)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symbols")
    private Optional<? extends List<String>> symbols;

    @JsonCreator
    public SourceCoinmarketcap(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("data_type") DataType dataType,
            @JsonProperty("symbols") Optional<? extends List<String>> symbols) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(symbols, "symbols");
        this.apiKey = apiKey;
        this.dataType = dataType;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.symbols = symbols;
    }
    
    public SourceCoinmarketcap(
            String apiKey,
            DataType dataType) {
        this(apiKey, dataType, Optional.empty());
    }

    /**
     * Your API Key. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * /latest: Latest market ticker quotes and averages for cryptocurrencies and exchanges. /historical: Intervals of historic market data like OHLCV data or data for use in charting libraries. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Endpoint-Overview"&gt;here&lt;/a&gt;.
     */
    @JsonIgnore
    public DataType dataType() {
        return dataType;
    }

    @JsonIgnore
    public Coinmarketcap sourceType() {
        return sourceType;
    }

    /**
     * Cryptocurrency symbols. (only used for quotes stream)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> symbols() {
        return (Optional<List<String>>) symbols;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Your API Key. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    public SourceCoinmarketcap withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * /latest: Latest market ticker quotes and averages for cryptocurrencies and exchanges. /historical: Intervals of historic market data like OHLCV data or data for use in charting libraries. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Endpoint-Overview"&gt;here&lt;/a&gt;.
     */
    public SourceCoinmarketcap withDataType(DataType dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * Cryptocurrency symbols. (only used for quotes stream)
     */
    public SourceCoinmarketcap withSymbols(List<String> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = Optional.ofNullable(symbols);
        return this;
    }

    /**
     * Cryptocurrency symbols. (only used for quotes stream)
     */
    public SourceCoinmarketcap withSymbols(Optional<? extends List<String>> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceCoinmarketcap other = (SourceCoinmarketcap) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.dataType, other.dataType) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.symbols, other.symbols);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            dataType,
            sourceType,
            symbols);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceCoinmarketcap.class,
                "apiKey", apiKey,
                "dataType", dataType,
                "sourceType", sourceType,
                "symbols", symbols);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private DataType dataType;
 
        private Optional<? extends List<String>> symbols = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your API Key. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * /latest: Latest market ticker quotes and averages for cryptocurrencies and exchanges. /historical: Intervals of historic market data like OHLCV data or data for use in charting libraries. See &lt;a href="https://coinmarketcap.com/api/documentation/v1/#section/Endpoint-Overview"&gt;here&lt;/a&gt;.
         */
        public Builder dataType(DataType dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * Cryptocurrency symbols. (only used for quotes stream)
         */
        public Builder symbols(List<String> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = Optional.ofNullable(symbols);
            return this;
        }

        /**
         * Cryptocurrency symbols. (only used for quotes stream)
         */
        public Builder symbols(Optional<? extends List<String>> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }
        
        public SourceCoinmarketcap build() {
            return new SourceCoinmarketcap(
                apiKey,
                dataType,
                symbols);
        }

        private static final LazySingletonValue<Coinmarketcap> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"coinmarketcap\"",
                        new TypeReference<Coinmarketcap>() {});
    }
}

