/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * InitiateOauthRequest
 * 
 * <p>POST body for initiating OAuth via the public API
 */
public class InitiateOauthRequest {

    /**
     * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oAuthInputConfiguration")
    private Optional<? extends Object> oAuthInputConfiguration;

    /**
     * The URL to redirect the user to with the OAuth secret stored in the secret_id query string parameter after authentication is complete.
     */
    @JsonProperty("redirectUrl")
    private String redirectUrl;

    @JsonProperty("sourceType")
    private OAuthActorNames sourceType;

    /**
     * The workspace to create the secret and eventually the full source.
     */
    @JsonProperty("workspaceId")
    private String workspaceId;

    @JsonCreator
    public InitiateOauthRequest(
            @JsonProperty("oAuthInputConfiguration") Optional<? extends Object> oAuthInputConfiguration,
            @JsonProperty("redirectUrl") String redirectUrl,
            @JsonProperty("sourceType") OAuthActorNames sourceType,
            @JsonProperty("workspaceId") String workspaceId) {
        Utils.checkNotNull(oAuthInputConfiguration, "oAuthInputConfiguration");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(sourceType, "sourceType");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.oAuthInputConfiguration = oAuthInputConfiguration;
        this.redirectUrl = redirectUrl;
        this.sourceType = sourceType;
        this.workspaceId = workspaceId;
    }
    
    public InitiateOauthRequest(
            String redirectUrl,
            OAuthActorNames sourceType,
            String workspaceId) {
        this(Optional.empty(), redirectUrl, sourceType, workspaceId);
    }

    /**
     * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> oAuthInputConfiguration() {
        return (Optional<Object>) oAuthInputConfiguration;
    }

    /**
     * The URL to redirect the user to with the OAuth secret stored in the secret_id query string parameter after authentication is complete.
     */
    @JsonIgnore
    public String redirectUrl() {
        return redirectUrl;
    }

    @JsonIgnore
    public OAuthActorNames sourceType() {
        return sourceType;
    }

    /**
     * The workspace to create the secret and eventually the full source.
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
     */
    public InitiateOauthRequest withOAuthInputConfiguration(Object oAuthInputConfiguration) {
        Utils.checkNotNull(oAuthInputConfiguration, "oAuthInputConfiguration");
        this.oAuthInputConfiguration = Optional.ofNullable(oAuthInputConfiguration);
        return this;
    }

    /**
     * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
     */
    public InitiateOauthRequest withOAuthInputConfiguration(Optional<? extends Object> oAuthInputConfiguration) {
        Utils.checkNotNull(oAuthInputConfiguration, "oAuthInputConfiguration");
        this.oAuthInputConfiguration = oAuthInputConfiguration;
        return this;
    }

    /**
     * The URL to redirect the user to with the OAuth secret stored in the secret_id query string parameter after authentication is complete.
     */
    public InitiateOauthRequest withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    public InitiateOauthRequest withSourceType(OAuthActorNames sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    /**
     * The workspace to create the secret and eventually the full source.
     */
    public InitiateOauthRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InitiateOauthRequest other = (InitiateOauthRequest) o;
        return 
            Objects.deepEquals(this.oAuthInputConfiguration, other.oAuthInputConfiguration) &&
            Objects.deepEquals(this.redirectUrl, other.redirectUrl) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            oAuthInputConfiguration,
            redirectUrl,
            sourceType,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InitiateOauthRequest.class,
                "oAuthInputConfiguration", oAuthInputConfiguration,
                "redirectUrl", redirectUrl,
                "sourceType", sourceType,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> oAuthInputConfiguration = Optional.empty();
 
        private String redirectUrl;
 
        private OAuthActorNames sourceType;
 
        private String workspaceId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
         */
        public Builder oAuthInputConfiguration(Object oAuthInputConfiguration) {
            Utils.checkNotNull(oAuthInputConfiguration, "oAuthInputConfiguration");
            this.oAuthInputConfiguration = Optional.ofNullable(oAuthInputConfiguration);
            return this;
        }

        /**
         * The values required to configure OAuth flows. The schema for this must match the `OAuthConfigSpecification.oauthUserInputFromConnectorConfigSpecification` schema.
         */
        public Builder oAuthInputConfiguration(Optional<? extends Object> oAuthInputConfiguration) {
            Utils.checkNotNull(oAuthInputConfiguration, "oAuthInputConfiguration");
            this.oAuthInputConfiguration = oAuthInputConfiguration;
            return this;
        }

        /**
         * The URL to redirect the user to with the OAuth secret stored in the secret_id query string parameter after authentication is complete.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder sourceType(OAuthActorNames sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }

        /**
         * The workspace to create the secret and eventually the full source.
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public InitiateOauthRequest build() {
            return new InitiateOauthRequest(
                oAuthInputConfiguration,
                redirectUrl,
                sourceType,
                workspaceId);
        }
    }
}
