/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Logging {

    /**
     * Configurate how the messages are logged.
     */
    @JsonProperty("logging_config")
    private LoggingConfiguration loggingConfig;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test_destination_type")
    private Optional<? extends TestDestinationType> testDestinationType;

    @JsonCreator
    public Logging(
            @JsonProperty("logging_config") LoggingConfiguration loggingConfig) {
        Utils.checkNotNull(loggingConfig, "loggingConfig");
        this.loggingConfig = loggingConfig;
        this.testDestinationType = Builder._SINGLETON_VALUE_TestDestinationType.value();
    }

    /**
     * Configurate how the messages are logged.
     */
    @JsonIgnore
    public LoggingConfiguration loggingConfig() {
        return loggingConfig;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TestDestinationType> testDestinationType() {
        return (Optional<TestDestinationType>) testDestinationType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Configurate how the messages are logged.
     */
    public Logging withLoggingConfig(LoggingConfiguration loggingConfig) {
        Utils.checkNotNull(loggingConfig, "loggingConfig");
        this.loggingConfig = loggingConfig;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Logging other = (Logging) o;
        return 
            java.util.Objects.deepEquals(this.loggingConfig, other.loggingConfig) &&
            java.util.Objects.deepEquals(this.testDestinationType, other.testDestinationType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            loggingConfig,
            testDestinationType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Logging.class,
                "loggingConfig", loggingConfig,
                "testDestinationType", testDestinationType);
    }
    
    public final static class Builder {
 
        private LoggingConfiguration loggingConfig;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Configurate how the messages are logged.
         */
        public Builder loggingConfig(LoggingConfiguration loggingConfig) {
            Utils.checkNotNull(loggingConfig, "loggingConfig");
            this.loggingConfig = loggingConfig;
            return this;
        }
        
        public Logging build() {
            return new Logging(
                loggingConfig);
        }

        private static final LazySingletonValue<Optional<? extends TestDestinationType>> _SINGLETON_VALUE_TestDestinationType =
                new LazySingletonValue<>(
                        "test_destination_type",
                        "\"LOGGING\"",
                        new TypeReference<Optional<? extends TestDestinationType>>() {});
    }
}

