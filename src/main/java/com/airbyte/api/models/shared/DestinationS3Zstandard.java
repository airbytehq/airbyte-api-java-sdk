/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class DestinationS3Zstandard {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codec")
    private Optional<? extends DestinationS3SchemasFormatOutputFormat3Codec> codec;

    @JsonProperty("compression_level")
    private long compressionLevel;

    @JsonProperty("include_checksum")
    private boolean includeChecksum;

    @JsonCreator
    public DestinationS3Zstandard(
            @JsonProperty("codec") Optional<? extends DestinationS3SchemasFormatOutputFormat3Codec> codec,
            @JsonProperty("compression_level") long compressionLevel,
            @JsonProperty("include_checksum") boolean includeChecksum) {
        Utils.checkNotNull(codec, "codec");
        Utils.checkNotNull(compressionLevel, "compressionLevel");
        Utils.checkNotNull(includeChecksum, "includeChecksum");
        this.additionalProperties = new HashMap<>();
        this.codec = codec;
        this.compressionLevel = compressionLevel;
        this.includeChecksum = includeChecksum;
    }
    
    public DestinationS3Zstandard(
            long compressionLevel,
            boolean includeChecksum) {
        this(Optional.empty(), compressionLevel, includeChecksum);
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationS3SchemasFormatOutputFormat3Codec> codec() {
        return (Optional<DestinationS3SchemasFormatOutputFormat3Codec>) codec;
    }

    @JsonIgnore
    public long compressionLevel() {
        return compressionLevel;
    }

    @JsonIgnore
    public boolean includeChecksum() {
        return includeChecksum;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public DestinationS3Zstandard withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public DestinationS3Zstandard withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public DestinationS3Zstandard withCodec(DestinationS3SchemasFormatOutputFormat3Codec codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = Optional.ofNullable(codec);
        return this;
    }

    public DestinationS3Zstandard withCodec(Optional<? extends DestinationS3SchemasFormatOutputFormat3Codec> codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = codec;
        return this;
    }

    public DestinationS3Zstandard withCompressionLevel(long compressionLevel) {
        Utils.checkNotNull(compressionLevel, "compressionLevel");
        this.compressionLevel = compressionLevel;
        return this;
    }

    public DestinationS3Zstandard withIncludeChecksum(boolean includeChecksum) {
        Utils.checkNotNull(includeChecksum, "includeChecksum");
        this.includeChecksum = includeChecksum;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationS3Zstandard other = (DestinationS3Zstandard) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.codec, other.codec) &&
            Objects.deepEquals(this.compressionLevel, other.compressionLevel) &&
            Objects.deepEquals(this.includeChecksum, other.includeChecksum);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            codec,
            compressionLevel,
            includeChecksum);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationS3Zstandard.class,
                "additionalProperties", additionalProperties,
                "codec", codec,
                "compressionLevel", compressionLevel,
                "includeChecksum", includeChecksum);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends DestinationS3SchemasFormatOutputFormat3Codec> codec;
 
        private Long compressionLevel;
 
        private Boolean includeChecksum;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder codec(DestinationS3SchemasFormatOutputFormat3Codec codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = Optional.ofNullable(codec);
            return this;
        }

        public Builder codec(Optional<? extends DestinationS3SchemasFormatOutputFormat3Codec> codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = codec;
            return this;
        }

        public Builder compressionLevel(long compressionLevel) {
            Utils.checkNotNull(compressionLevel, "compressionLevel");
            this.compressionLevel = compressionLevel;
            return this;
        }

        public Builder includeChecksum(boolean includeChecksum) {
            Utils.checkNotNull(includeChecksum, "includeChecksum");
            this.includeChecksum = includeChecksum;
            return this;
        }
        
        public DestinationS3Zstandard build() {
            if (codec == null) {
                codec = _SINGLETON_VALUE_Codec.value();
            }
            return new DestinationS3Zstandard(
                codec,
                compressionLevel,
                includeChecksum)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends DestinationS3SchemasFormatOutputFormat3Codec>> _SINGLETON_VALUE_Codec =
                new LazySingletonValue<>(
                        "codec",
                        "\"zstandard\"",
                        new TypeReference<Optional<? extends DestinationS3SchemasFormatOutputFormat3Codec>>() {});
    }
}
