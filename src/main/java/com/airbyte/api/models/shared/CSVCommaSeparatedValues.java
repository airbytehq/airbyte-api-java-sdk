/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class CSVCommaSeparatedValues {

    /**
     * Add file extensions to the output file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_extension")
    private Optional<? extends Boolean> fileExtension;

    /**
     * Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flattening")
    private Optional<? extends NormalizationFlattening> flattening;

    @JsonProperty("format_type")
    private FormatType formatType;

    @JsonCreator
    public CSVCommaSeparatedValues(
            @JsonProperty("file_extension") Optional<? extends Boolean> fileExtension,
            @JsonProperty("flattening") Optional<? extends NormalizationFlattening> flattening) {
        Utils.checkNotNull(fileExtension, "fileExtension");
        Utils.checkNotNull(flattening, "flattening");
        this.fileExtension = fileExtension;
        this.flattening = flattening;
        this.formatType = Builder._SINGLETON_VALUE_FormatType.value();
    }
    
    public CSVCommaSeparatedValues() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Add file extensions to the output file.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> fileExtension() {
        return (Optional<Boolean>) fileExtension;
    }

    /**
     * Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NormalizationFlattening> flattening() {
        return (Optional<NormalizationFlattening>) flattening;
    }

    @JsonIgnore
    public FormatType formatType() {
        return formatType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Add file extensions to the output file.
     */
    public CSVCommaSeparatedValues withFileExtension(boolean fileExtension) {
        Utils.checkNotNull(fileExtension, "fileExtension");
        this.fileExtension = Optional.ofNullable(fileExtension);
        return this;
    }

    /**
     * Add file extensions to the output file.
     */
    public CSVCommaSeparatedValues withFileExtension(Optional<? extends Boolean> fileExtension) {
        Utils.checkNotNull(fileExtension, "fileExtension");
        this.fileExtension = fileExtension;
        return this;
    }

    /**
     * Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
     */
    public CSVCommaSeparatedValues withFlattening(NormalizationFlattening flattening) {
        Utils.checkNotNull(flattening, "flattening");
        this.flattening = Optional.ofNullable(flattening);
        return this;
    }

    /**
     * Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
     */
    public CSVCommaSeparatedValues withFlattening(Optional<? extends NormalizationFlattening> flattening) {
        Utils.checkNotNull(flattening, "flattening");
        this.flattening = flattening;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CSVCommaSeparatedValues other = (CSVCommaSeparatedValues) o;
        return 
            java.util.Objects.deepEquals(this.fileExtension, other.fileExtension) &&
            java.util.Objects.deepEquals(this.flattening, other.flattening) &&
            java.util.Objects.deepEquals(this.formatType, other.formatType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            fileExtension,
            flattening,
            formatType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CSVCommaSeparatedValues.class,
                "fileExtension", fileExtension,
                "flattening", flattening,
                "formatType", formatType);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> fileExtension;
 
        private Optional<? extends NormalizationFlattening> flattening;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Add file extensions to the output file.
         */
        public Builder fileExtension(boolean fileExtension) {
            Utils.checkNotNull(fileExtension, "fileExtension");
            this.fileExtension = Optional.ofNullable(fileExtension);
            return this;
        }

        /**
         * Add file extensions to the output file.
         */
        public Builder fileExtension(Optional<? extends Boolean> fileExtension) {
            Utils.checkNotNull(fileExtension, "fileExtension");
            this.fileExtension = fileExtension;
            return this;
        }

        /**
         * Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
         */
        public Builder flattening(NormalizationFlattening flattening) {
            Utils.checkNotNull(flattening, "flattening");
            this.flattening = Optional.ofNullable(flattening);
            return this;
        }

        /**
         * Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
         */
        public Builder flattening(Optional<? extends NormalizationFlattening> flattening) {
            Utils.checkNotNull(flattening, "flattening");
            this.flattening = flattening;
            return this;
        }
        
        public CSVCommaSeparatedValues build() {
            if (fileExtension == null) {
                fileExtension = _SINGLETON_VALUE_FileExtension.value();
            }
            if (flattening == null) {
                flattening = _SINGLETON_VALUE_Flattening.value();
            }
            return new CSVCommaSeparatedValues(
                fileExtension,
                flattening);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_FileExtension =
                new LazySingletonValue<>(
                        "file_extension",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends NormalizationFlattening>> _SINGLETON_VALUE_Flattening =
                new LazySingletonValue<>(
                        "flattening",
                        "\"No flattening\"",
                        new TypeReference<Optional<? extends NormalizationFlattening>>() {});

        private static final LazySingletonValue<FormatType> _SINGLETON_VALUE_FormatType =
                new LazySingletonValue<>(
                        "format_type",
                        "\"CSV\"",
                        new TypeReference<FormatType>() {});
    }
}

