/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DestinationDatabend {

    /**
     * Name of the database.
     */
    @JsonProperty("database")
    private String database;

    @JsonProperty("destinationType")
    private Databend destinationType;

    /**
     * Hostname of the database.
     */
    @JsonProperty("host")
    private String host;

    /**
     * Password associated with the username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<? extends String> password;

    /**
     * Port of the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<? extends Long> port;

    /**
     * The default  table was written to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("table")
    private Optional<? extends String> table;

    /**
     * Username to use to access the database.
     */
    @JsonProperty("username")
    private String username;

    public DestinationDatabend(
            @JsonProperty("database") String database,
            @JsonProperty("host") String host,
            @JsonProperty("password") Optional<? extends String> password,
            @JsonProperty("port") Optional<? extends Long> port,
            @JsonProperty("table") Optional<? extends String> table,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(table, "table");
        Utils.checkNotNull(username, "username");
        this.database = database;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.host = host;
        this.password = password;
        this.port = port;
        this.table = table;
        this.username = username;
    }

    /**
     * Name of the database.
     */
    public String database() {
        return database;
    }

    public Databend destinationType() {
        return destinationType;
    }

    /**
     * Hostname of the database.
     */
    public String host() {
        return host;
    }

    /**
     * Password associated with the username.
     */
    public Optional<? extends String> password() {
        return password;
    }

    /**
     * Port of the database.
     */
    public Optional<? extends Long> port() {
        return port;
    }

    /**
     * The default  table was written to.
     */
    public Optional<? extends String> table() {
        return table;
    }

    /**
     * Username to use to access the database.
     */
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the database.
     */
    public DestinationDatabend withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    /**
     * Hostname of the database.
     */
    public DestinationDatabend withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Password associated with the username.
     */
    public DestinationDatabend withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    /**
     * Password associated with the username.
     */
    public DestinationDatabend withPassword(Optional<? extends String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Port of the database.
     */
    public DestinationDatabend withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Port of the database.
     */
    public DestinationDatabend withPort(Optional<? extends Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * The default  table was written to.
     */
    public DestinationDatabend withTable(String table) {
        Utils.checkNotNull(table, "table");
        this.table = Optional.ofNullable(table);
        return this;
    }

    /**
     * The default  table was written to.
     */
    public DestinationDatabend withTable(Optional<? extends String> table) {
        Utils.checkNotNull(table, "table");
        this.table = table;
        return this;
    }

    /**
     * Username to use to access the database.
     */
    public DestinationDatabend withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationDatabend other = (DestinationDatabend) o;
        return 
            java.util.Objects.deepEquals(this.database, other.database) &&
            java.util.Objects.deepEquals(this.destinationType, other.destinationType) &&
            java.util.Objects.deepEquals(this.host, other.host) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.table, other.table) &&
            java.util.Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            database,
            destinationType,
            host,
            password,
            port,
            table,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationDatabend.class,
                "database", database,
                "destinationType", destinationType,
                "host", host,
                "password", password,
                "port", port,
                "table", table,
                "username", username);
    }
    
    public final static class Builder {
 
        private String database;
 
        private String host;
 
        private Optional<? extends String> password = Optional.empty();
 
        private Optional<? extends Long> port;
 
        private Optional<? extends String> table;
 
        private String username;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the database.
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        /**
         * Hostname of the database.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Password associated with the username.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        /**
         * Password associated with the username.
         */
        public Builder password(Optional<? extends String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Port of the database.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Port of the database.
         */
        public Builder port(Optional<? extends Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * The default  table was written to.
         */
        public Builder table(String table) {
            Utils.checkNotNull(table, "table");
            this.table = Optional.ofNullable(table);
            return this;
        }

        /**
         * The default  table was written to.
         */
        public Builder table(Optional<? extends String> table) {
            Utils.checkNotNull(table, "table");
            this.table = table;
            return this;
        }

        /**
         * Username to use to access the database.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public DestinationDatabend build() {
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            if (table == null) {
                table = _SINGLETON_VALUE_Table.value();
            }
            return new DestinationDatabend(
                database,
                host,
                password,
                port,
                table,
                username);
        }

        private static final LazySingletonValue<Databend> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"databend\"",
                        new TypeReference<Databend>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "443",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_Table =
                new LazySingletonValue<>(
                        "table",
                        "\"default\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

