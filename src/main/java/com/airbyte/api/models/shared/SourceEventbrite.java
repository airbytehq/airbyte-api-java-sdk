/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;

public class SourceEventbrite {

    /**
     * The private token to use for authenticating API requests.
     */
    @JsonProperty("private_token")
    private String privateToken;

    @JsonProperty("sourceType")
    private Eventbrite sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceEventbrite(
            @JsonProperty("private_token") String privateToken,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(privateToken, "privateToken");
        Utils.checkNotNull(startDate, "startDate");
        this.privateToken = privateToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * The private token to use for authenticating API requests.
     */
    @JsonIgnore
    public String privateToken() {
        return privateToken;
    }

    @JsonIgnore
    public Eventbrite sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The private token to use for authenticating API requests.
     */
    public SourceEventbrite withPrivateToken(String privateToken) {
        Utils.checkNotNull(privateToken, "privateToken");
        this.privateToken = privateToken;
        return this;
    }

    public SourceEventbrite withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceEventbrite other = (SourceEventbrite) o;
        return 
            Objects.deepEquals(this.privateToken, other.privateToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            privateToken,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceEventbrite.class,
                "privateToken", privateToken,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String privateToken;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The private token to use for authenticating API requests.
         */
        public Builder privateToken(String privateToken) {
            Utils.checkNotNull(privateToken, "privateToken");
            this.privateToken = privateToken;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceEventbrite build() {
            return new SourceEventbrite(
                privateToken,
                startDate);
        }

        private static final LazySingletonValue<Eventbrite> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"eventbrite\"",
                        new TypeReference<Eventbrite>() {});
    }
}
