/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * Indexing
 * 
 * <p>Astra DB gives developers the APIs, real-time data and ecosystem integrations to put accurate RAG and Gen AI apps with fewer hallucinations in production.
 */
public class Indexing {

    /**
     * The application token authorizes a user to connect to a specific Astra DB database. It is created when the user clicks the Generate Token button on the Overview tab of the Database page in the Astra UI.
     */
    @JsonProperty("astra_db_app_token")
    private String astraDbAppToken;

    /**
     * The endpoint specifies which Astra DB database queries are sent to. It can be copied from the Database Details section of the Overview tab of the Database page in the Astra UI.
     */
    @JsonProperty("astra_db_endpoint")
    private String astraDbEndpoint;

    /**
     * Keyspaces (or Namespaces) serve as containers for organizing data within a database. You can create a new keyspace uisng the Data Explorer tab in the Astra UI. The keyspace default_keyspace is created for you when you create a Vector Database in Astra DB.
     */
    @JsonProperty("astra_db_keyspace")
    private String astraDbKeyspace;

    /**
     * Collections hold data. They are analagous to tables in traditional Cassandra terminology. This tool will create the collection with the provided name automatically if it does not already exist. Alternatively, you can create one thorugh the Data Explorer tab in the Astra UI.
     */
    @JsonProperty("collection")
    private String collection;

    @JsonCreator
    public Indexing(
            @JsonProperty("astra_db_app_token") String astraDbAppToken,
            @JsonProperty("astra_db_endpoint") String astraDbEndpoint,
            @JsonProperty("astra_db_keyspace") String astraDbKeyspace,
            @JsonProperty("collection") String collection) {
        Utils.checkNotNull(astraDbAppToken, "astraDbAppToken");
        Utils.checkNotNull(astraDbEndpoint, "astraDbEndpoint");
        Utils.checkNotNull(astraDbKeyspace, "astraDbKeyspace");
        Utils.checkNotNull(collection, "collection");
        this.astraDbAppToken = astraDbAppToken;
        this.astraDbEndpoint = astraDbEndpoint;
        this.astraDbKeyspace = astraDbKeyspace;
        this.collection = collection;
    }

    /**
     * The application token authorizes a user to connect to a specific Astra DB database. It is created when the user clicks the Generate Token button on the Overview tab of the Database page in the Astra UI.
     */
    @JsonIgnore
    public String astraDbAppToken() {
        return astraDbAppToken;
    }

    /**
     * The endpoint specifies which Astra DB database queries are sent to. It can be copied from the Database Details section of the Overview tab of the Database page in the Astra UI.
     */
    @JsonIgnore
    public String astraDbEndpoint() {
        return astraDbEndpoint;
    }

    /**
     * Keyspaces (or Namespaces) serve as containers for organizing data within a database. You can create a new keyspace uisng the Data Explorer tab in the Astra UI. The keyspace default_keyspace is created for you when you create a Vector Database in Astra DB.
     */
    @JsonIgnore
    public String astraDbKeyspace() {
        return astraDbKeyspace;
    }

    /**
     * Collections hold data. They are analagous to tables in traditional Cassandra terminology. This tool will create the collection with the provided name automatically if it does not already exist. Alternatively, you can create one thorugh the Data Explorer tab in the Astra UI.
     */
    @JsonIgnore
    public String collection() {
        return collection;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The application token authorizes a user to connect to a specific Astra DB database. It is created when the user clicks the Generate Token button on the Overview tab of the Database page in the Astra UI.
     */
    public Indexing withAstraDbAppToken(String astraDbAppToken) {
        Utils.checkNotNull(astraDbAppToken, "astraDbAppToken");
        this.astraDbAppToken = astraDbAppToken;
        return this;
    }

    /**
     * The endpoint specifies which Astra DB database queries are sent to. It can be copied from the Database Details section of the Overview tab of the Database page in the Astra UI.
     */
    public Indexing withAstraDbEndpoint(String astraDbEndpoint) {
        Utils.checkNotNull(astraDbEndpoint, "astraDbEndpoint");
        this.astraDbEndpoint = astraDbEndpoint;
        return this;
    }

    /**
     * Keyspaces (or Namespaces) serve as containers for organizing data within a database. You can create a new keyspace uisng the Data Explorer tab in the Astra UI. The keyspace default_keyspace is created for you when you create a Vector Database in Astra DB.
     */
    public Indexing withAstraDbKeyspace(String astraDbKeyspace) {
        Utils.checkNotNull(astraDbKeyspace, "astraDbKeyspace");
        this.astraDbKeyspace = astraDbKeyspace;
        return this;
    }

    /**
     * Collections hold data. They are analagous to tables in traditional Cassandra terminology. This tool will create the collection with the provided name automatically if it does not already exist. Alternatively, you can create one thorugh the Data Explorer tab in the Astra UI.
     */
    public Indexing withCollection(String collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Indexing other = (Indexing) o;
        return 
            Objects.deepEquals(this.astraDbAppToken, other.astraDbAppToken) &&
            Objects.deepEquals(this.astraDbEndpoint, other.astraDbEndpoint) &&
            Objects.deepEquals(this.astraDbKeyspace, other.astraDbKeyspace) &&
            Objects.deepEquals(this.collection, other.collection);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            astraDbAppToken,
            astraDbEndpoint,
            astraDbKeyspace,
            collection);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Indexing.class,
                "astraDbAppToken", astraDbAppToken,
                "astraDbEndpoint", astraDbEndpoint,
                "astraDbKeyspace", astraDbKeyspace,
                "collection", collection);
    }
    
    public final static class Builder {
 
        private String astraDbAppToken;
 
        private String astraDbEndpoint;
 
        private String astraDbKeyspace;
 
        private String collection;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The application token authorizes a user to connect to a specific Astra DB database. It is created when the user clicks the Generate Token button on the Overview tab of the Database page in the Astra UI.
         */
        public Builder astraDbAppToken(String astraDbAppToken) {
            Utils.checkNotNull(astraDbAppToken, "astraDbAppToken");
            this.astraDbAppToken = astraDbAppToken;
            return this;
        }

        /**
         * The endpoint specifies which Astra DB database queries are sent to. It can be copied from the Database Details section of the Overview tab of the Database page in the Astra UI.
         */
        public Builder astraDbEndpoint(String astraDbEndpoint) {
            Utils.checkNotNull(astraDbEndpoint, "astraDbEndpoint");
            this.astraDbEndpoint = astraDbEndpoint;
            return this;
        }

        /**
         * Keyspaces (or Namespaces) serve as containers for organizing data within a database. You can create a new keyspace uisng the Data Explorer tab in the Astra UI. The keyspace default_keyspace is created for you when you create a Vector Database in Astra DB.
         */
        public Builder astraDbKeyspace(String astraDbKeyspace) {
            Utils.checkNotNull(astraDbKeyspace, "astraDbKeyspace");
            this.astraDbKeyspace = astraDbKeyspace;
            return this;
        }

        /**
         * Collections hold data. They are analagous to tables in traditional Cassandra terminology. This tool will create the collection with the provided name automatically if it does not already exist. Alternatively, you can create one thorugh the Data Explorer tab in the Astra UI.
         */
        public Builder collection(String collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }
        
        public Indexing build() {
            return new Indexing(
                astraDbAppToken,
                astraDbEndpoint,
                astraDbKeyspace,
                collection);
        }
    }
}
