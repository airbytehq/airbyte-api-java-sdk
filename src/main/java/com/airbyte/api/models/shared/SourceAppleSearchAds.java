/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceAppleSearchAds {

    /**
     * This factor factor determines the delay increase factor between retryable failures. Valid values are integers between 1 and 20.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backoff_factor")
    private Optional<Long> backoffFactor;

    /**
     * A user identifier for the token request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * A string that authenticates the user’s setup request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Data is retrieved until that date (included)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * Apple Search Ads uses a 30-day attribution window. However, you may consider smaller values in order to shorten sync durations, at the cost of missing late data attributions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookback_window")
    private Optional<Long> lookbackWindow;

    /**
     * The identifier of the organization that owns the campaign. Your Org Id is the same as your account in the Apple Search Ads UI.
     */
    @JsonProperty("org_id")
    private long orgId;

    @JsonProperty("sourceType")
    private AppleSearchAds sourceType;

    /**
     * Start getting data from that date.
     */
    @JsonProperty("start_date")
    private String startDate;

    /**
     * The timezone for the reporting data. Use 'ORTZ' for Organization Time Zone or 'UTC' for Coordinated Universal Time. Default is UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<? extends TimeZone> timezone;

    @JsonCreator
    public SourceAppleSearchAds(
            @JsonProperty("backoff_factor") Optional<Long> backoffFactor,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("lookback_window") Optional<Long> lookbackWindow,
            @JsonProperty("org_id") long orgId,
            @JsonProperty("start_date") String startDate,
            @JsonProperty("timezone") Optional<? extends TimeZone> timezone) {
        Utils.checkNotNull(backoffFactor, "backoffFactor");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        Utils.checkNotNull(orgId, "orgId");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(timezone, "timezone");
        this.backoffFactor = backoffFactor;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.endDate = endDate;
        this.lookbackWindow = lookbackWindow;
        this.orgId = orgId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.timezone = timezone;
    }
    
    public SourceAppleSearchAds(
            String clientId,
            String clientSecret,
            long orgId,
            String startDate) {
        this(Optional.empty(), clientId, clientSecret, Optional.empty(), Optional.empty(), orgId, startDate, Optional.empty());
    }

    /**
     * This factor factor determines the delay increase factor between retryable failures. Valid values are integers between 1 and 20.
     */
    @JsonIgnore
    public Optional<Long> backoffFactor() {
        return backoffFactor;
    }

    /**
     * A user identifier for the token request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * A string that authenticates the user’s setup request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Data is retrieved until that date (included)
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Apple Search Ads uses a 30-day attribution window. However, you may consider smaller values in order to shorten sync durations, at the cost of missing late data attributions.
     */
    @JsonIgnore
    public Optional<Long> lookbackWindow() {
        return lookbackWindow;
    }

    /**
     * The identifier of the organization that owns the campaign. Your Org Id is the same as your account in the Apple Search Ads UI.
     */
    @JsonIgnore
    public long orgId() {
        return orgId;
    }

    @JsonIgnore
    public AppleSearchAds sourceType() {
        return sourceType;
    }

    /**
     * Start getting data from that date.
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    /**
     * The timezone for the reporting data. Use 'ORTZ' for Organization Time Zone or 'UTC' for Coordinated Universal Time. Default is UTC.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeZone> timezone() {
        return (Optional<TimeZone>) timezone;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * This factor factor determines the delay increase factor between retryable failures. Valid values are integers between 1 and 20.
     */
    public SourceAppleSearchAds withBackoffFactor(long backoffFactor) {
        Utils.checkNotNull(backoffFactor, "backoffFactor");
        this.backoffFactor = Optional.ofNullable(backoffFactor);
        return this;
    }

    /**
     * This factor factor determines the delay increase factor between retryable failures. Valid values are integers between 1 and 20.
     */
    public SourceAppleSearchAds withBackoffFactor(Optional<Long> backoffFactor) {
        Utils.checkNotNull(backoffFactor, "backoffFactor");
        this.backoffFactor = backoffFactor;
        return this;
    }

    /**
     * A user identifier for the token request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
     */
    public SourceAppleSearchAds withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * A string that authenticates the user’s setup request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
     */
    public SourceAppleSearchAds withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Data is retrieved until that date (included)
     */
    public SourceAppleSearchAds withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Data is retrieved until that date (included)
     */
    public SourceAppleSearchAds withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Apple Search Ads uses a 30-day attribution window. However, you may consider smaller values in order to shorten sync durations, at the cost of missing late data attributions.
     */
    public SourceAppleSearchAds withLookbackWindow(long lookbackWindow) {
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        this.lookbackWindow = Optional.ofNullable(lookbackWindow);
        return this;
    }

    /**
     * Apple Search Ads uses a 30-day attribution window. However, you may consider smaller values in order to shorten sync durations, at the cost of missing late data attributions.
     */
    public SourceAppleSearchAds withLookbackWindow(Optional<Long> lookbackWindow) {
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        this.lookbackWindow = lookbackWindow;
        return this;
    }

    /**
     * The identifier of the organization that owns the campaign. Your Org Id is the same as your account in the Apple Search Ads UI.
     */
    public SourceAppleSearchAds withOrgId(long orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = orgId;
        return this;
    }

    /**
     * Start getting data from that date.
     */
    public SourceAppleSearchAds withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The timezone for the reporting data. Use 'ORTZ' for Organization Time Zone or 'UTC' for Coordinated Universal Time. Default is UTC.
     */
    public SourceAppleSearchAds withTimezone(TimeZone timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    /**
     * The timezone for the reporting data. Use 'ORTZ' for Organization Time Zone or 'UTC' for Coordinated Universal Time. Default is UTC.
     */
    public SourceAppleSearchAds withTimezone(Optional<? extends TimeZone> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAppleSearchAds other = (SourceAppleSearchAds) o;
        return 
            Objects.deepEquals(this.backoffFactor, other.backoffFactor) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.lookbackWindow, other.lookbackWindow) &&
            Objects.deepEquals(this.orgId, other.orgId) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.timezone, other.timezone);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            backoffFactor,
            clientId,
            clientSecret,
            endDate,
            lookbackWindow,
            orgId,
            sourceType,
            startDate,
            timezone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAppleSearchAds.class,
                "backoffFactor", backoffFactor,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "endDate", endDate,
                "lookbackWindow", lookbackWindow,
                "orgId", orgId,
                "sourceType", sourceType,
                "startDate", startDate,
                "timezone", timezone);
    }
    
    public final static class Builder {
 
        private Optional<Long> backoffFactor;
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<Long> lookbackWindow;
 
        private Long orgId;
 
        private String startDate;
 
        private Optional<? extends TimeZone> timezone;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * This factor factor determines the delay increase factor between retryable failures. Valid values are integers between 1 and 20.
         */
        public Builder backoffFactor(long backoffFactor) {
            Utils.checkNotNull(backoffFactor, "backoffFactor");
            this.backoffFactor = Optional.ofNullable(backoffFactor);
            return this;
        }

        /**
         * This factor factor determines the delay increase factor between retryable failures. Valid values are integers between 1 and 20.
         */
        public Builder backoffFactor(Optional<Long> backoffFactor) {
            Utils.checkNotNull(backoffFactor, "backoffFactor");
            this.backoffFactor = backoffFactor;
            return this;
        }

        /**
         * A user identifier for the token request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * A string that authenticates the user’s setup request. See &lt;a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api"&gt;here&lt;/a&gt;
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Data is retrieved until that date (included)
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Data is retrieved until that date (included)
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Apple Search Ads uses a 30-day attribution window. However, you may consider smaller values in order to shorten sync durations, at the cost of missing late data attributions.
         */
        public Builder lookbackWindow(long lookbackWindow) {
            Utils.checkNotNull(lookbackWindow, "lookbackWindow");
            this.lookbackWindow = Optional.ofNullable(lookbackWindow);
            return this;
        }

        /**
         * Apple Search Ads uses a 30-day attribution window. However, you may consider smaller values in order to shorten sync durations, at the cost of missing late data attributions.
         */
        public Builder lookbackWindow(Optional<Long> lookbackWindow) {
            Utils.checkNotNull(lookbackWindow, "lookbackWindow");
            this.lookbackWindow = lookbackWindow;
            return this;
        }

        /**
         * The identifier of the organization that owns the campaign. Your Org Id is the same as your account in the Apple Search Ads UI.
         */
        public Builder orgId(long orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = orgId;
            return this;
        }

        /**
         * Start getting data from that date.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The timezone for the reporting data. Use 'ORTZ' for Organization Time Zone or 'UTC' for Coordinated Universal Time. Default is UTC.
         */
        public Builder timezone(TimeZone timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        /**
         * The timezone for the reporting data. Use 'ORTZ' for Organization Time Zone or 'UTC' for Coordinated Universal Time. Default is UTC.
         */
        public Builder timezone(Optional<? extends TimeZone> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }
        
        public SourceAppleSearchAds build() {
            if (backoffFactor == null) {
                backoffFactor = _SINGLETON_VALUE_BackoffFactor.value();
            }
            if (lookbackWindow == null) {
                lookbackWindow = _SINGLETON_VALUE_LookbackWindow.value();
            }
            if (timezone == null) {
                timezone = _SINGLETON_VALUE_Timezone.value();
            }
            return new SourceAppleSearchAds(
                backoffFactor,
                clientId,
                clientSecret,
                endDate,
                lookbackWindow,
                orgId,
                startDate,
                timezone);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_BackoffFactor =
                new LazySingletonValue<>(
                        "backoff_factor",
                        "5",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_LookbackWindow =
                new LazySingletonValue<>(
                        "lookback_window",
                        "30",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<AppleSearchAds> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"apple-search-ads\"",
                        new TypeReference<AppleSearchAds>() {});

        private static final LazySingletonValue<Optional<? extends TimeZone>> _SINGLETON_VALUE_Timezone =
                new LazySingletonValue<>(
                        "timezone",
                        "\"UTC\"",
                        new TypeReference<Optional<? extends TimeZone>>() {});
    }
}
