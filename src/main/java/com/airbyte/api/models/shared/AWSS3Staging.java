/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * AWSS3Staging - &lt;i&gt;(recommended)&lt;/i&gt; Uploads data to S3 and then uses a COPY to insert the data into Redshift. COPY is recommended for production workloads for better speed and scalability. See &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html"&gt;AWS docs&lt;/a&gt; for more details.
 */

public class AWSS3Staging {

    /**
     * This ID grants access to the above S3 staging bucket. Airbyte requires Read and Write permissions to the given bucket. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
     */
    @JsonProperty("access_key_id")
    private String accessKeyId;

    /**
     * How to encrypt the staging data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption")
    private Optional<? extends DestinationRedshiftEncryption> encryption;

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_name_pattern")
    private Optional<? extends String> fileNamePattern;

    @JsonProperty("method")
    private DestinationRedshiftMethod method;

    /**
     * Whether to delete the staging files from S3 after completing the sync. See &lt;a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"&gt; docs&lt;/a&gt; for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purge_staging_data")
    private Optional<? extends Boolean> purgeStagingData;

    /**
     * The name of the staging S3 bucket.
     */
    @JsonProperty("s3_bucket_name")
    private String s3BucketName;

    /**
     * The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use"&gt;path's name recommendations&lt;/a&gt; for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_bucket_path")
    private Optional<? extends String> s3BucketPath;

    /**
     * The region of the S3 staging bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_bucket_region")
    private Optional<? extends DestinationRedshiftS3BucketRegion> s3BucketRegion;

    /**
     * The corresponding secret to the above access key id. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
     */
    @JsonProperty("secret_access_key")
    private String secretAccessKey;

    @JsonCreator
    public AWSS3Staging(
            @JsonProperty("access_key_id") String accessKeyId,
            @JsonProperty("encryption") Optional<? extends DestinationRedshiftEncryption> encryption,
            @JsonProperty("file_name_pattern") Optional<? extends String> fileNamePattern,
            @JsonProperty("purge_staging_data") Optional<? extends Boolean> purgeStagingData,
            @JsonProperty("s3_bucket_name") String s3BucketName,
            @JsonProperty("s3_bucket_path") Optional<? extends String> s3BucketPath,
            @JsonProperty("s3_bucket_region") Optional<? extends DestinationRedshiftS3BucketRegion> s3BucketRegion,
            @JsonProperty("secret_access_key") String secretAccessKey) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(encryption, "encryption");
        Utils.checkNotNull(fileNamePattern, "fileNamePattern");
        Utils.checkNotNull(purgeStagingData, "purgeStagingData");
        Utils.checkNotNull(s3BucketName, "s3BucketName");
        Utils.checkNotNull(s3BucketPath, "s3BucketPath");
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.accessKeyId = accessKeyId;
        this.encryption = encryption;
        this.fileNamePattern = fileNamePattern;
        this.method = Builder._SINGLETON_VALUE_Method.value();
        this.purgeStagingData = purgeStagingData;
        this.s3BucketName = s3BucketName;
        this.s3BucketPath = s3BucketPath;
        this.s3BucketRegion = s3BucketRegion;
        this.secretAccessKey = secretAccessKey;
    }
    
    public AWSS3Staging(
            String accessKeyId,
            String s3BucketName,
            String secretAccessKey) {
        this(accessKeyId, Optional.empty(), Optional.empty(), Optional.empty(), s3BucketName, Optional.empty(), Optional.empty(), secretAccessKey);
    }

    /**
     * This ID grants access to the above S3 staging bucket. Airbyte requires Read and Write permissions to the given bucket. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
     */
    @JsonIgnore
    public String accessKeyId() {
        return accessKeyId;
    }

    /**
     * How to encrypt the staging data
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationRedshiftEncryption> encryption() {
        return (Optional<DestinationRedshiftEncryption>) encryption;
    }

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> fileNamePattern() {
        return (Optional<String>) fileNamePattern;
    }

    @JsonIgnore
    public DestinationRedshiftMethod method() {
        return method;
    }

    /**
     * Whether to delete the staging files from S3 after completing the sync. See &lt;a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"&gt; docs&lt;/a&gt; for details.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> purgeStagingData() {
        return (Optional<Boolean>) purgeStagingData;
    }

    /**
     * The name of the staging S3 bucket.
     */
    @JsonIgnore
    public String s3BucketName() {
        return s3BucketName;
    }

    /**
     * The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use"&gt;path's name recommendations&lt;/a&gt; for more details.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> s3BucketPath() {
        return (Optional<String>) s3BucketPath;
    }

    /**
     * The region of the S3 staging bucket.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationRedshiftS3BucketRegion> s3BucketRegion() {
        return (Optional<DestinationRedshiftS3BucketRegion>) s3BucketRegion;
    }

    /**
     * The corresponding secret to the above access key id. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
     */
    @JsonIgnore
    public String secretAccessKey() {
        return secretAccessKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * This ID grants access to the above S3 staging bucket. Airbyte requires Read and Write permissions to the given bucket. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
     */
    public AWSS3Staging withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * How to encrypt the staging data
     */
    public AWSS3Staging withEncryption(DestinationRedshiftEncryption encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = Optional.ofNullable(encryption);
        return this;
    }

    /**
     * How to encrypt the staging data
     */
    public AWSS3Staging withEncryption(Optional<? extends DestinationRedshiftEncryption> encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = encryption;
        return this;
    }

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    public AWSS3Staging withFileNamePattern(String fileNamePattern) {
        Utils.checkNotNull(fileNamePattern, "fileNamePattern");
        this.fileNamePattern = Optional.ofNullable(fileNamePattern);
        return this;
    }

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    public AWSS3Staging withFileNamePattern(Optional<? extends String> fileNamePattern) {
        Utils.checkNotNull(fileNamePattern, "fileNamePattern");
        this.fileNamePattern = fileNamePattern;
        return this;
    }

    /**
     * Whether to delete the staging files from S3 after completing the sync. See &lt;a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"&gt; docs&lt;/a&gt; for details.
     */
    public AWSS3Staging withPurgeStagingData(boolean purgeStagingData) {
        Utils.checkNotNull(purgeStagingData, "purgeStagingData");
        this.purgeStagingData = Optional.ofNullable(purgeStagingData);
        return this;
    }

    /**
     * Whether to delete the staging files from S3 after completing the sync. See &lt;a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"&gt; docs&lt;/a&gt; for details.
     */
    public AWSS3Staging withPurgeStagingData(Optional<? extends Boolean> purgeStagingData) {
        Utils.checkNotNull(purgeStagingData, "purgeStagingData");
        this.purgeStagingData = purgeStagingData;
        return this;
    }

    /**
     * The name of the staging S3 bucket.
     */
    public AWSS3Staging withS3BucketName(String s3BucketName) {
        Utils.checkNotNull(s3BucketName, "s3BucketName");
        this.s3BucketName = s3BucketName;
        return this;
    }

    /**
     * The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use"&gt;path's name recommendations&lt;/a&gt; for more details.
     */
    public AWSS3Staging withS3BucketPath(String s3BucketPath) {
        Utils.checkNotNull(s3BucketPath, "s3BucketPath");
        this.s3BucketPath = Optional.ofNullable(s3BucketPath);
        return this;
    }

    /**
     * The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use"&gt;path's name recommendations&lt;/a&gt; for more details.
     */
    public AWSS3Staging withS3BucketPath(Optional<? extends String> s3BucketPath) {
        Utils.checkNotNull(s3BucketPath, "s3BucketPath");
        this.s3BucketPath = s3BucketPath;
        return this;
    }

    /**
     * The region of the S3 staging bucket.
     */
    public AWSS3Staging withS3BucketRegion(DestinationRedshiftS3BucketRegion s3BucketRegion) {
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        this.s3BucketRegion = Optional.ofNullable(s3BucketRegion);
        return this;
    }

    /**
     * The region of the S3 staging bucket.
     */
    public AWSS3Staging withS3BucketRegion(Optional<? extends DestinationRedshiftS3BucketRegion> s3BucketRegion) {
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        this.s3BucketRegion = s3BucketRegion;
        return this;
    }

    /**
     * The corresponding secret to the above access key id. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
     */
    public AWSS3Staging withSecretAccessKey(String secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = secretAccessKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AWSS3Staging other = (AWSS3Staging) o;
        return 
            java.util.Objects.deepEquals(this.accessKeyId, other.accessKeyId) &&
            java.util.Objects.deepEquals(this.encryption, other.encryption) &&
            java.util.Objects.deepEquals(this.fileNamePattern, other.fileNamePattern) &&
            java.util.Objects.deepEquals(this.method, other.method) &&
            java.util.Objects.deepEquals(this.purgeStagingData, other.purgeStagingData) &&
            java.util.Objects.deepEquals(this.s3BucketName, other.s3BucketName) &&
            java.util.Objects.deepEquals(this.s3BucketPath, other.s3BucketPath) &&
            java.util.Objects.deepEquals(this.s3BucketRegion, other.s3BucketRegion) &&
            java.util.Objects.deepEquals(this.secretAccessKey, other.secretAccessKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKeyId,
            encryption,
            fileNamePattern,
            method,
            purgeStagingData,
            s3BucketName,
            s3BucketPath,
            s3BucketRegion,
            secretAccessKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AWSS3Staging.class,
                "accessKeyId", accessKeyId,
                "encryption", encryption,
                "fileNamePattern", fileNamePattern,
                "method", method,
                "purgeStagingData", purgeStagingData,
                "s3BucketName", s3BucketName,
                "s3BucketPath", s3BucketPath,
                "s3BucketRegion", s3BucketRegion,
                "secretAccessKey", secretAccessKey);
    }
    
    public final static class Builder {
 
        private String accessKeyId;
 
        private Optional<? extends DestinationRedshiftEncryption> encryption = Optional.empty();
 
        private Optional<? extends String> fileNamePattern = Optional.empty();
 
        private Optional<? extends Boolean> purgeStagingData;
 
        private String s3BucketName;
 
        private Optional<? extends String> s3BucketPath = Optional.empty();
 
        private Optional<? extends DestinationRedshiftS3BucketRegion> s3BucketRegion;
 
        private String secretAccessKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * This ID grants access to the above S3 staging bucket. Airbyte requires Read and Write permissions to the given bucket. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
         */
        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * How to encrypt the staging data
         */
        public Builder encryption(DestinationRedshiftEncryption encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = Optional.ofNullable(encryption);
            return this;
        }

        /**
         * How to encrypt the staging data
         */
        public Builder encryption(Optional<? extends DestinationRedshiftEncryption> encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = encryption;
            return this;
        }

        /**
         * The pattern allows you to set the file-name format for the S3 staging file(s)
         */
        public Builder fileNamePattern(String fileNamePattern) {
            Utils.checkNotNull(fileNamePattern, "fileNamePattern");
            this.fileNamePattern = Optional.ofNullable(fileNamePattern);
            return this;
        }

        /**
         * The pattern allows you to set the file-name format for the S3 staging file(s)
         */
        public Builder fileNamePattern(Optional<? extends String> fileNamePattern) {
            Utils.checkNotNull(fileNamePattern, "fileNamePattern");
            this.fileNamePattern = fileNamePattern;
            return this;
        }

        /**
         * Whether to delete the staging files from S3 after completing the sync. See &lt;a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"&gt; docs&lt;/a&gt; for details.
         */
        public Builder purgeStagingData(boolean purgeStagingData) {
            Utils.checkNotNull(purgeStagingData, "purgeStagingData");
            this.purgeStagingData = Optional.ofNullable(purgeStagingData);
            return this;
        }

        /**
         * Whether to delete the staging files from S3 after completing the sync. See &lt;a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"&gt; docs&lt;/a&gt; for details.
         */
        public Builder purgeStagingData(Optional<? extends Boolean> purgeStagingData) {
            Utils.checkNotNull(purgeStagingData, "purgeStagingData");
            this.purgeStagingData = purgeStagingData;
            return this;
        }

        /**
         * The name of the staging S3 bucket.
         */
        public Builder s3BucketName(String s3BucketName) {
            Utils.checkNotNull(s3BucketName, "s3BucketName");
            this.s3BucketName = s3BucketName;
            return this;
        }

        /**
         * The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use"&gt;path's name recommendations&lt;/a&gt; for more details.
         */
        public Builder s3BucketPath(String s3BucketPath) {
            Utils.checkNotNull(s3BucketPath, "s3BucketPath");
            this.s3BucketPath = Optional.ofNullable(s3BucketPath);
            return this;
        }

        /**
         * The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use"&gt;path's name recommendations&lt;/a&gt; for more details.
         */
        public Builder s3BucketPath(Optional<? extends String> s3BucketPath) {
            Utils.checkNotNull(s3BucketPath, "s3BucketPath");
            this.s3BucketPath = s3BucketPath;
            return this;
        }

        /**
         * The region of the S3 staging bucket.
         */
        public Builder s3BucketRegion(DestinationRedshiftS3BucketRegion s3BucketRegion) {
            Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
            this.s3BucketRegion = Optional.ofNullable(s3BucketRegion);
            return this;
        }

        /**
         * The region of the S3 staging bucket.
         */
        public Builder s3BucketRegion(Optional<? extends DestinationRedshiftS3BucketRegion> s3BucketRegion) {
            Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
            this.s3BucketRegion = s3BucketRegion;
            return this;
        }

        /**
         * The corresponding secret to the above access key id. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;AWS docs&lt;/a&gt; on how to generate an access key ID and secret access key.
         */
        public Builder secretAccessKey(String secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        
        public AWSS3Staging build() {
            if (purgeStagingData == null) {
                purgeStagingData = _SINGLETON_VALUE_PurgeStagingData.value();
            }
            if (s3BucketRegion == null) {
                s3BucketRegion = _SINGLETON_VALUE_S3BucketRegion.value();
            }
            return new AWSS3Staging(
                accessKeyId,
                encryption,
                fileNamePattern,
                purgeStagingData,
                s3BucketName,
                s3BucketPath,
                s3BucketRegion,
                secretAccessKey);
        }

        private static final LazySingletonValue<DestinationRedshiftMethod> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"S3 Staging\"",
                        new TypeReference<DestinationRedshiftMethod>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_PurgeStagingData =
                new LazySingletonValue<>(
                        "purge_staging_data",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends DestinationRedshiftS3BucketRegion>> _SINGLETON_VALUE_S3BucketRegion =
                new LazySingletonValue<>(
                        "s3_bucket_region",
                        "\"\"",
                        new TypeReference<Optional<? extends DestinationRedshiftS3BucketRegion>>() {});
    }
}

