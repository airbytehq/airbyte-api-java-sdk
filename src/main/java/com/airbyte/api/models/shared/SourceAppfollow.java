/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceAppfollow {

    /**
     * API Key provided by Appfollow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_secret")
    private Optional<String> apiSecret;

    @JsonProperty("sourceType")
    private Appfollow sourceType;

    @JsonCreator
    public SourceAppfollow(
            @JsonProperty("api_secret") Optional<String> apiSecret) {
        Utils.checkNotNull(apiSecret, "apiSecret");
        this.apiSecret = apiSecret;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceAppfollow() {
        this(Optional.empty());
    }

    /**
     * API Key provided by Appfollow
     */
    @JsonIgnore
    public Optional<String> apiSecret() {
        return apiSecret;
    }

    @JsonIgnore
    public Appfollow sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API Key provided by Appfollow
     */
    public SourceAppfollow withApiSecret(String apiSecret) {
        Utils.checkNotNull(apiSecret, "apiSecret");
        this.apiSecret = Optional.ofNullable(apiSecret);
        return this;
    }

    /**
     * API Key provided by Appfollow
     */
    public SourceAppfollow withApiSecret(Optional<String> apiSecret) {
        Utils.checkNotNull(apiSecret, "apiSecret");
        this.apiSecret = apiSecret;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAppfollow other = (SourceAppfollow) o;
        return 
            Objects.deepEquals(this.apiSecret, other.apiSecret) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiSecret,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAppfollow.class,
                "apiSecret", apiSecret,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<String> apiSecret = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API Key provided by Appfollow
         */
        public Builder apiSecret(String apiSecret) {
            Utils.checkNotNull(apiSecret, "apiSecret");
            this.apiSecret = Optional.ofNullable(apiSecret);
            return this;
        }

        /**
         * API Key provided by Appfollow
         */
        public Builder apiSecret(Optional<String> apiSecret) {
            Utils.checkNotNull(apiSecret, "apiSecret");
            this.apiSecret = apiSecret;
            return this;
        }
        
        public SourceAppfollow build() {
            return new SourceAppfollow(
                apiSecret);
        }

        private static final LazySingletonValue<Appfollow> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"appfollow\"",
                        new TypeReference<Appfollow>() {});
    }
}

