/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceGithub {

    /**
     * Please enter your basic URL from self-hosted GitHub instance or leave it empty to use GitHub.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_url")
    private Optional<String> apiUrl;

    /**
     * List of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branches")
    private Optional<? extends List<String>> branches;

    /**
     * Choose how to authenticate to GitHub
     */
    @JsonProperty("credentials")
    private SourceGithubAuthentication credentials;

    /**
     * Max Waiting Time for rate limit. Set higher value to wait till rate limits will be resetted to continue sync
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_waiting_time")
    private Optional<Long> maxWaitingTime;

    /**
     * List of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/a* for matching multiple repositories by pattern.
     */
    @JsonProperty("repositories")
    private List<String> repositories;

    @JsonProperty("sourceType")
    private SourceGithubGithub sourceType;

    /**
     * The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. If the date is not set, all data will be replicated.  For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the &lt;a href="https://docs.airbyte.com/integrations/sources/github"&gt;docs&lt;/a&gt; for more info
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    @JsonCreator
    public SourceGithub(
            @JsonProperty("api_url") Optional<String> apiUrl,
            @JsonProperty("branches") Optional<? extends List<String>> branches,
            @JsonProperty("credentials") SourceGithubAuthentication credentials,
            @JsonProperty("max_waiting_time") Optional<Long> maxWaitingTime,
            @JsonProperty("repositories") List<String> repositories,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        Utils.checkNotNull(branches, "branches");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(maxWaitingTime, "maxWaitingTime");
        Utils.checkNotNull(repositories, "repositories");
        Utils.checkNotNull(startDate, "startDate");
        this.apiUrl = apiUrl;
        this.branches = branches;
        this.credentials = credentials;
        this.maxWaitingTime = maxWaitingTime;
        this.repositories = repositories;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceGithub(
            SourceGithubAuthentication credentials,
            List<String> repositories) {
        this(Optional.empty(), Optional.empty(), credentials, Optional.empty(), repositories, Optional.empty());
    }

    /**
     * Please enter your basic URL from self-hosted GitHub instance or leave it empty to use GitHub.
     */
    @JsonIgnore
    public Optional<String> apiUrl() {
        return apiUrl;
    }

    /**
     * List of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> branches() {
        return (Optional<List<String>>) branches;
    }

    /**
     * Choose how to authenticate to GitHub
     */
    @JsonIgnore
    public SourceGithubAuthentication credentials() {
        return credentials;
    }

    /**
     * Max Waiting Time for rate limit. Set higher value to wait till rate limits will be resetted to continue sync
     */
    @JsonIgnore
    public Optional<Long> maxWaitingTime() {
        return maxWaitingTime;
    }

    /**
     * List of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/a* for matching multiple repositories by pattern.
     */
    @JsonIgnore
    public List<String> repositories() {
        return repositories;
    }

    @JsonIgnore
    public SourceGithubGithub sourceType() {
        return sourceType;
    }

    /**
     * The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. If the date is not set, all data will be replicated.  For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the &lt;a href="https://docs.airbyte.com/integrations/sources/github"&gt;docs&lt;/a&gt; for more info
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Please enter your basic URL from self-hosted GitHub instance or leave it empty to use GitHub.
     */
    public SourceGithub withApiUrl(String apiUrl) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        this.apiUrl = Optional.ofNullable(apiUrl);
        return this;
    }

    /**
     * Please enter your basic URL from self-hosted GitHub instance or leave it empty to use GitHub.
     */
    public SourceGithub withApiUrl(Optional<String> apiUrl) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        this.apiUrl = apiUrl;
        return this;
    }

    /**
     * List of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
     */
    public SourceGithub withBranches(List<String> branches) {
        Utils.checkNotNull(branches, "branches");
        this.branches = Optional.ofNullable(branches);
        return this;
    }

    /**
     * List of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
     */
    public SourceGithub withBranches(Optional<? extends List<String>> branches) {
        Utils.checkNotNull(branches, "branches");
        this.branches = branches;
        return this;
    }

    /**
     * Choose how to authenticate to GitHub
     */
    public SourceGithub withCredentials(SourceGithubAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Max Waiting Time for rate limit. Set higher value to wait till rate limits will be resetted to continue sync
     */
    public SourceGithub withMaxWaitingTime(long maxWaitingTime) {
        Utils.checkNotNull(maxWaitingTime, "maxWaitingTime");
        this.maxWaitingTime = Optional.ofNullable(maxWaitingTime);
        return this;
    }

    /**
     * Max Waiting Time for rate limit. Set higher value to wait till rate limits will be resetted to continue sync
     */
    public SourceGithub withMaxWaitingTime(Optional<Long> maxWaitingTime) {
        Utils.checkNotNull(maxWaitingTime, "maxWaitingTime");
        this.maxWaitingTime = maxWaitingTime;
        return this;
    }

    /**
     * List of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/a* for matching multiple repositories by pattern.
     */
    public SourceGithub withRepositories(List<String> repositories) {
        Utils.checkNotNull(repositories, "repositories");
        this.repositories = repositories;
        return this;
    }

    /**
     * The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. If the date is not set, all data will be replicated.  For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the &lt;a href="https://docs.airbyte.com/integrations/sources/github"&gt;docs&lt;/a&gt; for more info
     */
    public SourceGithub withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. If the date is not set, all data will be replicated.  For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the &lt;a href="https://docs.airbyte.com/integrations/sources/github"&gt;docs&lt;/a&gt; for more info
     */
    public SourceGithub withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGithub other = (SourceGithub) o;
        return 
            Objects.deepEquals(this.apiUrl, other.apiUrl) &&
            Objects.deepEquals(this.branches, other.branches) &&
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.maxWaitingTime, other.maxWaitingTime) &&
            Objects.deepEquals(this.repositories, other.repositories) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiUrl,
            branches,
            credentials,
            maxWaitingTime,
            repositories,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGithub.class,
                "apiUrl", apiUrl,
                "branches", branches,
                "credentials", credentials,
                "maxWaitingTime", maxWaitingTime,
                "repositories", repositories,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<String> apiUrl;
 
        private Optional<? extends List<String>> branches = Optional.empty();
 
        private SourceGithubAuthentication credentials;
 
        private Optional<Long> maxWaitingTime;
 
        private List<String> repositories;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Please enter your basic URL from self-hosted GitHub instance or leave it empty to use GitHub.
         */
        public Builder apiUrl(String apiUrl) {
            Utils.checkNotNull(apiUrl, "apiUrl");
            this.apiUrl = Optional.ofNullable(apiUrl);
            return this;
        }

        /**
         * Please enter your basic URL from self-hosted GitHub instance or leave it empty to use GitHub.
         */
        public Builder apiUrl(Optional<String> apiUrl) {
            Utils.checkNotNull(apiUrl, "apiUrl");
            this.apiUrl = apiUrl;
            return this;
        }

        /**
         * List of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
         */
        public Builder branches(List<String> branches) {
            Utils.checkNotNull(branches, "branches");
            this.branches = Optional.ofNullable(branches);
            return this;
        }

        /**
         * List of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
         */
        public Builder branches(Optional<? extends List<String>> branches) {
            Utils.checkNotNull(branches, "branches");
            this.branches = branches;
            return this;
        }

        /**
         * Choose how to authenticate to GitHub
         */
        public Builder credentials(SourceGithubAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Max Waiting Time for rate limit. Set higher value to wait till rate limits will be resetted to continue sync
         */
        public Builder maxWaitingTime(long maxWaitingTime) {
            Utils.checkNotNull(maxWaitingTime, "maxWaitingTime");
            this.maxWaitingTime = Optional.ofNullable(maxWaitingTime);
            return this;
        }

        /**
         * Max Waiting Time for rate limit. Set higher value to wait till rate limits will be resetted to continue sync
         */
        public Builder maxWaitingTime(Optional<Long> maxWaitingTime) {
            Utils.checkNotNull(maxWaitingTime, "maxWaitingTime");
            this.maxWaitingTime = maxWaitingTime;
            return this;
        }

        /**
         * List of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/a* for matching multiple repositories by pattern.
         */
        public Builder repositories(List<String> repositories) {
            Utils.checkNotNull(repositories, "repositories");
            this.repositories = repositories;
            return this;
        }

        /**
         * The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. If the date is not set, all data will be replicated.  For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the &lt;a href="https://docs.airbyte.com/integrations/sources/github"&gt;docs&lt;/a&gt; for more info
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. If the date is not set, all data will be replicated.  For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the &lt;a href="https://docs.airbyte.com/integrations/sources/github"&gt;docs&lt;/a&gt; for more info
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceGithub build() {
            if (apiUrl == null) {
                apiUrl = _SINGLETON_VALUE_ApiUrl.value();
            }
            if (maxWaitingTime == null) {
                maxWaitingTime = _SINGLETON_VALUE_MaxWaitingTime.value();
            }
            return new SourceGithub(
                apiUrl,
                branches,
                credentials,
                maxWaitingTime,
                repositories,
                startDate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_ApiUrl =
                new LazySingletonValue<>(
                        "api_url",
                        "\"https://api.github.com/\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_MaxWaitingTime =
                new LazySingletonValue<>(
                        "max_waiting_time",
                        "10",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<SourceGithubGithub> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"github\"",
                        new TypeReference<SourceGithubGithub>() {});
    }
}
