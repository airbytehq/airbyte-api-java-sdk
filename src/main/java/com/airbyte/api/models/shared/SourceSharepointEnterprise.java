/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceSharepointEnterprise
 * 
 * <p>SourceMicrosoftSharePointSpec class for Microsoft SharePoint Source Specification.
 * This class combines the authentication details with additional configuration for the SharePoint API.
 */
public class SourceSharepointEnterprise {

    /**
     * Credentials for connecting to the One Drive API
     */
    @JsonProperty("credentials")
    private SourceSharepointEnterpriseAuthentication credentials;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_method")
    private Optional<? extends SourceSharepointEnterpriseDeliveryMethod> deliveryMethod;

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder_path")
    private Optional<String> folderPath;

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_scope")
    private Optional<? extends SourceSharepointEnterpriseSearchScope> searchScope;

    /**
     * Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://&lt;tenant_name&gt;.sharepoint.com/sites/' to iterate over all sites.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("site_url")
    private Optional<String> siteUrl;

    @JsonProperty("sourceType")
    private SourceSharepointEnterpriseSharepointEnterprise sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    @JsonProperty("streams")
    private List<SourceSharepointEnterpriseFileBasedStreamConfig> streams;

    @JsonCreator
    public SourceSharepointEnterprise(
            @JsonProperty("credentials") SourceSharepointEnterpriseAuthentication credentials,
            @JsonProperty("delivery_method") Optional<? extends SourceSharepointEnterpriseDeliveryMethod> deliveryMethod,
            @JsonProperty("folder_path") Optional<String> folderPath,
            @JsonProperty("search_scope") Optional<? extends SourceSharepointEnterpriseSearchScope> searchScope,
            @JsonProperty("site_url") Optional<String> siteUrl,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("streams") List<SourceSharepointEnterpriseFileBasedStreamConfig> streams) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        Utils.checkNotNull(folderPath, "folderPath");
        Utils.checkNotNull(searchScope, "searchScope");
        Utils.checkNotNull(siteUrl, "siteUrl");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(streams, "streams");
        this.credentials = credentials;
        this.deliveryMethod = deliveryMethod;
        this.folderPath = folderPath;
        this.searchScope = searchScope;
        this.siteUrl = siteUrl;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.streams = streams;
    }
    
    public SourceSharepointEnterprise(
            SourceSharepointEnterpriseAuthentication credentials,
            List<SourceSharepointEnterpriseFileBasedStreamConfig> streams) {
        this(credentials, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), streams);
    }

    /**
     * Credentials for connecting to the One Drive API
     */
    @JsonIgnore
    public SourceSharepointEnterpriseAuthentication credentials() {
        return credentials;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSharepointEnterpriseDeliveryMethod> deliveryMethod() {
        return (Optional<SourceSharepointEnterpriseDeliveryMethod>) deliveryMethod;
    }

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    @JsonIgnore
    public Optional<String> folderPath() {
        return folderPath;
    }

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSharepointEnterpriseSearchScope> searchScope() {
        return (Optional<SourceSharepointEnterpriseSearchScope>) searchScope;
    }

    /**
     * Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://&lt;tenant_name&gt;.sharepoint.com/sites/' to iterate over all sites.
     */
    @JsonIgnore
    public Optional<String> siteUrl() {
        return siteUrl;
    }

    @JsonIgnore
    public SourceSharepointEnterpriseSharepointEnterprise sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    @JsonIgnore
    public List<SourceSharepointEnterpriseFileBasedStreamConfig> streams() {
        return streams;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Credentials for connecting to the One Drive API
     */
    public SourceSharepointEnterprise withCredentials(SourceSharepointEnterpriseAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    public SourceSharepointEnterprise withDeliveryMethod(SourceSharepointEnterpriseDeliveryMethod deliveryMethod) {
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        this.deliveryMethod = Optional.ofNullable(deliveryMethod);
        return this;
    }

    public SourceSharepointEnterprise withDeliveryMethod(Optional<? extends SourceSharepointEnterpriseDeliveryMethod> deliveryMethod) {
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        this.deliveryMethod = deliveryMethod;
        return this;
    }

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    public SourceSharepointEnterprise withFolderPath(String folderPath) {
        Utils.checkNotNull(folderPath, "folderPath");
        this.folderPath = Optional.ofNullable(folderPath);
        return this;
    }

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    public SourceSharepointEnterprise withFolderPath(Optional<String> folderPath) {
        Utils.checkNotNull(folderPath, "folderPath");
        this.folderPath = folderPath;
        return this;
    }

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    public SourceSharepointEnterprise withSearchScope(SourceSharepointEnterpriseSearchScope searchScope) {
        Utils.checkNotNull(searchScope, "searchScope");
        this.searchScope = Optional.ofNullable(searchScope);
        return this;
    }

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    public SourceSharepointEnterprise withSearchScope(Optional<? extends SourceSharepointEnterpriseSearchScope> searchScope) {
        Utils.checkNotNull(searchScope, "searchScope");
        this.searchScope = searchScope;
        return this;
    }

    /**
     * Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://&lt;tenant_name&gt;.sharepoint.com/sites/' to iterate over all sites.
     */
    public SourceSharepointEnterprise withSiteUrl(String siteUrl) {
        Utils.checkNotNull(siteUrl, "siteUrl");
        this.siteUrl = Optional.ofNullable(siteUrl);
        return this;
    }

    /**
     * Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://&lt;tenant_name&gt;.sharepoint.com/sites/' to iterate over all sites.
     */
    public SourceSharepointEnterprise withSiteUrl(Optional<String> siteUrl) {
        Utils.checkNotNull(siteUrl, "siteUrl");
        this.siteUrl = siteUrl;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    public SourceSharepointEnterprise withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    public SourceSharepointEnterprise withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    public SourceSharepointEnterprise withStreams(List<SourceSharepointEnterpriseFileBasedStreamConfig> streams) {
        Utils.checkNotNull(streams, "streams");
        this.streams = streams;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSharepointEnterprise other = (SourceSharepointEnterprise) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.deliveryMethod, other.deliveryMethod) &&
            Objects.deepEquals(this.folderPath, other.folderPath) &&
            Objects.deepEquals(this.searchScope, other.searchScope) &&
            Objects.deepEquals(this.siteUrl, other.siteUrl) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.streams, other.streams);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            deliveryMethod,
            folderPath,
            searchScope,
            siteUrl,
            sourceType,
            startDate,
            streams);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSharepointEnterprise.class,
                "credentials", credentials,
                "deliveryMethod", deliveryMethod,
                "folderPath", folderPath,
                "searchScope", searchScope,
                "siteUrl", siteUrl,
                "sourceType", sourceType,
                "startDate", startDate,
                "streams", streams);
    }
    
    public final static class Builder {
 
        private SourceSharepointEnterpriseAuthentication credentials;
 
        private Optional<? extends SourceSharepointEnterpriseDeliveryMethod> deliveryMethod = Optional.empty();
 
        private Optional<String> folderPath;
 
        private Optional<? extends SourceSharepointEnterpriseSearchScope> searchScope;
 
        private Optional<String> siteUrl;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
 
        private List<SourceSharepointEnterpriseFileBasedStreamConfig> streams;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Credentials for connecting to the One Drive API
         */
        public Builder credentials(SourceSharepointEnterpriseAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        public Builder deliveryMethod(SourceSharepointEnterpriseDeliveryMethod deliveryMethod) {
            Utils.checkNotNull(deliveryMethod, "deliveryMethod");
            this.deliveryMethod = Optional.ofNullable(deliveryMethod);
            return this;
        }

        public Builder deliveryMethod(Optional<? extends SourceSharepointEnterpriseDeliveryMethod> deliveryMethod) {
            Utils.checkNotNull(deliveryMethod, "deliveryMethod");
            this.deliveryMethod = deliveryMethod;
            return this;
        }

        /**
         * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
         */
        public Builder folderPath(String folderPath) {
            Utils.checkNotNull(folderPath, "folderPath");
            this.folderPath = Optional.ofNullable(folderPath);
            return this;
        }

        /**
         * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
         */
        public Builder folderPath(Optional<String> folderPath) {
            Utils.checkNotNull(folderPath, "folderPath");
            this.folderPath = folderPath;
            return this;
        }

        /**
         * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
         */
        public Builder searchScope(SourceSharepointEnterpriseSearchScope searchScope) {
            Utils.checkNotNull(searchScope, "searchScope");
            this.searchScope = Optional.ofNullable(searchScope);
            return this;
        }

        /**
         * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
         */
        public Builder searchScope(Optional<? extends SourceSharepointEnterpriseSearchScope> searchScope) {
            Utils.checkNotNull(searchScope, "searchScope");
            this.searchScope = searchScope;
            return this;
        }

        /**
         * Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://&lt;tenant_name&gt;.sharepoint.com/sites/' to iterate over all sites.
         */
        public Builder siteUrl(String siteUrl) {
            Utils.checkNotNull(siteUrl, "siteUrl");
            this.siteUrl = Optional.ofNullable(siteUrl);
            return this;
        }

        /**
         * Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://&lt;tenant_name&gt;.sharepoint.com/sites/' to iterate over all sites.
         */
        public Builder siteUrl(Optional<String> siteUrl) {
            Utils.checkNotNull(siteUrl, "siteUrl");
            this.siteUrl = siteUrl;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
         */
        public Builder streams(List<SourceSharepointEnterpriseFileBasedStreamConfig> streams) {
            Utils.checkNotNull(streams, "streams");
            this.streams = streams;
            return this;
        }
        
        public SourceSharepointEnterprise build() {
            if (folderPath == null) {
                folderPath = _SINGLETON_VALUE_FolderPath.value();
            }
            if (searchScope == null) {
                searchScope = _SINGLETON_VALUE_SearchScope.value();
            }
            if (siteUrl == null) {
                siteUrl = _SINGLETON_VALUE_SiteUrl.value();
            }
            return new SourceSharepointEnterprise(
                credentials,
                deliveryMethod,
                folderPath,
                searchScope,
                siteUrl,
                startDate,
                streams);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_FolderPath =
                new LazySingletonValue<>(
                        "folder_path",
                        "\".\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<? extends SourceSharepointEnterpriseSearchScope>> _SINGLETON_VALUE_SearchScope =
                new LazySingletonValue<>(
                        "search_scope",
                        "\"ALL\"",
                        new TypeReference<Optional<? extends SourceSharepointEnterpriseSearchScope>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_SiteUrl =
                new LazySingletonValue<>(
                        "site_url",
                        "\"\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<SourceSharepointEnterpriseSharepointEnterprise> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"sharepoint-enterprise\"",
                        new TypeReference<SourceSharepointEnterpriseSharepointEnterprise>() {});
    }
}
