/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceLeverHiring {

    /**
     * Choose how to authenticate to Lever Hiring.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceLeverHiringAuthenticationMechanism> credentials;

    /**
     * The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    private Optional<? extends SourceLeverHiringEnvironment> environment;

    @JsonProperty("sourceType")
    private SourceLeverHiringLeverHiring sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceLeverHiring(
            @JsonProperty("credentials") Optional<? extends SourceLeverHiringAuthenticationMechanism> credentials,
            @JsonProperty("environment") Optional<? extends SourceLeverHiringEnvironment> environment,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(environment, "environment");
        Utils.checkNotNull(startDate, "startDate");
        this.credentials = credentials;
        this.environment = environment;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceLeverHiring(
            String startDate) {
        this(Optional.empty(), Optional.empty(), startDate);
    }

    /**
     * Choose how to authenticate to Lever Hiring.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceLeverHiringAuthenticationMechanism> credentials() {
        return (Optional<SourceLeverHiringAuthenticationMechanism>) credentials;
    }

    /**
     * The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceLeverHiringEnvironment> environment() {
        return (Optional<SourceLeverHiringEnvironment>) environment;
    }

    @JsonIgnore
    public SourceLeverHiringLeverHiring sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Choose how to authenticate to Lever Hiring.
     */
    public SourceLeverHiring withCredentials(SourceLeverHiringAuthenticationMechanism credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * Choose how to authenticate to Lever Hiring.
     */
    public SourceLeverHiring withCredentials(Optional<? extends SourceLeverHiringAuthenticationMechanism> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
     */
    public SourceLeverHiring withEnvironment(SourceLeverHiringEnvironment environment) {
        Utils.checkNotNull(environment, "environment");
        this.environment = Optional.ofNullable(environment);
        return this;
    }

    /**
     * The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
     */
    public SourceLeverHiring withEnvironment(Optional<? extends SourceLeverHiringEnvironment> environment) {
        Utils.checkNotNull(environment, "environment");
        this.environment = environment;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.
     */
    public SourceLeverHiring withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceLeverHiring other = (SourceLeverHiring) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.environment, other.environment) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            environment,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceLeverHiring.class,
                "credentials", credentials,
                "environment", environment,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceLeverHiringAuthenticationMechanism> credentials = Optional.empty();
 
        private Optional<? extends SourceLeverHiringEnvironment> environment;
 
        private String startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Choose how to authenticate to Lever Hiring.
         */
        public Builder credentials(SourceLeverHiringAuthenticationMechanism credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * Choose how to authenticate to Lever Hiring.
         */
        public Builder credentials(Optional<? extends SourceLeverHiringAuthenticationMechanism> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
         */
        public Builder environment(SourceLeverHiringEnvironment environment) {
            Utils.checkNotNull(environment, "environment");
            this.environment = Optional.ofNullable(environment);
            return this;
        }

        /**
         * The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
         */
        public Builder environment(Optional<? extends SourceLeverHiringEnvironment> environment) {
            Utils.checkNotNull(environment, "environment");
            this.environment = environment;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceLeverHiring build() {
            if (environment == null) {
                environment = _SINGLETON_VALUE_Environment.value();
            }
            return new SourceLeverHiring(
                credentials,
                environment,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends SourceLeverHiringEnvironment>> _SINGLETON_VALUE_Environment =
                new LazySingletonValue<>(
                        "environment",
                        "\"Sandbox\"",
                        new TypeReference<Optional<? extends SourceLeverHiringEnvironment>>() {});

        private static final LazySingletonValue<SourceLeverHiringLeverHiring> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"lever-hiring\"",
                        new TypeReference<SourceLeverHiringLeverHiring>() {});
    }
}
