/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourceTyntecSms {

    /**
     * Your Tyntec API Key. See &lt;a href="https://www.tyntec.com/docs/docs-center-sms-api-quick-start"&gt;here&lt;/a&gt;
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The phone number of the SMS message sender (international).
     */
    @JsonProperty("from")
    private String from;

    /**
     * The content of the SMS message to be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    @JsonProperty("sourceType")
    private TyntecSms sourceType;

    /**
     * The phone number of the SMS message recipient (international).
     */
    @JsonProperty("to")
    private String to;

    @JsonCreator
    public SourceTyntecSms(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("from") String from,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("to") String to) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(to, "to");
        this.apiKey = apiKey;
        this.from = from;
        this.message = message;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.to = to;
    }
    
    public SourceTyntecSms(
            String apiKey,
            String from,
            String to) {
        this(apiKey, from, Optional.empty(), to);
    }

    /**
     * Your Tyntec API Key. See &lt;a href="https://www.tyntec.com/docs/docs-center-sms-api-quick-start"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The phone number of the SMS message sender (international).
     */
    @JsonIgnore
    public String from() {
        return from;
    }

    /**
     * The content of the SMS message to be sent.
     */
    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    @JsonIgnore
    public TyntecSms sourceType() {
        return sourceType;
    }

    /**
     * The phone number of the SMS message recipient (international).
     */
    @JsonIgnore
    public String to() {
        return to;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Your Tyntec API Key. See &lt;a href="https://www.tyntec.com/docs/docs-center-sms-api-quick-start"&gt;here&lt;/a&gt;
     */
    public SourceTyntecSms withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The phone number of the SMS message sender (international).
     */
    public SourceTyntecSms withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    /**
     * The content of the SMS message to be sent.
     */
    public SourceTyntecSms withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * The content of the SMS message to be sent.
     */
    public SourceTyntecSms withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * The phone number of the SMS message recipient (international).
     */
    public SourceTyntecSms withTo(String to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceTyntecSms other = (SourceTyntecSms) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.from, other.from) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            from,
            message,
            sourceType,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceTyntecSms.class,
                "apiKey", apiKey,
                "from", from,
                "message", message,
                "sourceType", sourceType,
                "to", to);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private String from;
 
        private Optional<String> message = Optional.empty();
 
        private String to;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your Tyntec API Key. See &lt;a href="https://www.tyntec.com/docs/docs-center-sms-api-quick-start"&gt;here&lt;/a&gt;
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The phone number of the SMS message sender (international).
         */
        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        /**
         * The content of the SMS message to be sent.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * The content of the SMS message to be sent.
         */
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * The phone number of the SMS message recipient (international).
         */
        public Builder to(String to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public SourceTyntecSms build() {
            return new SourceTyntecSms(
                apiKey,
                from,
                message,
                to);
        }

        private static final LazySingletonValue<TyntecSms> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"tyntec-sms\"",
                        new TypeReference<TyntecSms>() {});
    }
}
