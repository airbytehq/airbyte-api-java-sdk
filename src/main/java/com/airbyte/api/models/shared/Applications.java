/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Applications {

    @JsonProperty("app_api_key")
    private String appApiKey;

    @JsonProperty("app_id")
    private String appId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_name")
    private Optional<? extends String> appName;

    public Applications(
            @JsonProperty("app_api_key") String appApiKey,
            @JsonProperty("app_id") String appId,
            @JsonProperty("app_name") Optional<? extends String> appName) {
        Utils.checkNotNull(appApiKey, "appApiKey");
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(appName, "appName");
        this.appApiKey = appApiKey;
        this.appId = appId;
        this.appName = appName;
    }

    public String appApiKey() {
        return appApiKey;
    }

    public String appId() {
        return appId;
    }

    public Optional<? extends String> appName() {
        return appName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Applications withAppApiKey(String appApiKey) {
        Utils.checkNotNull(appApiKey, "appApiKey");
        this.appApiKey = appApiKey;
        return this;
    }

    public Applications withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public Applications withAppName(String appName) {
        Utils.checkNotNull(appName, "appName");
        this.appName = Optional.ofNullable(appName);
        return this;
    }

    public Applications withAppName(Optional<? extends String> appName) {
        Utils.checkNotNull(appName, "appName");
        this.appName = appName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Applications other = (Applications) o;
        return 
            java.util.Objects.deepEquals(this.appApiKey, other.appApiKey) &&
            java.util.Objects.deepEquals(this.appId, other.appId) &&
            java.util.Objects.deepEquals(this.appName, other.appName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            appApiKey,
            appId,
            appName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Applications.class,
                "appApiKey", appApiKey,
                "appId", appId,
                "appName", appName);
    }
    
    public final static class Builder {
 
        private String appApiKey;
 
        private String appId;
 
        private Optional<? extends String> appName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder appApiKey(String appApiKey) {
            Utils.checkNotNull(appApiKey, "appApiKey");
            this.appApiKey = appApiKey;
            return this;
        }

        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        public Builder appName(String appName) {
            Utils.checkNotNull(appName, "appName");
            this.appName = Optional.ofNullable(appName);
            return this;
        }

        public Builder appName(Optional<? extends String> appName) {
            Utils.checkNotNull(appName, "appName");
            this.appName = appName;
            return this;
        }
        
        public Applications build() {
            return new Applications(
                appApiKey,
                appId,
                appName);
        }
    }
}

