/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceDixa {

    /**
     * Dixa API token
     */
    @JsonProperty("api_token")
    private String apiToken;

    /**
     * Number of days to batch into one request. Max 31.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batch_size")
    private Optional<Long> batchSize;

    @JsonProperty("sourceType")
    private Dixa sourceType;

    /**
     * The connector pulls records updated from this date onwards.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceDixa(
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("batch_size") Optional<Long> batchSize,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(batchSize, "batchSize");
        Utils.checkNotNull(startDate, "startDate");
        this.apiToken = apiToken;
        this.batchSize = batchSize;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceDixa(
            String apiToken,
            OffsetDateTime startDate) {
        this(apiToken, Optional.empty(), startDate);
    }

    /**
     * Dixa API token
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    /**
     * Number of days to batch into one request. Max 31.
     */
    @JsonIgnore
    public Optional<Long> batchSize() {
        return batchSize;
    }

    @JsonIgnore
    public Dixa sourceType() {
        return sourceType;
    }

    /**
     * The connector pulls records updated from this date onwards.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Dixa API token
     */
    public SourceDixa withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * Number of days to batch into one request. Max 31.
     */
    public SourceDixa withBatchSize(long batchSize) {
        Utils.checkNotNull(batchSize, "batchSize");
        this.batchSize = Optional.ofNullable(batchSize);
        return this;
    }

    /**
     * Number of days to batch into one request. Max 31.
     */
    public SourceDixa withBatchSize(Optional<Long> batchSize) {
        Utils.checkNotNull(batchSize, "batchSize");
        this.batchSize = batchSize;
        return this;
    }

    /**
     * The connector pulls records updated from this date onwards.
     */
    public SourceDixa withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceDixa other = (SourceDixa) o;
        return 
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.batchSize, other.batchSize) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiToken,
            batchSize,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceDixa.class,
                "apiToken", apiToken,
                "batchSize", batchSize,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiToken;
 
        private Optional<Long> batchSize;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Dixa API token
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * Number of days to batch into one request. Max 31.
         */
        public Builder batchSize(long batchSize) {
            Utils.checkNotNull(batchSize, "batchSize");
            this.batchSize = Optional.ofNullable(batchSize);
            return this;
        }

        /**
         * Number of days to batch into one request. Max 31.
         */
        public Builder batchSize(Optional<Long> batchSize) {
            Utils.checkNotNull(batchSize, "batchSize");
            this.batchSize = batchSize;
            return this;
        }

        /**
         * The connector pulls records updated from this date onwards.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceDixa build() {
            if (batchSize == null) {
                batchSize = _SINGLETON_VALUE_BatchSize.value();
            }
            return new SourceDixa(
                apiToken,
                batchSize,
                startDate);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_BatchSize =
                new LazySingletonValue<>(
                        "batch_size",
                        "31",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Dixa> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"dixa\"",
                        new TypeReference<Dixa>() {});
    }
}
