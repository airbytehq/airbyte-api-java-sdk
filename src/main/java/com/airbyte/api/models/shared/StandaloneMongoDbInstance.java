/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class StandaloneMongoDbInstance {

    /**
     * The Host of a Mongo database to be replicated.
     */
    @JsonProperty("host")
    private String host;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    private Optional<? extends Instance> instance;

    /**
     * The Port of a Mongo database to be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<? extends Long> port;

    /**
     * Indicates whether TLS encryption protocol will be used to connect to MongoDB. It is recommended to use TLS connection if possible. For more information see &lt;a href="https://docs.airbyte.com/integrations/sources/mongodb-v2"&gt;documentation&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tls")
    private Optional<? extends Boolean> tls;

    @JsonCreator
    public StandaloneMongoDbInstance(
            @JsonProperty("host") String host,
            @JsonProperty("instance") Optional<? extends Instance> instance,
            @JsonProperty("port") Optional<? extends Long> port,
            @JsonProperty("tls") Optional<? extends Boolean> tls) {
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(instance, "instance");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(tls, "tls");
        this.host = host;
        this.instance = instance;
        this.port = port;
        this.tls = tls;
    }
    
    public StandaloneMongoDbInstance(
            String host) {
        this(host, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The Host of a Mongo database to be replicated.
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Instance> instance() {
        return (Optional<Instance>) instance;
    }

    /**
     * The Port of a Mongo database to be replicated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> port() {
        return (Optional<Long>) port;
    }

    /**
     * Indicates whether TLS encryption protocol will be used to connect to MongoDB. It is recommended to use TLS connection if possible. For more information see &lt;a href="https://docs.airbyte.com/integrations/sources/mongodb-v2"&gt;documentation&lt;/a&gt;.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> tls() {
        return (Optional<Boolean>) tls;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Host of a Mongo database to be replicated.
     */
    public StandaloneMongoDbInstance withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    public StandaloneMongoDbInstance withInstance(Instance instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = Optional.ofNullable(instance);
        return this;
    }

    public StandaloneMongoDbInstance withInstance(Optional<? extends Instance> instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = instance;
        return this;
    }

    /**
     * The Port of a Mongo database to be replicated.
     */
    public StandaloneMongoDbInstance withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * The Port of a Mongo database to be replicated.
     */
    public StandaloneMongoDbInstance withPort(Optional<? extends Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * Indicates whether TLS encryption protocol will be used to connect to MongoDB. It is recommended to use TLS connection if possible. For more information see &lt;a href="https://docs.airbyte.com/integrations/sources/mongodb-v2"&gt;documentation&lt;/a&gt;.
     */
    public StandaloneMongoDbInstance withTls(boolean tls) {
        Utils.checkNotNull(tls, "tls");
        this.tls = Optional.ofNullable(tls);
        return this;
    }

    /**
     * Indicates whether TLS encryption protocol will be used to connect to MongoDB. It is recommended to use TLS connection if possible. For more information see &lt;a href="https://docs.airbyte.com/integrations/sources/mongodb-v2"&gt;documentation&lt;/a&gt;.
     */
    public StandaloneMongoDbInstance withTls(Optional<? extends Boolean> tls) {
        Utils.checkNotNull(tls, "tls");
        this.tls = tls;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StandaloneMongoDbInstance other = (StandaloneMongoDbInstance) o;
        return 
            java.util.Objects.deepEquals(this.host, other.host) &&
            java.util.Objects.deepEquals(this.instance, other.instance) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.tls, other.tls);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            host,
            instance,
            port,
            tls);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StandaloneMongoDbInstance.class,
                "host", host,
                "instance", instance,
                "port", port,
                "tls", tls);
    }
    
    public final static class Builder {
 
        private String host;
 
        private Optional<? extends Instance> instance;
 
        private Optional<? extends Long> port;
 
        private Optional<? extends Boolean> tls;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Host of a Mongo database to be replicated.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        public Builder instance(Instance instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = Optional.ofNullable(instance);
            return this;
        }

        public Builder instance(Optional<? extends Instance> instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = instance;
            return this;
        }

        /**
         * The Port of a Mongo database to be replicated.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * The Port of a Mongo database to be replicated.
         */
        public Builder port(Optional<? extends Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * Indicates whether TLS encryption protocol will be used to connect to MongoDB. It is recommended to use TLS connection if possible. For more information see &lt;a href="https://docs.airbyte.com/integrations/sources/mongodb-v2"&gt;documentation&lt;/a&gt;.
         */
        public Builder tls(boolean tls) {
            Utils.checkNotNull(tls, "tls");
            this.tls = Optional.ofNullable(tls);
            return this;
        }

        /**
         * Indicates whether TLS encryption protocol will be used to connect to MongoDB. It is recommended to use TLS connection if possible. For more information see &lt;a href="https://docs.airbyte.com/integrations/sources/mongodb-v2"&gt;documentation&lt;/a&gt;.
         */
        public Builder tls(Optional<? extends Boolean> tls) {
            Utils.checkNotNull(tls, "tls");
            this.tls = tls;
            return this;
        }
        
        public StandaloneMongoDbInstance build() {
            if (instance == null) {
                instance = _SINGLETON_VALUE_Instance.value();
            }
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            if (tls == null) {
                tls = _SINGLETON_VALUE_Tls.value();
            }
            return new StandaloneMongoDbInstance(
                host,
                instance,
                port,
                tls);
        }

        private static final LazySingletonValue<Optional<? extends Instance>> _SINGLETON_VALUE_Instance =
                new LazySingletonValue<>(
                        "instance",
                        "\"standalone\"",
                        new TypeReference<Optional<? extends Instance>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "27017",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Tls =
                new LazySingletonValue<>(
                        "tls",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

