/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class OAuth2Recommended {

    @JsonProperty("auth_type")
    private DestinationDatabricksSchemasAuthType authType;

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("secret")
    private String secret;

    @JsonCreator
    public OAuth2Recommended(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("secret") String secret) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(secret, "secret");
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.clientId = clientId;
        this.secret = secret;
    }

    @JsonIgnore
    public DestinationDatabricksSchemasAuthType authType() {
        return authType;
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String secret() {
        return secret;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OAuth2Recommended withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public OAuth2Recommended withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OAuth2Recommended other = (OAuth2Recommended) o;
        return 
            java.util.Objects.deepEquals(this.authType, other.authType) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.secret, other.secret);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authType,
            clientId,
            secret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OAuth2Recommended.class,
                "authType", authType,
                "clientId", clientId,
                "secret", secret);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String secret;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }
        
        public OAuth2Recommended build() {
            return new OAuth2Recommended(
                clientId,
                secret);
        }

        private static final LazySingletonValue<DestinationDatabricksSchemasAuthType> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"OAUTH\"",
                        new TypeReference<DestinationDatabricksSchemasAuthType>() {});
    }
}

