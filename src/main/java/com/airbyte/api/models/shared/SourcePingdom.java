/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourcePingdom {

    @JsonProperty("api_key")
    private String apiKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("probes")
    private Optional<String> probes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolution")
    private Optional<? extends Resolution> resolution;

    @JsonProperty("sourceType")
    private Pingdom sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourcePingdom(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("probes") Optional<String> probes,
            @JsonProperty("resolution") Optional<? extends Resolution> resolution,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(probes, "probes");
        Utils.checkNotNull(resolution, "resolution");
        Utils.checkNotNull(startDate, "startDate");
        this.apiKey = apiKey;
        this.probes = probes;
        this.resolution = resolution;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourcePingdom(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), startDate);
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    @JsonIgnore
    public Optional<String> probes() {
        return probes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Resolution> resolution() {
        return (Optional<Resolution>) resolution;
    }

    @JsonIgnore
    public Pingdom sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourcePingdom withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    public SourcePingdom withProbes(String probes) {
        Utils.checkNotNull(probes, "probes");
        this.probes = Optional.ofNullable(probes);
        return this;
    }

    public SourcePingdom withProbes(Optional<String> probes) {
        Utils.checkNotNull(probes, "probes");
        this.probes = probes;
        return this;
    }

    public SourcePingdom withResolution(Resolution resolution) {
        Utils.checkNotNull(resolution, "resolution");
        this.resolution = Optional.ofNullable(resolution);
        return this;
    }

    public SourcePingdom withResolution(Optional<? extends Resolution> resolution) {
        Utils.checkNotNull(resolution, "resolution");
        this.resolution = resolution;
        return this;
    }

    public SourcePingdom withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePingdom other = (SourcePingdom) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.probes, other.probes) &&
            Objects.deepEquals(this.resolution, other.resolution) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            probes,
            resolution,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePingdom.class,
                "apiKey", apiKey,
                "probes", probes,
                "resolution", resolution,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> probes = Optional.empty();
 
        private Optional<? extends Resolution> resolution;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        public Builder probes(String probes) {
            Utils.checkNotNull(probes, "probes");
            this.probes = Optional.ofNullable(probes);
            return this;
        }

        public Builder probes(Optional<String> probes) {
            Utils.checkNotNull(probes, "probes");
            this.probes = probes;
            return this;
        }

        public Builder resolution(Resolution resolution) {
            Utils.checkNotNull(resolution, "resolution");
            this.resolution = Optional.ofNullable(resolution);
            return this;
        }

        public Builder resolution(Optional<? extends Resolution> resolution) {
            Utils.checkNotNull(resolution, "resolution");
            this.resolution = resolution;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourcePingdom build() {
            if (resolution == null) {
                resolution = _SINGLETON_VALUE_Resolution.value();
            }
            return new SourcePingdom(
                apiKey,
                probes,
                resolution,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends Resolution>> _SINGLETON_VALUE_Resolution =
                new LazySingletonValue<>(
                        "resolution",
                        "\"hour\"",
                        new TypeReference<Optional<? extends Resolution>>() {});

        private static final LazySingletonValue<Pingdom> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"pingdom\"",
                        new TypeReference<Pingdom>() {});
    }
}
