/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceKyve {

    /**
     * The maximum amount of pages to go trough. Set to 'null' for all pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_pages")
    private Optional<? extends Long> maxPages;

    /**
     * The pagesize for pagination, smaller numbers are used in integration tests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    private Optional<? extends Long> pageSize;

    /**
     * The IDs of the KYVE storage pool you want to archive. (Comma separated)
     */
    @JsonProperty("pool_ids")
    private String poolIds;

    @JsonProperty("sourceType")
    private Kyve sourceType;

    /**
     * The start-id defines, from which bundle id the pipeline should start to extract the data. (Comma separated)
     */
    @JsonProperty("start_ids")
    private String startIds;

    /**
     * URL to the KYVE Chain API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url_base")
    private Optional<? extends String> urlBase;

    @JsonCreator
    public SourceKyve(
            @JsonProperty("max_pages") Optional<? extends Long> maxPages,
            @JsonProperty("page_size") Optional<? extends Long> pageSize,
            @JsonProperty("pool_ids") String poolIds,
            @JsonProperty("start_ids") String startIds,
            @JsonProperty("url_base") Optional<? extends String> urlBase) {
        Utils.checkNotNull(maxPages, "maxPages");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(poolIds, "poolIds");
        Utils.checkNotNull(startIds, "startIds");
        Utils.checkNotNull(urlBase, "urlBase");
        this.maxPages = maxPages;
        this.pageSize = pageSize;
        this.poolIds = poolIds;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startIds = startIds;
        this.urlBase = urlBase;
    }
    
    public SourceKyve(
            String poolIds,
            String startIds) {
        this(Optional.empty(), Optional.empty(), poolIds, startIds, Optional.empty());
    }

    /**
     * The maximum amount of pages to go trough. Set to 'null' for all pages.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> maxPages() {
        return (Optional<Long>) maxPages;
    }

    /**
     * The pagesize for pagination, smaller numbers are used in integration tests.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> pageSize() {
        return (Optional<Long>) pageSize;
    }

    /**
     * The IDs of the KYVE storage pool you want to archive. (Comma separated)
     */
    @JsonIgnore
    public String poolIds() {
        return poolIds;
    }

    @JsonIgnore
    public Kyve sourceType() {
        return sourceType;
    }

    /**
     * The start-id defines, from which bundle id the pipeline should start to extract the data. (Comma separated)
     */
    @JsonIgnore
    public String startIds() {
        return startIds;
    }

    /**
     * URL to the KYVE Chain API.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> urlBase() {
        return (Optional<String>) urlBase;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The maximum amount of pages to go trough. Set to 'null' for all pages.
     */
    public SourceKyve withMaxPages(long maxPages) {
        Utils.checkNotNull(maxPages, "maxPages");
        this.maxPages = Optional.ofNullable(maxPages);
        return this;
    }

    /**
     * The maximum amount of pages to go trough. Set to 'null' for all pages.
     */
    public SourceKyve withMaxPages(Optional<? extends Long> maxPages) {
        Utils.checkNotNull(maxPages, "maxPages");
        this.maxPages = maxPages;
        return this;
    }

    /**
     * The pagesize for pagination, smaller numbers are used in integration tests.
     */
    public SourceKyve withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * The pagesize for pagination, smaller numbers are used in integration tests.
     */
    public SourceKyve withPageSize(Optional<? extends Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The IDs of the KYVE storage pool you want to archive. (Comma separated)
     */
    public SourceKyve withPoolIds(String poolIds) {
        Utils.checkNotNull(poolIds, "poolIds");
        this.poolIds = poolIds;
        return this;
    }

    /**
     * The start-id defines, from which bundle id the pipeline should start to extract the data. (Comma separated)
     */
    public SourceKyve withStartIds(String startIds) {
        Utils.checkNotNull(startIds, "startIds");
        this.startIds = startIds;
        return this;
    }

    /**
     * URL to the KYVE Chain API.
     */
    public SourceKyve withUrlBase(String urlBase) {
        Utils.checkNotNull(urlBase, "urlBase");
        this.urlBase = Optional.ofNullable(urlBase);
        return this;
    }

    /**
     * URL to the KYVE Chain API.
     */
    public SourceKyve withUrlBase(Optional<? extends String> urlBase) {
        Utils.checkNotNull(urlBase, "urlBase");
        this.urlBase = urlBase;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceKyve other = (SourceKyve) o;
        return 
            java.util.Objects.deepEquals(this.maxPages, other.maxPages) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.poolIds, other.poolIds) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startIds, other.startIds) &&
            java.util.Objects.deepEquals(this.urlBase, other.urlBase);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            maxPages,
            pageSize,
            poolIds,
            sourceType,
            startIds,
            urlBase);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceKyve.class,
                "maxPages", maxPages,
                "pageSize", pageSize,
                "poolIds", poolIds,
                "sourceType", sourceType,
                "startIds", startIds,
                "urlBase", urlBase);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> maxPages = Optional.empty();
 
        private Optional<? extends Long> pageSize;
 
        private String poolIds;
 
        private String startIds;
 
        private Optional<? extends String> urlBase;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The maximum amount of pages to go trough. Set to 'null' for all pages.
         */
        public Builder maxPages(long maxPages) {
            Utils.checkNotNull(maxPages, "maxPages");
            this.maxPages = Optional.ofNullable(maxPages);
            return this;
        }

        /**
         * The maximum amount of pages to go trough. Set to 'null' for all pages.
         */
        public Builder maxPages(Optional<? extends Long> maxPages) {
            Utils.checkNotNull(maxPages, "maxPages");
            this.maxPages = maxPages;
            return this;
        }

        /**
         * The pagesize for pagination, smaller numbers are used in integration tests.
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * The pagesize for pagination, smaller numbers are used in integration tests.
         */
        public Builder pageSize(Optional<? extends Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * The IDs of the KYVE storage pool you want to archive. (Comma separated)
         */
        public Builder poolIds(String poolIds) {
            Utils.checkNotNull(poolIds, "poolIds");
            this.poolIds = poolIds;
            return this;
        }

        /**
         * The start-id defines, from which bundle id the pipeline should start to extract the data. (Comma separated)
         */
        public Builder startIds(String startIds) {
            Utils.checkNotNull(startIds, "startIds");
            this.startIds = startIds;
            return this;
        }

        /**
         * URL to the KYVE Chain API.
         */
        public Builder urlBase(String urlBase) {
            Utils.checkNotNull(urlBase, "urlBase");
            this.urlBase = Optional.ofNullable(urlBase);
            return this;
        }

        /**
         * URL to the KYVE Chain API.
         */
        public Builder urlBase(Optional<? extends String> urlBase) {
            Utils.checkNotNull(urlBase, "urlBase");
            this.urlBase = urlBase;
            return this;
        }
        
        public SourceKyve build() {
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            if (urlBase == null) {
                urlBase = _SINGLETON_VALUE_UrlBase.value();
            }
            return new SourceKyve(
                maxPages,
                pageSize,
                poolIds,
                startIds,
                urlBase);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "page_size",
                        "100",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Kyve> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"kyve\"",
                        new TypeReference<Kyve>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_UrlBase =
                new LazySingletonValue<>(
                        "url_base",
                        "\"https://api.kyve.network\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

