/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourceOpenExchangeRates {

    /**
     * App ID provided by Open Exchange Rates
     */
    @JsonProperty("app_id")
    private String appId;

    /**
     * Change base currency (3-letter code, default is USD - only modifiable in paid plans)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base")
    private Optional<String> base;

    @JsonProperty("sourceType")
    private OpenExchangeRates sourceType;

    /**
     * Start getting data from that date.
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceOpenExchangeRates(
            @JsonProperty("app_id") String appId,
            @JsonProperty("base") Optional<String> base,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(base, "base");
        Utils.checkNotNull(startDate, "startDate");
        this.appId = appId;
        this.base = base;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceOpenExchangeRates(
            String appId,
            String startDate) {
        this(appId, Optional.empty(), startDate);
    }

    /**
     * App ID provided by Open Exchange Rates
     */
    @JsonIgnore
    public String appId() {
        return appId;
    }

    /**
     * Change base currency (3-letter code, default is USD - only modifiable in paid plans)
     */
    @JsonIgnore
    public Optional<String> base() {
        return base;
    }

    @JsonIgnore
    public OpenExchangeRates sourceType() {
        return sourceType;
    }

    /**
     * Start getting data from that date.
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * App ID provided by Open Exchange Rates
     */
    public SourceOpenExchangeRates withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    /**
     * Change base currency (3-letter code, default is USD - only modifiable in paid plans)
     */
    public SourceOpenExchangeRates withBase(String base) {
        Utils.checkNotNull(base, "base");
        this.base = Optional.ofNullable(base);
        return this;
    }

    /**
     * Change base currency (3-letter code, default is USD - only modifiable in paid plans)
     */
    public SourceOpenExchangeRates withBase(Optional<String> base) {
        Utils.checkNotNull(base, "base");
        this.base = base;
        return this;
    }

    /**
     * Start getting data from that date.
     */
    public SourceOpenExchangeRates withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOpenExchangeRates other = (SourceOpenExchangeRates) o;
        return 
            Objects.deepEquals(this.appId, other.appId) &&
            Objects.deepEquals(this.base, other.base) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appId,
            base,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOpenExchangeRates.class,
                "appId", appId,
                "base", base,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String appId;
 
        private Optional<String> base;
 
        private String startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * App ID provided by Open Exchange Rates
         */
        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        /**
         * Change base currency (3-letter code, default is USD - only modifiable in paid plans)
         */
        public Builder base(String base) {
            Utils.checkNotNull(base, "base");
            this.base = Optional.ofNullable(base);
            return this;
        }

        /**
         * Change base currency (3-letter code, default is USD - only modifiable in paid plans)
         */
        public Builder base(Optional<String> base) {
            Utils.checkNotNull(base, "base");
            this.base = base;
            return this;
        }

        /**
         * Start getting data from that date.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceOpenExchangeRates build() {
            if (base == null) {
                base = _SINGLETON_VALUE_Base.value();
            }
            return new SourceOpenExchangeRates(
                appId,
                base,
                startDate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Base =
                new LazySingletonValue<>(
                        "base",
                        "\"USD\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<OpenExchangeRates> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"open-exchange-rates\"",
                        new TypeReference<OpenExchangeRates>() {});
    }
}
