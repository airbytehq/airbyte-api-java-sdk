/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SourceRailz {

    /**
     * Client ID (client_id)
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * Secret key (secret_key)
     */
    @JsonProperty("secret_key")
    private String secretKey;

    @JsonProperty("sourceType")
    private Railz sourceType;

    /**
     * Start date
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceRailz(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("secret_key") String secretKey,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(secretKey, "secretKey");
        Utils.checkNotNull(startDate, "startDate");
        this.clientId = clientId;
        this.secretKey = secretKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * Client ID (client_id)
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * Secret key (secret_key)
     */
    @JsonIgnore
    public String secretKey() {
        return secretKey;
    }

    @JsonIgnore
    public Railz sourceType() {
        return sourceType;
    }

    /**
     * Start date
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Client ID (client_id)
     */
    public SourceRailz withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Secret key (secret_key)
     */
    public SourceRailz withSecretKey(String secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = secretKey;
        return this;
    }

    /**
     * Start date
     */
    public SourceRailz withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceRailz other = (SourceRailz) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.secretKey, other.secretKey) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            secretKey,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceRailz.class,
                "clientId", clientId,
                "secretKey", secretKey,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String secretKey;
 
        private String startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Client ID (client_id)
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Secret key (secret_key)
         */
        public Builder secretKey(String secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = secretKey;
            return this;
        }

        /**
         * Start date
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceRailz build() {
            return new SourceRailz(
                clientId,
                secretKey,
                startDate);
        }

        private static final LazySingletonValue<Railz> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"railz\"",
                        new TypeReference<Railz>() {});
    }
}

