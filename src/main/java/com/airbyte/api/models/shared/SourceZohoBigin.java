/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceZohoBigin {

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_refresh_token")
    private String clientRefreshToken;

    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * The data center where the Bigin account's resources are hosted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_center")
    private Optional<? extends SourceZohoBiginDataCenter> dataCenter;

    @JsonProperty("module_name")
    private String moduleName;

    @JsonProperty("sourceType")
    private ZohoBigin sourceType;

    @JsonCreator
    public SourceZohoBigin(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_refresh_token") String clientRefreshToken,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("data_center") Optional<? extends SourceZohoBiginDataCenter> dataCenter,
            @JsonProperty("module_name") String moduleName) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientRefreshToken, "clientRefreshToken");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(dataCenter, "dataCenter");
        Utils.checkNotNull(moduleName, "moduleName");
        this.clientId = clientId;
        this.clientRefreshToken = clientRefreshToken;
        this.clientSecret = clientSecret;
        this.dataCenter = dataCenter;
        this.moduleName = moduleName;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceZohoBigin(
            String clientId,
            String clientRefreshToken,
            String clientSecret,
            String moduleName) {
        this(clientId, clientRefreshToken, clientSecret, Optional.empty(), moduleName);
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String clientRefreshToken() {
        return clientRefreshToken;
    }

    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * The data center where the Bigin account's resources are hosted
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceZohoBiginDataCenter> dataCenter() {
        return (Optional<SourceZohoBiginDataCenter>) dataCenter;
    }

    @JsonIgnore
    public String moduleName() {
        return moduleName;
    }

    @JsonIgnore
    public ZohoBigin sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceZohoBigin withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public SourceZohoBigin withClientRefreshToken(String clientRefreshToken) {
        Utils.checkNotNull(clientRefreshToken, "clientRefreshToken");
        this.clientRefreshToken = clientRefreshToken;
        return this;
    }

    public SourceZohoBigin withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * The data center where the Bigin account's resources are hosted
     */
    public SourceZohoBigin withDataCenter(SourceZohoBiginDataCenter dataCenter) {
        Utils.checkNotNull(dataCenter, "dataCenter");
        this.dataCenter = Optional.ofNullable(dataCenter);
        return this;
    }

    /**
     * The data center where the Bigin account's resources are hosted
     */
    public SourceZohoBigin withDataCenter(Optional<? extends SourceZohoBiginDataCenter> dataCenter) {
        Utils.checkNotNull(dataCenter, "dataCenter");
        this.dataCenter = dataCenter;
        return this;
    }

    public SourceZohoBigin withModuleName(String moduleName) {
        Utils.checkNotNull(moduleName, "moduleName");
        this.moduleName = moduleName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZohoBigin other = (SourceZohoBigin) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientRefreshToken, other.clientRefreshToken) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.dataCenter, other.dataCenter) &&
            Objects.deepEquals(this.moduleName, other.moduleName) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientRefreshToken,
            clientSecret,
            dataCenter,
            moduleName,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZohoBigin.class,
                "clientId", clientId,
                "clientRefreshToken", clientRefreshToken,
                "clientSecret", clientSecret,
                "dataCenter", dataCenter,
                "moduleName", moduleName,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientRefreshToken;
 
        private String clientSecret;
 
        private Optional<? extends SourceZohoBiginDataCenter> dataCenter;
 
        private String moduleName;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientRefreshToken(String clientRefreshToken) {
            Utils.checkNotNull(clientRefreshToken, "clientRefreshToken");
            this.clientRefreshToken = clientRefreshToken;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The data center where the Bigin account's resources are hosted
         */
        public Builder dataCenter(SourceZohoBiginDataCenter dataCenter) {
            Utils.checkNotNull(dataCenter, "dataCenter");
            this.dataCenter = Optional.ofNullable(dataCenter);
            return this;
        }

        /**
         * The data center where the Bigin account's resources are hosted
         */
        public Builder dataCenter(Optional<? extends SourceZohoBiginDataCenter> dataCenter) {
            Utils.checkNotNull(dataCenter, "dataCenter");
            this.dataCenter = dataCenter;
            return this;
        }

        public Builder moduleName(String moduleName) {
            Utils.checkNotNull(moduleName, "moduleName");
            this.moduleName = moduleName;
            return this;
        }
        
        public SourceZohoBigin build() {
            if (dataCenter == null) {
                dataCenter = _SINGLETON_VALUE_DataCenter.value();
            }
            return new SourceZohoBigin(
                clientId,
                clientRefreshToken,
                clientSecret,
                dataCenter,
                moduleName);
        }

        private static final LazySingletonValue<Optional<? extends SourceZohoBiginDataCenter>> _SINGLETON_VALUE_DataCenter =
                new LazySingletonValue<>(
                        "data_center",
                        "\"com\"",
                        new TypeReference<Optional<? extends SourceZohoBiginDataCenter>>() {});

        private static final LazySingletonValue<ZohoBigin> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"zoho-bigin\"",
                        new TypeReference<ZohoBigin>() {});
    }
}
