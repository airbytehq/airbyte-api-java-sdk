/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourcePunkApi {

    /**
     * To extract specific data with Unique ID
     */
    @JsonProperty("brewed_after")
    private String brewedAfter;

    /**
     * To extract specific data with Unique ID
     */
    @JsonProperty("brewed_before")
    private String brewedBefore;

    /**
     * To extract specific data with Unique ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonProperty("sourceType")
    private PunkApi sourceType;

    public SourcePunkApi(
            @JsonProperty("brewed_after") String brewedAfter,
            @JsonProperty("brewed_before") String brewedBefore,
            @JsonProperty("id") Optional<? extends String> id) {
        Utils.checkNotNull(brewedAfter, "brewedAfter");
        Utils.checkNotNull(brewedBefore, "brewedBefore");
        Utils.checkNotNull(id, "id");
        this.brewedAfter = brewedAfter;
        this.brewedBefore = brewedBefore;
        this.id = id;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * To extract specific data with Unique ID
     */
    public String brewedAfter() {
        return brewedAfter;
    }

    /**
     * To extract specific data with Unique ID
     */
    public String brewedBefore() {
        return brewedBefore;
    }

    /**
     * To extract specific data with Unique ID
     */
    public Optional<? extends String> id() {
        return id;
    }

    public PunkApi sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * To extract specific data with Unique ID
     */
    public SourcePunkApi withBrewedAfter(String brewedAfter) {
        Utils.checkNotNull(brewedAfter, "brewedAfter");
        this.brewedAfter = brewedAfter;
        return this;
    }

    /**
     * To extract specific data with Unique ID
     */
    public SourcePunkApi withBrewedBefore(String brewedBefore) {
        Utils.checkNotNull(brewedBefore, "brewedBefore");
        this.brewedBefore = brewedBefore;
        return this;
    }

    /**
     * To extract specific data with Unique ID
     */
    public SourcePunkApi withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * To extract specific data with Unique ID
     */
    public SourcePunkApi withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePunkApi other = (SourcePunkApi) o;
        return 
            java.util.Objects.deepEquals(this.brewedAfter, other.brewedAfter) &&
            java.util.Objects.deepEquals(this.brewedBefore, other.brewedBefore) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            brewedAfter,
            brewedBefore,
            id,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePunkApi.class,
                "brewedAfter", brewedAfter,
                "brewedBefore", brewedBefore,
                "id", id,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String brewedAfter;
 
        private String brewedBefore;
 
        private Optional<? extends String> id = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * To extract specific data with Unique ID
         */
        public Builder brewedAfter(String brewedAfter) {
            Utils.checkNotNull(brewedAfter, "brewedAfter");
            this.brewedAfter = brewedAfter;
            return this;
        }

        /**
         * To extract specific data with Unique ID
         */
        public Builder brewedBefore(String brewedBefore) {
            Utils.checkNotNull(brewedBefore, "brewedBefore");
            this.brewedBefore = brewedBefore;
            return this;
        }

        /**
         * To extract specific data with Unique ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * To extract specific data with Unique ID
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public SourcePunkApi build() {
            return new SourcePunkApi(
                brewedAfter,
                brewedBefore,
                id);
        }

        private static final LazySingletonValue<PunkApi> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"punk-api\"",
                        new TypeReference<PunkApi>() {});
    }
}

