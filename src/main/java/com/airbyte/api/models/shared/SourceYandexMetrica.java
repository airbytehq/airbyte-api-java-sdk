/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;


public class SourceYandexMetrica {

    /**
     * Your Yandex Metrica API access token
     */
    @JsonProperty("auth_token")
    private String authToken;

    /**
     * Counter ID
     */
    @JsonProperty("counter_id")
    private String counterId;

    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD". If not provided will sync till most recent date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<? extends LocalDate> endDate;

    @JsonProperty("sourceType")
    private YandexMetrica sourceType;

    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD".
     */
    @JsonProperty("start_date")
    private LocalDate startDate;

    public SourceYandexMetrica(
            @JsonProperty("auth_token") String authToken,
            @JsonProperty("counter_id") String counterId,
            @JsonProperty("end_date") Optional<? extends LocalDate> endDate,
            @JsonProperty("start_date") LocalDate startDate) {
        Utils.checkNotNull(authToken, "authToken");
        Utils.checkNotNull(counterId, "counterId");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(startDate, "startDate");
        this.authToken = authToken;
        this.counterId = counterId;
        this.endDate = endDate;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * Your Yandex Metrica API access token
     */
    public String authToken() {
        return authToken;
    }

    /**
     * Counter ID
     */
    public String counterId() {
        return counterId;
    }

    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD". If not provided will sync till most recent date.
     */
    public Optional<? extends LocalDate> endDate() {
        return endDate;
    }

    public YandexMetrica sourceType() {
        return sourceType;
    }

    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD".
     */
    public LocalDate startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Your Yandex Metrica API access token
     */
    public SourceYandexMetrica withAuthToken(String authToken) {
        Utils.checkNotNull(authToken, "authToken");
        this.authToken = authToken;
        return this;
    }

    /**
     * Counter ID
     */
    public SourceYandexMetrica withCounterId(String counterId) {
        Utils.checkNotNull(counterId, "counterId");
        this.counterId = counterId;
        return this;
    }

    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD". If not provided will sync till most recent date.
     */
    public SourceYandexMetrica withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD". If not provided will sync till most recent date.
     */
    public SourceYandexMetrica withEndDate(Optional<? extends LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD".
     */
    public SourceYandexMetrica withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceYandexMetrica other = (SourceYandexMetrica) o;
        return 
            java.util.Objects.deepEquals(this.authToken, other.authToken) &&
            java.util.Objects.deepEquals(this.counterId, other.counterId) &&
            java.util.Objects.deepEquals(this.endDate, other.endDate) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authToken,
            counterId,
            endDate,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceYandexMetrica.class,
                "authToken", authToken,
                "counterId", counterId,
                "endDate", endDate,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String authToken;
 
        private String counterId;
 
        private Optional<? extends LocalDate> endDate = Optional.empty();
 
        private LocalDate startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your Yandex Metrica API access token
         */
        public Builder authToken(String authToken) {
            Utils.checkNotNull(authToken, "authToken");
            this.authToken = authToken;
            return this;
        }

        /**
         * Counter ID
         */
        public Builder counterId(String counterId) {
            Utils.checkNotNull(counterId, "counterId");
            this.counterId = counterId;
            return this;
        }

        /**
         * Starting point for your data replication, in format of "YYYY-MM-DD". If not provided will sync till most recent date.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Starting point for your data replication, in format of "YYYY-MM-DD". If not provided will sync till most recent date.
         */
        public Builder endDate(Optional<? extends LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Starting point for your data replication, in format of "YYYY-MM-DD".
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceYandexMetrica build() {
            return new SourceYandexMetrica(
                authToken,
                counterId,
                endDate,
                startDate);
        }

        private static final LazySingletonValue<YandexMetrica> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"yandex-metrica\"",
                        new TypeReference<YandexMetrica>() {});
    }
}

