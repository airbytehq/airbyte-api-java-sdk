/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceMysqlReadChangesUsingChangeDataCaptureCDC
 * 
 * <p>&lt;i&gt;Recommended&lt;/i&gt; - Incrementally reads new inserts, updates, and deletes using MySQL's &lt;a href="https://docs.airbyte.com/integrations/sources/mssql/#change-data-capture-cdc"&gt; change data capture feature&lt;/a&gt;. This must be enabled on your database.
 */
public class SourceMysqlReadChangesUsingChangeDataCaptureCDC {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initial_load_timeout_hours")
    private Optional<Long> initialLoadTimeoutHours;

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invalid_cdc_cursor_position_behavior")
    private Optional<? extends SourceMysqlInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<? extends SourceMysqlSchemasMethod> method;

    /**
     * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("server_timezone")
    private Optional<String> serverTimezone;

    @JsonCreator
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC(
            @JsonProperty("initial_load_timeout_hours") Optional<Long> initialLoadTimeoutHours,
            @JsonProperty("invalid_cdc_cursor_position_behavior") Optional<? extends SourceMysqlInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior,
            @JsonProperty("method") Optional<? extends SourceMysqlSchemasMethod> method,
            @JsonProperty("server_timezone") Optional<String> serverTimezone) {
        Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
        Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(serverTimezone, "serverTimezone");
        this.additionalProperties = new HashMap<>();
        this.initialLoadTimeoutHours = initialLoadTimeoutHours;
        this.invalidCdcCursorPositionBehavior = invalidCdcCursorPositionBehavior;
        this.method = method;
        this.serverTimezone = serverTimezone;
    }
    
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
     */
    @JsonIgnore
    public Optional<Long> initialLoadTimeoutHours() {
        return initialLoadTimeoutHours;
    }

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceMysqlInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior() {
        return (Optional<SourceMysqlInvalidCDCPositionBehaviorAdvanced>) invalidCdcCursorPositionBehavior;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceMysqlSchemasMethod> method() {
        return (Optional<SourceMysqlSchemasMethod>) method;
    }

    /**
     * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
     */
    @JsonIgnore
    public Optional<String> serverTimezone() {
        return serverTimezone;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
     */
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withInitialLoadTimeoutHours(long initialLoadTimeoutHours) {
        Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
        this.initialLoadTimeoutHours = Optional.ofNullable(initialLoadTimeoutHours);
        return this;
    }

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
     */
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withInitialLoadTimeoutHours(Optional<Long> initialLoadTimeoutHours) {
        Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
        this.initialLoadTimeoutHours = initialLoadTimeoutHours;
        return this;
    }

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withInvalidCdcCursorPositionBehavior(SourceMysqlInvalidCDCPositionBehaviorAdvanced invalidCdcCursorPositionBehavior) {
        Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
        this.invalidCdcCursorPositionBehavior = Optional.ofNullable(invalidCdcCursorPositionBehavior);
        return this;
    }

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withInvalidCdcCursorPositionBehavior(Optional<? extends SourceMysqlInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior) {
        Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
        this.invalidCdcCursorPositionBehavior = invalidCdcCursorPositionBehavior;
        return this;
    }

    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withMethod(SourceMysqlSchemasMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }

    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withMethod(Optional<? extends SourceMysqlSchemasMethod> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
     */
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withServerTimezone(String serverTimezone) {
        Utils.checkNotNull(serverTimezone, "serverTimezone");
        this.serverTimezone = Optional.ofNullable(serverTimezone);
        return this;
    }

    /**
     * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
     */
    public SourceMysqlReadChangesUsingChangeDataCaptureCDC withServerTimezone(Optional<String> serverTimezone) {
        Utils.checkNotNull(serverTimezone, "serverTimezone");
        this.serverTimezone = serverTimezone;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMysqlReadChangesUsingChangeDataCaptureCDC other = (SourceMysqlReadChangesUsingChangeDataCaptureCDC) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.initialLoadTimeoutHours, other.initialLoadTimeoutHours) &&
            Objects.deepEquals(this.invalidCdcCursorPositionBehavior, other.invalidCdcCursorPositionBehavior) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.serverTimezone, other.serverTimezone);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            initialLoadTimeoutHours,
            invalidCdcCursorPositionBehavior,
            method,
            serverTimezone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMysqlReadChangesUsingChangeDataCaptureCDC.class,
                "additionalProperties", additionalProperties,
                "initialLoadTimeoutHours", initialLoadTimeoutHours,
                "invalidCdcCursorPositionBehavior", invalidCdcCursorPositionBehavior,
                "method", method,
                "serverTimezone", serverTimezone);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<Long> initialLoadTimeoutHours;
 
        private Optional<? extends SourceMysqlInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior;
 
        private Optional<? extends SourceMysqlSchemasMethod> method;
 
        private Optional<String> serverTimezone = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
         */
        public Builder initialLoadTimeoutHours(long initialLoadTimeoutHours) {
            Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
            this.initialLoadTimeoutHours = Optional.ofNullable(initialLoadTimeoutHours);
            return this;
        }

        /**
         * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
         */
        public Builder initialLoadTimeoutHours(Optional<Long> initialLoadTimeoutHours) {
            Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
            this.initialLoadTimeoutHours = initialLoadTimeoutHours;
            return this;
        }

        /**
         * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
         */
        public Builder invalidCdcCursorPositionBehavior(SourceMysqlInvalidCDCPositionBehaviorAdvanced invalidCdcCursorPositionBehavior) {
            Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
            this.invalidCdcCursorPositionBehavior = Optional.ofNullable(invalidCdcCursorPositionBehavior);
            return this;
        }

        /**
         * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
         */
        public Builder invalidCdcCursorPositionBehavior(Optional<? extends SourceMysqlInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior) {
            Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
            this.invalidCdcCursorPositionBehavior = invalidCdcCursorPositionBehavior;
            return this;
        }

        public Builder method(SourceMysqlSchemasMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        public Builder method(Optional<? extends SourceMysqlSchemasMethod> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
         */
        public Builder serverTimezone(String serverTimezone) {
            Utils.checkNotNull(serverTimezone, "serverTimezone");
            this.serverTimezone = Optional.ofNullable(serverTimezone);
            return this;
        }

        /**
         * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
         */
        public Builder serverTimezone(Optional<String> serverTimezone) {
            Utils.checkNotNull(serverTimezone, "serverTimezone");
            this.serverTimezone = serverTimezone;
            return this;
        }
        
        public SourceMysqlReadChangesUsingChangeDataCaptureCDC build() {
            if (initialLoadTimeoutHours == null) {
                initialLoadTimeoutHours = _SINGLETON_VALUE_InitialLoadTimeoutHours.value();
            }
            if (invalidCdcCursorPositionBehavior == null) {
                invalidCdcCursorPositionBehavior = _SINGLETON_VALUE_InvalidCdcCursorPositionBehavior.value();
            }
            if (method == null) {
                method = _SINGLETON_VALUE_Method.value();
            }
            return new SourceMysqlReadChangesUsingChangeDataCaptureCDC(
                initialLoadTimeoutHours,
                invalidCdcCursorPositionBehavior,
                method,
                serverTimezone)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_InitialLoadTimeoutHours =
                new LazySingletonValue<>(
                        "initial_load_timeout_hours",
                        "8",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<? extends SourceMysqlInvalidCDCPositionBehaviorAdvanced>> _SINGLETON_VALUE_InvalidCdcCursorPositionBehavior =
                new LazySingletonValue<>(
                        "invalid_cdc_cursor_position_behavior",
                        "\"Fail sync\"",
                        new TypeReference<Optional<? extends SourceMysqlInvalidCDCPositionBehaviorAdvanced>>() {});

        private static final LazySingletonValue<Optional<? extends SourceMysqlSchemasMethod>> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"CDC\"",
                        new TypeReference<Optional<? extends SourceMysqlSchemasMethod>>() {});
    }
}
