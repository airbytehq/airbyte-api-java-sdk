/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceShutterstock {

    /**
     * Your OAuth 2.0 token for accessing the Shutterstock API. Obtain this token from your Shutterstock developer account.
     */
    @JsonProperty("api_token")
    private String apiToken;

    /**
     * The query for image search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_for_audio_search")
    private Optional<String> queryForAudioSearch;

    /**
     * The query for catalog search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_for_catalog_search")
    private Optional<String> queryForCatalogSearch;

    /**
     * The query for image search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_for_image_search")
    private Optional<String> queryForImageSearch;

    /**
     * The Query for `videos_search` stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_for_video_search")
    private Optional<String> queryForVideoSearch;

    @JsonProperty("sourceType")
    private Shutterstock sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceShutterstock(
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("query_for_audio_search") Optional<String> queryForAudioSearch,
            @JsonProperty("query_for_catalog_search") Optional<String> queryForCatalogSearch,
            @JsonProperty("query_for_image_search") Optional<String> queryForImageSearch,
            @JsonProperty("query_for_video_search") Optional<String> queryForVideoSearch,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(queryForAudioSearch, "queryForAudioSearch");
        Utils.checkNotNull(queryForCatalogSearch, "queryForCatalogSearch");
        Utils.checkNotNull(queryForImageSearch, "queryForImageSearch");
        Utils.checkNotNull(queryForVideoSearch, "queryForVideoSearch");
        Utils.checkNotNull(startDate, "startDate");
        this.apiToken = apiToken;
        this.queryForAudioSearch = queryForAudioSearch;
        this.queryForCatalogSearch = queryForCatalogSearch;
        this.queryForImageSearch = queryForImageSearch;
        this.queryForVideoSearch = queryForVideoSearch;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceShutterstock(
            String apiToken,
            OffsetDateTime startDate) {
        this(apiToken, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), startDate);
    }

    /**
     * Your OAuth 2.0 token for accessing the Shutterstock API. Obtain this token from your Shutterstock developer account.
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    /**
     * The query for image search
     */
    @JsonIgnore
    public Optional<String> queryForAudioSearch() {
        return queryForAudioSearch;
    }

    /**
     * The query for catalog search
     */
    @JsonIgnore
    public Optional<String> queryForCatalogSearch() {
        return queryForCatalogSearch;
    }

    /**
     * The query for image search
     */
    @JsonIgnore
    public Optional<String> queryForImageSearch() {
        return queryForImageSearch;
    }

    /**
     * The Query for `videos_search` stream
     */
    @JsonIgnore
    public Optional<String> queryForVideoSearch() {
        return queryForVideoSearch;
    }

    @JsonIgnore
    public Shutterstock sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Your OAuth 2.0 token for accessing the Shutterstock API. Obtain this token from your Shutterstock developer account.
     */
    public SourceShutterstock withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * The query for image search
     */
    public SourceShutterstock withQueryForAudioSearch(String queryForAudioSearch) {
        Utils.checkNotNull(queryForAudioSearch, "queryForAudioSearch");
        this.queryForAudioSearch = Optional.ofNullable(queryForAudioSearch);
        return this;
    }

    /**
     * The query for image search
     */
    public SourceShutterstock withQueryForAudioSearch(Optional<String> queryForAudioSearch) {
        Utils.checkNotNull(queryForAudioSearch, "queryForAudioSearch");
        this.queryForAudioSearch = queryForAudioSearch;
        return this;
    }

    /**
     * The query for catalog search
     */
    public SourceShutterstock withQueryForCatalogSearch(String queryForCatalogSearch) {
        Utils.checkNotNull(queryForCatalogSearch, "queryForCatalogSearch");
        this.queryForCatalogSearch = Optional.ofNullable(queryForCatalogSearch);
        return this;
    }

    /**
     * The query for catalog search
     */
    public SourceShutterstock withQueryForCatalogSearch(Optional<String> queryForCatalogSearch) {
        Utils.checkNotNull(queryForCatalogSearch, "queryForCatalogSearch");
        this.queryForCatalogSearch = queryForCatalogSearch;
        return this;
    }

    /**
     * The query for image search
     */
    public SourceShutterstock withQueryForImageSearch(String queryForImageSearch) {
        Utils.checkNotNull(queryForImageSearch, "queryForImageSearch");
        this.queryForImageSearch = Optional.ofNullable(queryForImageSearch);
        return this;
    }

    /**
     * The query for image search
     */
    public SourceShutterstock withQueryForImageSearch(Optional<String> queryForImageSearch) {
        Utils.checkNotNull(queryForImageSearch, "queryForImageSearch");
        this.queryForImageSearch = queryForImageSearch;
        return this;
    }

    /**
     * The Query for `videos_search` stream
     */
    public SourceShutterstock withQueryForVideoSearch(String queryForVideoSearch) {
        Utils.checkNotNull(queryForVideoSearch, "queryForVideoSearch");
        this.queryForVideoSearch = Optional.ofNullable(queryForVideoSearch);
        return this;
    }

    /**
     * The Query for `videos_search` stream
     */
    public SourceShutterstock withQueryForVideoSearch(Optional<String> queryForVideoSearch) {
        Utils.checkNotNull(queryForVideoSearch, "queryForVideoSearch");
        this.queryForVideoSearch = queryForVideoSearch;
        return this;
    }

    public SourceShutterstock withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceShutterstock other = (SourceShutterstock) o;
        return 
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.queryForAudioSearch, other.queryForAudioSearch) &&
            Objects.deepEquals(this.queryForCatalogSearch, other.queryForCatalogSearch) &&
            Objects.deepEquals(this.queryForImageSearch, other.queryForImageSearch) &&
            Objects.deepEquals(this.queryForVideoSearch, other.queryForVideoSearch) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiToken,
            queryForAudioSearch,
            queryForCatalogSearch,
            queryForImageSearch,
            queryForVideoSearch,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceShutterstock.class,
                "apiToken", apiToken,
                "queryForAudioSearch", queryForAudioSearch,
                "queryForCatalogSearch", queryForCatalogSearch,
                "queryForImageSearch", queryForImageSearch,
                "queryForVideoSearch", queryForVideoSearch,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiToken;
 
        private Optional<String> queryForAudioSearch;
 
        private Optional<String> queryForCatalogSearch;
 
        private Optional<String> queryForImageSearch;
 
        private Optional<String> queryForVideoSearch;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your OAuth 2.0 token for accessing the Shutterstock API. Obtain this token from your Shutterstock developer account.
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * The query for image search
         */
        public Builder queryForAudioSearch(String queryForAudioSearch) {
            Utils.checkNotNull(queryForAudioSearch, "queryForAudioSearch");
            this.queryForAudioSearch = Optional.ofNullable(queryForAudioSearch);
            return this;
        }

        /**
         * The query for image search
         */
        public Builder queryForAudioSearch(Optional<String> queryForAudioSearch) {
            Utils.checkNotNull(queryForAudioSearch, "queryForAudioSearch");
            this.queryForAudioSearch = queryForAudioSearch;
            return this;
        }

        /**
         * The query for catalog search
         */
        public Builder queryForCatalogSearch(String queryForCatalogSearch) {
            Utils.checkNotNull(queryForCatalogSearch, "queryForCatalogSearch");
            this.queryForCatalogSearch = Optional.ofNullable(queryForCatalogSearch);
            return this;
        }

        /**
         * The query for catalog search
         */
        public Builder queryForCatalogSearch(Optional<String> queryForCatalogSearch) {
            Utils.checkNotNull(queryForCatalogSearch, "queryForCatalogSearch");
            this.queryForCatalogSearch = queryForCatalogSearch;
            return this;
        }

        /**
         * The query for image search
         */
        public Builder queryForImageSearch(String queryForImageSearch) {
            Utils.checkNotNull(queryForImageSearch, "queryForImageSearch");
            this.queryForImageSearch = Optional.ofNullable(queryForImageSearch);
            return this;
        }

        /**
         * The query for image search
         */
        public Builder queryForImageSearch(Optional<String> queryForImageSearch) {
            Utils.checkNotNull(queryForImageSearch, "queryForImageSearch");
            this.queryForImageSearch = queryForImageSearch;
            return this;
        }

        /**
         * The Query for `videos_search` stream
         */
        public Builder queryForVideoSearch(String queryForVideoSearch) {
            Utils.checkNotNull(queryForVideoSearch, "queryForVideoSearch");
            this.queryForVideoSearch = Optional.ofNullable(queryForVideoSearch);
            return this;
        }

        /**
         * The Query for `videos_search` stream
         */
        public Builder queryForVideoSearch(Optional<String> queryForVideoSearch) {
            Utils.checkNotNull(queryForVideoSearch, "queryForVideoSearch");
            this.queryForVideoSearch = queryForVideoSearch;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceShutterstock build() {
            if (queryForAudioSearch == null) {
                queryForAudioSearch = _SINGLETON_VALUE_QueryForAudioSearch.value();
            }
            if (queryForCatalogSearch == null) {
                queryForCatalogSearch = _SINGLETON_VALUE_QueryForCatalogSearch.value();
            }
            if (queryForImageSearch == null) {
                queryForImageSearch = _SINGLETON_VALUE_QueryForImageSearch.value();
            }
            if (queryForVideoSearch == null) {
                queryForVideoSearch = _SINGLETON_VALUE_QueryForVideoSearch.value();
            }
            return new SourceShutterstock(
                apiToken,
                queryForAudioSearch,
                queryForCatalogSearch,
                queryForImageSearch,
                queryForVideoSearch,
                startDate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_QueryForAudioSearch =
                new LazySingletonValue<>(
                        "query_for_audio_search",
                        "\"mountain\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_QueryForCatalogSearch =
                new LazySingletonValue<>(
                        "query_for_catalog_search",
                        "\"mountain\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_QueryForImageSearch =
                new LazySingletonValue<>(
                        "query_for_image_search",
                        "\"mountain\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_QueryForVideoSearch =
                new LazySingletonValue<>(
                        "query_for_video_search",
                        "\"mountain\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Shutterstock> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"shutterstock\"",
                        new TypeReference<Shutterstock>() {});
    }
}
