/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SourceSonarCloud {

    /**
     * Comma-separated list of component keys.
     */
    @JsonProperty("component_keys")
    private List<Object> componentKeys;

    /**
     * To retrieve issues created before the given date (inclusive).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<LocalDate> endDate;

    /**
     * Organization key. See &lt;a href="https://docs.sonarcloud.io/appendices/project-information/#project-and-organization-keys"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("organization")
    private String organization;

    @JsonProperty("sourceType")
    private SonarCloud sourceType;

    /**
     * To retrieve issues created after the given date (inclusive).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<LocalDate> startDate;

    /**
     * Your User Token. See &lt;a href="https://docs.sonarcloud.io/advanced-setup/user-accounts/"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    @JsonProperty("user_token")
    private String userToken;

    @JsonCreator
    public SourceSonarCloud(
            @JsonProperty("component_keys") List<Object> componentKeys,
            @JsonProperty("end_date") Optional<LocalDate> endDate,
            @JsonProperty("organization") String organization,
            @JsonProperty("start_date") Optional<LocalDate> startDate,
            @JsonProperty("user_token") String userToken) {
        Utils.checkNotNull(componentKeys, "componentKeys");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(userToken, "userToken");
        this.componentKeys = componentKeys;
        this.endDate = endDate;
        this.organization = organization;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.userToken = userToken;
    }
    
    public SourceSonarCloud(
            List<Object> componentKeys,
            String organization,
            String userToken) {
        this(componentKeys, Optional.empty(), organization, Optional.empty(), userToken);
    }

    /**
     * Comma-separated list of component keys.
     */
    @JsonIgnore
    public List<Object> componentKeys() {
        return componentKeys;
    }

    /**
     * To retrieve issues created before the given date (inclusive).
     */
    @JsonIgnore
    public Optional<LocalDate> endDate() {
        return endDate;
    }

    /**
     * Organization key. See &lt;a href="https://docs.sonarcloud.io/appendices/project-information/#project-and-organization-keys"&gt;here&lt;/a&gt;.
     */
    @JsonIgnore
    public String organization() {
        return organization;
    }

    @JsonIgnore
    public SonarCloud sourceType() {
        return sourceType;
    }

    /**
     * To retrieve issues created after the given date (inclusive).
     */
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return startDate;
    }

    /**
     * Your User Token. See &lt;a href="https://docs.sonarcloud.io/advanced-setup/user-accounts/"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    @JsonIgnore
    public String userToken() {
        return userToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Comma-separated list of component keys.
     */
    public SourceSonarCloud withComponentKeys(List<Object> componentKeys) {
        Utils.checkNotNull(componentKeys, "componentKeys");
        this.componentKeys = componentKeys;
        return this;
    }

    /**
     * To retrieve issues created before the given date (inclusive).
     */
    public SourceSonarCloud withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * To retrieve issues created before the given date (inclusive).
     */
    public SourceSonarCloud withEndDate(Optional<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Organization key. See &lt;a href="https://docs.sonarcloud.io/appendices/project-information/#project-and-organization-keys"&gt;here&lt;/a&gt;.
     */
    public SourceSonarCloud withOrganization(String organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    /**
     * To retrieve issues created after the given date (inclusive).
     */
    public SourceSonarCloud withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * To retrieve issues created after the given date (inclusive).
     */
    public SourceSonarCloud withStartDate(Optional<LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Your User Token. See &lt;a href="https://docs.sonarcloud.io/advanced-setup/user-accounts/"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    public SourceSonarCloud withUserToken(String userToken) {
        Utils.checkNotNull(userToken, "userToken");
        this.userToken = userToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSonarCloud other = (SourceSonarCloud) o;
        return 
            Objects.deepEquals(this.componentKeys, other.componentKeys) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.organization, other.organization) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.userToken, other.userToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            componentKeys,
            endDate,
            organization,
            sourceType,
            startDate,
            userToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSonarCloud.class,
                "componentKeys", componentKeys,
                "endDate", endDate,
                "organization", organization,
                "sourceType", sourceType,
                "startDate", startDate,
                "userToken", userToken);
    }
    
    public final static class Builder {
 
        private List<Object> componentKeys;
 
        private Optional<LocalDate> endDate = Optional.empty();
 
        private String organization;
 
        private Optional<LocalDate> startDate = Optional.empty();
 
        private String userToken;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Comma-separated list of component keys.
         */
        public Builder componentKeys(List<Object> componentKeys) {
            Utils.checkNotNull(componentKeys, "componentKeys");
            this.componentKeys = componentKeys;
            return this;
        }

        /**
         * To retrieve issues created before the given date (inclusive).
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * To retrieve issues created before the given date (inclusive).
         */
        public Builder endDate(Optional<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Organization key. See &lt;a href="https://docs.sonarcloud.io/appendices/project-information/#project-and-organization-keys"&gt;here&lt;/a&gt;.
         */
        public Builder organization(String organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        /**
         * To retrieve issues created after the given date (inclusive).
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * To retrieve issues created after the given date (inclusive).
         */
        public Builder startDate(Optional<LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Your User Token. See &lt;a href="https://docs.sonarcloud.io/advanced-setup/user-accounts/"&gt;here&lt;/a&gt;. The token is case sensitive.
         */
        public Builder userToken(String userToken) {
            Utils.checkNotNull(userToken, "userToken");
            this.userToken = userToken;
            return this;
        }
        
        public SourceSonarCloud build() {
            return new SourceSonarCloud(
                componentKeys,
                endDate,
                organization,
                startDate,
                userToken);
        }

        private static final LazySingletonValue<SonarCloud> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"sonar-cloud\"",
                        new TypeReference<SonarCloud>() {});
    }
}

