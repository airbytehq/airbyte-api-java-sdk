/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SourceSentry {

    /**
     * Log into Sentry and then &lt;a href="https://sentry.io/settings/account/api/auth-tokens/"&gt;create authentication tokens&lt;/a&gt;.For self-hosted, you can find or create authentication tokens by visiting "{instance_url_prefix}/settings/account/api/auth-tokens/"
     */
    @JsonProperty("auth_token")
    private String authToken;

    /**
     * Fields to retrieve when fetching discover events
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discover_fields")
    private Optional<? extends List<Object>> discoverFields;

    /**
     * Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    private Optional<String> hostname;

    /**
     * The slug of the organization the groups belong to.
     */
    @JsonProperty("organization")
    private String organization;

    /**
     * The name (slug) of the Project you want to sync.
     */
    @JsonProperty("project")
    private String project;

    @JsonProperty("sourceType")
    private Sentry sourceType;

    @JsonCreator
    public SourceSentry(
            @JsonProperty("auth_token") String authToken,
            @JsonProperty("discover_fields") Optional<? extends List<Object>> discoverFields,
            @JsonProperty("hostname") Optional<String> hostname,
            @JsonProperty("organization") String organization,
            @JsonProperty("project") String project) {
        Utils.checkNotNull(authToken, "authToken");
        Utils.checkNotNull(discoverFields, "discoverFields");
        Utils.checkNotNull(hostname, "hostname");
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(project, "project");
        this.authToken = authToken;
        this.discoverFields = discoverFields;
        this.hostname = hostname;
        this.organization = organization;
        this.project = project;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceSentry(
            String authToken,
            String organization,
            String project) {
        this(authToken, Optional.empty(), Optional.empty(), organization, project);
    }

    /**
     * Log into Sentry and then &lt;a href="https://sentry.io/settings/account/api/auth-tokens/"&gt;create authentication tokens&lt;/a&gt;.For self-hosted, you can find or create authentication tokens by visiting "{instance_url_prefix}/settings/account/api/auth-tokens/"
     */
    @JsonIgnore
    public String authToken() {
        return authToken;
    }

    /**
     * Fields to retrieve when fetching discover events
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> discoverFields() {
        return (Optional<List<Object>>) discoverFields;
    }

    /**
     * Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.
     */
    @JsonIgnore
    public Optional<String> hostname() {
        return hostname;
    }

    /**
     * The slug of the organization the groups belong to.
     */
    @JsonIgnore
    public String organization() {
        return organization;
    }

    /**
     * The name (slug) of the Project you want to sync.
     */
    @JsonIgnore
    public String project() {
        return project;
    }

    @JsonIgnore
    public Sentry sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Log into Sentry and then &lt;a href="https://sentry.io/settings/account/api/auth-tokens/"&gt;create authentication tokens&lt;/a&gt;.For self-hosted, you can find or create authentication tokens by visiting "{instance_url_prefix}/settings/account/api/auth-tokens/"
     */
    public SourceSentry withAuthToken(String authToken) {
        Utils.checkNotNull(authToken, "authToken");
        this.authToken = authToken;
        return this;
    }

    /**
     * Fields to retrieve when fetching discover events
     */
    public SourceSentry withDiscoverFields(List<Object> discoverFields) {
        Utils.checkNotNull(discoverFields, "discoverFields");
        this.discoverFields = Optional.ofNullable(discoverFields);
        return this;
    }

    /**
     * Fields to retrieve when fetching discover events
     */
    public SourceSentry withDiscoverFields(Optional<? extends List<Object>> discoverFields) {
        Utils.checkNotNull(discoverFields, "discoverFields");
        this.discoverFields = discoverFields;
        return this;
    }

    /**
     * Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.
     */
    public SourceSentry withHostname(String hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = Optional.ofNullable(hostname);
        return this;
    }

    /**
     * Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.
     */
    public SourceSentry withHostname(Optional<String> hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = hostname;
        return this;
    }

    /**
     * The slug of the organization the groups belong to.
     */
    public SourceSentry withOrganization(String organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    /**
     * The name (slug) of the Project you want to sync.
     */
    public SourceSentry withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSentry other = (SourceSentry) o;
        return 
            Objects.deepEquals(this.authToken, other.authToken) &&
            Objects.deepEquals(this.discoverFields, other.discoverFields) &&
            Objects.deepEquals(this.hostname, other.hostname) &&
            Objects.deepEquals(this.organization, other.organization) &&
            Objects.deepEquals(this.project, other.project) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authToken,
            discoverFields,
            hostname,
            organization,
            project,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSentry.class,
                "authToken", authToken,
                "discoverFields", discoverFields,
                "hostname", hostname,
                "organization", organization,
                "project", project,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String authToken;
 
        private Optional<? extends List<Object>> discoverFields = Optional.empty();
 
        private Optional<String> hostname;
 
        private String organization;
 
        private String project;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Log into Sentry and then &lt;a href="https://sentry.io/settings/account/api/auth-tokens/"&gt;create authentication tokens&lt;/a&gt;.For self-hosted, you can find or create authentication tokens by visiting "{instance_url_prefix}/settings/account/api/auth-tokens/"
         */
        public Builder authToken(String authToken) {
            Utils.checkNotNull(authToken, "authToken");
            this.authToken = authToken;
            return this;
        }

        /**
         * Fields to retrieve when fetching discover events
         */
        public Builder discoverFields(List<Object> discoverFields) {
            Utils.checkNotNull(discoverFields, "discoverFields");
            this.discoverFields = Optional.ofNullable(discoverFields);
            return this;
        }

        /**
         * Fields to retrieve when fetching discover events
         */
        public Builder discoverFields(Optional<? extends List<Object>> discoverFields) {
            Utils.checkNotNull(discoverFields, "discoverFields");
            this.discoverFields = discoverFields;
            return this;
        }

        /**
         * Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.
         */
        public Builder hostname(String hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = Optional.ofNullable(hostname);
            return this;
        }

        /**
         * Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty.
         */
        public Builder hostname(Optional<String> hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = hostname;
            return this;
        }

        /**
         * The slug of the organization the groups belong to.
         */
        public Builder organization(String organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        /**
         * The name (slug) of the Project you want to sync.
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }
        
        public SourceSentry build() {
            if (hostname == null) {
                hostname = _SINGLETON_VALUE_Hostname.value();
            }            return new SourceSentry(
                authToken,
                discoverFields,
                hostname,
                organization,
                project);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Hostname =
                new LazySingletonValue<>(
                        "hostname",
                        "\"sentry.io\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Sentry> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"sentry\"",
                        new TypeReference<Sentry>() {});
    }
}

