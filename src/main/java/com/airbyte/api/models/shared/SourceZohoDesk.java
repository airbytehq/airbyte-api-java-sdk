/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceZohoDesk {

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_secret")
    private String clientSecret;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_custom_domain")
    private Optional<Boolean> includeCustomDomain;

    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private ZohoDesk sourceType;

    @JsonProperty("token_refresh_endpoint")
    private String tokenRefreshEndpoint;

    @JsonCreator
    public SourceZohoDesk(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("include_custom_domain") Optional<Boolean> includeCustomDomain,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("token_refresh_endpoint") String tokenRefreshEndpoint) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(includeCustomDomain, "includeCustomDomain");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.includeCustomDomain = includeCustomDomain;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.tokenRefreshEndpoint = tokenRefreshEndpoint;
    }
    
    public SourceZohoDesk(
            String clientId,
            String clientSecret,
            String refreshToken,
            String tokenRefreshEndpoint) {
        this(clientId, clientSecret, Optional.empty(), refreshToken, tokenRefreshEndpoint);
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    @JsonIgnore
    public Optional<Boolean> includeCustomDomain() {
        return includeCustomDomain;
    }

    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    @JsonIgnore
    public ZohoDesk sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public String tokenRefreshEndpoint() {
        return tokenRefreshEndpoint;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceZohoDesk withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public SourceZohoDesk withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    public SourceZohoDesk withIncludeCustomDomain(boolean includeCustomDomain) {
        Utils.checkNotNull(includeCustomDomain, "includeCustomDomain");
        this.includeCustomDomain = Optional.ofNullable(includeCustomDomain);
        return this;
    }

    public SourceZohoDesk withIncludeCustomDomain(Optional<Boolean> includeCustomDomain) {
        Utils.checkNotNull(includeCustomDomain, "includeCustomDomain");
        this.includeCustomDomain = includeCustomDomain;
        return this;
    }

    public SourceZohoDesk withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    public SourceZohoDesk withTokenRefreshEndpoint(String tokenRefreshEndpoint) {
        Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
        this.tokenRefreshEndpoint = tokenRefreshEndpoint;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZohoDesk other = (SourceZohoDesk) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.includeCustomDomain, other.includeCustomDomain) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.tokenRefreshEndpoint, other.tokenRefreshEndpoint);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientSecret,
            includeCustomDomain,
            refreshToken,
            sourceType,
            tokenRefreshEndpoint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZohoDesk.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "includeCustomDomain", includeCustomDomain,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "tokenRefreshEndpoint", tokenRefreshEndpoint);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<Boolean> includeCustomDomain = Optional.empty();
 
        private String refreshToken;
 
        private String tokenRefreshEndpoint;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder includeCustomDomain(boolean includeCustomDomain) {
            Utils.checkNotNull(includeCustomDomain, "includeCustomDomain");
            this.includeCustomDomain = Optional.ofNullable(includeCustomDomain);
            return this;
        }

        public Builder includeCustomDomain(Optional<Boolean> includeCustomDomain) {
            Utils.checkNotNull(includeCustomDomain, "includeCustomDomain");
            this.includeCustomDomain = includeCustomDomain;
            return this;
        }

        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        public Builder tokenRefreshEndpoint(String tokenRefreshEndpoint) {
            Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
            this.tokenRefreshEndpoint = tokenRefreshEndpoint;
            return this;
        }
        
        public SourceZohoDesk build() {
            return new SourceZohoDesk(
                clientId,
                clientSecret,
                includeCustomDomain,
                refreshToken,
                tokenRefreshEndpoint);
        }

        private static final LazySingletonValue<ZohoDesk> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"zoho-desk\"",
                        new TypeReference<ZohoDesk>() {});
    }
}

