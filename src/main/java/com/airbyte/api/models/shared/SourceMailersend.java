/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourceMailersend {

    /**
     * Your API Token. See &lt;a href="https://www.mailersend.com/help/managing-api-tokens"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("api_token")
    private String apiToken;

    /**
     * The domain entity in mailersend
     */
    @JsonProperty("domain_id")
    private String domainId;

    @JsonProperty("sourceType")
    private Mailersend sourceType;

    /**
     * Timestamp is assumed to be UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<Double> startDate;

    @JsonCreator
    public SourceMailersend(
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("domain_id") String domainId,
            @JsonProperty("start_date") Optional<Double> startDate) {
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(domainId, "domainId");
        Utils.checkNotNull(startDate, "startDate");
        this.apiToken = apiToken;
        this.domainId = domainId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceMailersend(
            String apiToken,
            String domainId) {
        this(apiToken, domainId, Optional.empty());
    }

    /**
     * Your API Token. See &lt;a href="https://www.mailersend.com/help/managing-api-tokens"&gt;here&lt;/a&gt;.
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    /**
     * The domain entity in mailersend
     */
    @JsonIgnore
    public String domainId() {
        return domainId;
    }

    @JsonIgnore
    public Mailersend sourceType() {
        return sourceType;
    }

    /**
     * Timestamp is assumed to be UTC.
     */
    @JsonIgnore
    public Optional<Double> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Your API Token. See &lt;a href="https://www.mailersend.com/help/managing-api-tokens"&gt;here&lt;/a&gt;.
     */
    public SourceMailersend withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * The domain entity in mailersend
     */
    public SourceMailersend withDomainId(String domainId) {
        Utils.checkNotNull(domainId, "domainId");
        this.domainId = domainId;
        return this;
    }

    /**
     * Timestamp is assumed to be UTC.
     */
    public SourceMailersend withStartDate(double startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Timestamp is assumed to be UTC.
     */
    public SourceMailersend withStartDate(Optional<Double> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMailersend other = (SourceMailersend) o;
        return 
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.domainId, other.domainId) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiToken,
            domainId,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMailersend.class,
                "apiToken", apiToken,
                "domainId", domainId,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiToken;
 
        private String domainId;
 
        private Optional<Double> startDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your API Token. See &lt;a href="https://www.mailersend.com/help/managing-api-tokens"&gt;here&lt;/a&gt;.
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * The domain entity in mailersend
         */
        public Builder domainId(String domainId) {
            Utils.checkNotNull(domainId, "domainId");
            this.domainId = domainId;
            return this;
        }

        /**
         * Timestamp is assumed to be UTC.
         */
        public Builder startDate(double startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Timestamp is assumed to be UTC.
         */
        public Builder startDate(Optional<Double> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceMailersend build() {
            return new SourceMailersend(
                apiToken,
                domainId,
                startDate);
        }

        private static final LazySingletonValue<Mailersend> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"mailersend\"",
                        new TypeReference<Mailersend>() {});
    }
}
