/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ScopedResourceRequirements
 * 
 * <p>actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
 */
public class ScopedResourceRequirements {

    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default")
    private Optional<? extends ResourceRequirements> default_;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobSpecific")
    private Optional<? extends List<JobTypeResourceLimit>> jobSpecific;

    @JsonCreator
    public ScopedResourceRequirements(
            @JsonProperty("default") Optional<? extends ResourceRequirements> default_,
            @JsonProperty("jobSpecific") Optional<? extends List<JobTypeResourceLimit>> jobSpecific) {
        Utils.checkNotNull(default_, "default_");
        Utils.checkNotNull(jobSpecific, "jobSpecific");
        this.default_ = default_;
        this.jobSpecific = jobSpecific;
    }
    
    public ScopedResourceRequirements() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResourceRequirements> default_() {
        return (Optional<ResourceRequirements>) default_;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<JobTypeResourceLimit>> jobSpecific() {
        return (Optional<List<JobTypeResourceLimit>>) jobSpecific;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    public ScopedResourceRequirements withDefault(ResourceRequirements default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = Optional.ofNullable(default_);
        return this;
    }

    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    public ScopedResourceRequirements withDefault(Optional<? extends ResourceRequirements> default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = default_;
        return this;
    }

    public ScopedResourceRequirements withJobSpecific(List<JobTypeResourceLimit> jobSpecific) {
        Utils.checkNotNull(jobSpecific, "jobSpecific");
        this.jobSpecific = Optional.ofNullable(jobSpecific);
        return this;
    }

    public ScopedResourceRequirements withJobSpecific(Optional<? extends List<JobTypeResourceLimit>> jobSpecific) {
        Utils.checkNotNull(jobSpecific, "jobSpecific");
        this.jobSpecific = jobSpecific;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ScopedResourceRequirements other = (ScopedResourceRequirements) o;
        return 
            Objects.deepEquals(this.default_, other.default_) &&
            Objects.deepEquals(this.jobSpecific, other.jobSpecific);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            default_,
            jobSpecific);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ScopedResourceRequirements.class,
                "default_", default_,
                "jobSpecific", jobSpecific);
    }
    
    public final static class Builder {
 
        private Optional<? extends ResourceRequirements> default_ = Optional.empty();
 
        private Optional<? extends List<JobTypeResourceLimit>> jobSpecific = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * optional resource requirements to run workers (blank for unbounded allocations)
         */
        public Builder default_(ResourceRequirements default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = Optional.ofNullable(default_);
            return this;
        }

        /**
         * optional resource requirements to run workers (blank for unbounded allocations)
         */
        public Builder default_(Optional<? extends ResourceRequirements> default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = default_;
            return this;
        }

        public Builder jobSpecific(List<JobTypeResourceLimit> jobSpecific) {
            Utils.checkNotNull(jobSpecific, "jobSpecific");
            this.jobSpecific = Optional.ofNullable(jobSpecific);
            return this;
        }

        public Builder jobSpecific(Optional<? extends List<JobTypeResourceLimit>> jobSpecific) {
            Utils.checkNotNull(jobSpecific, "jobSpecific");
            this.jobSpecific = jobSpecific;
            return this;
        }
        
        public ScopedResourceRequirements build() {
            return new ScopedResourceRequirements(
                default_,
                jobSpecific);
        }
    }
}
