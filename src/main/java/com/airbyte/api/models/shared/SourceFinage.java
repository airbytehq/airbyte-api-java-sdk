/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceFinage {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Time period. Default is 10
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period")
    private Optional<String> period;

    @JsonProperty("sourceType")
    private Finage sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * List of symbols
     */
    @JsonProperty("symbols")
    private List<Object> symbols;

    /**
     * One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tech_indicator_type")
    private Optional<? extends TechnicalIndicatorType> techIndicatorType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    private Optional<? extends TimeInterval> time;

    /**
     * Size of the time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_aggregates")
    private Optional<? extends TimeAggregates> timeAggregates;

    /**
     * Time Period for cash flow stmts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_period")
    private Optional<? extends TimePeriod> timePeriod;

    @JsonCreator
    public SourceFinage(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("period") Optional<String> period,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("symbols") List<Object> symbols,
            @JsonProperty("tech_indicator_type") Optional<? extends TechnicalIndicatorType> techIndicatorType,
            @JsonProperty("time") Optional<? extends TimeInterval> time,
            @JsonProperty("time_aggregates") Optional<? extends TimeAggregates> timeAggregates,
            @JsonProperty("time_period") Optional<? extends TimePeriod> timePeriod) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(period, "period");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(symbols, "symbols");
        Utils.checkNotNull(techIndicatorType, "techIndicatorType");
        Utils.checkNotNull(time, "time");
        Utils.checkNotNull(timeAggregates, "timeAggregates");
        Utils.checkNotNull(timePeriod, "timePeriod");
        this.apiKey = apiKey;
        this.period = period;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.symbols = symbols;
        this.techIndicatorType = techIndicatorType;
        this.time = time;
        this.timeAggregates = timeAggregates;
        this.timePeriod = timePeriod;
    }
    
    public SourceFinage(
            String apiKey,
            OffsetDateTime startDate,
            List<Object> symbols) {
        this(apiKey, Optional.empty(), startDate, symbols, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Time period. Default is 10
     */
    @JsonIgnore
    public Optional<String> period() {
        return period;
    }

    @JsonIgnore
    public Finage sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * List of symbols
     */
    @JsonIgnore
    public List<Object> symbols() {
        return symbols;
    }

    /**
     * One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TechnicalIndicatorType> techIndicatorType() {
        return (Optional<TechnicalIndicatorType>) techIndicatorType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeInterval> time() {
        return (Optional<TimeInterval>) time;
    }

    /**
     * Size of the time
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeAggregates> timeAggregates() {
        return (Optional<TimeAggregates>) timeAggregates;
    }

    /**
     * Time Period for cash flow stmts
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimePeriod> timePeriod() {
        return (Optional<TimePeriod>) timePeriod;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceFinage withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Time period. Default is 10
     */
    public SourceFinage withPeriod(String period) {
        Utils.checkNotNull(period, "period");
        this.period = Optional.ofNullable(period);
        return this;
    }

    /**
     * Time period. Default is 10
     */
    public SourceFinage withPeriod(Optional<String> period) {
        Utils.checkNotNull(period, "period");
        this.period = period;
        return this;
    }

    public SourceFinage withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * List of symbols
     */
    public SourceFinage withSymbols(List<Object> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }

    /**
     * One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX
     */
    public SourceFinage withTechIndicatorType(TechnicalIndicatorType techIndicatorType) {
        Utils.checkNotNull(techIndicatorType, "techIndicatorType");
        this.techIndicatorType = Optional.ofNullable(techIndicatorType);
        return this;
    }

    /**
     * One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX
     */
    public SourceFinage withTechIndicatorType(Optional<? extends TechnicalIndicatorType> techIndicatorType) {
        Utils.checkNotNull(techIndicatorType, "techIndicatorType");
        this.techIndicatorType = techIndicatorType;
        return this;
    }

    public SourceFinage withTime(TimeInterval time) {
        Utils.checkNotNull(time, "time");
        this.time = Optional.ofNullable(time);
        return this;
    }

    public SourceFinage withTime(Optional<? extends TimeInterval> time) {
        Utils.checkNotNull(time, "time");
        this.time = time;
        return this;
    }

    /**
     * Size of the time
     */
    public SourceFinage withTimeAggregates(TimeAggregates timeAggregates) {
        Utils.checkNotNull(timeAggregates, "timeAggregates");
        this.timeAggregates = Optional.ofNullable(timeAggregates);
        return this;
    }

    /**
     * Size of the time
     */
    public SourceFinage withTimeAggregates(Optional<? extends TimeAggregates> timeAggregates) {
        Utils.checkNotNull(timeAggregates, "timeAggregates");
        this.timeAggregates = timeAggregates;
        return this;
    }

    /**
     * Time Period for cash flow stmts
     */
    public SourceFinage withTimePeriod(TimePeriod timePeriod) {
        Utils.checkNotNull(timePeriod, "timePeriod");
        this.timePeriod = Optional.ofNullable(timePeriod);
        return this;
    }

    /**
     * Time Period for cash flow stmts
     */
    public SourceFinage withTimePeriod(Optional<? extends TimePeriod> timePeriod) {
        Utils.checkNotNull(timePeriod, "timePeriod");
        this.timePeriod = timePeriod;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFinage other = (SourceFinage) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.period, other.period) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.symbols, other.symbols) &&
            Objects.deepEquals(this.techIndicatorType, other.techIndicatorType) &&
            Objects.deepEquals(this.time, other.time) &&
            Objects.deepEquals(this.timeAggregates, other.timeAggregates) &&
            Objects.deepEquals(this.timePeriod, other.timePeriod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            period,
            sourceType,
            startDate,
            symbols,
            techIndicatorType,
            time,
            timeAggregates,
            timePeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFinage.class,
                "apiKey", apiKey,
                "period", period,
                "sourceType", sourceType,
                "startDate", startDate,
                "symbols", symbols,
                "techIndicatorType", techIndicatorType,
                "time", time,
                "timeAggregates", timeAggregates,
                "timePeriod", timePeriod);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> period = Optional.empty();
 
        private OffsetDateTime startDate;
 
        private List<Object> symbols;
 
        private Optional<? extends TechnicalIndicatorType> techIndicatorType;
 
        private Optional<? extends TimeInterval> time;
 
        private Optional<? extends TimeAggregates> timeAggregates;
 
        private Optional<? extends TimePeriod> timePeriod = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Time period. Default is 10
         */
        public Builder period(String period) {
            Utils.checkNotNull(period, "period");
            this.period = Optional.ofNullable(period);
            return this;
        }

        /**
         * Time period. Default is 10
         */
        public Builder period(Optional<String> period) {
            Utils.checkNotNull(period, "period");
            this.period = period;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * List of symbols
         */
        public Builder symbols(List<Object> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }

        /**
         * One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX
         */
        public Builder techIndicatorType(TechnicalIndicatorType techIndicatorType) {
            Utils.checkNotNull(techIndicatorType, "techIndicatorType");
            this.techIndicatorType = Optional.ofNullable(techIndicatorType);
            return this;
        }

        /**
         * One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX
         */
        public Builder techIndicatorType(Optional<? extends TechnicalIndicatorType> techIndicatorType) {
            Utils.checkNotNull(techIndicatorType, "techIndicatorType");
            this.techIndicatorType = techIndicatorType;
            return this;
        }

        public Builder time(TimeInterval time) {
            Utils.checkNotNull(time, "time");
            this.time = Optional.ofNullable(time);
            return this;
        }

        public Builder time(Optional<? extends TimeInterval> time) {
            Utils.checkNotNull(time, "time");
            this.time = time;
            return this;
        }

        /**
         * Size of the time
         */
        public Builder timeAggregates(TimeAggregates timeAggregates) {
            Utils.checkNotNull(timeAggregates, "timeAggregates");
            this.timeAggregates = Optional.ofNullable(timeAggregates);
            return this;
        }

        /**
         * Size of the time
         */
        public Builder timeAggregates(Optional<? extends TimeAggregates> timeAggregates) {
            Utils.checkNotNull(timeAggregates, "timeAggregates");
            this.timeAggregates = timeAggregates;
            return this;
        }

        /**
         * Time Period for cash flow stmts
         */
        public Builder timePeriod(TimePeriod timePeriod) {
            Utils.checkNotNull(timePeriod, "timePeriod");
            this.timePeriod = Optional.ofNullable(timePeriod);
            return this;
        }

        /**
         * Time Period for cash flow stmts
         */
        public Builder timePeriod(Optional<? extends TimePeriod> timePeriod) {
            Utils.checkNotNull(timePeriod, "timePeriod");
            this.timePeriod = timePeriod;
            return this;
        }
        
        public SourceFinage build() {
            if (techIndicatorType == null) {
                techIndicatorType = _SINGLETON_VALUE_TechIndicatorType.value();
            }
            if (time == null) {
                time = _SINGLETON_VALUE_Time.value();
            }
            if (timeAggregates == null) {
                timeAggregates = _SINGLETON_VALUE_TimeAggregates.value();
            }
            return new SourceFinage(
                apiKey,
                period,
                startDate,
                symbols,
                techIndicatorType,
                time,
                timeAggregates,
                timePeriod);
        }

        private static final LazySingletonValue<Finage> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"finage\"",
                        new TypeReference<Finage>() {});

        private static final LazySingletonValue<Optional<? extends TechnicalIndicatorType>> _SINGLETON_VALUE_TechIndicatorType =
                new LazySingletonValue<>(
                        "tech_indicator_type",
                        "\"SMA\"",
                        new TypeReference<Optional<? extends TechnicalIndicatorType>>() {});

        private static final LazySingletonValue<Optional<? extends TimeInterval>> _SINGLETON_VALUE_Time =
                new LazySingletonValue<>(
                        "time",
                        "\"daily\"",
                        new TypeReference<Optional<? extends TimeInterval>>() {});

        private static final LazySingletonValue<Optional<? extends TimeAggregates>> _SINGLETON_VALUE_TimeAggregates =
                new LazySingletonValue<>(
                        "time_aggregates",
                        "\"day\"",
                        new TypeReference<Optional<? extends TimeAggregates>>() {});
    }
}
