/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceEmploymentHero {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Employees IDs in the given organisation found in `employees` stream for passing to sub-streams
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employees_configids")
    private Optional<? extends java.util.List<java.lang.Object>> employeesConfigids;

    /**
     * Organization ID which could be found as result of `organizations` stream to be used in other substreams
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_configids")
    private Optional<? extends java.util.List<java.lang.Object>> organizationConfigids;

    @JsonProperty("sourceType")
    private EmploymentHero sourceType;

    @JsonCreator
    public SourceEmploymentHero(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("employees_configids") Optional<? extends java.util.List<java.lang.Object>> employeesConfigids,
            @JsonProperty("organization_configids") Optional<? extends java.util.List<java.lang.Object>> organizationConfigids) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(employeesConfigids, "employeesConfigids");
        Utils.checkNotNull(organizationConfigids, "organizationConfigids");
        this.apiKey = apiKey;
        this.employeesConfigids = employeesConfigids;
        this.organizationConfigids = organizationConfigids;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceEmploymentHero(
            String apiKey) {
        this(apiKey, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Employees IDs in the given organisation found in `employees` stream for passing to sub-streams
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<java.lang.Object>> employeesConfigids() {
        return (Optional<java.util.List<java.lang.Object>>) employeesConfigids;
    }

    /**
     * Organization ID which could be found as result of `organizations` stream to be used in other substreams
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<java.lang.Object>> organizationConfigids() {
        return (Optional<java.util.List<java.lang.Object>>) organizationConfigids;
    }

    @JsonIgnore
    public EmploymentHero sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceEmploymentHero withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Employees IDs in the given organisation found in `employees` stream for passing to sub-streams
     */
    public SourceEmploymentHero withEmployeesConfigids(java.util.List<java.lang.Object> employeesConfigids) {
        Utils.checkNotNull(employeesConfigids, "employeesConfigids");
        this.employeesConfigids = Optional.ofNullable(employeesConfigids);
        return this;
    }

    /**
     * Employees IDs in the given organisation found in `employees` stream for passing to sub-streams
     */
    public SourceEmploymentHero withEmployeesConfigids(Optional<? extends java.util.List<java.lang.Object>> employeesConfigids) {
        Utils.checkNotNull(employeesConfigids, "employeesConfigids");
        this.employeesConfigids = employeesConfigids;
        return this;
    }

    /**
     * Organization ID which could be found as result of `organizations` stream to be used in other substreams
     */
    public SourceEmploymentHero withOrganizationConfigids(java.util.List<java.lang.Object> organizationConfigids) {
        Utils.checkNotNull(organizationConfigids, "organizationConfigids");
        this.organizationConfigids = Optional.ofNullable(organizationConfigids);
        return this;
    }

    /**
     * Organization ID which could be found as result of `organizations` stream to be used in other substreams
     */
    public SourceEmploymentHero withOrganizationConfigids(Optional<? extends java.util.List<java.lang.Object>> organizationConfigids) {
        Utils.checkNotNull(organizationConfigids, "organizationConfigids");
        this.organizationConfigids = organizationConfigids;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceEmploymentHero other = (SourceEmploymentHero) o;
        return 
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.employeesConfigids, other.employeesConfigids) &&
            java.util.Objects.deepEquals(this.organizationConfigids, other.organizationConfigids) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKey,
            employeesConfigids,
            organizationConfigids,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceEmploymentHero.class,
                "apiKey", apiKey,
                "employeesConfigids", employeesConfigids,
                "organizationConfigids", organizationConfigids,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<? extends java.util.List<java.lang.Object>> employeesConfigids = Optional.empty();
 
        private Optional<? extends java.util.List<java.lang.Object>> organizationConfigids = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Employees IDs in the given organisation found in `employees` stream for passing to sub-streams
         */
        public Builder employeesConfigids(java.util.List<java.lang.Object> employeesConfigids) {
            Utils.checkNotNull(employeesConfigids, "employeesConfigids");
            this.employeesConfigids = Optional.ofNullable(employeesConfigids);
            return this;
        }

        /**
         * Employees IDs in the given organisation found in `employees` stream for passing to sub-streams
         */
        public Builder employeesConfigids(Optional<? extends java.util.List<java.lang.Object>> employeesConfigids) {
            Utils.checkNotNull(employeesConfigids, "employeesConfigids");
            this.employeesConfigids = employeesConfigids;
            return this;
        }

        /**
         * Organization ID which could be found as result of `organizations` stream to be used in other substreams
         */
        public Builder organizationConfigids(java.util.List<java.lang.Object> organizationConfigids) {
            Utils.checkNotNull(organizationConfigids, "organizationConfigids");
            this.organizationConfigids = Optional.ofNullable(organizationConfigids);
            return this;
        }

        /**
         * Organization ID which could be found as result of `organizations` stream to be used in other substreams
         */
        public Builder organizationConfigids(Optional<? extends java.util.List<java.lang.Object>> organizationConfigids) {
            Utils.checkNotNull(organizationConfigids, "organizationConfigids");
            this.organizationConfigids = organizationConfigids;
            return this;
        }
        
        public SourceEmploymentHero build() {
            return new SourceEmploymentHero(
                apiKey,
                employeesConfigids,
                organizationConfigids);
        }

        private static final LazySingletonValue<EmploymentHero> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"employment-hero\"",
                        new TypeReference<EmploymentHero>() {});
    }
}

