/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * JobTypeResourceLimit
 * 
 * <p>sets resource requirements for a specific job type for an actor or actor definition. these values override the default, if both are set.
 */
public class JobTypeResourceLimit {

    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    @JsonProperty("jobType")
    private JobType jobType;

    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    @JsonProperty("resourceRequirements")
    private ResourceRequirements resourceRequirements;

    @JsonCreator
    public JobTypeResourceLimit(
            @JsonProperty("jobType") JobType jobType,
            @JsonProperty("resourceRequirements") ResourceRequirements resourceRequirements) {
        Utils.checkNotNull(jobType, "jobType");
        Utils.checkNotNull(resourceRequirements, "resourceRequirements");
        this.jobType = jobType;
        this.resourceRequirements = resourceRequirements;
    }

    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    @JsonIgnore
    public JobType jobType() {
        return jobType;
    }

    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    @JsonIgnore
    public ResourceRequirements resourceRequirements() {
        return resourceRequirements;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    public JobTypeResourceLimit withJobType(JobType jobType) {
        Utils.checkNotNull(jobType, "jobType");
        this.jobType = jobType;
        return this;
    }

    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    public JobTypeResourceLimit withResourceRequirements(ResourceRequirements resourceRequirements) {
        Utils.checkNotNull(resourceRequirements, "resourceRequirements");
        this.resourceRequirements = resourceRequirements;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobTypeResourceLimit other = (JobTypeResourceLimit) o;
        return 
            Objects.deepEquals(this.jobType, other.jobType) &&
            Objects.deepEquals(this.resourceRequirements, other.resourceRequirements);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            jobType,
            resourceRequirements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JobTypeResourceLimit.class,
                "jobType", jobType,
                "resourceRequirements", resourceRequirements);
    }
    
    public final static class Builder {
 
        private JobType jobType;
 
        private ResourceRequirements resourceRequirements;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * enum that describes the different types of jobs that the platform runs.
         */
        public Builder jobType(JobType jobType) {
            Utils.checkNotNull(jobType, "jobType");
            this.jobType = jobType;
            return this;
        }

        /**
         * optional resource requirements to run workers (blank for unbounded allocations)
         */
        public Builder resourceRequirements(ResourceRequirements resourceRequirements) {
            Utils.checkNotNull(resourceRequirements, "resourceRequirements");
            this.resourceRequirements = resourceRequirements;
            return this;
        }
        
        public JobTypeResourceLimit build() {
            return new JobTypeResourceLimit(
                jobType,
                resourceRequirements);
        }
    }
}
