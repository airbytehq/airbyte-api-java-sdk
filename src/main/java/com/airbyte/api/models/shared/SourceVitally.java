/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourceVitally {

    /**
     * Basic Auth Header
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("basic_auth_header")
    private Optional<String> basicAuthHeader;

    /**
     * Provide only the subdomain part, like https://{your-custom-subdomain}.rest.vitally.io/.  Keep empty if you don't have a subdomain.
     */
    @JsonProperty("domain")
    private String domain;

    /**
     * sk_live_secret_token
     */
    @JsonProperty("secret_token")
    private String secretToken;

    @JsonProperty("sourceType")
    private Vitally sourceType;

    /**
     * Status of the Vitally accounts. One of the following values; active, churned, activeOrChurned.
     */
    @JsonProperty("status")
    private SourceVitallyStatus status;

    @JsonCreator
    public SourceVitally(
            @JsonProperty("basic_auth_header") Optional<String> basicAuthHeader,
            @JsonProperty("domain") String domain,
            @JsonProperty("secret_token") String secretToken,
            @JsonProperty("status") SourceVitallyStatus status) {
        Utils.checkNotNull(basicAuthHeader, "basicAuthHeader");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(secretToken, "secretToken");
        Utils.checkNotNull(status, "status");
        this.basicAuthHeader = basicAuthHeader;
        this.domain = domain;
        this.secretToken = secretToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.status = status;
    }
    
    public SourceVitally(
            String domain,
            String secretToken,
            SourceVitallyStatus status) {
        this(Optional.empty(), domain, secretToken, status);
    }

    /**
     * Basic Auth Header
     */
    @JsonIgnore
    public Optional<String> basicAuthHeader() {
        return basicAuthHeader;
    }

    /**
     * Provide only the subdomain part, like https://{your-custom-subdomain}.rest.vitally.io/.  Keep empty if you don't have a subdomain.
     */
    @JsonIgnore
    public String domain() {
        return domain;
    }

    /**
     * sk_live_secret_token
     */
    @JsonIgnore
    public String secretToken() {
        return secretToken;
    }

    @JsonIgnore
    public Vitally sourceType() {
        return sourceType;
    }

    /**
     * Status of the Vitally accounts. One of the following values; active, churned, activeOrChurned.
     */
    @JsonIgnore
    public SourceVitallyStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Basic Auth Header
     */
    public SourceVitally withBasicAuthHeader(String basicAuthHeader) {
        Utils.checkNotNull(basicAuthHeader, "basicAuthHeader");
        this.basicAuthHeader = Optional.ofNullable(basicAuthHeader);
        return this;
    }

    /**
     * Basic Auth Header
     */
    public SourceVitally withBasicAuthHeader(Optional<String> basicAuthHeader) {
        Utils.checkNotNull(basicAuthHeader, "basicAuthHeader");
        this.basicAuthHeader = basicAuthHeader;
        return this;
    }

    /**
     * Provide only the subdomain part, like https://{your-custom-subdomain}.rest.vitally.io/.  Keep empty if you don't have a subdomain.
     */
    public SourceVitally withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * sk_live_secret_token
     */
    public SourceVitally withSecretToken(String secretToken) {
        Utils.checkNotNull(secretToken, "secretToken");
        this.secretToken = secretToken;
        return this;
    }

    /**
     * Status of the Vitally accounts. One of the following values; active, churned, activeOrChurned.
     */
    public SourceVitally withStatus(SourceVitallyStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceVitally other = (SourceVitally) o;
        return 
            Objects.deepEquals(this.basicAuthHeader, other.basicAuthHeader) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.secretToken, other.secretToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            basicAuthHeader,
            domain,
            secretToken,
            sourceType,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceVitally.class,
                "basicAuthHeader", basicAuthHeader,
                "domain", domain,
                "secretToken", secretToken,
                "sourceType", sourceType,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<String> basicAuthHeader = Optional.empty();
 
        private String domain;
 
        private String secretToken;
 
        private SourceVitallyStatus status;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Basic Auth Header
         */
        public Builder basicAuthHeader(String basicAuthHeader) {
            Utils.checkNotNull(basicAuthHeader, "basicAuthHeader");
            this.basicAuthHeader = Optional.ofNullable(basicAuthHeader);
            return this;
        }

        /**
         * Basic Auth Header
         */
        public Builder basicAuthHeader(Optional<String> basicAuthHeader) {
            Utils.checkNotNull(basicAuthHeader, "basicAuthHeader");
            this.basicAuthHeader = basicAuthHeader;
            return this;
        }

        /**
         * Provide only the subdomain part, like https://{your-custom-subdomain}.rest.vitally.io/.  Keep empty if you don't have a subdomain.
         */
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        /**
         * sk_live_secret_token
         */
        public Builder secretToken(String secretToken) {
            Utils.checkNotNull(secretToken, "secretToken");
            this.secretToken = secretToken;
            return this;
        }

        /**
         * Status of the Vitally accounts. One of the following values; active, churned, activeOrChurned.
         */
        public Builder status(SourceVitallyStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public SourceVitally build() {
            return new SourceVitally(
                basicAuthHeader,
                domain,
                secretToken,
                status);
        }

        private static final LazySingletonValue<Vitally> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"vitally\"",
                        new TypeReference<Vitally>() {});
    }
}
