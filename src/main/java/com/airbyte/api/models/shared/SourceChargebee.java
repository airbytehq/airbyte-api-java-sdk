/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceChargebee {

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Chargebee plan. More info about the rate limit plan tiers can be found on Chargebee's API &lt;a href="https://support.chargebee.com/support/solutions/articles/243576-what-are-the-chargebee-api-limits-"&gt;docs&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_workers")
    private Optional<Long> numWorkers;

    /**
     * Product Catalog version of your Chargebee site. Instructions on how to find your version you may find &lt;a href="https://apidocs.chargebee.com/docs/api?prod_cat_ver=2"&gt;here&lt;/a&gt; under `API Version` section. If left blank, the product catalog version will be set to 2.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_catalog")
    private Optional<? extends ProductCatalog> productCatalog;

    /**
     * The site prefix for your Chargebee instance.
     */
    @JsonProperty("site")
    private String site;

    /**
     * Chargebee API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/chargebee"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonProperty("site_api_key")
    private String siteApiKey;

    @JsonProperty("sourceType")
    private Chargebee sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceChargebee(
            @JsonProperty("num_workers") Optional<Long> numWorkers,
            @JsonProperty("product_catalog") Optional<? extends ProductCatalog> productCatalog,
            @JsonProperty("site") String site,
            @JsonProperty("site_api_key") String siteApiKey,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(numWorkers, "numWorkers");
        Utils.checkNotNull(productCatalog, "productCatalog");
        Utils.checkNotNull(site, "site");
        Utils.checkNotNull(siteApiKey, "siteApiKey");
        Utils.checkNotNull(startDate, "startDate");
        this.numWorkers = numWorkers;
        this.productCatalog = productCatalog;
        this.site = site;
        this.siteApiKey = siteApiKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceChargebee(
            String site,
            String siteApiKey,
            OffsetDateTime startDate) {
        this(Optional.empty(), Optional.empty(), site, siteApiKey, startDate);
    }

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Chargebee plan. More info about the rate limit plan tiers can be found on Chargebee's API &lt;a href="https://support.chargebee.com/support/solutions/articles/243576-what-are-the-chargebee-api-limits-"&gt;docs&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<Long> numWorkers() {
        return numWorkers;
    }

    /**
     * Product Catalog version of your Chargebee site. Instructions on how to find your version you may find &lt;a href="https://apidocs.chargebee.com/docs/api?prod_cat_ver=2"&gt;here&lt;/a&gt; under `API Version` section. If left blank, the product catalog version will be set to 2.0.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductCatalog> productCatalog() {
        return (Optional<ProductCatalog>) productCatalog;
    }

    /**
     * The site prefix for your Chargebee instance.
     */
    @JsonIgnore
    public String site() {
        return site;
    }

    /**
     * Chargebee API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/chargebee"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonIgnore
    public String siteApiKey() {
        return siteApiKey;
    }

    @JsonIgnore
    public Chargebee sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Chargebee plan. More info about the rate limit plan tiers can be found on Chargebee's API &lt;a href="https://support.chargebee.com/support/solutions/articles/243576-what-are-the-chargebee-api-limits-"&gt;docs&lt;/a&gt;.
     */
    public SourceChargebee withNumWorkers(long numWorkers) {
        Utils.checkNotNull(numWorkers, "numWorkers");
        this.numWorkers = Optional.ofNullable(numWorkers);
        return this;
    }

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Chargebee plan. More info about the rate limit plan tiers can be found on Chargebee's API &lt;a href="https://support.chargebee.com/support/solutions/articles/243576-what-are-the-chargebee-api-limits-"&gt;docs&lt;/a&gt;.
     */
    public SourceChargebee withNumWorkers(Optional<Long> numWorkers) {
        Utils.checkNotNull(numWorkers, "numWorkers");
        this.numWorkers = numWorkers;
        return this;
    }

    /**
     * Product Catalog version of your Chargebee site. Instructions on how to find your version you may find &lt;a href="https://apidocs.chargebee.com/docs/api?prod_cat_ver=2"&gt;here&lt;/a&gt; under `API Version` section. If left blank, the product catalog version will be set to 2.0.
     */
    public SourceChargebee withProductCatalog(ProductCatalog productCatalog) {
        Utils.checkNotNull(productCatalog, "productCatalog");
        this.productCatalog = Optional.ofNullable(productCatalog);
        return this;
    }

    /**
     * Product Catalog version of your Chargebee site. Instructions on how to find your version you may find &lt;a href="https://apidocs.chargebee.com/docs/api?prod_cat_ver=2"&gt;here&lt;/a&gt; under `API Version` section. If left blank, the product catalog version will be set to 2.0.
     */
    public SourceChargebee withProductCatalog(Optional<? extends ProductCatalog> productCatalog) {
        Utils.checkNotNull(productCatalog, "productCatalog");
        this.productCatalog = productCatalog;
        return this;
    }

    /**
     * The site prefix for your Chargebee instance.
     */
    public SourceChargebee withSite(String site) {
        Utils.checkNotNull(site, "site");
        this.site = site;
        return this;
    }

    /**
     * Chargebee API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/chargebee"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    public SourceChargebee withSiteApiKey(String siteApiKey) {
        Utils.checkNotNull(siteApiKey, "siteApiKey");
        this.siteApiKey = siteApiKey;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
     */
    public SourceChargebee withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceChargebee other = (SourceChargebee) o;
        return 
            Objects.deepEquals(this.numWorkers, other.numWorkers) &&
            Objects.deepEquals(this.productCatalog, other.productCatalog) &&
            Objects.deepEquals(this.site, other.site) &&
            Objects.deepEquals(this.siteApiKey, other.siteApiKey) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            numWorkers,
            productCatalog,
            site,
            siteApiKey,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceChargebee.class,
                "numWorkers", numWorkers,
                "productCatalog", productCatalog,
                "site", site,
                "siteApiKey", siteApiKey,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<Long> numWorkers;
 
        private Optional<? extends ProductCatalog> productCatalog;
 
        private String site;
 
        private String siteApiKey;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Chargebee plan. More info about the rate limit plan tiers can be found on Chargebee's API &lt;a href="https://support.chargebee.com/support/solutions/articles/243576-what-are-the-chargebee-api-limits-"&gt;docs&lt;/a&gt;.
         */
        public Builder numWorkers(long numWorkers) {
            Utils.checkNotNull(numWorkers, "numWorkers");
            this.numWorkers = Optional.ofNullable(numWorkers);
            return this;
        }

        /**
         * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Chargebee plan. More info about the rate limit plan tiers can be found on Chargebee's API &lt;a href="https://support.chargebee.com/support/solutions/articles/243576-what-are-the-chargebee-api-limits-"&gt;docs&lt;/a&gt;.
         */
        public Builder numWorkers(Optional<Long> numWorkers) {
            Utils.checkNotNull(numWorkers, "numWorkers");
            this.numWorkers = numWorkers;
            return this;
        }

        /**
         * Product Catalog version of your Chargebee site. Instructions on how to find your version you may find &lt;a href="https://apidocs.chargebee.com/docs/api?prod_cat_ver=2"&gt;here&lt;/a&gt; under `API Version` section. If left blank, the product catalog version will be set to 2.0.
         */
        public Builder productCatalog(ProductCatalog productCatalog) {
            Utils.checkNotNull(productCatalog, "productCatalog");
            this.productCatalog = Optional.ofNullable(productCatalog);
            return this;
        }

        /**
         * Product Catalog version of your Chargebee site. Instructions on how to find your version you may find &lt;a href="https://apidocs.chargebee.com/docs/api?prod_cat_ver=2"&gt;here&lt;/a&gt; under `API Version` section. If left blank, the product catalog version will be set to 2.0.
         */
        public Builder productCatalog(Optional<? extends ProductCatalog> productCatalog) {
            Utils.checkNotNull(productCatalog, "productCatalog");
            this.productCatalog = productCatalog;
            return this;
        }

        /**
         * The site prefix for your Chargebee instance.
         */
        public Builder site(String site) {
            Utils.checkNotNull(site, "site");
            this.site = site;
            return this;
        }

        /**
         * Chargebee API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/chargebee"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
         */
        public Builder siteApiKey(String siteApiKey) {
            Utils.checkNotNull(siteApiKey, "siteApiKey");
            this.siteApiKey = siteApiKey;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceChargebee build() {
            if (numWorkers == null) {
                numWorkers = _SINGLETON_VALUE_NumWorkers.value();
            }
            if (productCatalog == null) {
                productCatalog = _SINGLETON_VALUE_ProductCatalog.value();
            }
            return new SourceChargebee(
                numWorkers,
                productCatalog,
                site,
                siteApiKey,
                startDate);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_NumWorkers =
                new LazySingletonValue<>(
                        "num_workers",
                        "3",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<? extends ProductCatalog>> _SINGLETON_VALUE_ProductCatalog =
                new LazySingletonValue<>(
                        "product_catalog",
                        "\"2.0\"",
                        new TypeReference<Optional<? extends ProductCatalog>>() {});

        private static final LazySingletonValue<Chargebee> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"chargebee\"",
                        new TypeReference<Chargebee>() {});
    }
}
