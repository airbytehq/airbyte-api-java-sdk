/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceCoassemble {

    @JsonProperty("sourceType")
    private Coassemble sourceType;

    @JsonProperty("user_id")
    private String userId;

    @JsonProperty("user_token")
    private String userToken;

    @JsonCreator
    public SourceCoassemble(
            @JsonProperty("user_id") String userId,
            @JsonProperty("user_token") String userToken) {
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(userToken, "userToken");
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.userId = userId;
        this.userToken = userToken;
    }

    @JsonIgnore
    public Coassemble sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public String userId() {
        return userId;
    }

    @JsonIgnore
    public String userToken() {
        return userToken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceCoassemble withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    public SourceCoassemble withUserToken(String userToken) {
        Utils.checkNotNull(userToken, "userToken");
        this.userToken = userToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceCoassemble other = (SourceCoassemble) o;
        return 
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.userId, other.userId) &&
            Objects.deepEquals(this.userToken, other.userToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sourceType,
            userId,
            userToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceCoassemble.class,
                "sourceType", sourceType,
                "userId", userId,
                "userToken", userToken);
    }
    
    public final static class Builder {
 
        private String userId;
 
        private String userToken;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public Builder userToken(String userToken) {
            Utils.checkNotNull(userToken, "userToken");
            this.userToken = userToken;
            return this;
        }
        
        public SourceCoassemble build() {
            return new SourceCoassemble(
                userId,
                userToken);
        }

        private static final LazySingletonValue<Coassemble> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"coassemble\"",
                        new TypeReference<Coassemble>() {});
    }
}
