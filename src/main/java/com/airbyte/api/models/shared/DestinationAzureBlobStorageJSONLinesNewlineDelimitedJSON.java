/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON {

    /**
     * Add file extensions to the output file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_extension")
    private Optional<Boolean> fileExtension;

    @JsonProperty("format_type")
    private DestinationAzureBlobStorageFormatType formatType;

    @JsonCreator
    public DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON(
            @JsonProperty("file_extension") Optional<Boolean> fileExtension) {
        Utils.checkNotNull(fileExtension, "fileExtension");
        this.fileExtension = fileExtension;
        this.formatType = Builder._SINGLETON_VALUE_FormatType.value();
    }
    
    public DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON() {
        this(Optional.empty());
    }

    /**
     * Add file extensions to the output file.
     */
    @JsonIgnore
    public Optional<Boolean> fileExtension() {
        return fileExtension;
    }

    @JsonIgnore
    public DestinationAzureBlobStorageFormatType formatType() {
        return formatType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Add file extensions to the output file.
     */
    public DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON withFileExtension(boolean fileExtension) {
        Utils.checkNotNull(fileExtension, "fileExtension");
        this.fileExtension = Optional.ofNullable(fileExtension);
        return this;
    }

    /**
     * Add file extensions to the output file.
     */
    public DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON withFileExtension(Optional<Boolean> fileExtension) {
        Utils.checkNotNull(fileExtension, "fileExtension");
        this.fileExtension = fileExtension;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON other = (DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON) o;
        return 
            Objects.deepEquals(this.fileExtension, other.fileExtension) &&
            Objects.deepEquals(this.formatType, other.formatType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fileExtension,
            formatType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON.class,
                "fileExtension", fileExtension,
                "formatType", formatType);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> fileExtension;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Add file extensions to the output file.
         */
        public Builder fileExtension(boolean fileExtension) {
            Utils.checkNotNull(fileExtension, "fileExtension");
            this.fileExtension = Optional.ofNullable(fileExtension);
            return this;
        }

        /**
         * Add file extensions to the output file.
         */
        public Builder fileExtension(Optional<Boolean> fileExtension) {
            Utils.checkNotNull(fileExtension, "fileExtension");
            this.fileExtension = fileExtension;
            return this;
        }
        
        public DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON build() {
            if (fileExtension == null) {
                fileExtension = _SINGLETON_VALUE_FileExtension.value();
            }            return new DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON(
                fileExtension);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_FileExtension =
                new LazySingletonValue<>(
                        "file_extension",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<DestinationAzureBlobStorageFormatType> _SINGLETON_VALUE_FormatType =
                new LazySingletonValue<>(
                        "format_type",
                        "\"JSONL\"",
                        new TypeReference<DestinationAzureBlobStorageFormatType>() {});
    }
}

