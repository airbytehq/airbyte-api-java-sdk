/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SourceNytimes {

    /**
     * API Key
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * End date to stop the article retrieval (format YYYY-MM)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * Period of time (in days)
     */
    @JsonProperty("period")
    private PeriodUsedForMostPopularStreams period;

    /**
     * Share Type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_type")
    private Optional<? extends ShareTypeUsedForMostPopularSharedStream> shareType;

    @JsonProperty("sourceType")
    private Nytimes sourceType;

    /**
     * Start date to begin the article retrieval (format YYYY-MM)
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceNytimes(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("period") PeriodUsedForMostPopularStreams period,
            @JsonProperty("share_type") Optional<? extends ShareTypeUsedForMostPopularSharedStream> shareType,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(period, "period");
        Utils.checkNotNull(shareType, "shareType");
        Utils.checkNotNull(startDate, "startDate");
        this.apiKey = apiKey;
        this.endDate = endDate;
        this.period = period;
        this.shareType = shareType;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceNytimes(
            String apiKey,
            PeriodUsedForMostPopularStreams period,
            String startDate) {
        this(apiKey, Optional.empty(), period, Optional.empty(), startDate);
    }

    /**
     * API Key
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * End date to stop the article retrieval (format YYYY-MM)
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Period of time (in days)
     */
    @JsonIgnore
    public PeriodUsedForMostPopularStreams period() {
        return period;
    }

    /**
     * Share Type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShareTypeUsedForMostPopularSharedStream> shareType() {
        return (Optional<ShareTypeUsedForMostPopularSharedStream>) shareType;
    }

    @JsonIgnore
    public Nytimes sourceType() {
        return sourceType;
    }

    /**
     * Start date to begin the article retrieval (format YYYY-MM)
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API Key
     */
    public SourceNytimes withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * End date to stop the article retrieval (format YYYY-MM)
     */
    public SourceNytimes withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * End date to stop the article retrieval (format YYYY-MM)
     */
    public SourceNytimes withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Period of time (in days)
     */
    public SourceNytimes withPeriod(PeriodUsedForMostPopularStreams period) {
        Utils.checkNotNull(period, "period");
        this.period = period;
        return this;
    }

    /**
     * Share Type
     */
    public SourceNytimes withShareType(ShareTypeUsedForMostPopularSharedStream shareType) {
        Utils.checkNotNull(shareType, "shareType");
        this.shareType = Optional.ofNullable(shareType);
        return this;
    }

    /**
     * Share Type
     */
    public SourceNytimes withShareType(Optional<? extends ShareTypeUsedForMostPopularSharedStream> shareType) {
        Utils.checkNotNull(shareType, "shareType");
        this.shareType = shareType;
        return this;
    }

    /**
     * Start date to begin the article retrieval (format YYYY-MM)
     */
    public SourceNytimes withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceNytimes other = (SourceNytimes) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.period, other.period) &&
            Objects.deepEquals(this.shareType, other.shareType) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            endDate,
            period,
            shareType,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceNytimes.class,
                "apiKey", apiKey,
                "endDate", endDate,
                "period", period,
                "shareType", shareType,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> endDate = Optional.empty();
 
        private PeriodUsedForMostPopularStreams period;
 
        private Optional<? extends ShareTypeUsedForMostPopularSharedStream> shareType = Optional.empty();
 
        private String startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API Key
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * End date to stop the article retrieval (format YYYY-MM)
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * End date to stop the article retrieval (format YYYY-MM)
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Period of time (in days)
         */
        public Builder period(PeriodUsedForMostPopularStreams period) {
            Utils.checkNotNull(period, "period");
            this.period = period;
            return this;
        }

        /**
         * Share Type
         */
        public Builder shareType(ShareTypeUsedForMostPopularSharedStream shareType) {
            Utils.checkNotNull(shareType, "shareType");
            this.shareType = Optional.ofNullable(shareType);
            return this;
        }

        /**
         * Share Type
         */
        public Builder shareType(Optional<? extends ShareTypeUsedForMostPopularSharedStream> shareType) {
            Utils.checkNotNull(shareType, "shareType");
            this.shareType = shareType;
            return this;
        }

        /**
         * Start date to begin the article retrieval (format YYYY-MM)
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceNytimes build() {
            return new SourceNytimes(
                apiKey,
                endDate,
                period,
                shareType,
                startDate);
        }

        private static final LazySingletonValue<Nytimes> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"nytimes\"",
                        new TypeReference<Nytimes>() {});
    }
}

