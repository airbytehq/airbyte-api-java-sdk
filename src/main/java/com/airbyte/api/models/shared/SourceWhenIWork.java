/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SourceWhenIWork {

    /**
     * Email of your when-i-work account
     */
    @JsonProperty("email")
    private String email;

    /**
     * Password for your when-i-work account
     */
    @JsonProperty("password")
    private String password;

    @JsonProperty("sourceType")
    private WhenIWork sourceType;

    @JsonCreator
    public SourceWhenIWork(
            @JsonProperty("email") String email,
            @JsonProperty("password") String password) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(password, "password");
        this.email = email;
        this.password = password;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * Email of your when-i-work account
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * Password for your when-i-work account
     */
    @JsonIgnore
    public String password() {
        return password;
    }

    @JsonIgnore
    public WhenIWork sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Email of your when-i-work account
     */
    public SourceWhenIWork withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Password for your when-i-work account
     */
    public SourceWhenIWork withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceWhenIWork other = (SourceWhenIWork) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            password,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceWhenIWork.class,
                "email", email,
                "password", password,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String email;
 
        private String password;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email of your when-i-work account
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Password for your when-i-work account
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }
        
        public SourceWhenIWork build() {
            return new SourceWhenIWork(
                email,
                password);
        }

        private static final LazySingletonValue<WhenIWork> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"when-i-work\"",
                        new TypeReference<WhenIWork>() {});
    }
}

