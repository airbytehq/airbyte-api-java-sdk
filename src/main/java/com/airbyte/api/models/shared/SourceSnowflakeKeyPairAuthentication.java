/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceSnowflakeKeyPairAuthentication {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private Optional<? extends SourceSnowflakeSchemasAuthType> authType;

    /**
     * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/sources/snowflake#key-pair-authentication"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonProperty("private_key")
    private String privateKey;

    /**
     * Passphrase for private key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_key_password")
    private Optional<? extends String> privateKeyPassword;

    /**
     * The username you created to allow Airbyte to access the database.
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourceSnowflakeKeyPairAuthentication(
            @JsonProperty("private_key") String privateKey,
            @JsonProperty("private_key_password") Optional<? extends String> privateKeyPassword,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(privateKey, "privateKey");
        Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
        Utils.checkNotNull(username, "username");
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.privateKey = privateKey;
        this.privateKeyPassword = privateKeyPassword;
        this.username = username;
    }
    
    public SourceSnowflakeKeyPairAuthentication(
            String privateKey,
            String username) {
        this(privateKey, Optional.empty(), username);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSnowflakeSchemasAuthType> authType() {
        return (Optional<SourceSnowflakeSchemasAuthType>) authType;
    }

    /**
     * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/sources/snowflake#key-pair-authentication"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonIgnore
    public String privateKey() {
        return privateKey;
    }

    /**
     * Passphrase for private key
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> privateKeyPassword() {
        return (Optional<String>) privateKeyPassword;
    }

    /**
     * The username you created to allow Airbyte to access the database.
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/sources/snowflake#key-pair-authentication"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    public SourceSnowflakeKeyPairAuthentication withPrivateKey(String privateKey) {
        Utils.checkNotNull(privateKey, "privateKey");
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Passphrase for private key
     */
    public SourceSnowflakeKeyPairAuthentication withPrivateKeyPassword(String privateKeyPassword) {
        Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
        this.privateKeyPassword = Optional.ofNullable(privateKeyPassword);
        return this;
    }

    /**
     * Passphrase for private key
     */
    public SourceSnowflakeKeyPairAuthentication withPrivateKeyPassword(Optional<? extends String> privateKeyPassword) {
        Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
        this.privateKeyPassword = privateKeyPassword;
        return this;
    }

    /**
     * The username you created to allow Airbyte to access the database.
     */
    public SourceSnowflakeKeyPairAuthentication withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSnowflakeKeyPairAuthentication other = (SourceSnowflakeKeyPairAuthentication) o;
        return 
            java.util.Objects.deepEquals(this.authType, other.authType) &&
            java.util.Objects.deepEquals(this.privateKey, other.privateKey) &&
            java.util.Objects.deepEquals(this.privateKeyPassword, other.privateKeyPassword) &&
            java.util.Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authType,
            privateKey,
            privateKeyPassword,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSnowflakeKeyPairAuthentication.class,
                "authType", authType,
                "privateKey", privateKey,
                "privateKeyPassword", privateKeyPassword,
                "username", username);
    }
    
    public final static class Builder {
 
        private String privateKey;
 
        private Optional<? extends String> privateKeyPassword = Optional.empty();
 
        private String username;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/sources/snowflake#key-pair-authentication"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
         */
        public Builder privateKey(String privateKey) {
            Utils.checkNotNull(privateKey, "privateKey");
            this.privateKey = privateKey;
            return this;
        }

        /**
         * Passphrase for private key
         */
        public Builder privateKeyPassword(String privateKeyPassword) {
            Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
            this.privateKeyPassword = Optional.ofNullable(privateKeyPassword);
            return this;
        }

        /**
         * Passphrase for private key
         */
        public Builder privateKeyPassword(Optional<? extends String> privateKeyPassword) {
            Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
            this.privateKeyPassword = privateKeyPassword;
            return this;
        }

        /**
         * The username you created to allow Airbyte to access the database.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourceSnowflakeKeyPairAuthentication build() {
            return new SourceSnowflakeKeyPairAuthentication(
                privateKey,
                privateKeyPassword,
                username);
        }

        private static final LazySingletonValue<Optional<? extends SourceSnowflakeSchemasAuthType>> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"Key Pair Authentication\"",
                        new TypeReference<Optional<? extends SourceSnowflakeSchemasAuthType>>() {});
    }
}

