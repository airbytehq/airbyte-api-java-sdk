/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class FieldRenaming {

    /**
     * The new name for the field after renaming.
     */
    @JsonProperty("newFieldName")
    private String newFieldName;

    /**
     * The current name of the field to rename.
     */
    @JsonProperty("originalFieldName")
    private String originalFieldName;

    @JsonCreator
    public FieldRenaming(
            @JsonProperty("newFieldName") String newFieldName,
            @JsonProperty("originalFieldName") String originalFieldName) {
        Utils.checkNotNull(newFieldName, "newFieldName");
        Utils.checkNotNull(originalFieldName, "originalFieldName");
        this.newFieldName = newFieldName;
        this.originalFieldName = originalFieldName;
    }

    /**
     * The new name for the field after renaming.
     */
    @JsonIgnore
    public String newFieldName() {
        return newFieldName;
    }

    /**
     * The current name of the field to rename.
     */
    @JsonIgnore
    public String originalFieldName() {
        return originalFieldName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The new name for the field after renaming.
     */
    public FieldRenaming withNewFieldName(String newFieldName) {
        Utils.checkNotNull(newFieldName, "newFieldName");
        this.newFieldName = newFieldName;
        return this;
    }

    /**
     * The current name of the field to rename.
     */
    public FieldRenaming withOriginalFieldName(String originalFieldName) {
        Utils.checkNotNull(originalFieldName, "originalFieldName");
        this.originalFieldName = originalFieldName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FieldRenaming other = (FieldRenaming) o;
        return 
            Objects.deepEquals(this.newFieldName, other.newFieldName) &&
            Objects.deepEquals(this.originalFieldName, other.originalFieldName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            newFieldName,
            originalFieldName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FieldRenaming.class,
                "newFieldName", newFieldName,
                "originalFieldName", originalFieldName);
    }
    
    public final static class Builder {
 
        private String newFieldName;
 
        private String originalFieldName;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The new name for the field after renaming.
         */
        public Builder newFieldName(String newFieldName) {
            Utils.checkNotNull(newFieldName, "newFieldName");
            this.newFieldName = newFieldName;
            return this;
        }

        /**
         * The current name of the field to rename.
         */
        public Builder originalFieldName(String originalFieldName) {
            Utils.checkNotNull(originalFieldName, "originalFieldName");
            this.originalFieldName = originalFieldName;
            return this;
        }
        
        public FieldRenaming build() {
            return new FieldRenaming(
                newFieldName,
                originalFieldName);
        }
    }
}
