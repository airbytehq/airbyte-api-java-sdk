/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class DestinationDynamodb {

    /**
     * The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.
     */
    @JsonProperty("access_key_id")
    private String accessKeyId;

    @JsonProperty("destinationType")
    private Dynamodb destinationType;

    /**
     * This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamodb_endpoint")
    private Optional<? extends String> dynamodbEndpoint;

    /**
     * The region of the DynamoDB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamodb_region")
    private Optional<? extends DynamoDBRegion> dynamodbRegion;

    /**
     * The prefix to use when naming DynamoDB tables.
     */
    @JsonProperty("dynamodb_table_name_prefix")
    private String dynamodbTableNamePrefix;

    /**
     * The corresponding secret to the access key id.
     */
    @JsonProperty("secret_access_key")
    private String secretAccessKey;

    @JsonCreator
    public DestinationDynamodb(
            @JsonProperty("access_key_id") String accessKeyId,
            @JsonProperty("dynamodb_endpoint") Optional<? extends String> dynamodbEndpoint,
            @JsonProperty("dynamodb_region") Optional<? extends DynamoDBRegion> dynamodbRegion,
            @JsonProperty("dynamodb_table_name_prefix") String dynamodbTableNamePrefix,
            @JsonProperty("secret_access_key") String secretAccessKey) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(dynamodbEndpoint, "dynamodbEndpoint");
        Utils.checkNotNull(dynamodbRegion, "dynamodbRegion");
        Utils.checkNotNull(dynamodbTableNamePrefix, "dynamodbTableNamePrefix");
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.accessKeyId = accessKeyId;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.dynamodbEndpoint = dynamodbEndpoint;
        this.dynamodbRegion = dynamodbRegion;
        this.dynamodbTableNamePrefix = dynamodbTableNamePrefix;
        this.secretAccessKey = secretAccessKey;
    }
    
    public DestinationDynamodb(
            String accessKeyId,
            String dynamodbTableNamePrefix,
            String secretAccessKey) {
        this(accessKeyId, Optional.empty(), Optional.empty(), dynamodbTableNamePrefix, secretAccessKey);
    }

    /**
     * The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.
     */
    @JsonIgnore
    public String accessKeyId() {
        return accessKeyId;
    }

    @JsonIgnore
    public Dynamodb destinationType() {
        return destinationType;
    }

    /**
     * This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> dynamodbEndpoint() {
        return (Optional<String>) dynamodbEndpoint;
    }

    /**
     * The region of the DynamoDB.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DynamoDBRegion> dynamodbRegion() {
        return (Optional<DynamoDBRegion>) dynamodbRegion;
    }

    /**
     * The prefix to use when naming DynamoDB tables.
     */
    @JsonIgnore
    public String dynamodbTableNamePrefix() {
        return dynamodbTableNamePrefix;
    }

    /**
     * The corresponding secret to the access key id.
     */
    @JsonIgnore
    public String secretAccessKey() {
        return secretAccessKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.
     */
    public DestinationDynamodb withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).
     */
    public DestinationDynamodb withDynamodbEndpoint(String dynamodbEndpoint) {
        Utils.checkNotNull(dynamodbEndpoint, "dynamodbEndpoint");
        this.dynamodbEndpoint = Optional.ofNullable(dynamodbEndpoint);
        return this;
    }

    /**
     * This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).
     */
    public DestinationDynamodb withDynamodbEndpoint(Optional<? extends String> dynamodbEndpoint) {
        Utils.checkNotNull(dynamodbEndpoint, "dynamodbEndpoint");
        this.dynamodbEndpoint = dynamodbEndpoint;
        return this;
    }

    /**
     * The region of the DynamoDB.
     */
    public DestinationDynamodb withDynamodbRegion(DynamoDBRegion dynamodbRegion) {
        Utils.checkNotNull(dynamodbRegion, "dynamodbRegion");
        this.dynamodbRegion = Optional.ofNullable(dynamodbRegion);
        return this;
    }

    /**
     * The region of the DynamoDB.
     */
    public DestinationDynamodb withDynamodbRegion(Optional<? extends DynamoDBRegion> dynamodbRegion) {
        Utils.checkNotNull(dynamodbRegion, "dynamodbRegion");
        this.dynamodbRegion = dynamodbRegion;
        return this;
    }

    /**
     * The prefix to use when naming DynamoDB tables.
     */
    public DestinationDynamodb withDynamodbTableNamePrefix(String dynamodbTableNamePrefix) {
        Utils.checkNotNull(dynamodbTableNamePrefix, "dynamodbTableNamePrefix");
        this.dynamodbTableNamePrefix = dynamodbTableNamePrefix;
        return this;
    }

    /**
     * The corresponding secret to the access key id.
     */
    public DestinationDynamodb withSecretAccessKey(String secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = secretAccessKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationDynamodb other = (DestinationDynamodb) o;
        return 
            java.util.Objects.deepEquals(this.accessKeyId, other.accessKeyId) &&
            java.util.Objects.deepEquals(this.destinationType, other.destinationType) &&
            java.util.Objects.deepEquals(this.dynamodbEndpoint, other.dynamodbEndpoint) &&
            java.util.Objects.deepEquals(this.dynamodbRegion, other.dynamodbRegion) &&
            java.util.Objects.deepEquals(this.dynamodbTableNamePrefix, other.dynamodbTableNamePrefix) &&
            java.util.Objects.deepEquals(this.secretAccessKey, other.secretAccessKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKeyId,
            destinationType,
            dynamodbEndpoint,
            dynamodbRegion,
            dynamodbTableNamePrefix,
            secretAccessKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationDynamodb.class,
                "accessKeyId", accessKeyId,
                "destinationType", destinationType,
                "dynamodbEndpoint", dynamodbEndpoint,
                "dynamodbRegion", dynamodbRegion,
                "dynamodbTableNamePrefix", dynamodbTableNamePrefix,
                "secretAccessKey", secretAccessKey);
    }
    
    public final static class Builder {
 
        private String accessKeyId;
 
        private Optional<? extends String> dynamodbEndpoint;
 
        private Optional<? extends DynamoDBRegion> dynamodbRegion;
 
        private String dynamodbTableNamePrefix;
 
        private String secretAccessKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.
         */
        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).
         */
        public Builder dynamodbEndpoint(String dynamodbEndpoint) {
            Utils.checkNotNull(dynamodbEndpoint, "dynamodbEndpoint");
            this.dynamodbEndpoint = Optional.ofNullable(dynamodbEndpoint);
            return this;
        }

        /**
         * This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).
         */
        public Builder dynamodbEndpoint(Optional<? extends String> dynamodbEndpoint) {
            Utils.checkNotNull(dynamodbEndpoint, "dynamodbEndpoint");
            this.dynamodbEndpoint = dynamodbEndpoint;
            return this;
        }

        /**
         * The region of the DynamoDB.
         */
        public Builder dynamodbRegion(DynamoDBRegion dynamodbRegion) {
            Utils.checkNotNull(dynamodbRegion, "dynamodbRegion");
            this.dynamodbRegion = Optional.ofNullable(dynamodbRegion);
            return this;
        }

        /**
         * The region of the DynamoDB.
         */
        public Builder dynamodbRegion(Optional<? extends DynamoDBRegion> dynamodbRegion) {
            Utils.checkNotNull(dynamodbRegion, "dynamodbRegion");
            this.dynamodbRegion = dynamodbRegion;
            return this;
        }

        /**
         * The prefix to use when naming DynamoDB tables.
         */
        public Builder dynamodbTableNamePrefix(String dynamodbTableNamePrefix) {
            Utils.checkNotNull(dynamodbTableNamePrefix, "dynamodbTableNamePrefix");
            this.dynamodbTableNamePrefix = dynamodbTableNamePrefix;
            return this;
        }

        /**
         * The corresponding secret to the access key id.
         */
        public Builder secretAccessKey(String secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        
        public DestinationDynamodb build() {
            if (dynamodbEndpoint == null) {
                dynamodbEndpoint = _SINGLETON_VALUE_DynamodbEndpoint.value();
            }
            if (dynamodbRegion == null) {
                dynamodbRegion = _SINGLETON_VALUE_DynamodbRegion.value();
            }
            return new DestinationDynamodb(
                accessKeyId,
                dynamodbEndpoint,
                dynamodbRegion,
                dynamodbTableNamePrefix,
                secretAccessKey);
        }

        private static final LazySingletonValue<Dynamodb> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"dynamodb\"",
                        new TypeReference<Dynamodb>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_DynamodbEndpoint =
                new LazySingletonValue<>(
                        "dynamodb_endpoint",
                        "\"\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends DynamoDBRegion>> _SINGLETON_VALUE_DynamodbRegion =
                new LazySingletonValue<>(
                        "dynamodb_region",
                        "\"\"",
                        new TypeReference<Optional<? extends DynamoDBRegion>>() {});
    }
}

