/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;

public class SourceAircall {

    /**
     * App ID found at settings https://dashboard.aircall.io/integrations/api-keys
     */
    @JsonProperty("api_id")
    private String apiId;

    /**
     * App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)
     */
    @JsonProperty("api_token")
    private String apiToken;

    @JsonProperty("sourceType")
    private Aircall sourceType;

    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceAircall(
            @JsonProperty("api_id") String apiId,
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiId, "apiId");
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(startDate, "startDate");
        this.apiId = apiId;
        this.apiToken = apiToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * App ID found at settings https://dashboard.aircall.io/integrations/api-keys
     */
    @JsonIgnore
    public String apiId() {
        return apiId;
    }

    /**
     * App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    @JsonIgnore
    public Aircall sourceType() {
        return sourceType;
    }

    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * App ID found at settings https://dashboard.aircall.io/integrations/api-keys
     */
    public SourceAircall withApiId(String apiId) {
        Utils.checkNotNull(apiId, "apiId");
        this.apiId = apiId;
        return this;
    }

    /**
     * App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)
     */
    public SourceAircall withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    public SourceAircall withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAircall other = (SourceAircall) o;
        return 
            Objects.deepEquals(this.apiId, other.apiId) &&
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiId,
            apiToken,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAircall.class,
                "apiId", apiId,
                "apiToken", apiToken,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiId;
 
        private String apiToken;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * App ID found at settings https://dashboard.aircall.io/integrations/api-keys
         */
        public Builder apiId(String apiId) {
            Utils.checkNotNull(apiId, "apiId");
            this.apiId = apiId;
            return this;
        }

        /**
         * App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * Date time filter for incremental filter, Specify which date to extract from.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceAircall build() {
            return new SourceAircall(
                apiId,
                apiToken,
                startDate);
        }

        private static final LazySingletonValue<Aircall> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"aircall\"",
                        new TypeReference<Aircall>() {});
    }
}
