/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class MongoDBAtlas {

    /**
     * URL of a cluster to connect to.
     */
    @JsonProperty("cluster_url")
    private String clusterUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    private Optional<? extends DestinationMongodbSchemasInstance> instance;

    @JsonCreator
    public MongoDBAtlas(
            @JsonProperty("cluster_url") String clusterUrl,
            @JsonProperty("instance") Optional<? extends DestinationMongodbSchemasInstance> instance) {
        Utils.checkNotNull(clusterUrl, "clusterUrl");
        Utils.checkNotNull(instance, "instance");
        this.clusterUrl = clusterUrl;
        this.instance = instance;
    }
    
    public MongoDBAtlas(
            String clusterUrl) {
        this(clusterUrl, Optional.empty());
    }

    /**
     * URL of a cluster to connect to.
     */
    @JsonIgnore
    public String clusterUrl() {
        return clusterUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationMongodbSchemasInstance> instance() {
        return (Optional<DestinationMongodbSchemasInstance>) instance;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * URL of a cluster to connect to.
     */
    public MongoDBAtlas withClusterUrl(String clusterUrl) {
        Utils.checkNotNull(clusterUrl, "clusterUrl");
        this.clusterUrl = clusterUrl;
        return this;
    }

    public MongoDBAtlas withInstance(DestinationMongodbSchemasInstance instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = Optional.ofNullable(instance);
        return this;
    }

    public MongoDBAtlas withInstance(Optional<? extends DestinationMongodbSchemasInstance> instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = instance;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MongoDBAtlas other = (MongoDBAtlas) o;
        return 
            Objects.deepEquals(this.clusterUrl, other.clusterUrl) &&
            Objects.deepEquals(this.instance, other.instance);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clusterUrl,
            instance);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MongoDBAtlas.class,
                "clusterUrl", clusterUrl,
                "instance", instance);
    }
    
    public final static class Builder {
 
        private String clusterUrl;
 
        private Optional<? extends DestinationMongodbSchemasInstance> instance;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL of a cluster to connect to.
         */
        public Builder clusterUrl(String clusterUrl) {
            Utils.checkNotNull(clusterUrl, "clusterUrl");
            this.clusterUrl = clusterUrl;
            return this;
        }

        public Builder instance(DestinationMongodbSchemasInstance instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = Optional.ofNullable(instance);
            return this;
        }

        public Builder instance(Optional<? extends DestinationMongodbSchemasInstance> instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = instance;
            return this;
        }
        
        public MongoDBAtlas build() {
            if (instance == null) {
                instance = _SINGLETON_VALUE_Instance.value();
            }
            return new MongoDBAtlas(
                clusterUrl,
                instance);
        }

        private static final LazySingletonValue<Optional<? extends DestinationMongodbSchemasInstance>> _SINGLETON_VALUE_Instance =
                new LazySingletonValue<>(
                        "instance",
                        "\"atlas\"",
                        new TypeReference<Optional<? extends DestinationMongodbSchemasInstance>>() {});
    }
}
