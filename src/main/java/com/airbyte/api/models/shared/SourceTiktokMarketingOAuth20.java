/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SourceTiktokMarketingOAuth20 {

    /**
     * Long-term Authorized Access Token.
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiser_id")
    private Optional<String> advertiserId;

    /**
     * The Developer Application App ID.
     */
    @JsonProperty("app_id")
    private String appId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private Optional<? extends SourceTiktokMarketingAuthType> authType;

    /**
     * The Developer Application Secret.
     */
    @JsonProperty("secret")
    private String secret;

    @JsonCreator
    public SourceTiktokMarketingOAuth20(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("advertiser_id") Optional<String> advertiserId,
            @JsonProperty("app_id") String appId,
            @JsonProperty("secret") String secret) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(advertiserId, "advertiserId");
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(secret, "secret");
        this.accessToken = accessToken;
        this.advertiserId = advertiserId;
        this.appId = appId;
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.secret = secret;
    }
    
    public SourceTiktokMarketingOAuth20(
            String accessToken,
            String appId,
            String secret) {
        this(accessToken, Optional.empty(), appId, secret);
    }

    /**
     * Long-term Authorized Access Token.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
     */
    @JsonIgnore
    public Optional<String> advertiserId() {
        return advertiserId;
    }

    /**
     * The Developer Application App ID.
     */
    @JsonIgnore
    public String appId() {
        return appId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceTiktokMarketingAuthType> authType() {
        return (Optional<SourceTiktokMarketingAuthType>) authType;
    }

    /**
     * The Developer Application Secret.
     */
    @JsonIgnore
    public String secret() {
        return secret;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Long-term Authorized Access Token.
     */
    public SourceTiktokMarketingOAuth20 withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
     */
    public SourceTiktokMarketingOAuth20 withAdvertiserId(String advertiserId) {
        Utils.checkNotNull(advertiserId, "advertiserId");
        this.advertiserId = Optional.ofNullable(advertiserId);
        return this;
    }

    /**
     * The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
     */
    public SourceTiktokMarketingOAuth20 withAdvertiserId(Optional<String> advertiserId) {
        Utils.checkNotNull(advertiserId, "advertiserId");
        this.advertiserId = advertiserId;
        return this;
    }

    /**
     * The Developer Application App ID.
     */
    public SourceTiktokMarketingOAuth20 withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    /**
     * The Developer Application Secret.
     */
    public SourceTiktokMarketingOAuth20 withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceTiktokMarketingOAuth20 other = (SourceTiktokMarketingOAuth20) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.advertiserId, other.advertiserId) &&
            Objects.deepEquals(this.appId, other.appId) &&
            Objects.deepEquals(this.authType, other.authType) &&
            Objects.deepEquals(this.secret, other.secret);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            advertiserId,
            appId,
            authType,
            secret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceTiktokMarketingOAuth20.class,
                "accessToken", accessToken,
                "advertiserId", advertiserId,
                "appId", appId,
                "authType", authType,
                "secret", secret);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private Optional<String> advertiserId = Optional.empty();
 
        private String appId;
 
        private String secret;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Long-term Authorized Access Token.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
         */
        public Builder advertiserId(String advertiserId) {
            Utils.checkNotNull(advertiserId, "advertiserId");
            this.advertiserId = Optional.ofNullable(advertiserId);
            return this;
        }

        /**
         * The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
         */
        public Builder advertiserId(Optional<String> advertiserId) {
            Utils.checkNotNull(advertiserId, "advertiserId");
            this.advertiserId = advertiserId;
            return this;
        }

        /**
         * The Developer Application App ID.
         */
        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        /**
         * The Developer Application Secret.
         */
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }
        
        public SourceTiktokMarketingOAuth20 build() {
            return new SourceTiktokMarketingOAuth20(
                accessToken,
                advertiserId,
                appId,
                secret);
        }

        private static final LazySingletonValue<Optional<? extends SourceTiktokMarketingAuthType>> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"oauth2.0\"",
                        new TypeReference<Optional<? extends SourceTiktokMarketingAuthType>>() {});
    }
}

