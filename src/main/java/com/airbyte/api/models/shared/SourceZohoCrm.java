/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class SourceZohoCrm {

    /**
     * OAuth2.0 Client ID
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * OAuth2.0 Client Secret
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Please choose the region of your Data Center location. More info by this &lt;a href="https://www.zoho.com/crm/developer/docs/api/v2/multi-dc.html"&gt;Link&lt;/a&gt;
     */
    @JsonProperty("dc_region")
    private DataCenterLocation dcRegion;

    /**
     * Choose your Edition of Zoho CRM to determine API Concurrency Limits
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("edition")
    private Optional<? extends ZohoCRMEdition> edition;

    /**
     * Please choose the environment
     */
    @JsonProperty("environment")
    private SourceZohoCrmEnvironment environment;

    /**
     * OAuth2.0 Refresh Token
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private ZohoCrm sourceType;

    /**
     * ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_datetime")
    private JsonNullable<OffsetDateTime> startDatetime;

    @JsonCreator
    public SourceZohoCrm(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("dc_region") DataCenterLocation dcRegion,
            @JsonProperty("edition") Optional<? extends ZohoCRMEdition> edition,
            @JsonProperty("environment") SourceZohoCrmEnvironment environment,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("start_datetime") JsonNullable<OffsetDateTime> startDatetime) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(dcRegion, "dcRegion");
        Utils.checkNotNull(edition, "edition");
        Utils.checkNotNull(environment, "environment");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(startDatetime, "startDatetime");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.dcRegion = dcRegion;
        this.edition = edition;
        this.environment = environment;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDatetime = startDatetime;
    }
    
    public SourceZohoCrm(
            String clientId,
            String clientSecret,
            DataCenterLocation dcRegion,
            SourceZohoCrmEnvironment environment,
            String refreshToken) {
        this(clientId, clientSecret, dcRegion, Optional.empty(), environment, refreshToken, JsonNullable.undefined());
    }

    /**
     * OAuth2.0 Client ID
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * OAuth2.0 Client Secret
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Please choose the region of your Data Center location. More info by this &lt;a href="https://www.zoho.com/crm/developer/docs/api/v2/multi-dc.html"&gt;Link&lt;/a&gt;
     */
    @JsonIgnore
    public DataCenterLocation dcRegion() {
        return dcRegion;
    }

    /**
     * Choose your Edition of Zoho CRM to determine API Concurrency Limits
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ZohoCRMEdition> edition() {
        return (Optional<ZohoCRMEdition>) edition;
    }

    /**
     * Please choose the environment
     */
    @JsonIgnore
    public SourceZohoCrmEnvironment environment() {
        return environment;
    }

    /**
     * OAuth2.0 Refresh Token
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    @JsonIgnore
    public ZohoCrm sourceType() {
        return sourceType;
    }

    /**
     * ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> startDatetime() {
        return startDatetime;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * OAuth2.0 Client ID
     */
    public SourceZohoCrm withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * OAuth2.0 Client Secret
     */
    public SourceZohoCrm withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Please choose the region of your Data Center location. More info by this &lt;a href="https://www.zoho.com/crm/developer/docs/api/v2/multi-dc.html"&gt;Link&lt;/a&gt;
     */
    public SourceZohoCrm withDcRegion(DataCenterLocation dcRegion) {
        Utils.checkNotNull(dcRegion, "dcRegion");
        this.dcRegion = dcRegion;
        return this;
    }

    /**
     * Choose your Edition of Zoho CRM to determine API Concurrency Limits
     */
    public SourceZohoCrm withEdition(ZohoCRMEdition edition) {
        Utils.checkNotNull(edition, "edition");
        this.edition = Optional.ofNullable(edition);
        return this;
    }

    /**
     * Choose your Edition of Zoho CRM to determine API Concurrency Limits
     */
    public SourceZohoCrm withEdition(Optional<? extends ZohoCRMEdition> edition) {
        Utils.checkNotNull(edition, "edition");
        this.edition = edition;
        return this;
    }

    /**
     * Please choose the environment
     */
    public SourceZohoCrm withEnvironment(SourceZohoCrmEnvironment environment) {
        Utils.checkNotNull(environment, "environment");
        this.environment = environment;
        return this;
    }

    /**
     * OAuth2.0 Refresh Token
     */
    public SourceZohoCrm withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`
     */
    public SourceZohoCrm withStartDatetime(OffsetDateTime startDatetime) {
        Utils.checkNotNull(startDatetime, "startDatetime");
        this.startDatetime = JsonNullable.of(startDatetime);
        return this;
    }

    /**
     * ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`
     */
    public SourceZohoCrm withStartDatetime(JsonNullable<OffsetDateTime> startDatetime) {
        Utils.checkNotNull(startDatetime, "startDatetime");
        this.startDatetime = startDatetime;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZohoCrm other = (SourceZohoCrm) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.dcRegion, other.dcRegion) &&
            Objects.deepEquals(this.edition, other.edition) &&
            Objects.deepEquals(this.environment, other.environment) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDatetime, other.startDatetime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientSecret,
            dcRegion,
            edition,
            environment,
            refreshToken,
            sourceType,
            startDatetime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZohoCrm.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "dcRegion", dcRegion,
                "edition", edition,
                "environment", environment,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "startDatetime", startDatetime);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private DataCenterLocation dcRegion;
 
        private Optional<? extends ZohoCRMEdition> edition;
 
        private SourceZohoCrmEnvironment environment;
 
        private String refreshToken;
 
        private JsonNullable<OffsetDateTime> startDatetime = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * OAuth2.0 Client ID
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * OAuth2.0 Client Secret
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Please choose the region of your Data Center location. More info by this &lt;a href="https://www.zoho.com/crm/developer/docs/api/v2/multi-dc.html"&gt;Link&lt;/a&gt;
         */
        public Builder dcRegion(DataCenterLocation dcRegion) {
            Utils.checkNotNull(dcRegion, "dcRegion");
            this.dcRegion = dcRegion;
            return this;
        }

        /**
         * Choose your Edition of Zoho CRM to determine API Concurrency Limits
         */
        public Builder edition(ZohoCRMEdition edition) {
            Utils.checkNotNull(edition, "edition");
            this.edition = Optional.ofNullable(edition);
            return this;
        }

        /**
         * Choose your Edition of Zoho CRM to determine API Concurrency Limits
         */
        public Builder edition(Optional<? extends ZohoCRMEdition> edition) {
            Utils.checkNotNull(edition, "edition");
            this.edition = edition;
            return this;
        }

        /**
         * Please choose the environment
         */
        public Builder environment(SourceZohoCrmEnvironment environment) {
            Utils.checkNotNull(environment, "environment");
            this.environment = environment;
            return this;
        }

        /**
         * OAuth2.0 Refresh Token
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`
         */
        public Builder startDatetime(OffsetDateTime startDatetime) {
            Utils.checkNotNull(startDatetime, "startDatetime");
            this.startDatetime = JsonNullable.of(startDatetime);
            return this;
        }

        /**
         * ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`
         */
        public Builder startDatetime(JsonNullable<OffsetDateTime> startDatetime) {
            Utils.checkNotNull(startDatetime, "startDatetime");
            this.startDatetime = startDatetime;
            return this;
        }
        
        public SourceZohoCrm build() {
            if (edition == null) {
                edition = _SINGLETON_VALUE_Edition.value();
            }
            return new SourceZohoCrm(
                clientId,
                clientSecret,
                dcRegion,
                edition,
                environment,
                refreshToken,
                startDatetime);
        }

        private static final LazySingletonValue<Optional<? extends ZohoCRMEdition>> _SINGLETON_VALUE_Edition =
                new LazySingletonValue<>(
                        "edition",
                        "\"Free\"",
                        new TypeReference<Optional<? extends ZohoCRMEdition>>() {});

        private static final LazySingletonValue<ZohoCrm> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"zoho-crm\"",
                        new TypeReference<ZohoCrm>() {});
    }
}
