/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * UserResponse - Provides details of a single user.
 */

public class UserResponse {

    @JsonProperty("email")
    private String email;

    /**
     * Name of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Internal Airbyte user ID
     */
    @JsonProperty("userId")
    private String userId;

    @JsonCreator
    public UserResponse(
            @JsonProperty("email") String email,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("userId") String userId) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(userId, "userId");
        this.email = email;
        this.name = name;
        this.userId = userId;
    }
    
    public UserResponse(
            String email,
            String userId) {
        this(email, Optional.empty(), userId);
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * Name of the user
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * Internal Airbyte user ID
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UserResponse withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Name of the user
     */
    public UserResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the user
     */
    public UserResponse withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Internal Airbyte user ID
     */
    public UserResponse withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserResponse other = (UserResponse) o;
        return 
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            email,
            name,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserResponse.class,
                "email", email,
                "name", name,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private String email;
 
        private Optional<? extends String> name = Optional.empty();
 
        private String userId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Name of the user
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the user
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Internal Airbyte user ID
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public UserResponse build() {
            return new UserResponse(
                email,
                name,
                userId);
        }
    }
}

