/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceGoogleDrive
 * 
 * <p>Used during spec; allows the developer to configure the cloud provider specific options
 * that are needed when users configure a file-based source.
 */
public class SourceGoogleDrive {

    /**
     * Credentials for connecting to the Google Drive API
     */
    @JsonProperty("credentials")
    private SourceGoogleDriveAuthentication credentials;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_method")
    private Optional<? extends DeliveryMethod> deliveryMethod;

    /**
     * URL for the folder you want to sync. Using individual streams and glob patterns, it's possible to only sync a subset of all files located in the folder.
     */
    @JsonProperty("folder_url")
    private String folderUrl;

    @JsonProperty("sourceType")
    private SourceGoogleDriveGoogleDrive sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    @JsonProperty("streams")
    private List<SourceGoogleDriveFileBasedStreamConfig> streams;

    @JsonCreator
    public SourceGoogleDrive(
            @JsonProperty("credentials") SourceGoogleDriveAuthentication credentials,
            @JsonProperty("delivery_method") Optional<? extends DeliveryMethod> deliveryMethod,
            @JsonProperty("folder_url") String folderUrl,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("streams") List<SourceGoogleDriveFileBasedStreamConfig> streams) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        Utils.checkNotNull(folderUrl, "folderUrl");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(streams, "streams");
        this.credentials = credentials;
        this.deliveryMethod = deliveryMethod;
        this.folderUrl = folderUrl;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.streams = streams;
    }
    
    public SourceGoogleDrive(
            SourceGoogleDriveAuthentication credentials,
            String folderUrl,
            List<SourceGoogleDriveFileBasedStreamConfig> streams) {
        this(credentials, Optional.empty(), folderUrl, Optional.empty(), streams);
    }

    /**
     * Credentials for connecting to the Google Drive API
     */
    @JsonIgnore
    public SourceGoogleDriveAuthentication credentials() {
        return credentials;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DeliveryMethod> deliveryMethod() {
        return (Optional<DeliveryMethod>) deliveryMethod;
    }

    /**
     * URL for the folder you want to sync. Using individual streams and glob patterns, it's possible to only sync a subset of all files located in the folder.
     */
    @JsonIgnore
    public String folderUrl() {
        return folderUrl;
    }

    @JsonIgnore
    public SourceGoogleDriveGoogleDrive sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    @JsonIgnore
    public List<SourceGoogleDriveFileBasedStreamConfig> streams() {
        return streams;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Credentials for connecting to the Google Drive API
     */
    public SourceGoogleDrive withCredentials(SourceGoogleDriveAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    public SourceGoogleDrive withDeliveryMethod(DeliveryMethod deliveryMethod) {
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        this.deliveryMethod = Optional.ofNullable(deliveryMethod);
        return this;
    }

    public SourceGoogleDrive withDeliveryMethod(Optional<? extends DeliveryMethod> deliveryMethod) {
        Utils.checkNotNull(deliveryMethod, "deliveryMethod");
        this.deliveryMethod = deliveryMethod;
        return this;
    }

    /**
     * URL for the folder you want to sync. Using individual streams and glob patterns, it's possible to only sync a subset of all files located in the folder.
     */
    public SourceGoogleDrive withFolderUrl(String folderUrl) {
        Utils.checkNotNull(folderUrl, "folderUrl");
        this.folderUrl = folderUrl;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    public SourceGoogleDrive withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    public SourceGoogleDrive withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    public SourceGoogleDrive withStreams(List<SourceGoogleDriveFileBasedStreamConfig> streams) {
        Utils.checkNotNull(streams, "streams");
        this.streams = streams;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGoogleDrive other = (SourceGoogleDrive) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.deliveryMethod, other.deliveryMethod) &&
            Objects.deepEquals(this.folderUrl, other.folderUrl) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.streams, other.streams);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            deliveryMethod,
            folderUrl,
            sourceType,
            startDate,
            streams);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGoogleDrive.class,
                "credentials", credentials,
                "deliveryMethod", deliveryMethod,
                "folderUrl", folderUrl,
                "sourceType", sourceType,
                "startDate", startDate,
                "streams", streams);
    }
    
    public final static class Builder {
 
        private SourceGoogleDriveAuthentication credentials;
 
        private Optional<? extends DeliveryMethod> deliveryMethod = Optional.empty();
 
        private String folderUrl;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
 
        private List<SourceGoogleDriveFileBasedStreamConfig> streams;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Credentials for connecting to the Google Drive API
         */
        public Builder credentials(SourceGoogleDriveAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        public Builder deliveryMethod(DeliveryMethod deliveryMethod) {
            Utils.checkNotNull(deliveryMethod, "deliveryMethod");
            this.deliveryMethod = Optional.ofNullable(deliveryMethod);
            return this;
        }

        public Builder deliveryMethod(Optional<? extends DeliveryMethod> deliveryMethod) {
            Utils.checkNotNull(deliveryMethod, "deliveryMethod");
            this.deliveryMethod = deliveryMethod;
            return this;
        }

        /**
         * URL for the folder you want to sync. Using individual streams and glob patterns, it's possible to only sync a subset of all files located in the folder.
         */
        public Builder folderUrl(String folderUrl) {
            Utils.checkNotNull(folderUrl, "folderUrl");
            this.folderUrl = folderUrl;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
         */
        public Builder streams(List<SourceGoogleDriveFileBasedStreamConfig> streams) {
            Utils.checkNotNull(streams, "streams");
            this.streams = streams;
            return this;
        }
        
        public SourceGoogleDrive build() {
            return new SourceGoogleDrive(
                credentials,
                deliveryMethod,
                folderUrl,
                startDate,
                streams);
        }

        private static final LazySingletonValue<SourceGoogleDriveGoogleDrive> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"google-drive\"",
                        new TypeReference<SourceGoogleDriveGoogleDrive>() {});
    }
}
