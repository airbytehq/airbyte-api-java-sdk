/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ConnectionPatchRequest {

    /**
     * A list of configured stream options for a connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configurations")
    private Optional<? extends StreamConfigurations> configurations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataResidency")
    private Optional<? extends GeographyEnumNoDefault> dataResidency;

    /**
     * Optional name of the connection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Define the location where the data will be stored in the destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceDefinition")
    private Optional<? extends NamespaceDefinitionEnumNoDefault> namespaceDefinition;

    /**
     * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaceFormat")
    private Optional<? extends String> namespaceFormat;

    /**
     * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonBreakingSchemaUpdatesBehavior")
    private Optional<? extends NonBreakingSchemaUpdatesBehaviorEnumNoDefault> nonBreakingSchemaUpdatesBehavior;

    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_” causes “projects” =&gt; “airbyte_projects”).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private Optional<? extends String> prefix;

    /**
     * schedule for when the the connection should run, per the schedule type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    private Optional<? extends ConnectionSchedule> schedule;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ConnectionStatusEnum> status;

    public ConnectionPatchRequest(
            @JsonProperty("configurations") Optional<? extends StreamConfigurations> configurations,
            @JsonProperty("dataResidency") Optional<? extends GeographyEnumNoDefault> dataResidency,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("namespaceDefinition") Optional<? extends NamespaceDefinitionEnumNoDefault> namespaceDefinition,
            @JsonProperty("namespaceFormat") Optional<? extends String> namespaceFormat,
            @JsonProperty("nonBreakingSchemaUpdatesBehavior") Optional<? extends NonBreakingSchemaUpdatesBehaviorEnumNoDefault> nonBreakingSchemaUpdatesBehavior,
            @JsonProperty("prefix") Optional<? extends String> prefix,
            @JsonProperty("schedule") Optional<? extends ConnectionSchedule> schedule,
            @JsonProperty("status") Optional<? extends ConnectionStatusEnum> status) {
        Utils.checkNotNull(configurations, "configurations");
        Utils.checkNotNull(dataResidency, "dataResidency");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(namespaceDefinition, "namespaceDefinition");
        Utils.checkNotNull(namespaceFormat, "namespaceFormat");
        Utils.checkNotNull(nonBreakingSchemaUpdatesBehavior, "nonBreakingSchemaUpdatesBehavior");
        Utils.checkNotNull(prefix, "prefix");
        Utils.checkNotNull(schedule, "schedule");
        Utils.checkNotNull(status, "status");
        this.configurations = configurations;
        this.dataResidency = dataResidency;
        this.name = name;
        this.namespaceDefinition = namespaceDefinition;
        this.namespaceFormat = namespaceFormat;
        this.nonBreakingSchemaUpdatesBehavior = nonBreakingSchemaUpdatesBehavior;
        this.prefix = prefix;
        this.schedule = schedule;
        this.status = status;
    }

    /**
     * A list of configured stream options for a connection.
     */
    public Optional<? extends StreamConfigurations> configurations() {
        return configurations;
    }

    public Optional<? extends GeographyEnumNoDefault> dataResidency() {
        return dataResidency;
    }

    /**
     * Optional name of the connection
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Define the location where the data will be stored in the destination
     */
    public Optional<? extends NamespaceDefinitionEnumNoDefault> namespaceDefinition() {
        return namespaceDefinition;
    }

    /**
     * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    public Optional<? extends String> namespaceFormat() {
        return namespaceFormat;
    }

    /**
     * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
     */
    public Optional<? extends NonBreakingSchemaUpdatesBehaviorEnumNoDefault> nonBreakingSchemaUpdatesBehavior() {
        return nonBreakingSchemaUpdatesBehavior;
    }

    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_” causes “projects” =&gt; “airbyte_projects”).
     */
    public Optional<? extends String> prefix() {
        return prefix;
    }

    /**
     * schedule for when the the connection should run, per the schedule type
     */
    public Optional<? extends ConnectionSchedule> schedule() {
        return schedule;
    }

    public Optional<? extends ConnectionStatusEnum> status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A list of configured stream options for a connection.
     */
    public ConnectionPatchRequest withConfigurations(StreamConfigurations configurations) {
        Utils.checkNotNull(configurations, "configurations");
        this.configurations = Optional.ofNullable(configurations);
        return this;
    }

    /**
     * A list of configured stream options for a connection.
     */
    public ConnectionPatchRequest withConfigurations(Optional<? extends StreamConfigurations> configurations) {
        Utils.checkNotNull(configurations, "configurations");
        this.configurations = configurations;
        return this;
    }

    public ConnectionPatchRequest withDataResidency(GeographyEnumNoDefault dataResidency) {
        Utils.checkNotNull(dataResidency, "dataResidency");
        this.dataResidency = Optional.ofNullable(dataResidency);
        return this;
    }

    public ConnectionPatchRequest withDataResidency(Optional<? extends GeographyEnumNoDefault> dataResidency) {
        Utils.checkNotNull(dataResidency, "dataResidency");
        this.dataResidency = dataResidency;
        return this;
    }

    /**
     * Optional name of the connection
     */
    public ConnectionPatchRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Optional name of the connection
     */
    public ConnectionPatchRequest withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Define the location where the data will be stored in the destination
     */
    public ConnectionPatchRequest withNamespaceDefinition(NamespaceDefinitionEnumNoDefault namespaceDefinition) {
        Utils.checkNotNull(namespaceDefinition, "namespaceDefinition");
        this.namespaceDefinition = Optional.ofNullable(namespaceDefinition);
        return this;
    }

    /**
     * Define the location where the data will be stored in the destination
     */
    public ConnectionPatchRequest withNamespaceDefinition(Optional<? extends NamespaceDefinitionEnumNoDefault> namespaceDefinition) {
        Utils.checkNotNull(namespaceDefinition, "namespaceDefinition");
        this.namespaceDefinition = namespaceDefinition;
        return this;
    }

    /**
     * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    public ConnectionPatchRequest withNamespaceFormat(String namespaceFormat) {
        Utils.checkNotNull(namespaceFormat, "namespaceFormat");
        this.namespaceFormat = Optional.ofNullable(namespaceFormat);
        return this;
    }

    /**
     * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
     */
    public ConnectionPatchRequest withNamespaceFormat(Optional<? extends String> namespaceFormat) {
        Utils.checkNotNull(namespaceFormat, "namespaceFormat");
        this.namespaceFormat = namespaceFormat;
        return this;
    }

    /**
     * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
     */
    public ConnectionPatchRequest withNonBreakingSchemaUpdatesBehavior(NonBreakingSchemaUpdatesBehaviorEnumNoDefault nonBreakingSchemaUpdatesBehavior) {
        Utils.checkNotNull(nonBreakingSchemaUpdatesBehavior, "nonBreakingSchemaUpdatesBehavior");
        this.nonBreakingSchemaUpdatesBehavior = Optional.ofNullable(nonBreakingSchemaUpdatesBehavior);
        return this;
    }

    /**
     * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
     */
    public ConnectionPatchRequest withNonBreakingSchemaUpdatesBehavior(Optional<? extends NonBreakingSchemaUpdatesBehaviorEnumNoDefault> nonBreakingSchemaUpdatesBehavior) {
        Utils.checkNotNull(nonBreakingSchemaUpdatesBehavior, "nonBreakingSchemaUpdatesBehavior");
        this.nonBreakingSchemaUpdatesBehavior = nonBreakingSchemaUpdatesBehavior;
        return this;
    }

    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_” causes “projects” =&gt; “airbyte_projects”).
     */
    public ConnectionPatchRequest withPrefix(String prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = Optional.ofNullable(prefix);
        return this;
    }

    /**
     * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_” causes “projects” =&gt; “airbyte_projects”).
     */
    public ConnectionPatchRequest withPrefix(Optional<? extends String> prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = prefix;
        return this;
    }

    /**
     * schedule for when the the connection should run, per the schedule type
     */
    public ConnectionPatchRequest withSchedule(ConnectionSchedule schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = Optional.ofNullable(schedule);
        return this;
    }

    /**
     * schedule for when the the connection should run, per the schedule type
     */
    public ConnectionPatchRequest withSchedule(Optional<? extends ConnectionSchedule> schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = schedule;
        return this;
    }

    public ConnectionPatchRequest withStatus(ConnectionStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public ConnectionPatchRequest withStatus(Optional<? extends ConnectionStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectionPatchRequest other = (ConnectionPatchRequest) o;
        return 
            java.util.Objects.deepEquals(this.configurations, other.configurations) &&
            java.util.Objects.deepEquals(this.dataResidency, other.dataResidency) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.namespaceDefinition, other.namespaceDefinition) &&
            java.util.Objects.deepEquals(this.namespaceFormat, other.namespaceFormat) &&
            java.util.Objects.deepEquals(this.nonBreakingSchemaUpdatesBehavior, other.nonBreakingSchemaUpdatesBehavior) &&
            java.util.Objects.deepEquals(this.prefix, other.prefix) &&
            java.util.Objects.deepEquals(this.schedule, other.schedule) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            configurations,
            dataResidency,
            name,
            namespaceDefinition,
            namespaceFormat,
            nonBreakingSchemaUpdatesBehavior,
            prefix,
            schedule,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectionPatchRequest.class,
                "configurations", configurations,
                "dataResidency", dataResidency,
                "name", name,
                "namespaceDefinition", namespaceDefinition,
                "namespaceFormat", namespaceFormat,
                "nonBreakingSchemaUpdatesBehavior", nonBreakingSchemaUpdatesBehavior,
                "prefix", prefix,
                "schedule", schedule,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends StreamConfigurations> configurations = Optional.empty();
 
        private Optional<? extends GeographyEnumNoDefault> dataResidency = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends NamespaceDefinitionEnumNoDefault> namespaceDefinition = Optional.empty();
 
        private Optional<? extends String> namespaceFormat;
 
        private Optional<? extends NonBreakingSchemaUpdatesBehaviorEnumNoDefault> nonBreakingSchemaUpdatesBehavior = Optional.empty();
 
        private Optional<? extends String> prefix = Optional.empty();
 
        private Optional<? extends ConnectionSchedule> schedule = Optional.empty();
 
        private Optional<? extends ConnectionStatusEnum> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of configured stream options for a connection.
         */
        public Builder configurations(StreamConfigurations configurations) {
            Utils.checkNotNull(configurations, "configurations");
            this.configurations = Optional.ofNullable(configurations);
            return this;
        }

        /**
         * A list of configured stream options for a connection.
         */
        public Builder configurations(Optional<? extends StreamConfigurations> configurations) {
            Utils.checkNotNull(configurations, "configurations");
            this.configurations = configurations;
            return this;
        }

        public Builder dataResidency(GeographyEnumNoDefault dataResidency) {
            Utils.checkNotNull(dataResidency, "dataResidency");
            this.dataResidency = Optional.ofNullable(dataResidency);
            return this;
        }

        public Builder dataResidency(Optional<? extends GeographyEnumNoDefault> dataResidency) {
            Utils.checkNotNull(dataResidency, "dataResidency");
            this.dataResidency = dataResidency;
            return this;
        }

        /**
         * Optional name of the connection
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Optional name of the connection
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Define the location where the data will be stored in the destination
         */
        public Builder namespaceDefinition(NamespaceDefinitionEnumNoDefault namespaceDefinition) {
            Utils.checkNotNull(namespaceDefinition, "namespaceDefinition");
            this.namespaceDefinition = Optional.ofNullable(namespaceDefinition);
            return this;
        }

        /**
         * Define the location where the data will be stored in the destination
         */
        public Builder namespaceDefinition(Optional<? extends NamespaceDefinitionEnumNoDefault> namespaceDefinition) {
            Utils.checkNotNull(namespaceDefinition, "namespaceDefinition");
            this.namespaceDefinition = namespaceDefinition;
            return this;
        }

        /**
         * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
         */
        public Builder namespaceFormat(String namespaceFormat) {
            Utils.checkNotNull(namespaceFormat, "namespaceFormat");
            this.namespaceFormat = Optional.ofNullable(namespaceFormat);
            return this;
        }

        /**
         * Used when namespaceDefinition is 'custom_format'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
         */
        public Builder namespaceFormat(Optional<? extends String> namespaceFormat) {
            Utils.checkNotNull(namespaceFormat, "namespaceFormat");
            this.namespaceFormat = namespaceFormat;
            return this;
        }

        /**
         * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
         */
        public Builder nonBreakingSchemaUpdatesBehavior(NonBreakingSchemaUpdatesBehaviorEnumNoDefault nonBreakingSchemaUpdatesBehavior) {
            Utils.checkNotNull(nonBreakingSchemaUpdatesBehavior, "nonBreakingSchemaUpdatesBehavior");
            this.nonBreakingSchemaUpdatesBehavior = Optional.ofNullable(nonBreakingSchemaUpdatesBehavior);
            return this;
        }

        /**
         * Set how Airbyte handles syncs when it detects a non-breaking schema change in the source
         */
        public Builder nonBreakingSchemaUpdatesBehavior(Optional<? extends NonBreakingSchemaUpdatesBehaviorEnumNoDefault> nonBreakingSchemaUpdatesBehavior) {
            Utils.checkNotNull(nonBreakingSchemaUpdatesBehavior, "nonBreakingSchemaUpdatesBehavior");
            this.nonBreakingSchemaUpdatesBehavior = nonBreakingSchemaUpdatesBehavior;
            return this;
        }

        /**
         * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_” causes “projects” =&gt; “airbyte_projects”).
         */
        public Builder prefix(String prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = Optional.ofNullable(prefix);
            return this;
        }

        /**
         * Prefix that will be prepended to the name of each stream when it is written to the destination (ex. “airbyte_” causes “projects” =&gt; “airbyte_projects”).
         */
        public Builder prefix(Optional<? extends String> prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = prefix;
            return this;
        }

        /**
         * schedule for when the the connection should run, per the schedule type
         */
        public Builder schedule(ConnectionSchedule schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = Optional.ofNullable(schedule);
            return this;
        }

        /**
         * schedule for when the the connection should run, per the schedule type
         */
        public Builder schedule(Optional<? extends ConnectionSchedule> schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = schedule;
            return this;
        }

        public Builder status(ConnectionStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends ConnectionStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public ConnectionPatchRequest build() {
            if (namespaceFormat == null) {
                namespaceFormat = _SINGLETON_VALUE_NamespaceFormat.value();
            }
            return new ConnectionPatchRequest(
                configurations,
                dataResidency,
                name,
                namespaceDefinition,
                namespaceFormat,
                nonBreakingSchemaUpdatesBehavior,
                prefix,
                schedule,
                status);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_NamespaceFormat =
                new LazySingletonValue<>(
                        "namespaceFormat",
                        "null",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

