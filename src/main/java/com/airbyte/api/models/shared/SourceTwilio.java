/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class SourceTwilio {

    /**
     * Twilio account SID
     */
    @JsonProperty("account_sid")
    private String accountSid;

    /**
     * Twilio Auth Token.
     */
    @JsonProperty("auth_token")
    private String authToken;

    /**
     * How far into the past to look for records. (in minutes)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookback_window")
    private Optional<? extends Long> lookbackWindow;

    @JsonProperty("sourceType")
    private Twilio sourceType;

    /**
     * UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceTwilio(
            @JsonProperty("account_sid") String accountSid,
            @JsonProperty("auth_token") String authToken,
            @JsonProperty("lookback_window") Optional<? extends Long> lookbackWindow,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(accountSid, "accountSid");
        Utils.checkNotNull(authToken, "authToken");
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        Utils.checkNotNull(startDate, "startDate");
        this.accountSid = accountSid;
        this.authToken = authToken;
        this.lookbackWindow = lookbackWindow;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceTwilio(
            String accountSid,
            String authToken,
            OffsetDateTime startDate) {
        this(accountSid, authToken, Optional.empty(), startDate);
    }

    /**
     * Twilio account SID
     */
    @JsonIgnore
    public String accountSid() {
        return accountSid;
    }

    /**
     * Twilio Auth Token.
     */
    @JsonIgnore
    public String authToken() {
        return authToken;
    }

    /**
     * How far into the past to look for records. (in minutes)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> lookbackWindow() {
        return (Optional<Long>) lookbackWindow;
    }

    @JsonIgnore
    public Twilio sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Twilio account SID
     */
    public SourceTwilio withAccountSid(String accountSid) {
        Utils.checkNotNull(accountSid, "accountSid");
        this.accountSid = accountSid;
        return this;
    }

    /**
     * Twilio Auth Token.
     */
    public SourceTwilio withAuthToken(String authToken) {
        Utils.checkNotNull(authToken, "authToken");
        this.authToken = authToken;
        return this;
    }

    /**
     * How far into the past to look for records. (in minutes)
     */
    public SourceTwilio withLookbackWindow(long lookbackWindow) {
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        this.lookbackWindow = Optional.ofNullable(lookbackWindow);
        return this;
    }

    /**
     * How far into the past to look for records. (in minutes)
     */
    public SourceTwilio withLookbackWindow(Optional<? extends Long> lookbackWindow) {
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        this.lookbackWindow = lookbackWindow;
        return this;
    }

    /**
     * UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourceTwilio withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceTwilio other = (SourceTwilio) o;
        return 
            java.util.Objects.deepEquals(this.accountSid, other.accountSid) &&
            java.util.Objects.deepEquals(this.authToken, other.authToken) &&
            java.util.Objects.deepEquals(this.lookbackWindow, other.lookbackWindow) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountSid,
            authToken,
            lookbackWindow,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceTwilio.class,
                "accountSid", accountSid,
                "authToken", authToken,
                "lookbackWindow", lookbackWindow,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String accountSid;
 
        private String authToken;
 
        private Optional<? extends Long> lookbackWindow;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Twilio account SID
         */
        public Builder accountSid(String accountSid) {
            Utils.checkNotNull(accountSid, "accountSid");
            this.accountSid = accountSid;
            return this;
        }

        /**
         * Twilio Auth Token.
         */
        public Builder authToken(String authToken) {
            Utils.checkNotNull(authToken, "authToken");
            this.authToken = authToken;
            return this;
        }

        /**
         * How far into the past to look for records. (in minutes)
         */
        public Builder lookbackWindow(long lookbackWindow) {
            Utils.checkNotNull(lookbackWindow, "lookbackWindow");
            this.lookbackWindow = Optional.ofNullable(lookbackWindow);
            return this;
        }

        /**
         * How far into the past to look for records. (in minutes)
         */
        public Builder lookbackWindow(Optional<? extends Long> lookbackWindow) {
            Utils.checkNotNull(lookbackWindow, "lookbackWindow");
            this.lookbackWindow = lookbackWindow;
            return this;
        }

        /**
         * UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceTwilio build() {
            if (lookbackWindow == null) {
                lookbackWindow = _SINGLETON_VALUE_LookbackWindow.value();
            }
            return new SourceTwilio(
                accountSid,
                authToken,
                lookbackWindow,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_LookbackWindow =
                new LazySingletonValue<>(
                        "lookback_window",
                        "0",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Twilio> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"twilio\"",
                        new TypeReference<Twilio>() {});
    }
}

