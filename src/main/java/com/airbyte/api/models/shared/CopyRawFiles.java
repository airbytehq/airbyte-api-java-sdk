/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * CopyRawFiles - Copy raw files without parsing their contents. Bits are copied into the destination exactly as they appeared in the source. Recommended for use with unstructured text data, non-text and compressed files.
 */

public class CopyRawFiles {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_type")
    private Optional<? extends SourceS3DeliveryType> deliveryType;

    @JsonCreator
    public CopyRawFiles() {
        
        this.deliveryType = Builder._SINGLETON_VALUE_DeliveryType.value();
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceS3DeliveryType> deliveryType() {
        return (Optional<SourceS3DeliveryType>) deliveryType;
    }

    public final static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CopyRawFiles other = (CopyRawFiles) o;
        return 
            Objects.deepEquals(this.deliveryType, other.deliveryType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            deliveryType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CopyRawFiles.class,
                "deliveryType", deliveryType);
    }
    
    public final static class Builder {  
        
        private Builder() {
          // force use of static builder() method
        }
        
        public CopyRawFiles build() {
            return new CopyRawFiles(
                );
        }

        private static final LazySingletonValue<Optional<? extends SourceS3DeliveryType>> _SINGLETON_VALUE_DeliveryType =
                new LazySingletonValue<>(
                        "delivery_type",
                        "\"use_file_transfer\"",
                        new TypeReference<Optional<? extends SourceS3DeliveryType>>() {});
    }
}

