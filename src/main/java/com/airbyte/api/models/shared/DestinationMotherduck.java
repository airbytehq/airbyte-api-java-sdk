/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class DestinationMotherduck {

    @JsonProperty("destinationType")
    private Motherduck destinationType;

    /**
     * Path to a .duckdb file or 'md:&lt;DATABASE_NAME&gt;' to connect to a MotherDuck database. If 'md:' is specified without a database name, the default MotherDuck database name ('my_db') will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_path")
    private Optional<String> destinationPath;

    /**
     * API access token to use for authentication to a MotherDuck database.
     */
    @JsonProperty("motherduck_api_key")
    private String motherduckApiKey;

    /**
     * Database schema name, defaults to 'main' if not specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    private Optional<String> schema;

    @JsonCreator
    public DestinationMotherduck(
            @JsonProperty("destination_path") Optional<String> destinationPath,
            @JsonProperty("motherduck_api_key") String motherduckApiKey,
            @JsonProperty("schema") Optional<String> schema) {
        Utils.checkNotNull(destinationPath, "destinationPath");
        Utils.checkNotNull(motherduckApiKey, "motherduckApiKey");
        Utils.checkNotNull(schema, "schema");
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.destinationPath = destinationPath;
        this.motherduckApiKey = motherduckApiKey;
        this.schema = schema;
    }
    
    public DestinationMotherduck(
            String motherduckApiKey) {
        this(Optional.empty(), motherduckApiKey, Optional.empty());
    }

    @JsonIgnore
    public Motherduck destinationType() {
        return destinationType;
    }

    /**
     * Path to a .duckdb file or 'md:&lt;DATABASE_NAME&gt;' to connect to a MotherDuck database. If 'md:' is specified without a database name, the default MotherDuck database name ('my_db') will be used.
     */
    @JsonIgnore
    public Optional<String> destinationPath() {
        return destinationPath;
    }

    /**
     * API access token to use for authentication to a MotherDuck database.
     */
    @JsonIgnore
    public String motherduckApiKey() {
        return motherduckApiKey;
    }

    /**
     * Database schema name, defaults to 'main' if not specified.
     */
    @JsonIgnore
    public Optional<String> schema() {
        return schema;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Path to a .duckdb file or 'md:&lt;DATABASE_NAME&gt;' to connect to a MotherDuck database. If 'md:' is specified without a database name, the default MotherDuck database name ('my_db') will be used.
     */
    public DestinationMotherduck withDestinationPath(String destinationPath) {
        Utils.checkNotNull(destinationPath, "destinationPath");
        this.destinationPath = Optional.ofNullable(destinationPath);
        return this;
    }

    /**
     * Path to a .duckdb file or 'md:&lt;DATABASE_NAME&gt;' to connect to a MotherDuck database. If 'md:' is specified without a database name, the default MotherDuck database name ('my_db') will be used.
     */
    public DestinationMotherduck withDestinationPath(Optional<String> destinationPath) {
        Utils.checkNotNull(destinationPath, "destinationPath");
        this.destinationPath = destinationPath;
        return this;
    }

    /**
     * API access token to use for authentication to a MotherDuck database.
     */
    public DestinationMotherduck withMotherduckApiKey(String motherduckApiKey) {
        Utils.checkNotNull(motherduckApiKey, "motherduckApiKey");
        this.motherduckApiKey = motherduckApiKey;
        return this;
    }

    /**
     * Database schema name, defaults to 'main' if not specified.
     */
    public DestinationMotherduck withSchema(String schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = Optional.ofNullable(schema);
        return this;
    }

    /**
     * Database schema name, defaults to 'main' if not specified.
     */
    public DestinationMotherduck withSchema(Optional<String> schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = schema;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationMotherduck other = (DestinationMotherduck) o;
        return 
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.destinationPath, other.destinationPath) &&
            Objects.deepEquals(this.motherduckApiKey, other.motherduckApiKey) &&
            Objects.deepEquals(this.schema, other.schema);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            destinationType,
            destinationPath,
            motherduckApiKey,
            schema);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationMotherduck.class,
                "destinationType", destinationType,
                "destinationPath", destinationPath,
                "motherduckApiKey", motherduckApiKey,
                "schema", schema);
    }
    
    public final static class Builder {
 
        private Optional<String> destinationPath;
 
        private String motherduckApiKey;
 
        private Optional<String> schema = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Path to a .duckdb file or 'md:&lt;DATABASE_NAME&gt;' to connect to a MotherDuck database. If 'md:' is specified without a database name, the default MotherDuck database name ('my_db') will be used.
         */
        public Builder destinationPath(String destinationPath) {
            Utils.checkNotNull(destinationPath, "destinationPath");
            this.destinationPath = Optional.ofNullable(destinationPath);
            return this;
        }

        /**
         * Path to a .duckdb file or 'md:&lt;DATABASE_NAME&gt;' to connect to a MotherDuck database. If 'md:' is specified without a database name, the default MotherDuck database name ('my_db') will be used.
         */
        public Builder destinationPath(Optional<String> destinationPath) {
            Utils.checkNotNull(destinationPath, "destinationPath");
            this.destinationPath = destinationPath;
            return this;
        }

        /**
         * API access token to use for authentication to a MotherDuck database.
         */
        public Builder motherduckApiKey(String motherduckApiKey) {
            Utils.checkNotNull(motherduckApiKey, "motherduckApiKey");
            this.motherduckApiKey = motherduckApiKey;
            return this;
        }

        /**
         * Database schema name, defaults to 'main' if not specified.
         */
        public Builder schema(String schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * Database schema name, defaults to 'main' if not specified.
         */
        public Builder schema(Optional<String> schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = schema;
            return this;
        }
        
        public DestinationMotherduck build() {
            if (destinationPath == null) {
                destinationPath = _SINGLETON_VALUE_DestinationPath.value();
            }
            return new DestinationMotherduck(
                destinationPath,
                motherduckApiKey,
                schema);
        }

        private static final LazySingletonValue<Motherduck> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"motherduck\"",
                        new TypeReference<Motherduck>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_DestinationPath =
                new LazySingletonValue<>(
                        "destination_path",
                        "\"md:\"",
                        new TypeReference<Optional<String>>() {});
    }
}
