/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * EncryptedTrustServerCertificate - Use the certificate provided by the server without verification. (For testing purposes only!)
 */

public class EncryptedTrustServerCertificate {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssl_method")
    private Optional<? extends DestinationMssqlSslMethod> sslMethod;

    @JsonCreator
    public EncryptedTrustServerCertificate() {
        
        this.sslMethod = Builder._SINGLETON_VALUE_SslMethod.value();
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationMssqlSslMethod> sslMethod() {
        return (Optional<DestinationMssqlSslMethod>) sslMethod;
    }

    public final static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EncryptedTrustServerCertificate other = (EncryptedTrustServerCertificate) o;
        return 
            java.util.Objects.deepEquals(this.sslMethod, other.sslMethod);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            sslMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EncryptedTrustServerCertificate.class,
                "sslMethod", sslMethod);
    }
    
    public final static class Builder {  
        
        private Builder() {
          // force use of static builder() method
        }
        
        public EncryptedTrustServerCertificate build() {
            return new EncryptedTrustServerCertificate(
                );
        }

        private static final LazySingletonValue<Optional<? extends DestinationMssqlSslMethod>> _SINGLETON_VALUE_SslMethod =
                new LazySingletonValue<>(
                        "ssl_method",
                        "\"encrypted_trust_server_certificate\"",
                        new TypeReference<Optional<? extends DestinationMssqlSslMethod>>() {});
    }
}

