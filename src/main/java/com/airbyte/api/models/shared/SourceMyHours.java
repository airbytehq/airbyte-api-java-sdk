/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceMyHours {

    /**
     * Your My Hours username
     */
    @JsonProperty("email")
    private String email;

    /**
     * Pagination size used for retrieving logs in days
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logs_batch_size")
    private Optional<? extends Long> logsBatchSize;

    /**
     * The password associated to the username
     */
    @JsonProperty("password")
    private String password;

    @JsonProperty("sourceType")
    private MyHours sourceType;

    /**
     * Start date for collecting time logs
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceMyHours(
            @JsonProperty("email") String email,
            @JsonProperty("logs_batch_size") Optional<? extends Long> logsBatchSize,
            @JsonProperty("password") String password,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(logsBatchSize, "logsBatchSize");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(startDate, "startDate");
        this.email = email;
        this.logsBatchSize = logsBatchSize;
        this.password = password;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceMyHours(
            String email,
            String password,
            String startDate) {
        this(email, Optional.empty(), password, startDate);
    }

    /**
     * Your My Hours username
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * Pagination size used for retrieving logs in days
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> logsBatchSize() {
        return (Optional<Long>) logsBatchSize;
    }

    /**
     * The password associated to the username
     */
    @JsonIgnore
    public String password() {
        return password;
    }

    @JsonIgnore
    public MyHours sourceType() {
        return sourceType;
    }

    /**
     * Start date for collecting time logs
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Your My Hours username
     */
    public SourceMyHours withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Pagination size used for retrieving logs in days
     */
    public SourceMyHours withLogsBatchSize(long logsBatchSize) {
        Utils.checkNotNull(logsBatchSize, "logsBatchSize");
        this.logsBatchSize = Optional.ofNullable(logsBatchSize);
        return this;
    }

    /**
     * Pagination size used for retrieving logs in days
     */
    public SourceMyHours withLogsBatchSize(Optional<? extends Long> logsBatchSize) {
        Utils.checkNotNull(logsBatchSize, "logsBatchSize");
        this.logsBatchSize = logsBatchSize;
        return this;
    }

    /**
     * The password associated to the username
     */
    public SourceMyHours withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Start date for collecting time logs
     */
    public SourceMyHours withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMyHours other = (SourceMyHours) o;
        return 
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.logsBatchSize, other.logsBatchSize) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            email,
            logsBatchSize,
            password,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMyHours.class,
                "email", email,
                "logsBatchSize", logsBatchSize,
                "password", password,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String email;
 
        private Optional<? extends Long> logsBatchSize;
 
        private String password;
 
        private String startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your My Hours username
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Pagination size used for retrieving logs in days
         */
        public Builder logsBatchSize(long logsBatchSize) {
            Utils.checkNotNull(logsBatchSize, "logsBatchSize");
            this.logsBatchSize = Optional.ofNullable(logsBatchSize);
            return this;
        }

        /**
         * Pagination size used for retrieving logs in days
         */
        public Builder logsBatchSize(Optional<? extends Long> logsBatchSize) {
            Utils.checkNotNull(logsBatchSize, "logsBatchSize");
            this.logsBatchSize = logsBatchSize;
            return this;
        }

        /**
         * The password associated to the username
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Start date for collecting time logs
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceMyHours build() {
            if (logsBatchSize == null) {
                logsBatchSize = _SINGLETON_VALUE_LogsBatchSize.value();
            }
            return new SourceMyHours(
                email,
                logsBatchSize,
                password,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_LogsBatchSize =
                new LazySingletonValue<>(
                        "logs_batch_size",
                        "30",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<MyHours> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"my-hours\"",
                        new TypeReference<MyHours>() {});
    }
}

