/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * StreamProperties - The stream properties associated with a connection.
 */

public class StreamProperties {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultCursorField")
    private Optional<? extends java.util.List<String>> defaultCursorField;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("propertyFields")
    private Optional<? extends java.util.List<java.util.List<String>>> propertyFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDefinedCursorField")
    private Optional<? extends Boolean> sourceDefinedCursorField;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDefinedPrimaryKey")
    private Optional<? extends java.util.List<java.util.List<String>>> sourceDefinedPrimaryKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamName")
    private Optional<? extends String> streamName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncModes")
    private Optional<? extends java.util.List<ConnectionSyncModeEnum>> syncModes;

    public StreamProperties(
            @JsonProperty("defaultCursorField") Optional<? extends java.util.List<String>> defaultCursorField,
            @JsonProperty("propertyFields") Optional<? extends java.util.List<java.util.List<String>>> propertyFields,
            @JsonProperty("sourceDefinedCursorField") Optional<? extends Boolean> sourceDefinedCursorField,
            @JsonProperty("sourceDefinedPrimaryKey") Optional<? extends java.util.List<java.util.List<String>>> sourceDefinedPrimaryKey,
            @JsonProperty("streamName") Optional<? extends String> streamName,
            @JsonProperty("syncModes") Optional<? extends java.util.List<ConnectionSyncModeEnum>> syncModes) {
        Utils.checkNotNull(defaultCursorField, "defaultCursorField");
        Utils.checkNotNull(propertyFields, "propertyFields");
        Utils.checkNotNull(sourceDefinedCursorField, "sourceDefinedCursorField");
        Utils.checkNotNull(sourceDefinedPrimaryKey, "sourceDefinedPrimaryKey");
        Utils.checkNotNull(streamName, "streamName");
        Utils.checkNotNull(syncModes, "syncModes");
        this.defaultCursorField = defaultCursorField;
        this.propertyFields = propertyFields;
        this.sourceDefinedCursorField = sourceDefinedCursorField;
        this.sourceDefinedPrimaryKey = sourceDefinedPrimaryKey;
        this.streamName = streamName;
        this.syncModes = syncModes;
    }

    public Optional<? extends java.util.List<String>> defaultCursorField() {
        return defaultCursorField;
    }

    public Optional<? extends java.util.List<java.util.List<String>>> propertyFields() {
        return propertyFields;
    }

    public Optional<? extends Boolean> sourceDefinedCursorField() {
        return sourceDefinedCursorField;
    }

    public Optional<? extends java.util.List<java.util.List<String>>> sourceDefinedPrimaryKey() {
        return sourceDefinedPrimaryKey;
    }

    public Optional<? extends String> streamName() {
        return streamName;
    }

    public Optional<? extends java.util.List<ConnectionSyncModeEnum>> syncModes() {
        return syncModes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StreamProperties withDefaultCursorField(java.util.List<String> defaultCursorField) {
        Utils.checkNotNull(defaultCursorField, "defaultCursorField");
        this.defaultCursorField = Optional.ofNullable(defaultCursorField);
        return this;
    }

    public StreamProperties withDefaultCursorField(Optional<? extends java.util.List<String>> defaultCursorField) {
        Utils.checkNotNull(defaultCursorField, "defaultCursorField");
        this.defaultCursorField = defaultCursorField;
        return this;
    }

    public StreamProperties withPropertyFields(java.util.List<java.util.List<String>> propertyFields) {
        Utils.checkNotNull(propertyFields, "propertyFields");
        this.propertyFields = Optional.ofNullable(propertyFields);
        return this;
    }

    public StreamProperties withPropertyFields(Optional<? extends java.util.List<java.util.List<String>>> propertyFields) {
        Utils.checkNotNull(propertyFields, "propertyFields");
        this.propertyFields = propertyFields;
        return this;
    }

    public StreamProperties withSourceDefinedCursorField(boolean sourceDefinedCursorField) {
        Utils.checkNotNull(sourceDefinedCursorField, "sourceDefinedCursorField");
        this.sourceDefinedCursorField = Optional.ofNullable(sourceDefinedCursorField);
        return this;
    }

    public StreamProperties withSourceDefinedCursorField(Optional<? extends Boolean> sourceDefinedCursorField) {
        Utils.checkNotNull(sourceDefinedCursorField, "sourceDefinedCursorField");
        this.sourceDefinedCursorField = sourceDefinedCursorField;
        return this;
    }

    public StreamProperties withSourceDefinedPrimaryKey(java.util.List<java.util.List<String>> sourceDefinedPrimaryKey) {
        Utils.checkNotNull(sourceDefinedPrimaryKey, "sourceDefinedPrimaryKey");
        this.sourceDefinedPrimaryKey = Optional.ofNullable(sourceDefinedPrimaryKey);
        return this;
    }

    public StreamProperties withSourceDefinedPrimaryKey(Optional<? extends java.util.List<java.util.List<String>>> sourceDefinedPrimaryKey) {
        Utils.checkNotNull(sourceDefinedPrimaryKey, "sourceDefinedPrimaryKey");
        this.sourceDefinedPrimaryKey = sourceDefinedPrimaryKey;
        return this;
    }

    public StreamProperties withStreamName(String streamName) {
        Utils.checkNotNull(streamName, "streamName");
        this.streamName = Optional.ofNullable(streamName);
        return this;
    }

    public StreamProperties withStreamName(Optional<? extends String> streamName) {
        Utils.checkNotNull(streamName, "streamName");
        this.streamName = streamName;
        return this;
    }

    public StreamProperties withSyncModes(java.util.List<ConnectionSyncModeEnum> syncModes) {
        Utils.checkNotNull(syncModes, "syncModes");
        this.syncModes = Optional.ofNullable(syncModes);
        return this;
    }

    public StreamProperties withSyncModes(Optional<? extends java.util.List<ConnectionSyncModeEnum>> syncModes) {
        Utils.checkNotNull(syncModes, "syncModes");
        this.syncModes = syncModes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamProperties other = (StreamProperties) o;
        return 
            java.util.Objects.deepEquals(this.defaultCursorField, other.defaultCursorField) &&
            java.util.Objects.deepEquals(this.propertyFields, other.propertyFields) &&
            java.util.Objects.deepEquals(this.sourceDefinedCursorField, other.sourceDefinedCursorField) &&
            java.util.Objects.deepEquals(this.sourceDefinedPrimaryKey, other.sourceDefinedPrimaryKey) &&
            java.util.Objects.deepEquals(this.streamName, other.streamName) &&
            java.util.Objects.deepEquals(this.syncModes, other.syncModes);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            defaultCursorField,
            propertyFields,
            sourceDefinedCursorField,
            sourceDefinedPrimaryKey,
            streamName,
            syncModes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreamProperties.class,
                "defaultCursorField", defaultCursorField,
                "propertyFields", propertyFields,
                "sourceDefinedCursorField", sourceDefinedCursorField,
                "sourceDefinedPrimaryKey", sourceDefinedPrimaryKey,
                "streamName", streamName,
                "syncModes", syncModes);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> defaultCursorField = Optional.empty();
 
        private Optional<? extends java.util.List<java.util.List<String>>> propertyFields = Optional.empty();
 
        private Optional<? extends Boolean> sourceDefinedCursorField = Optional.empty();
 
        private Optional<? extends java.util.List<java.util.List<String>>> sourceDefinedPrimaryKey = Optional.empty();
 
        private Optional<? extends String> streamName = Optional.empty();
 
        private Optional<? extends java.util.List<ConnectionSyncModeEnum>> syncModes = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder defaultCursorField(java.util.List<String> defaultCursorField) {
            Utils.checkNotNull(defaultCursorField, "defaultCursorField");
            this.defaultCursorField = Optional.ofNullable(defaultCursorField);
            return this;
        }

        public Builder defaultCursorField(Optional<? extends java.util.List<String>> defaultCursorField) {
            Utils.checkNotNull(defaultCursorField, "defaultCursorField");
            this.defaultCursorField = defaultCursorField;
            return this;
        }

        public Builder propertyFields(java.util.List<java.util.List<String>> propertyFields) {
            Utils.checkNotNull(propertyFields, "propertyFields");
            this.propertyFields = Optional.ofNullable(propertyFields);
            return this;
        }

        public Builder propertyFields(Optional<? extends java.util.List<java.util.List<String>>> propertyFields) {
            Utils.checkNotNull(propertyFields, "propertyFields");
            this.propertyFields = propertyFields;
            return this;
        }

        public Builder sourceDefinedCursorField(boolean sourceDefinedCursorField) {
            Utils.checkNotNull(sourceDefinedCursorField, "sourceDefinedCursorField");
            this.sourceDefinedCursorField = Optional.ofNullable(sourceDefinedCursorField);
            return this;
        }

        public Builder sourceDefinedCursorField(Optional<? extends Boolean> sourceDefinedCursorField) {
            Utils.checkNotNull(sourceDefinedCursorField, "sourceDefinedCursorField");
            this.sourceDefinedCursorField = sourceDefinedCursorField;
            return this;
        }

        public Builder sourceDefinedPrimaryKey(java.util.List<java.util.List<String>> sourceDefinedPrimaryKey) {
            Utils.checkNotNull(sourceDefinedPrimaryKey, "sourceDefinedPrimaryKey");
            this.sourceDefinedPrimaryKey = Optional.ofNullable(sourceDefinedPrimaryKey);
            return this;
        }

        public Builder sourceDefinedPrimaryKey(Optional<? extends java.util.List<java.util.List<String>>> sourceDefinedPrimaryKey) {
            Utils.checkNotNull(sourceDefinedPrimaryKey, "sourceDefinedPrimaryKey");
            this.sourceDefinedPrimaryKey = sourceDefinedPrimaryKey;
            return this;
        }

        public Builder streamName(String streamName) {
            Utils.checkNotNull(streamName, "streamName");
            this.streamName = Optional.ofNullable(streamName);
            return this;
        }

        public Builder streamName(Optional<? extends String> streamName) {
            Utils.checkNotNull(streamName, "streamName");
            this.streamName = streamName;
            return this;
        }

        public Builder syncModes(java.util.List<ConnectionSyncModeEnum> syncModes) {
            Utils.checkNotNull(syncModes, "syncModes");
            this.syncModes = Optional.ofNullable(syncModes);
            return this;
        }

        public Builder syncModes(Optional<? extends java.util.List<ConnectionSyncModeEnum>> syncModes) {
            Utils.checkNotNull(syncModes, "syncModes");
            this.syncModes = syncModes;
            return this;
        }
        
        public StreamProperties build() {
            return new StreamProperties(
                defaultCursorField,
                propertyFields,
                sourceDefinedCursorField,
                sourceDefinedPrimaryKey,
                streamName,
                syncModes);
        }
    }
}

