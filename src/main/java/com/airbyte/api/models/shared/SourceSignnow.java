/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceSignnow {

    /**
     * Api key which could be found in API section after enlarging keys section
     */
    @JsonProperty("api_key_id")
    private String apiKeyId;

    /**
     * The authorization token is needed for `signing_links` stream which could be seen from enlarged view of `https://app.signnow.com/webapp/api-dashboard/keys`
     */
    @JsonProperty("auth_token")
    private String authToken;

    /**
     * Name filter for documents stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_filter_for_documents")
    private Optional<? extends List<Object>> nameFilterForDocuments;

    @JsonProperty("sourceType")
    private Signnow sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceSignnow(
            @JsonProperty("api_key_id") String apiKeyId,
            @JsonProperty("auth_token") String authToken,
            @JsonProperty("name_filter_for_documents") Optional<? extends List<Object>> nameFilterForDocuments,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiKeyId, "apiKeyId");
        Utils.checkNotNull(authToken, "authToken");
        Utils.checkNotNull(nameFilterForDocuments, "nameFilterForDocuments");
        Utils.checkNotNull(startDate, "startDate");
        this.apiKeyId = apiKeyId;
        this.authToken = authToken;
        this.nameFilterForDocuments = nameFilterForDocuments;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceSignnow(
            String apiKeyId,
            String authToken,
            OffsetDateTime startDate) {
        this(apiKeyId, authToken, Optional.empty(), startDate);
    }

    /**
     * Api key which could be found in API section after enlarging keys section
     */
    @JsonIgnore
    public String apiKeyId() {
        return apiKeyId;
    }

    /**
     * The authorization token is needed for `signing_links` stream which could be seen from enlarged view of `https://app.signnow.com/webapp/api-dashboard/keys`
     */
    @JsonIgnore
    public String authToken() {
        return authToken;
    }

    /**
     * Name filter for documents stream
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> nameFilterForDocuments() {
        return (Optional<List<Object>>) nameFilterForDocuments;
    }

    @JsonIgnore
    public Signnow sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Api key which could be found in API section after enlarging keys section
     */
    public SourceSignnow withApiKeyId(String apiKeyId) {
        Utils.checkNotNull(apiKeyId, "apiKeyId");
        this.apiKeyId = apiKeyId;
        return this;
    }

    /**
     * The authorization token is needed for `signing_links` stream which could be seen from enlarged view of `https://app.signnow.com/webapp/api-dashboard/keys`
     */
    public SourceSignnow withAuthToken(String authToken) {
        Utils.checkNotNull(authToken, "authToken");
        this.authToken = authToken;
        return this;
    }

    /**
     * Name filter for documents stream
     */
    public SourceSignnow withNameFilterForDocuments(List<Object> nameFilterForDocuments) {
        Utils.checkNotNull(nameFilterForDocuments, "nameFilterForDocuments");
        this.nameFilterForDocuments = Optional.ofNullable(nameFilterForDocuments);
        return this;
    }

    /**
     * Name filter for documents stream
     */
    public SourceSignnow withNameFilterForDocuments(Optional<? extends List<Object>> nameFilterForDocuments) {
        Utils.checkNotNull(nameFilterForDocuments, "nameFilterForDocuments");
        this.nameFilterForDocuments = nameFilterForDocuments;
        return this;
    }

    public SourceSignnow withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSignnow other = (SourceSignnow) o;
        return 
            Objects.deepEquals(this.apiKeyId, other.apiKeyId) &&
            Objects.deepEquals(this.authToken, other.authToken) &&
            Objects.deepEquals(this.nameFilterForDocuments, other.nameFilterForDocuments) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKeyId,
            authToken,
            nameFilterForDocuments,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSignnow.class,
                "apiKeyId", apiKeyId,
                "authToken", authToken,
                "nameFilterForDocuments", nameFilterForDocuments,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiKeyId;
 
        private String authToken;
 
        private Optional<? extends List<Object>> nameFilterForDocuments = Optional.empty();
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Api key which could be found in API section after enlarging keys section
         */
        public Builder apiKeyId(String apiKeyId) {
            Utils.checkNotNull(apiKeyId, "apiKeyId");
            this.apiKeyId = apiKeyId;
            return this;
        }

        /**
         * The authorization token is needed for `signing_links` stream which could be seen from enlarged view of `https://app.signnow.com/webapp/api-dashboard/keys`
         */
        public Builder authToken(String authToken) {
            Utils.checkNotNull(authToken, "authToken");
            this.authToken = authToken;
            return this;
        }

        /**
         * Name filter for documents stream
         */
        public Builder nameFilterForDocuments(List<Object> nameFilterForDocuments) {
            Utils.checkNotNull(nameFilterForDocuments, "nameFilterForDocuments");
            this.nameFilterForDocuments = Optional.ofNullable(nameFilterForDocuments);
            return this;
        }

        /**
         * Name filter for documents stream
         */
        public Builder nameFilterForDocuments(Optional<? extends List<Object>> nameFilterForDocuments) {
            Utils.checkNotNull(nameFilterForDocuments, "nameFilterForDocuments");
            this.nameFilterForDocuments = nameFilterForDocuments;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceSignnow build() {
            return new SourceSignnow(
                apiKeyId,
                authToken,
                nameFilterForDocuments,
                startDate);
        }

        private static final LazySingletonValue<Signnow> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"signnow\"",
                        new TypeReference<Signnow>() {});
    }
}
