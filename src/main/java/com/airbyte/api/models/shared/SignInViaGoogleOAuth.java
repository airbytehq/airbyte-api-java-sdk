/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * SignInViaGoogleOAuth - For these scenario user only needs to give permission to read Google Directory data.
 */

public class SignInViaGoogleOAuth {

    /**
     * The Client ID of the developer application.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * The Client Secret of the developer application.
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Authentication Scenario
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials_title")
    private Optional<? extends SourceGoogleDirectoryCredentialsTitle> credentialsTitle;

    /**
     * The Token for obtaining a new access token.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonCreator
    public SignInViaGoogleOAuth(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("refresh_token") String refreshToken) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.credentialsTitle = Builder._SINGLETON_VALUE_CredentialsTitle.value();
        this.refreshToken = refreshToken;
    }

    /**
     * The Client ID of the developer application.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * The Client Secret of the developer application.
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Authentication Scenario
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceGoogleDirectoryCredentialsTitle> credentialsTitle() {
        return (Optional<SourceGoogleDirectoryCredentialsTitle>) credentialsTitle;
    }

    /**
     * The Token for obtaining a new access token.
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Client ID of the developer application.
     */
    public SignInViaGoogleOAuth withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The Client Secret of the developer application.
     */
    public SignInViaGoogleOAuth withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * The Token for obtaining a new access token.
     */
    public SignInViaGoogleOAuth withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SignInViaGoogleOAuth other = (SignInViaGoogleOAuth) o;
        return 
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.credentialsTitle, other.credentialsTitle) &&
            java.util.Objects.deepEquals(this.refreshToken, other.refreshToken);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            clientId,
            clientSecret,
            credentialsTitle,
            refreshToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SignInViaGoogleOAuth.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "credentialsTitle", credentialsTitle,
                "refreshToken", refreshToken);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private String refreshToken;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Client ID of the developer application.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The Client Secret of the developer application.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The Token for obtaining a new access token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }
        
        public SignInViaGoogleOAuth build() {
            return new SignInViaGoogleOAuth(
                clientId,
                clientSecret,
                refreshToken);
        }

        private static final LazySingletonValue<Optional<? extends SourceGoogleDirectoryCredentialsTitle>> _SINGLETON_VALUE_CredentialsTitle =
                new LazySingletonValue<>(
                        "credentials_title",
                        "\"Web server app\"",
                        new TypeReference<Optional<? extends SourceGoogleDirectoryCredentialsTitle>>() {});
    }
}

