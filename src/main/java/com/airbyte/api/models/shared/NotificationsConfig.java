/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * NotificationsConfig
 * 
 * <p>Configures workspace notifications.
 */
public class NotificationsConfig {

    /**
     * Configures a notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionUpdate")
    private Optional<? extends NotificationConfig> connectionUpdate;

    /**
     * Configures a notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionUpdateActionRequired")
    private Optional<? extends NotificationConfig> connectionUpdateActionRequired;

    /**
     * Configures a notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failure")
    private Optional<? extends NotificationConfig> failure;

    /**
     * Configures a notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<? extends NotificationConfig> success;

    /**
     * Configures a notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncDisabled")
    private Optional<? extends NotificationConfig> syncDisabled;

    /**
     * Configures a notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncDisabledWarning")
    private Optional<? extends NotificationConfig> syncDisabledWarning;

    @JsonCreator
    public NotificationsConfig(
            @JsonProperty("connectionUpdate") Optional<? extends NotificationConfig> connectionUpdate,
            @JsonProperty("connectionUpdateActionRequired") Optional<? extends NotificationConfig> connectionUpdateActionRequired,
            @JsonProperty("failure") Optional<? extends NotificationConfig> failure,
            @JsonProperty("success") Optional<? extends NotificationConfig> success,
            @JsonProperty("syncDisabled") Optional<? extends NotificationConfig> syncDisabled,
            @JsonProperty("syncDisabledWarning") Optional<? extends NotificationConfig> syncDisabledWarning) {
        Utils.checkNotNull(connectionUpdate, "connectionUpdate");
        Utils.checkNotNull(connectionUpdateActionRequired, "connectionUpdateActionRequired");
        Utils.checkNotNull(failure, "failure");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(syncDisabled, "syncDisabled");
        Utils.checkNotNull(syncDisabledWarning, "syncDisabledWarning");
        this.connectionUpdate = connectionUpdate;
        this.connectionUpdateActionRequired = connectionUpdateActionRequired;
        this.failure = failure;
        this.success = success;
        this.syncDisabled = syncDisabled;
        this.syncDisabledWarning = syncDisabledWarning;
    }
    
    public NotificationsConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Configures a notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationConfig> connectionUpdate() {
        return (Optional<NotificationConfig>) connectionUpdate;
    }

    /**
     * Configures a notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationConfig> connectionUpdateActionRequired() {
        return (Optional<NotificationConfig>) connectionUpdateActionRequired;
    }

    /**
     * Configures a notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationConfig> failure() {
        return (Optional<NotificationConfig>) failure;
    }

    /**
     * Configures a notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationConfig> success() {
        return (Optional<NotificationConfig>) success;
    }

    /**
     * Configures a notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationConfig> syncDisabled() {
        return (Optional<NotificationConfig>) syncDisabled;
    }

    /**
     * Configures a notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationConfig> syncDisabledWarning() {
        return (Optional<NotificationConfig>) syncDisabledWarning;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Configures a notification.
     */
    public NotificationsConfig withConnectionUpdate(NotificationConfig connectionUpdate) {
        Utils.checkNotNull(connectionUpdate, "connectionUpdate");
        this.connectionUpdate = Optional.ofNullable(connectionUpdate);
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withConnectionUpdate(Optional<? extends NotificationConfig> connectionUpdate) {
        Utils.checkNotNull(connectionUpdate, "connectionUpdate");
        this.connectionUpdate = connectionUpdate;
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withConnectionUpdateActionRequired(NotificationConfig connectionUpdateActionRequired) {
        Utils.checkNotNull(connectionUpdateActionRequired, "connectionUpdateActionRequired");
        this.connectionUpdateActionRequired = Optional.ofNullable(connectionUpdateActionRequired);
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withConnectionUpdateActionRequired(Optional<? extends NotificationConfig> connectionUpdateActionRequired) {
        Utils.checkNotNull(connectionUpdateActionRequired, "connectionUpdateActionRequired");
        this.connectionUpdateActionRequired = connectionUpdateActionRequired;
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withFailure(NotificationConfig failure) {
        Utils.checkNotNull(failure, "failure");
        this.failure = Optional.ofNullable(failure);
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withFailure(Optional<? extends NotificationConfig> failure) {
        Utils.checkNotNull(failure, "failure");
        this.failure = failure;
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withSuccess(NotificationConfig success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withSuccess(Optional<? extends NotificationConfig> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withSyncDisabled(NotificationConfig syncDisabled) {
        Utils.checkNotNull(syncDisabled, "syncDisabled");
        this.syncDisabled = Optional.ofNullable(syncDisabled);
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withSyncDisabled(Optional<? extends NotificationConfig> syncDisabled) {
        Utils.checkNotNull(syncDisabled, "syncDisabled");
        this.syncDisabled = syncDisabled;
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withSyncDisabledWarning(NotificationConfig syncDisabledWarning) {
        Utils.checkNotNull(syncDisabledWarning, "syncDisabledWarning");
        this.syncDisabledWarning = Optional.ofNullable(syncDisabledWarning);
        return this;
    }

    /**
     * Configures a notification.
     */
    public NotificationsConfig withSyncDisabledWarning(Optional<? extends NotificationConfig> syncDisabledWarning) {
        Utils.checkNotNull(syncDisabledWarning, "syncDisabledWarning");
        this.syncDisabledWarning = syncDisabledWarning;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotificationsConfig other = (NotificationsConfig) o;
        return 
            Objects.deepEquals(this.connectionUpdate, other.connectionUpdate) &&
            Objects.deepEquals(this.connectionUpdateActionRequired, other.connectionUpdateActionRequired) &&
            Objects.deepEquals(this.failure, other.failure) &&
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.syncDisabled, other.syncDisabled) &&
            Objects.deepEquals(this.syncDisabledWarning, other.syncDisabledWarning);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectionUpdate,
            connectionUpdateActionRequired,
            failure,
            success,
            syncDisabled,
            syncDisabledWarning);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NotificationsConfig.class,
                "connectionUpdate", connectionUpdate,
                "connectionUpdateActionRequired", connectionUpdateActionRequired,
                "failure", failure,
                "success", success,
                "syncDisabled", syncDisabled,
                "syncDisabledWarning", syncDisabledWarning);
    }
    
    public final static class Builder {
 
        private Optional<? extends NotificationConfig> connectionUpdate = Optional.empty();
 
        private Optional<? extends NotificationConfig> connectionUpdateActionRequired = Optional.empty();
 
        private Optional<? extends NotificationConfig> failure = Optional.empty();
 
        private Optional<? extends NotificationConfig> success = Optional.empty();
 
        private Optional<? extends NotificationConfig> syncDisabled = Optional.empty();
 
        private Optional<? extends NotificationConfig> syncDisabledWarning = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Configures a notification.
         */
        public Builder connectionUpdate(NotificationConfig connectionUpdate) {
            Utils.checkNotNull(connectionUpdate, "connectionUpdate");
            this.connectionUpdate = Optional.ofNullable(connectionUpdate);
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder connectionUpdate(Optional<? extends NotificationConfig> connectionUpdate) {
            Utils.checkNotNull(connectionUpdate, "connectionUpdate");
            this.connectionUpdate = connectionUpdate;
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder connectionUpdateActionRequired(NotificationConfig connectionUpdateActionRequired) {
            Utils.checkNotNull(connectionUpdateActionRequired, "connectionUpdateActionRequired");
            this.connectionUpdateActionRequired = Optional.ofNullable(connectionUpdateActionRequired);
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder connectionUpdateActionRequired(Optional<? extends NotificationConfig> connectionUpdateActionRequired) {
            Utils.checkNotNull(connectionUpdateActionRequired, "connectionUpdateActionRequired");
            this.connectionUpdateActionRequired = connectionUpdateActionRequired;
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder failure(NotificationConfig failure) {
            Utils.checkNotNull(failure, "failure");
            this.failure = Optional.ofNullable(failure);
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder failure(Optional<? extends NotificationConfig> failure) {
            Utils.checkNotNull(failure, "failure");
            this.failure = failure;
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder success(NotificationConfig success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder success(Optional<? extends NotificationConfig> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder syncDisabled(NotificationConfig syncDisabled) {
            Utils.checkNotNull(syncDisabled, "syncDisabled");
            this.syncDisabled = Optional.ofNullable(syncDisabled);
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder syncDisabled(Optional<? extends NotificationConfig> syncDisabled) {
            Utils.checkNotNull(syncDisabled, "syncDisabled");
            this.syncDisabled = syncDisabled;
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder syncDisabledWarning(NotificationConfig syncDisabledWarning) {
            Utils.checkNotNull(syncDisabledWarning, "syncDisabledWarning");
            this.syncDisabledWarning = Optional.ofNullable(syncDisabledWarning);
            return this;
        }

        /**
         * Configures a notification.
         */
        public Builder syncDisabledWarning(Optional<? extends NotificationConfig> syncDisabledWarning) {
            Utils.checkNotNull(syncDisabledWarning, "syncDisabledWarning");
            this.syncDisabledWarning = syncDisabledWarning;
            return this;
        }
        
        public NotificationsConfig build() {
            return new NotificationsConfig(
                connectionUpdate,
                connectionUpdateActionRequired,
                failure,
                success,
                syncDisabled,
                syncDisabledWarning);
        }
    }
}
