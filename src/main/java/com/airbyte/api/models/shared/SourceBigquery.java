/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceBigquery {

    /**
     * The contents of your Service Account Key JSON file. See the &lt;a href="https://docs.airbyte.com/integrations/sources/bigquery#setup-the-bigquery-source-in-airbyte"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonProperty("credentials_json")
    private String credentialsJson;

    /**
     * The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset_id")
    private Optional<? extends String> datasetId;

    /**
     * The GCP project ID for the project containing the target BigQuery dataset.
     */
    @JsonProperty("project_id")
    private String projectId;

    @JsonProperty("sourceType")
    private SourceBigqueryBigquery sourceType;

    public SourceBigquery(
            @JsonProperty("credentials_json") String credentialsJson,
            @JsonProperty("dataset_id") Optional<? extends String> datasetId,
            @JsonProperty("project_id") String projectId) {
        Utils.checkNotNull(credentialsJson, "credentialsJson");
        Utils.checkNotNull(datasetId, "datasetId");
        Utils.checkNotNull(projectId, "projectId");
        this.credentialsJson = credentialsJson;
        this.datasetId = datasetId;
        this.projectId = projectId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * The contents of your Service Account Key JSON file. See the &lt;a href="https://docs.airbyte.com/integrations/sources/bigquery#setup-the-bigquery-source-in-airbyte"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    public String credentialsJson() {
        return credentialsJson;
    }

    /**
     * The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.
     */
    public Optional<? extends String> datasetId() {
        return datasetId;
    }

    /**
     * The GCP project ID for the project containing the target BigQuery dataset.
     */
    public String projectId() {
        return projectId;
    }

    public SourceBigqueryBigquery sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The contents of your Service Account Key JSON file. See the &lt;a href="https://docs.airbyte.com/integrations/sources/bigquery#setup-the-bigquery-source-in-airbyte"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    public SourceBigquery withCredentialsJson(String credentialsJson) {
        Utils.checkNotNull(credentialsJson, "credentialsJson");
        this.credentialsJson = credentialsJson;
        return this;
    }

    /**
     * The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.
     */
    public SourceBigquery withDatasetId(String datasetId) {
        Utils.checkNotNull(datasetId, "datasetId");
        this.datasetId = Optional.ofNullable(datasetId);
        return this;
    }

    /**
     * The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.
     */
    public SourceBigquery withDatasetId(Optional<? extends String> datasetId) {
        Utils.checkNotNull(datasetId, "datasetId");
        this.datasetId = datasetId;
        return this;
    }

    /**
     * The GCP project ID for the project containing the target BigQuery dataset.
     */
    public SourceBigquery withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceBigquery other = (SourceBigquery) o;
        return 
            java.util.Objects.deepEquals(this.credentialsJson, other.credentialsJson) &&
            java.util.Objects.deepEquals(this.datasetId, other.datasetId) &&
            java.util.Objects.deepEquals(this.projectId, other.projectId) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentialsJson,
            datasetId,
            projectId,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceBigquery.class,
                "credentialsJson", credentialsJson,
                "datasetId", datasetId,
                "projectId", projectId,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String credentialsJson;
 
        private Optional<? extends String> datasetId = Optional.empty();
 
        private String projectId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The contents of your Service Account Key JSON file. See the &lt;a href="https://docs.airbyte.com/integrations/sources/bigquery#setup-the-bigquery-source-in-airbyte"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
         */
        public Builder credentialsJson(String credentialsJson) {
            Utils.checkNotNull(credentialsJson, "credentialsJson");
            this.credentialsJson = credentialsJson;
            return this;
        }

        /**
         * The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.
         */
        public Builder datasetId(String datasetId) {
            Utils.checkNotNull(datasetId, "datasetId");
            this.datasetId = Optional.ofNullable(datasetId);
            return this;
        }

        /**
         * The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.
         */
        public Builder datasetId(Optional<? extends String> datasetId) {
            Utils.checkNotNull(datasetId, "datasetId");
            this.datasetId = datasetId;
            return this;
        }

        /**
         * The GCP project ID for the project containing the target BigQuery dataset.
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }
        
        public SourceBigquery build() {
            return new SourceBigquery(
                credentialsJson,
                datasetId,
                projectId);
        }

        private static final LazySingletonValue<SourceBigqueryBigquery> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"bigquery\"",
                        new TypeReference<SourceBigqueryBigquery>() {});
    }
}

