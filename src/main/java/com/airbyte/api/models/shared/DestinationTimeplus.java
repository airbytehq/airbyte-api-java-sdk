/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class DestinationTimeplus {

    /**
     * Personal API key
     */
    @JsonProperty("apikey")
    private String apikey;

    @JsonProperty("destinationType")
    private Timeplus destinationType;

    /**
     * Timeplus workspace endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoint")
    private Optional<String> endpoint;

    @JsonCreator
    public DestinationTimeplus(
            @JsonProperty("apikey") String apikey,
            @JsonProperty("endpoint") Optional<String> endpoint) {
        Utils.checkNotNull(apikey, "apikey");
        Utils.checkNotNull(endpoint, "endpoint");
        this.apikey = apikey;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.endpoint = endpoint;
    }
    
    public DestinationTimeplus(
            String apikey) {
        this(apikey, Optional.empty());
    }

    /**
     * Personal API key
     */
    @JsonIgnore
    public String apikey() {
        return apikey;
    }

    @JsonIgnore
    public Timeplus destinationType() {
        return destinationType;
    }

    /**
     * Timeplus workspace endpoint
     */
    @JsonIgnore
    public Optional<String> endpoint() {
        return endpoint;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Personal API key
     */
    public DestinationTimeplus withApikey(String apikey) {
        Utils.checkNotNull(apikey, "apikey");
        this.apikey = apikey;
        return this;
    }

    /**
     * Timeplus workspace endpoint
     */
    public DestinationTimeplus withEndpoint(String endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = Optional.ofNullable(endpoint);
        return this;
    }

    /**
     * Timeplus workspace endpoint
     */
    public DestinationTimeplus withEndpoint(Optional<String> endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = endpoint;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationTimeplus other = (DestinationTimeplus) o;
        return 
            Objects.deepEquals(this.apikey, other.apikey) &&
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.endpoint, other.endpoint);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apikey,
            destinationType,
            endpoint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationTimeplus.class,
                "apikey", apikey,
                "destinationType", destinationType,
                "endpoint", endpoint);
    }
    
    public final static class Builder {
 
        private String apikey;
 
        private Optional<String> endpoint;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Personal API key
         */
        public Builder apikey(String apikey) {
            Utils.checkNotNull(apikey, "apikey");
            this.apikey = apikey;
            return this;
        }

        /**
         * Timeplus workspace endpoint
         */
        public Builder endpoint(String endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = Optional.ofNullable(endpoint);
            return this;
        }

        /**
         * Timeplus workspace endpoint
         */
        public Builder endpoint(Optional<String> endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = endpoint;
            return this;
        }
        
        public DestinationTimeplus build() {
            if (endpoint == null) {
                endpoint = _SINGLETON_VALUE_Endpoint.value();
            }            return new DestinationTimeplus(
                apikey,
                endpoint);
        }

        private static final LazySingletonValue<Timeplus> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"timeplus\"",
                        new TypeReference<Timeplus>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Endpoint =
                new LazySingletonValue<>(
                        "endpoint",
                        "\"https://us-west-2.timeplus.cloud/<workspace_id>\"",
                        new TypeReference<Optional<String>>() {});
    }
}

