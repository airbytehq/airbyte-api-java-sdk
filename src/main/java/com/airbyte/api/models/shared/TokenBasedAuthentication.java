/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * TokenBasedAuthentication
 * 
 * <p>Authenticate using a token-based authentication method. This requires a consumer key and secret, as well as a token ID and secret.
 */
public class TokenBasedAuthentication {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_method")
    private Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethod> authenticationMethod;

    /**
     * The consumer key used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * The consumer secret used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * The token ID used for token-based authentication. This is generated in NetSuite when creating a token-based role.
     */
    @JsonProperty("token_id")
    private String tokenId;

    /**
     * The token secret used for token-based authentication. This is generated in NetSuite when creating a token-based role.Ensure to keep this value secure.
     */
    @JsonProperty("token_secret")
    private String tokenSecret;

    @JsonCreator
    public TokenBasedAuthentication(
            @JsonProperty("authentication_method") Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethod> authenticationMethod,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("token_id") String tokenId,
            @JsonProperty("token_secret") String tokenSecret) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(tokenId, "tokenId");
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.additionalProperties = new HashMap<>();
        this.authenticationMethod = authenticationMethod;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.tokenId = tokenId;
        this.tokenSecret = tokenSecret;
    }
    
    public TokenBasedAuthentication(
            String clientId,
            String clientSecret,
            String tokenId,
            String tokenSecret) {
        this(Optional.empty(), clientId, clientSecret, tokenId, tokenSecret);
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceNetsuiteEnterpriseSchemasAuthenticationMethod> authenticationMethod() {
        return (Optional<SourceNetsuiteEnterpriseSchemasAuthenticationMethod>) authenticationMethod;
    }

    /**
     * The consumer key used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * The consumer secret used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * The token ID used for token-based authentication. This is generated in NetSuite when creating a token-based role.
     */
    @JsonIgnore
    public String tokenId() {
        return tokenId;
    }

    /**
     * The token secret used for token-based authentication. This is generated in NetSuite when creating a token-based role.Ensure to keep this value secure.
     */
    @JsonIgnore
    public String tokenSecret() {
        return tokenSecret;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public TokenBasedAuthentication withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public TokenBasedAuthentication withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public TokenBasedAuthentication withAuthenticationMethod(SourceNetsuiteEnterpriseSchemasAuthenticationMethod authenticationMethod) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        this.authenticationMethod = Optional.ofNullable(authenticationMethod);
        return this;
    }

    public TokenBasedAuthentication withAuthenticationMethod(Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethod> authenticationMethod) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        this.authenticationMethod = authenticationMethod;
        return this;
    }

    /**
     * The consumer key used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    public TokenBasedAuthentication withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The consumer secret used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    public TokenBasedAuthentication withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * The token ID used for token-based authentication. This is generated in NetSuite when creating a token-based role.
     */
    public TokenBasedAuthentication withTokenId(String tokenId) {
        Utils.checkNotNull(tokenId, "tokenId");
        this.tokenId = tokenId;
        return this;
    }

    /**
     * The token secret used for token-based authentication. This is generated in NetSuite when creating a token-based role.Ensure to keep this value secure.
     */
    public TokenBasedAuthentication withTokenSecret(String tokenSecret) {
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.tokenSecret = tokenSecret;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TokenBasedAuthentication other = (TokenBasedAuthentication) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.authenticationMethod, other.authenticationMethod) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.tokenId, other.tokenId) &&
            Objects.deepEquals(this.tokenSecret, other.tokenSecret);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            authenticationMethod,
            clientId,
            clientSecret,
            tokenId,
            tokenSecret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TokenBasedAuthentication.class,
                "additionalProperties", additionalProperties,
                "authenticationMethod", authenticationMethod,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "tokenId", tokenId,
                "tokenSecret", tokenSecret);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethod> authenticationMethod;
 
        private String clientId;
 
        private String clientSecret;
 
        private String tokenId;
 
        private String tokenSecret;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder authenticationMethod(SourceNetsuiteEnterpriseSchemasAuthenticationMethod authenticationMethod) {
            Utils.checkNotNull(authenticationMethod, "authenticationMethod");
            this.authenticationMethod = Optional.ofNullable(authenticationMethod);
            return this;
        }

        public Builder authenticationMethod(Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethod> authenticationMethod) {
            Utils.checkNotNull(authenticationMethod, "authenticationMethod");
            this.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * The consumer key used for token-based authentication. This is generated in NetSuite when creating an integration record.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The consumer secret used for token-based authentication. This is generated in NetSuite when creating an integration record.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The token ID used for token-based authentication. This is generated in NetSuite when creating a token-based role.
         */
        public Builder tokenId(String tokenId) {
            Utils.checkNotNull(tokenId, "tokenId");
            this.tokenId = tokenId;
            return this;
        }

        /**
         * The token secret used for token-based authentication. This is generated in NetSuite when creating a token-based role.Ensure to keep this value secure.
         */
        public Builder tokenSecret(String tokenSecret) {
            Utils.checkNotNull(tokenSecret, "tokenSecret");
            this.tokenSecret = tokenSecret;
            return this;
        }
        
        public TokenBasedAuthentication build() {
            if (authenticationMethod == null) {
                authenticationMethod = _SINGLETON_VALUE_AuthenticationMethod.value();
            }
            return new TokenBasedAuthentication(
                authenticationMethod,
                clientId,
                clientSecret,
                tokenId,
                tokenSecret)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethod>> _SINGLETON_VALUE_AuthenticationMethod =
                new LazySingletonValue<>(
                        "authentication_method",
                        "\"token_based_authentication\"",
                        new TypeReference<Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethod>>() {});
    }
}
