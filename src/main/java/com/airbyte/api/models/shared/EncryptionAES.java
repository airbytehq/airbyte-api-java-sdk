/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class EncryptionAES implements Encryption {

    @JsonProperty("algorithm")
    private EncryptionMapperAlgorithm algorithm;

    @JsonProperty("fieldNameSuffix")
    private String fieldNameSuffix;

    @JsonProperty("key")
    private String key;

    @JsonProperty("mode")
    private Mode mode;

    @JsonProperty("padding")
    private Padding padding;

    @JsonProperty("targetField")
    private String targetField;

    @JsonCreator
    public EncryptionAES(
            @JsonProperty("algorithm") EncryptionMapperAlgorithm algorithm,
            @JsonProperty("fieldNameSuffix") String fieldNameSuffix,
            @JsonProperty("key") String key,
            @JsonProperty("mode") Mode mode,
            @JsonProperty("padding") Padding padding,
            @JsonProperty("targetField") String targetField) {
        Utils.checkNotNull(algorithm, "algorithm");
        Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(mode, "mode");
        Utils.checkNotNull(padding, "padding");
        Utils.checkNotNull(targetField, "targetField");
        this.algorithm = algorithm;
        this.fieldNameSuffix = fieldNameSuffix;
        this.key = key;
        this.mode = mode;
        this.padding = padding;
        this.targetField = targetField;
    }

    @JsonIgnore
    @Override
    public String algorithm() {
        return Utils.discriminatorToString(algorithm);
    }

    @JsonIgnore
    public String fieldNameSuffix() {
        return fieldNameSuffix;
    }

    @JsonIgnore
    public String key() {
        return key;
    }

    @JsonIgnore
    public Mode mode() {
        return mode;
    }

    @JsonIgnore
    public Padding padding() {
        return padding;
    }

    @JsonIgnore
    public String targetField() {
        return targetField;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public EncryptionAES withAlgorithm(EncryptionMapperAlgorithm algorithm) {
        Utils.checkNotNull(algorithm, "algorithm");
        this.algorithm = algorithm;
        return this;
    }

    public EncryptionAES withFieldNameSuffix(String fieldNameSuffix) {
        Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
        this.fieldNameSuffix = fieldNameSuffix;
        return this;
    }

    public EncryptionAES withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public EncryptionAES withMode(Mode mode) {
        Utils.checkNotNull(mode, "mode");
        this.mode = mode;
        return this;
    }

    public EncryptionAES withPadding(Padding padding) {
        Utils.checkNotNull(padding, "padding");
        this.padding = padding;
        return this;
    }

    public EncryptionAES withTargetField(String targetField) {
        Utils.checkNotNull(targetField, "targetField");
        this.targetField = targetField;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EncryptionAES other = (EncryptionAES) o;
        return 
            Objects.deepEquals(this.algorithm, other.algorithm) &&
            Objects.deepEquals(this.fieldNameSuffix, other.fieldNameSuffix) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.mode, other.mode) &&
            Objects.deepEquals(this.padding, other.padding) &&
            Objects.deepEquals(this.targetField, other.targetField);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            algorithm,
            fieldNameSuffix,
            key,
            mode,
            padding,
            targetField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EncryptionAES.class,
                "algorithm", algorithm,
                "fieldNameSuffix", fieldNameSuffix,
                "key", key,
                "mode", mode,
                "padding", padding,
                "targetField", targetField);
    }
    
    public final static class Builder {
 
        private EncryptionMapperAlgorithm algorithm;
 
        private String fieldNameSuffix;
 
        private String key;
 
        private Mode mode;
 
        private Padding padding;
 
        private String targetField;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder algorithm(EncryptionMapperAlgorithm algorithm) {
            Utils.checkNotNull(algorithm, "algorithm");
            this.algorithm = algorithm;
            return this;
        }

        public Builder fieldNameSuffix(String fieldNameSuffix) {
            Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
            this.fieldNameSuffix = fieldNameSuffix;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder mode(Mode mode) {
            Utils.checkNotNull(mode, "mode");
            this.mode = mode;
            return this;
        }

        public Builder padding(Padding padding) {
            Utils.checkNotNull(padding, "padding");
            this.padding = padding;
            return this;
        }

        public Builder targetField(String targetField) {
            Utils.checkNotNull(targetField, "targetField");
            this.targetField = targetField;
            return this;
        }
        
        public EncryptionAES build() {
            return new EncryptionAES(
                algorithm,
                fieldNameSuffix,
                key,
                mode,
                padding,
                targetField);
        }
    }
}
