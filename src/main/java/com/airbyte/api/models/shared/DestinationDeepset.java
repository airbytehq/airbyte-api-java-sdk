/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class DestinationDeepset {

    /**
     * Your deepset cloud API key
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * URL of deepset Cloud API (e.g. https://api.cloud.deepset.ai, https://api.us.deepset.ai, etc). Defaults to https://api.cloud.deepset.ai.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_url")
    private Optional<String> baseUrl;

    @JsonProperty("destinationType")
    private Deepset destinationType;

    /**
     * Number of times to retry an action before giving up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retries")
    private Optional<Double> retries;

    /**
     * Name of workspace to which to sync the data.
     */
    @JsonProperty("workspace")
    private String workspace;

    @JsonCreator
    public DestinationDeepset(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("base_url") Optional<String> baseUrl,
            @JsonProperty("retries") Optional<Double> retries,
            @JsonProperty("workspace") String workspace) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(baseUrl, "baseUrl");
        Utils.checkNotNull(retries, "retries");
        Utils.checkNotNull(workspace, "workspace");
        this.apiKey = apiKey;
        this.baseUrl = baseUrl;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.retries = retries;
        this.workspace = workspace;
    }
    
    public DestinationDeepset(
            String apiKey,
            String workspace) {
        this(apiKey, Optional.empty(), Optional.empty(), workspace);
    }

    /**
     * Your deepset cloud API key
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * URL of deepset Cloud API (e.g. https://api.cloud.deepset.ai, https://api.us.deepset.ai, etc). Defaults to https://api.cloud.deepset.ai.
     */
    @JsonIgnore
    public Optional<String> baseUrl() {
        return baseUrl;
    }

    @JsonIgnore
    public Deepset destinationType() {
        return destinationType;
    }

    /**
     * Number of times to retry an action before giving up.
     */
    @JsonIgnore
    public Optional<Double> retries() {
        return retries;
    }

    /**
     * Name of workspace to which to sync the data.
     */
    @JsonIgnore
    public String workspace() {
        return workspace;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Your deepset cloud API key
     */
    public DestinationDeepset withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * URL of deepset Cloud API (e.g. https://api.cloud.deepset.ai, https://api.us.deepset.ai, etc). Defaults to https://api.cloud.deepset.ai.
     */
    public DestinationDeepset withBaseUrl(String baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = Optional.ofNullable(baseUrl);
        return this;
    }

    /**
     * URL of deepset Cloud API (e.g. https://api.cloud.deepset.ai, https://api.us.deepset.ai, etc). Defaults to https://api.cloud.deepset.ai.
     */
    public DestinationDeepset withBaseUrl(Optional<String> baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = baseUrl;
        return this;
    }

    /**
     * Number of times to retry an action before giving up.
     */
    public DestinationDeepset withRetries(double retries) {
        Utils.checkNotNull(retries, "retries");
        this.retries = Optional.ofNullable(retries);
        return this;
    }

    /**
     * Number of times to retry an action before giving up.
     */
    public DestinationDeepset withRetries(Optional<Double> retries) {
        Utils.checkNotNull(retries, "retries");
        this.retries = retries;
        return this;
    }

    /**
     * Name of workspace to which to sync the data.
     */
    public DestinationDeepset withWorkspace(String workspace) {
        Utils.checkNotNull(workspace, "workspace");
        this.workspace = workspace;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationDeepset other = (DestinationDeepset) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.baseUrl, other.baseUrl) &&
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.retries, other.retries) &&
            Objects.deepEquals(this.workspace, other.workspace);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            baseUrl,
            destinationType,
            retries,
            workspace);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationDeepset.class,
                "apiKey", apiKey,
                "baseUrl", baseUrl,
                "destinationType", destinationType,
                "retries", retries,
                "workspace", workspace);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> baseUrl;
 
        private Optional<Double> retries;
 
        private String workspace;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your deepset cloud API key
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * URL of deepset Cloud API (e.g. https://api.cloud.deepset.ai, https://api.us.deepset.ai, etc). Defaults to https://api.cloud.deepset.ai.
         */
        public Builder baseUrl(String baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = Optional.ofNullable(baseUrl);
            return this;
        }

        /**
         * URL of deepset Cloud API (e.g. https://api.cloud.deepset.ai, https://api.us.deepset.ai, etc). Defaults to https://api.cloud.deepset.ai.
         */
        public Builder baseUrl(Optional<String> baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = baseUrl;
            return this;
        }

        /**
         * Number of times to retry an action before giving up.
         */
        public Builder retries(double retries) {
            Utils.checkNotNull(retries, "retries");
            this.retries = Optional.ofNullable(retries);
            return this;
        }

        /**
         * Number of times to retry an action before giving up.
         */
        public Builder retries(Optional<Double> retries) {
            Utils.checkNotNull(retries, "retries");
            this.retries = retries;
            return this;
        }

        /**
         * Name of workspace to which to sync the data.
         */
        public Builder workspace(String workspace) {
            Utils.checkNotNull(workspace, "workspace");
            this.workspace = workspace;
            return this;
        }
        
        public DestinationDeepset build() {
            if (baseUrl == null) {
                baseUrl = _SINGLETON_VALUE_BaseUrl.value();
            }
            if (retries == null) {
                retries = _SINGLETON_VALUE_Retries.value();
            }
            return new DestinationDeepset(
                apiKey,
                baseUrl,
                retries,
                workspace);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_BaseUrl =
                new LazySingletonValue<>(
                        "base_url",
                        "\"https://api.cloud.deepset.ai\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Deepset> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"deepset\"",
                        new TypeReference<Deepset>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Retries =
                new LazySingletonValue<>(
                        "retries",
                        "5",
                        new TypeReference<Optional<Double>>() {});
    }
}
