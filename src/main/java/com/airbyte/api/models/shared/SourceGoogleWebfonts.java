/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceGoogleWebfonts {

    /**
     * Optional, Available params- json, media, proto
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alt")
    private Optional<? extends String> alt;

    /**
     * API key is required to access google apis, For getting your's goto google console and generate api key for Webfonts
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Optional, boolean type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prettyPrint")
    private Optional<? extends String> prettyPrint;

    /**
     * Optional, to find how to sort
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort")
    private Optional<? extends String> sort;

    @JsonProperty("sourceType")
    private GoogleWebfonts sourceType;

    @JsonCreator
    public SourceGoogleWebfonts(
            @JsonProperty("alt") Optional<? extends String> alt,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("prettyPrint") Optional<? extends String> prettyPrint,
            @JsonProperty("sort") Optional<? extends String> sort) {
        Utils.checkNotNull(alt, "alt");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(prettyPrint, "prettyPrint");
        Utils.checkNotNull(sort, "sort");
        this.alt = alt;
        this.apiKey = apiKey;
        this.prettyPrint = prettyPrint;
        this.sort = sort;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceGoogleWebfonts(
            String apiKey) {
        this(Optional.empty(), apiKey, Optional.empty(), Optional.empty());
    }

    /**
     * Optional, Available params- json, media, proto
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> alt() {
        return (Optional<String>) alt;
    }

    /**
     * API key is required to access google apis, For getting your's goto google console and generate api key for Webfonts
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Optional, boolean type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> prettyPrint() {
        return (Optional<String>) prettyPrint;
    }

    /**
     * Optional, to find how to sort
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sort() {
        return (Optional<String>) sort;
    }

    @JsonIgnore
    public GoogleWebfonts sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Optional, Available params- json, media, proto
     */
    public SourceGoogleWebfonts withAlt(String alt) {
        Utils.checkNotNull(alt, "alt");
        this.alt = Optional.ofNullable(alt);
        return this;
    }

    /**
     * Optional, Available params- json, media, proto
     */
    public SourceGoogleWebfonts withAlt(Optional<? extends String> alt) {
        Utils.checkNotNull(alt, "alt");
        this.alt = alt;
        return this;
    }

    /**
     * API key is required to access google apis, For getting your's goto google console and generate api key for Webfonts
     */
    public SourceGoogleWebfonts withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Optional, boolean type
     */
    public SourceGoogleWebfonts withPrettyPrint(String prettyPrint) {
        Utils.checkNotNull(prettyPrint, "prettyPrint");
        this.prettyPrint = Optional.ofNullable(prettyPrint);
        return this;
    }

    /**
     * Optional, boolean type
     */
    public SourceGoogleWebfonts withPrettyPrint(Optional<? extends String> prettyPrint) {
        Utils.checkNotNull(prettyPrint, "prettyPrint");
        this.prettyPrint = prettyPrint;
        return this;
    }

    /**
     * Optional, to find how to sort
     */
    public SourceGoogleWebfonts withSort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }

    /**
     * Optional, to find how to sort
     */
    public SourceGoogleWebfonts withSort(Optional<? extends String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGoogleWebfonts other = (SourceGoogleWebfonts) o;
        return 
            java.util.Objects.deepEquals(this.alt, other.alt) &&
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.prettyPrint, other.prettyPrint) &&
            java.util.Objects.deepEquals(this.sort, other.sort) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            alt,
            apiKey,
            prettyPrint,
            sort,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGoogleWebfonts.class,
                "alt", alt,
                "apiKey", apiKey,
                "prettyPrint", prettyPrint,
                "sort", sort,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> alt = Optional.empty();
 
        private String apiKey;
 
        private Optional<? extends String> prettyPrint = Optional.empty();
 
        private Optional<? extends String> sort = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Optional, Available params- json, media, proto
         */
        public Builder alt(String alt) {
            Utils.checkNotNull(alt, "alt");
            this.alt = Optional.ofNullable(alt);
            return this;
        }

        /**
         * Optional, Available params- json, media, proto
         */
        public Builder alt(Optional<? extends String> alt) {
            Utils.checkNotNull(alt, "alt");
            this.alt = alt;
            return this;
        }

        /**
         * API key is required to access google apis, For getting your's goto google console and generate api key for Webfonts
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Optional, boolean type
         */
        public Builder prettyPrint(String prettyPrint) {
            Utils.checkNotNull(prettyPrint, "prettyPrint");
            this.prettyPrint = Optional.ofNullable(prettyPrint);
            return this;
        }

        /**
         * Optional, boolean type
         */
        public Builder prettyPrint(Optional<? extends String> prettyPrint) {
            Utils.checkNotNull(prettyPrint, "prettyPrint");
            this.prettyPrint = prettyPrint;
            return this;
        }

        /**
         * Optional, to find how to sort
         */
        public Builder sort(String sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * Optional, to find how to sort
         */
        public Builder sort(Optional<? extends String> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }
        
        public SourceGoogleWebfonts build() {
            return new SourceGoogleWebfonts(
                alt,
                apiKey,
                prettyPrint,
                sort);
        }

        private static final LazySingletonValue<GoogleWebfonts> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"google-webfonts\"",
                        new TypeReference<GoogleWebfonts>() {});
    }
}

