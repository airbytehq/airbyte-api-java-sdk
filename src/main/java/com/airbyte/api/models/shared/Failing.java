/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Failing {

    /**
     * Number of messages after which to fail.
     */
    @JsonProperty("num_messages")
    private long numMessages;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test_destination_type")
    private Optional<? extends DestinationDevNullSchemasTestDestinationTestDestinationType> testDestinationType;

    @JsonCreator
    public Failing(
            @JsonProperty("num_messages") long numMessages) {
        Utils.checkNotNull(numMessages, "numMessages");
        this.numMessages = numMessages;
        this.testDestinationType = Builder._SINGLETON_VALUE_TestDestinationType.value();
    }

    /**
     * Number of messages after which to fail.
     */
    @JsonIgnore
    public long numMessages() {
        return numMessages;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationDevNullSchemasTestDestinationTestDestinationType> testDestinationType() {
        return (Optional<DestinationDevNullSchemasTestDestinationTestDestinationType>) testDestinationType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of messages after which to fail.
     */
    public Failing withNumMessages(long numMessages) {
        Utils.checkNotNull(numMessages, "numMessages");
        this.numMessages = numMessages;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Failing other = (Failing) o;
        return 
            java.util.Objects.deepEquals(this.numMessages, other.numMessages) &&
            java.util.Objects.deepEquals(this.testDestinationType, other.testDestinationType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            numMessages,
            testDestinationType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Failing.class,
                "numMessages", numMessages,
                "testDestinationType", testDestinationType);
    }
    
    public final static class Builder {
 
        private Long numMessages;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of messages after which to fail.
         */
        public Builder numMessages(long numMessages) {
            Utils.checkNotNull(numMessages, "numMessages");
            this.numMessages = numMessages;
            return this;
        }
        
        public Failing build() {
            return new Failing(
                numMessages);
        }

        private static final LazySingletonValue<Optional<? extends DestinationDevNullSchemasTestDestinationTestDestinationType>> _SINGLETON_VALUE_TestDestinationType =
                new LazySingletonValue<>(
                        "test_destination_type",
                        "\"FAILING\"",
                        new TypeReference<Optional<? extends DestinationDevNullSchemasTestDestinationTestDestinationType>>() {});
    }
}

