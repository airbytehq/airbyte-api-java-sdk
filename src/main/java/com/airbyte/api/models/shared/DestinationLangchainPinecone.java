/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DestinationLangchainPinecone - Pinecone is a popular vector store that can be used to store and retrieve embeddings. It is a managed service and can also be queried from outside of langchain.
 */

public class DestinationLangchainPinecone {

    /**
     * Pinecone index to use
     */
    @JsonProperty("index")
    private String index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends DestinationLangchainSchemasIndexingMode> mode;

    /**
     * Pinecone environment to use
     */
    @JsonProperty("pinecone_environment")
    private String pineconeEnvironment;

    @JsonProperty("pinecone_key")
    private String pineconeKey;

    @JsonCreator
    public DestinationLangchainPinecone(
            @JsonProperty("index") String index,
            @JsonProperty("pinecone_environment") String pineconeEnvironment,
            @JsonProperty("pinecone_key") String pineconeKey) {
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(pineconeEnvironment, "pineconeEnvironment");
        Utils.checkNotNull(pineconeKey, "pineconeKey");
        this.index = index;
        this.mode = Builder._SINGLETON_VALUE_Mode.value();
        this.pineconeEnvironment = pineconeEnvironment;
        this.pineconeKey = pineconeKey;
    }

    /**
     * Pinecone index to use
     */
    @JsonIgnore
    public String index() {
        return index;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationLangchainSchemasIndexingMode> mode() {
        return (Optional<DestinationLangchainSchemasIndexingMode>) mode;
    }

    /**
     * Pinecone environment to use
     */
    @JsonIgnore
    public String pineconeEnvironment() {
        return pineconeEnvironment;
    }

    @JsonIgnore
    public String pineconeKey() {
        return pineconeKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Pinecone index to use
     */
    public DestinationLangchainPinecone withIndex(String index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * Pinecone environment to use
     */
    public DestinationLangchainPinecone withPineconeEnvironment(String pineconeEnvironment) {
        Utils.checkNotNull(pineconeEnvironment, "pineconeEnvironment");
        this.pineconeEnvironment = pineconeEnvironment;
        return this;
    }

    public DestinationLangchainPinecone withPineconeKey(String pineconeKey) {
        Utils.checkNotNull(pineconeKey, "pineconeKey");
        this.pineconeKey = pineconeKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationLangchainPinecone other = (DestinationLangchainPinecone) o;
        return 
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.mode, other.mode) &&
            java.util.Objects.deepEquals(this.pineconeEnvironment, other.pineconeEnvironment) &&
            java.util.Objects.deepEquals(this.pineconeKey, other.pineconeKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            index,
            mode,
            pineconeEnvironment,
            pineconeKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationLangchainPinecone.class,
                "index", index,
                "mode", mode,
                "pineconeEnvironment", pineconeEnvironment,
                "pineconeKey", pineconeKey);
    }
    
    public final static class Builder {
 
        private String index;
 
        private String pineconeEnvironment;
 
        private String pineconeKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Pinecone index to use
         */
        public Builder index(String index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        /**
         * Pinecone environment to use
         */
        public Builder pineconeEnvironment(String pineconeEnvironment) {
            Utils.checkNotNull(pineconeEnvironment, "pineconeEnvironment");
            this.pineconeEnvironment = pineconeEnvironment;
            return this;
        }

        public Builder pineconeKey(String pineconeKey) {
            Utils.checkNotNull(pineconeKey, "pineconeKey");
            this.pineconeKey = pineconeKey;
            return this;
        }
        
        public DestinationLangchainPinecone build() {
            return new DestinationLangchainPinecone(
                index,
                pineconeEnvironment,
                pineconeKey);
        }

        private static final LazySingletonValue<Optional<? extends DestinationLangchainSchemasIndexingMode>> _SINGLETON_VALUE_Mode =
                new LazySingletonValue<>(
                        "mode",
                        "\"pinecone\"",
                        new TypeReference<Optional<? extends DestinationLangchainSchemasIndexingMode>>() {});
    }
}

