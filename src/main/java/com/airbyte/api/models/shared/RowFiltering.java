/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class RowFiltering {

    @JsonProperty("conditions")
    private RowFilteringOperation conditions;

    @JsonCreator
    public RowFiltering(
            @JsonProperty("conditions") RowFilteringOperation conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = conditions;
    }

    @JsonIgnore
    public RowFilteringOperation conditions() {
        return conditions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public RowFiltering withConditions(RowFilteringOperation conditions) {
        Utils.checkNotNull(conditions, "conditions");
        this.conditions = conditions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RowFiltering other = (RowFiltering) o;
        return 
            Objects.deepEquals(this.conditions, other.conditions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            conditions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RowFiltering.class,
                "conditions", conditions);
    }
    
    public final static class Builder {
 
        private RowFilteringOperation conditions;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder conditions(RowFilteringOperation conditions) {
            Utils.checkNotNull(conditions, "conditions");
            this.conditions = conditions;
            return this;
        }
        
        public RowFiltering build() {
            return new RowFiltering(
                conditions);
        }
    }
}
