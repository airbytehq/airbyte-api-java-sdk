/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class DestinationSftpJson {

    @JsonProperty("destinationType")
    private SftpJson destinationType;

    /**
     * Path to the directory where json files will be written.
     */
    @JsonProperty("destination_path")
    private String destinationPath;

    /**
     * Hostname of the SFTP server.
     */
    @JsonProperty("host")
    private String host;

    /**
     * Password associated with the username.
     */
    @JsonProperty("password")
    private String password;

    /**
     * Port of the SFTP server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<Long> port;

    /**
     * Username to use to access the SFTP server.
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public DestinationSftpJson(
            @JsonProperty("destination_path") String destinationPath,
            @JsonProperty("host") String host,
            @JsonProperty("password") String password,
            @JsonProperty("port") Optional<Long> port,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(destinationPath, "destinationPath");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(username, "username");
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.destinationPath = destinationPath;
        this.host = host;
        this.password = password;
        this.port = port;
        this.username = username;
    }
    
    public DestinationSftpJson(
            String destinationPath,
            String host,
            String password,
            String username) {
        this(destinationPath, host, password, Optional.empty(), username);
    }

    @JsonIgnore
    public SftpJson destinationType() {
        return destinationType;
    }

    /**
     * Path to the directory where json files will be written.
     */
    @JsonIgnore
    public String destinationPath() {
        return destinationPath;
    }

    /**
     * Hostname of the SFTP server.
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Password associated with the username.
     */
    @JsonIgnore
    public String password() {
        return password;
    }

    /**
     * Port of the SFTP server.
     */
    @JsonIgnore
    public Optional<Long> port() {
        return port;
    }

    /**
     * Username to use to access the SFTP server.
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Path to the directory where json files will be written.
     */
    public DestinationSftpJson withDestinationPath(String destinationPath) {
        Utils.checkNotNull(destinationPath, "destinationPath");
        this.destinationPath = destinationPath;
        return this;
    }

    /**
     * Hostname of the SFTP server.
     */
    public DestinationSftpJson withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Password associated with the username.
     */
    public DestinationSftpJson withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Port of the SFTP server.
     */
    public DestinationSftpJson withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Port of the SFTP server.
     */
    public DestinationSftpJson withPort(Optional<Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * Username to use to access the SFTP server.
     */
    public DestinationSftpJson withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationSftpJson other = (DestinationSftpJson) o;
        return 
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.destinationPath, other.destinationPath) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.port, other.port) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            destinationType,
            destinationPath,
            host,
            password,
            port,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationSftpJson.class,
                "destinationType", destinationType,
                "destinationPath", destinationPath,
                "host", host,
                "password", password,
                "port", port,
                "username", username);
    }
    
    public final static class Builder {
 
        private String destinationPath;
 
        private String host;
 
        private String password;
 
        private Optional<Long> port;
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Path to the directory where json files will be written.
         */
        public Builder destinationPath(String destinationPath) {
            Utils.checkNotNull(destinationPath, "destinationPath");
            this.destinationPath = destinationPath;
            return this;
        }

        /**
         * Hostname of the SFTP server.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Password associated with the username.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Port of the SFTP server.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Port of the SFTP server.
         */
        public Builder port(Optional<Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * Username to use to access the SFTP server.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public DestinationSftpJson build() {
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            return new DestinationSftpJson(
                destinationPath,
                host,
                password,
                port,
                username);
        }

        private static final LazySingletonValue<SftpJson> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"sftp-json\"",
                        new TypeReference<SftpJson>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "22",
                        new TypeReference<Optional<Long>>() {});
    }
}
