/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class DestinationFirebolt {

    /**
     * Firebolt account to login.
     */
    @JsonProperty("account")
    private String account;

    /**
     * Firebolt service account ID.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * Firebolt secret, corresponding to the service account ID.
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * The database to connect to.
     */
    @JsonProperty("database")
    private String database;

    @JsonProperty("destinationType")
    private Firebolt destinationType;

    /**
     * Engine name to connect to.
     */
    @JsonProperty("engine")
    private String engine;

    /**
     * The host name of your Firebolt database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    private Optional<String> host;

    /**
     * Loading method used to select the way data will be uploaded to Firebolt
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loading_method")
    private Optional<? extends DestinationFireboltLoadingMethod> loadingMethod;

    @JsonCreator
    public DestinationFirebolt(
            @JsonProperty("account") String account,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("database") String database,
            @JsonProperty("engine") String engine,
            @JsonProperty("host") Optional<String> host,
            @JsonProperty("loading_method") Optional<? extends DestinationFireboltLoadingMethod> loadingMethod) {
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(engine, "engine");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(loadingMethod, "loadingMethod");
        this.account = account;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.database = database;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.engine = engine;
        this.host = host;
        this.loadingMethod = loadingMethod;
    }
    
    public DestinationFirebolt(
            String account,
            String clientId,
            String clientSecret,
            String database,
            String engine) {
        this(account, clientId, clientSecret, database, engine, Optional.empty(), Optional.empty());
    }

    /**
     * Firebolt account to login.
     */
    @JsonIgnore
    public String account() {
        return account;
    }

    /**
     * Firebolt service account ID.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * Firebolt secret, corresponding to the service account ID.
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * The database to connect to.
     */
    @JsonIgnore
    public String database() {
        return database;
    }

    @JsonIgnore
    public Firebolt destinationType() {
        return destinationType;
    }

    /**
     * Engine name to connect to.
     */
    @JsonIgnore
    public String engine() {
        return engine;
    }

    /**
     * The host name of your Firebolt database.
     */
    @JsonIgnore
    public Optional<String> host() {
        return host;
    }

    /**
     * Loading method used to select the way data will be uploaded to Firebolt
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationFireboltLoadingMethod> loadingMethod() {
        return (Optional<DestinationFireboltLoadingMethod>) loadingMethod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Firebolt account to login.
     */
    public DestinationFirebolt withAccount(String account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    /**
     * Firebolt service account ID.
     */
    public DestinationFirebolt withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Firebolt secret, corresponding to the service account ID.
     */
    public DestinationFirebolt withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * The database to connect to.
     */
    public DestinationFirebolt withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    /**
     * Engine name to connect to.
     */
    public DestinationFirebolt withEngine(String engine) {
        Utils.checkNotNull(engine, "engine");
        this.engine = engine;
        return this;
    }

    /**
     * The host name of your Firebolt database.
     */
    public DestinationFirebolt withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = Optional.ofNullable(host);
        return this;
    }

    /**
     * The host name of your Firebolt database.
     */
    public DestinationFirebolt withHost(Optional<String> host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Loading method used to select the way data will be uploaded to Firebolt
     */
    public DestinationFirebolt withLoadingMethod(DestinationFireboltLoadingMethod loadingMethod) {
        Utils.checkNotNull(loadingMethod, "loadingMethod");
        this.loadingMethod = Optional.ofNullable(loadingMethod);
        return this;
    }

    /**
     * Loading method used to select the way data will be uploaded to Firebolt
     */
    public DestinationFirebolt withLoadingMethod(Optional<? extends DestinationFireboltLoadingMethod> loadingMethod) {
        Utils.checkNotNull(loadingMethod, "loadingMethod");
        this.loadingMethod = loadingMethod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationFirebolt other = (DestinationFirebolt) o;
        return 
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.database, other.database) &&
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.engine, other.engine) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.loadingMethod, other.loadingMethod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            account,
            clientId,
            clientSecret,
            database,
            destinationType,
            engine,
            host,
            loadingMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationFirebolt.class,
                "account", account,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "database", database,
                "destinationType", destinationType,
                "engine", engine,
                "host", host,
                "loadingMethod", loadingMethod);
    }
    
    public final static class Builder {
 
        private String account;
 
        private String clientId;
 
        private String clientSecret;
 
        private String database;
 
        private String engine;
 
        private Optional<String> host = Optional.empty();
 
        private Optional<? extends DestinationFireboltLoadingMethod> loadingMethod = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Firebolt account to login.
         */
        public Builder account(String account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        /**
         * Firebolt service account ID.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Firebolt secret, corresponding to the service account ID.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The database to connect to.
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        /**
         * Engine name to connect to.
         */
        public Builder engine(String engine) {
            Utils.checkNotNull(engine, "engine");
            this.engine = engine;
            return this;
        }

        /**
         * The host name of your Firebolt database.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = Optional.ofNullable(host);
            return this;
        }

        /**
         * The host name of your Firebolt database.
         */
        public Builder host(Optional<String> host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Loading method used to select the way data will be uploaded to Firebolt
         */
        public Builder loadingMethod(DestinationFireboltLoadingMethod loadingMethod) {
            Utils.checkNotNull(loadingMethod, "loadingMethod");
            this.loadingMethod = Optional.ofNullable(loadingMethod);
            return this;
        }

        /**
         * Loading method used to select the way data will be uploaded to Firebolt
         */
        public Builder loadingMethod(Optional<? extends DestinationFireboltLoadingMethod> loadingMethod) {
            Utils.checkNotNull(loadingMethod, "loadingMethod");
            this.loadingMethod = loadingMethod;
            return this;
        }
        
        public DestinationFirebolt build() {
            return new DestinationFirebolt(
                account,
                clientId,
                clientSecret,
                database,
                engine,
                host,
                loadingMethod);
        }

        private static final LazySingletonValue<Firebolt> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"firebolt\"",
                        new TypeReference<Firebolt>() {});
    }
}

