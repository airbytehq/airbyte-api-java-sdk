/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceToggl {

    /**
     * Your API Token. See &lt;a href="https://developers.track.toggl.com/docs/authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    @JsonProperty("api_token")
    private String apiToken;

    /**
     * To retrieve time entries created before the given date (inclusive).
     */
    @JsonProperty("end_date")
    private String endDate;

    /**
     * Your organization id. See &lt;a href="https://developers.track.toggl.com/docs/organization"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("organization_id")
    private long organizationId;

    @JsonProperty("sourceType")
    private Toggl sourceType;

    /**
     * To retrieve time entries created after the given date (inclusive).
     */
    @JsonProperty("start_date")
    private String startDate;

    /**
     * Your workspace id. See &lt;a href="https://developers.track.toggl.com/docs/workspaces"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("workspace_id")
    private long workspaceId;

    @JsonCreator
    public SourceToggl(
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("end_date") String endDate,
            @JsonProperty("organization_id") long organizationId,
            @JsonProperty("start_date") String startDate,
            @JsonProperty("workspace_id") long workspaceId) {
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.apiToken = apiToken;
        this.endDate = endDate;
        this.organizationId = organizationId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.workspaceId = workspaceId;
    }

    /**
     * Your API Token. See &lt;a href="https://developers.track.toggl.com/docs/authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    /**
     * To retrieve time entries created before the given date (inclusive).
     */
    @JsonIgnore
    public String endDate() {
        return endDate;
    }

    /**
     * Your organization id. See &lt;a href="https://developers.track.toggl.com/docs/organization"&gt;here&lt;/a&gt;.
     */
    @JsonIgnore
    public long organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public Toggl sourceType() {
        return sourceType;
    }

    /**
     * To retrieve time entries created after the given date (inclusive).
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    /**
     * Your workspace id. See &lt;a href="https://developers.track.toggl.com/docs/workspaces"&gt;here&lt;/a&gt;.
     */
    @JsonIgnore
    public long workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Your API Token. See &lt;a href="https://developers.track.toggl.com/docs/authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
     */
    public SourceToggl withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * To retrieve time entries created before the given date (inclusive).
     */
    public SourceToggl withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Your organization id. See &lt;a href="https://developers.track.toggl.com/docs/organization"&gt;here&lt;/a&gt;.
     */
    public SourceToggl withOrganizationId(long organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * To retrieve time entries created after the given date (inclusive).
     */
    public SourceToggl withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Your workspace id. See &lt;a href="https://developers.track.toggl.com/docs/workspaces"&gt;here&lt;/a&gt;.
     */
    public SourceToggl withWorkspaceId(long workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceToggl other = (SourceToggl) o;
        return 
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiToken,
            endDate,
            organizationId,
            sourceType,
            startDate,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceToggl.class,
                "apiToken", apiToken,
                "endDate", endDate,
                "organizationId", organizationId,
                "sourceType", sourceType,
                "startDate", startDate,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private String apiToken;
 
        private String endDate;
 
        private Long organizationId;
 
        private String startDate;
 
        private Long workspaceId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your API Token. See &lt;a href="https://developers.track.toggl.com/docs/authentication"&gt;here&lt;/a&gt;. The token is case sensitive.
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * To retrieve time entries created before the given date (inclusive).
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Your organization id. See &lt;a href="https://developers.track.toggl.com/docs/organization"&gt;here&lt;/a&gt;.
         */
        public Builder organizationId(long organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        /**
         * To retrieve time entries created after the given date (inclusive).
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Your workspace id. See &lt;a href="https://developers.track.toggl.com/docs/workspaces"&gt;here&lt;/a&gt;.
         */
        public Builder workspaceId(long workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public SourceToggl build() {
            return new SourceToggl(
                apiToken,
                endDate,
                organizationId,
                startDate,
                workspaceId);
        }

        private static final LazySingletonValue<Toggl> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"toggl\"",
                        new TypeReference<Toggl>() {});
    }
}
