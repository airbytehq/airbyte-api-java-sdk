/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class SourcePaypalTransaction {

    /**
     * The Client ID of your Paypal developer application.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * The Client Secret of your Paypal developer application.
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Determines whether to use the sandbox or production environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_sandbox")
    private Optional<? extends Boolean> isSandbox;

    /**
     * The key to refresh the expired access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    private Optional<? extends String> refreshToken;

    @JsonProperty("sourceType")
    private PaypalTransaction sourceType;

    /**
     * Start Date for data extraction in &lt;a href=\"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\"&gt;ISO format&lt;/a&gt;. Date must be in range from 3 years till 12 hrs before present time.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * The number of days per request. Must be a number between 1 and 31.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_window")
    private Optional<? extends Long> timeWindow;

    public SourcePaypalTransaction(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("is_sandbox") Optional<? extends Boolean> isSandbox,
            @JsonProperty("refresh_token") Optional<? extends String> refreshToken,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("time_window") Optional<? extends Long> timeWindow) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(isSandbox, "isSandbox");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(timeWindow, "timeWindow");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.isSandbox = isSandbox;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.timeWindow = timeWindow;
    }

    /**
     * The Client ID of your Paypal developer application.
     */
    public String clientId() {
        return clientId;
    }

    /**
     * The Client Secret of your Paypal developer application.
     */
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Determines whether to use the sandbox or production environment.
     */
    public Optional<? extends Boolean> isSandbox() {
        return isSandbox;
    }

    /**
     * The key to refresh the expired access token.
     */
    public Optional<? extends String> refreshToken() {
        return refreshToken;
    }

    public PaypalTransaction sourceType() {
        return sourceType;
    }

    /**
     * Start Date for data extraction in &lt;a href=\"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\"&gt;ISO format&lt;/a&gt;. Date must be in range from 3 years till 12 hrs before present time.
     */
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * The number of days per request. Must be a number between 1 and 31.
     */
    public Optional<? extends Long> timeWindow() {
        return timeWindow;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Client ID of your Paypal developer application.
     */
    public SourcePaypalTransaction withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The Client Secret of your Paypal developer application.
     */
    public SourcePaypalTransaction withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Determines whether to use the sandbox or production environment.
     */
    public SourcePaypalTransaction withIsSandbox(boolean isSandbox) {
        Utils.checkNotNull(isSandbox, "isSandbox");
        this.isSandbox = Optional.ofNullable(isSandbox);
        return this;
    }

    /**
     * Determines whether to use the sandbox or production environment.
     */
    public SourcePaypalTransaction withIsSandbox(Optional<? extends Boolean> isSandbox) {
        Utils.checkNotNull(isSandbox, "isSandbox");
        this.isSandbox = isSandbox;
        return this;
    }

    /**
     * The key to refresh the expired access token.
     */
    public SourcePaypalTransaction withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = Optional.ofNullable(refreshToken);
        return this;
    }

    /**
     * The key to refresh the expired access token.
     */
    public SourcePaypalTransaction withRefreshToken(Optional<? extends String> refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Start Date for data extraction in &lt;a href=\"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\"&gt;ISO format&lt;/a&gt;. Date must be in range from 3 years till 12 hrs before present time.
     */
    public SourcePaypalTransaction withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The number of days per request. Must be a number between 1 and 31.
     */
    public SourcePaypalTransaction withTimeWindow(long timeWindow) {
        Utils.checkNotNull(timeWindow, "timeWindow");
        this.timeWindow = Optional.ofNullable(timeWindow);
        return this;
    }

    /**
     * The number of days per request. Must be a number between 1 and 31.
     */
    public SourcePaypalTransaction withTimeWindow(Optional<? extends Long> timeWindow) {
        Utils.checkNotNull(timeWindow, "timeWindow");
        this.timeWindow = timeWindow;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePaypalTransaction other = (SourcePaypalTransaction) o;
        return 
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.isSandbox, other.isSandbox) &&
            java.util.Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.timeWindow, other.timeWindow);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            clientId,
            clientSecret,
            isSandbox,
            refreshToken,
            sourceType,
            startDate,
            timeWindow);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePaypalTransaction.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "isSandbox", isSandbox,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "startDate", startDate,
                "timeWindow", timeWindow);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<? extends Boolean> isSandbox;
 
        private Optional<? extends String> refreshToken = Optional.empty();
 
        private OffsetDateTime startDate;
 
        private Optional<? extends Long> timeWindow;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Client ID of your Paypal developer application.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The Client Secret of your Paypal developer application.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Determines whether to use the sandbox or production environment.
         */
        public Builder isSandbox(boolean isSandbox) {
            Utils.checkNotNull(isSandbox, "isSandbox");
            this.isSandbox = Optional.ofNullable(isSandbox);
            return this;
        }

        /**
         * Determines whether to use the sandbox or production environment.
         */
        public Builder isSandbox(Optional<? extends Boolean> isSandbox) {
            Utils.checkNotNull(isSandbox, "isSandbox");
            this.isSandbox = isSandbox;
            return this;
        }

        /**
         * The key to refresh the expired access token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = Optional.ofNullable(refreshToken);
            return this;
        }

        /**
         * The key to refresh the expired access token.
         */
        public Builder refreshToken(Optional<? extends String> refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Start Date for data extraction in &lt;a href=\"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\"&gt;ISO format&lt;/a&gt;. Date must be in range from 3 years till 12 hrs before present time.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The number of days per request. Must be a number between 1 and 31.
         */
        public Builder timeWindow(long timeWindow) {
            Utils.checkNotNull(timeWindow, "timeWindow");
            this.timeWindow = Optional.ofNullable(timeWindow);
            return this;
        }

        /**
         * The number of days per request. Must be a number between 1 and 31.
         */
        public Builder timeWindow(Optional<? extends Long> timeWindow) {
            Utils.checkNotNull(timeWindow, "timeWindow");
            this.timeWindow = timeWindow;
            return this;
        }
        
        public SourcePaypalTransaction build() {
            if (isSandbox == null) {
                isSandbox = _SINGLETON_VALUE_IsSandbox.value();
            }
            if (timeWindow == null) {
                timeWindow = _SINGLETON_VALUE_TimeWindow.value();
            }
            return new SourcePaypalTransaction(
                clientId,
                clientSecret,
                isSandbox,
                refreshToken,
                startDate,
                timeWindow);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_IsSandbox =
                new LazySingletonValue<>(
                        "is_sandbox",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<PaypalTransaction> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"paypal-transaction\"",
                        new TypeReference<PaypalTransaction>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_TimeWindow =
                new LazySingletonValue<>(
                        "time_window",
                        "7",
                        new TypeReference<Optional<? extends Long>>() {});
    }
}

