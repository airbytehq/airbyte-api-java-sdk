/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourceNetsuiteEnterprise {

    /**
     * The username which is used to access the database.
     */
    @JsonProperty("account_id")
    private String accountId;

    /**
     * Configure how to authenticate to Netsuite. Options include username/password or token-based authentication.
     */
    @JsonProperty("authentication_method")
    private SourceNetsuiteEnterpriseAuthenticationMethod authenticationMethod;

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_privileges")
    private Optional<Boolean> checkPrivileges;

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkpoint_target_interval_seconds")
    private Optional<Long> checkpointTargetIntervalSeconds;

    /**
     * Maximum number of concurrent queries to the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concurrency")
    private Optional<Long> concurrency;

    /**
     * Configures how data is extracted from the database.
     */
    @JsonProperty("cursor")
    private SourceNetsuiteEnterpriseUpdateMethod cursor;

    /**
     * Hostname of the database.
     */
    @JsonProperty("host")
    private String host;

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jdbc_url_params")
    private Optional<String> jdbcUrlParams;

    /**
     * Port of the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<Long> port;

    /**
     * The username which is used to access the database.
     */
    @JsonProperty("role_id")
    private String roleId;

    @JsonProperty("sourceType")
    private NetsuiteEnterprise sourceType;

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    @JsonProperty("tunnel_method")
    private SourceNetsuiteEnterpriseSSHTunnelMethod tunnelMethod;

    /**
     * The username which is used to access the database.
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourceNetsuiteEnterprise(
            @JsonProperty("account_id") String accountId,
            @JsonProperty("authentication_method") SourceNetsuiteEnterpriseAuthenticationMethod authenticationMethod,
            @JsonProperty("check_privileges") Optional<Boolean> checkPrivileges,
            @JsonProperty("checkpoint_target_interval_seconds") Optional<Long> checkpointTargetIntervalSeconds,
            @JsonProperty("concurrency") Optional<Long> concurrency,
            @JsonProperty("cursor") SourceNetsuiteEnterpriseUpdateMethod cursor,
            @JsonProperty("host") String host,
            @JsonProperty("jdbc_url_params") Optional<String> jdbcUrlParams,
            @JsonProperty("port") Optional<Long> port,
            @JsonProperty("role_id") String roleId,
            @JsonProperty("tunnel_method") SourceNetsuiteEnterpriseSSHTunnelMethod tunnelMethod,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        Utils.checkNotNull(checkPrivileges, "checkPrivileges");
        Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
        Utils.checkNotNull(concurrency, "concurrency");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(roleId, "roleId");
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        Utils.checkNotNull(username, "username");
        this.accountId = accountId;
        this.authenticationMethod = authenticationMethod;
        this.checkPrivileges = checkPrivileges;
        this.checkpointTargetIntervalSeconds = checkpointTargetIntervalSeconds;
        this.concurrency = concurrency;
        this.cursor = cursor;
        this.host = host;
        this.jdbcUrlParams = jdbcUrlParams;
        this.port = port;
        this.roleId = roleId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.tunnelMethod = tunnelMethod;
        this.username = username;
    }
    
    public SourceNetsuiteEnterprise(
            String accountId,
            SourceNetsuiteEnterpriseAuthenticationMethod authenticationMethod,
            SourceNetsuiteEnterpriseUpdateMethod cursor,
            String host,
            String roleId,
            SourceNetsuiteEnterpriseSSHTunnelMethod tunnelMethod,
            String username) {
        this(accountId, authenticationMethod, Optional.empty(), Optional.empty(), Optional.empty(), cursor, host, Optional.empty(), Optional.empty(), roleId, tunnelMethod, username);
    }

    /**
     * The username which is used to access the database.
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * Configure how to authenticate to Netsuite. Options include username/password or token-based authentication.
     */
    @JsonIgnore
    public SourceNetsuiteEnterpriseAuthenticationMethod authenticationMethod() {
        return authenticationMethod;
    }

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    @JsonIgnore
    public Optional<Boolean> checkPrivileges() {
        return checkPrivileges;
    }

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    @JsonIgnore
    public Optional<Long> checkpointTargetIntervalSeconds() {
        return checkpointTargetIntervalSeconds;
    }

    /**
     * Maximum number of concurrent queries to the database.
     */
    @JsonIgnore
    public Optional<Long> concurrency() {
        return concurrency;
    }

    /**
     * Configures how data is extracted from the database.
     */
    @JsonIgnore
    public SourceNetsuiteEnterpriseUpdateMethod cursor() {
        return cursor;
    }

    /**
     * Hostname of the database.
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonIgnore
    public Optional<String> jdbcUrlParams() {
        return jdbcUrlParams;
    }

    /**
     * Port of the database.
     */
    @JsonIgnore
    public Optional<Long> port() {
        return port;
    }

    /**
     * The username which is used to access the database.
     */
    @JsonIgnore
    public String roleId() {
        return roleId;
    }

    @JsonIgnore
    public NetsuiteEnterprise sourceType() {
        return sourceType;
    }

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    @JsonIgnore
    public SourceNetsuiteEnterpriseSSHTunnelMethod tunnelMethod() {
        return tunnelMethod;
    }

    /**
     * The username which is used to access the database.
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The username which is used to access the database.
     */
    public SourceNetsuiteEnterprise withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * Configure how to authenticate to Netsuite. Options include username/password or token-based authentication.
     */
    public SourceNetsuiteEnterprise withAuthenticationMethod(SourceNetsuiteEnterpriseAuthenticationMethod authenticationMethod) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        this.authenticationMethod = authenticationMethod;
        return this;
    }

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    public SourceNetsuiteEnterprise withCheckPrivileges(boolean checkPrivileges) {
        Utils.checkNotNull(checkPrivileges, "checkPrivileges");
        this.checkPrivileges = Optional.ofNullable(checkPrivileges);
        return this;
    }

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    public SourceNetsuiteEnterprise withCheckPrivileges(Optional<Boolean> checkPrivileges) {
        Utils.checkNotNull(checkPrivileges, "checkPrivileges");
        this.checkPrivileges = checkPrivileges;
        return this;
    }

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    public SourceNetsuiteEnterprise withCheckpointTargetIntervalSeconds(long checkpointTargetIntervalSeconds) {
        Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
        this.checkpointTargetIntervalSeconds = Optional.ofNullable(checkpointTargetIntervalSeconds);
        return this;
    }

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    public SourceNetsuiteEnterprise withCheckpointTargetIntervalSeconds(Optional<Long> checkpointTargetIntervalSeconds) {
        Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
        this.checkpointTargetIntervalSeconds = checkpointTargetIntervalSeconds;
        return this;
    }

    /**
     * Maximum number of concurrent queries to the database.
     */
    public SourceNetsuiteEnterprise withConcurrency(long concurrency) {
        Utils.checkNotNull(concurrency, "concurrency");
        this.concurrency = Optional.ofNullable(concurrency);
        return this;
    }

    /**
     * Maximum number of concurrent queries to the database.
     */
    public SourceNetsuiteEnterprise withConcurrency(Optional<Long> concurrency) {
        Utils.checkNotNull(concurrency, "concurrency");
        this.concurrency = concurrency;
        return this;
    }

    /**
     * Configures how data is extracted from the database.
     */
    public SourceNetsuiteEnterprise withCursor(SourceNetsuiteEnterpriseUpdateMethod cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * Hostname of the database.
     */
    public SourceNetsuiteEnterprise withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public SourceNetsuiteEnterprise withJdbcUrlParams(String jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public SourceNetsuiteEnterprise withJdbcUrlParams(Optional<String> jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = jdbcUrlParams;
        return this;
    }

    /**
     * Port of the database.
     */
    public SourceNetsuiteEnterprise withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Port of the database.
     */
    public SourceNetsuiteEnterprise withPort(Optional<Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * The username which is used to access the database.
     */
    public SourceNetsuiteEnterprise withRoleId(String roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = roleId;
        return this;
    }

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    public SourceNetsuiteEnterprise withTunnelMethod(SourceNetsuiteEnterpriseSSHTunnelMethod tunnelMethod) {
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        this.tunnelMethod = tunnelMethod;
        return this;
    }

    /**
     * The username which is used to access the database.
     */
    public SourceNetsuiteEnterprise withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceNetsuiteEnterprise other = (SourceNetsuiteEnterprise) o;
        return 
            Objects.deepEquals(this.accountId, other.accountId) &&
            Objects.deepEquals(this.authenticationMethod, other.authenticationMethod) &&
            Objects.deepEquals(this.checkPrivileges, other.checkPrivileges) &&
            Objects.deepEquals(this.checkpointTargetIntervalSeconds, other.checkpointTargetIntervalSeconds) &&
            Objects.deepEquals(this.concurrency, other.concurrency) &&
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.jdbcUrlParams, other.jdbcUrlParams) &&
            Objects.deepEquals(this.port, other.port) &&
            Objects.deepEquals(this.roleId, other.roleId) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.tunnelMethod, other.tunnelMethod) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountId,
            authenticationMethod,
            checkPrivileges,
            checkpointTargetIntervalSeconds,
            concurrency,
            cursor,
            host,
            jdbcUrlParams,
            port,
            roleId,
            sourceType,
            tunnelMethod,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceNetsuiteEnterprise.class,
                "accountId", accountId,
                "authenticationMethod", authenticationMethod,
                "checkPrivileges", checkPrivileges,
                "checkpointTargetIntervalSeconds", checkpointTargetIntervalSeconds,
                "concurrency", concurrency,
                "cursor", cursor,
                "host", host,
                "jdbcUrlParams", jdbcUrlParams,
                "port", port,
                "roleId", roleId,
                "sourceType", sourceType,
                "tunnelMethod", tunnelMethod,
                "username", username);
    }
    
    public final static class Builder {
 
        private String accountId;
 
        private SourceNetsuiteEnterpriseAuthenticationMethod authenticationMethod;
 
        private Optional<Boolean> checkPrivileges;
 
        private Optional<Long> checkpointTargetIntervalSeconds;
 
        private Optional<Long> concurrency;
 
        private SourceNetsuiteEnterpriseUpdateMethod cursor;
 
        private String host;
 
        private Optional<String> jdbcUrlParams = Optional.empty();
 
        private Optional<Long> port;
 
        private String roleId;
 
        private SourceNetsuiteEnterpriseSSHTunnelMethod tunnelMethod;
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The username which is used to access the database.
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * Configure how to authenticate to Netsuite. Options include username/password or token-based authentication.
         */
        public Builder authenticationMethod(SourceNetsuiteEnterpriseAuthenticationMethod authenticationMethod) {
            Utils.checkNotNull(authenticationMethod, "authenticationMethod");
            this.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
         */
        public Builder checkPrivileges(boolean checkPrivileges) {
            Utils.checkNotNull(checkPrivileges, "checkPrivileges");
            this.checkPrivileges = Optional.ofNullable(checkPrivileges);
            return this;
        }

        /**
         * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
         */
        public Builder checkPrivileges(Optional<Boolean> checkPrivileges) {
            Utils.checkNotNull(checkPrivileges, "checkPrivileges");
            this.checkPrivileges = checkPrivileges;
            return this;
        }

        /**
         * How often (in seconds) a stream should checkpoint, when possible.
         */
        public Builder checkpointTargetIntervalSeconds(long checkpointTargetIntervalSeconds) {
            Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
            this.checkpointTargetIntervalSeconds = Optional.ofNullable(checkpointTargetIntervalSeconds);
            return this;
        }

        /**
         * How often (in seconds) a stream should checkpoint, when possible.
         */
        public Builder checkpointTargetIntervalSeconds(Optional<Long> checkpointTargetIntervalSeconds) {
            Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
            this.checkpointTargetIntervalSeconds = checkpointTargetIntervalSeconds;
            return this;
        }

        /**
         * Maximum number of concurrent queries to the database.
         */
        public Builder concurrency(long concurrency) {
            Utils.checkNotNull(concurrency, "concurrency");
            this.concurrency = Optional.ofNullable(concurrency);
            return this;
        }

        /**
         * Maximum number of concurrent queries to the database.
         */
        public Builder concurrency(Optional<Long> concurrency) {
            Utils.checkNotNull(concurrency, "concurrency");
            this.concurrency = concurrency;
            return this;
        }

        /**
         * Configures how data is extracted from the database.
         */
        public Builder cursor(SourceNetsuiteEnterpriseUpdateMethod cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * Hostname of the database.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(String jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(Optional<String> jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = jdbcUrlParams;
            return this;
        }

        /**
         * Port of the database.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Port of the database.
         */
        public Builder port(Optional<Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * The username which is used to access the database.
         */
        public Builder roleId(String roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = roleId;
            return this;
        }

        /**
         * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
         */
        public Builder tunnelMethod(SourceNetsuiteEnterpriseSSHTunnelMethod tunnelMethod) {
            Utils.checkNotNull(tunnelMethod, "tunnelMethod");
            this.tunnelMethod = tunnelMethod;
            return this;
        }

        /**
         * The username which is used to access the database.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourceNetsuiteEnterprise build() {
            if (checkPrivileges == null) {
                checkPrivileges = _SINGLETON_VALUE_CheckPrivileges.value();
            }
            if (checkpointTargetIntervalSeconds == null) {
                checkpointTargetIntervalSeconds = _SINGLETON_VALUE_CheckpointTargetIntervalSeconds.value();
            }
            if (concurrency == null) {
                concurrency = _SINGLETON_VALUE_Concurrency.value();
            }
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            return new SourceNetsuiteEnterprise(
                accountId,
                authenticationMethod,
                checkPrivileges,
                checkpointTargetIntervalSeconds,
                concurrency,
                cursor,
                host,
                jdbcUrlParams,
                port,
                roleId,
                tunnelMethod,
                username);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_CheckPrivileges =
                new LazySingletonValue<>(
                        "check_privileges",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_CheckpointTargetIntervalSeconds =
                new LazySingletonValue<>(
                        "checkpoint_target_interval_seconds",
                        "300",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Concurrency =
                new LazySingletonValue<>(
                        "concurrency",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "1708",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<NetsuiteEnterprise> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"netsuite-enterprise\"",
                        new TypeReference<NetsuiteEnterprise>() {});
    }
}
