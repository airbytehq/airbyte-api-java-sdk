/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourceBambooHr {

    /**
     * Api key of bamboo hr
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Comma-separated list of fields to include in custom reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_reports_fields")
    private Optional<String> customReportsFields;

    /**
     * If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_reports_include_default_fields")
    private Optional<Boolean> customReportsIncludeDefaultFields;

    @JsonProperty("sourceType")
    private BambooHr sourceType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * Sub Domain of bamboo hr
     */
    @JsonProperty("subdomain")
    private String subdomain;

    @JsonCreator
    public SourceBambooHr(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("custom_reports_fields") Optional<String> customReportsFields,
            @JsonProperty("custom_reports_include_default_fields") Optional<Boolean> customReportsIncludeDefaultFields,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("subdomain") String subdomain) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(customReportsFields, "customReportsFields");
        Utils.checkNotNull(customReportsIncludeDefaultFields, "customReportsIncludeDefaultFields");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(subdomain, "subdomain");
        this.apiKey = apiKey;
        this.customReportsFields = customReportsFields;
        this.customReportsIncludeDefaultFields = customReportsIncludeDefaultFields;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.subdomain = subdomain;
    }
    
    public SourceBambooHr(
            String apiKey,
            String subdomain) {
        this(apiKey, Optional.empty(), Optional.empty(), Optional.empty(), subdomain);
    }

    /**
     * Api key of bamboo hr
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Comma-separated list of fields to include in custom reports.
     */
    @JsonIgnore
    public Optional<String> customReportsFields() {
        return customReportsFields;
    }

    /**
     * If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.
     */
    @JsonIgnore
    public Optional<Boolean> customReportsIncludeDefaultFields() {
        return customReportsIncludeDefaultFields;
    }

    @JsonIgnore
    public BambooHr sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * Sub Domain of bamboo hr
     */
    @JsonIgnore
    public String subdomain() {
        return subdomain;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Api key of bamboo hr
     */
    public SourceBambooHr withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Comma-separated list of fields to include in custom reports.
     */
    public SourceBambooHr withCustomReportsFields(String customReportsFields) {
        Utils.checkNotNull(customReportsFields, "customReportsFields");
        this.customReportsFields = Optional.ofNullable(customReportsFields);
        return this;
    }

    /**
     * Comma-separated list of fields to include in custom reports.
     */
    public SourceBambooHr withCustomReportsFields(Optional<String> customReportsFields) {
        Utils.checkNotNull(customReportsFields, "customReportsFields");
        this.customReportsFields = customReportsFields;
        return this;
    }

    /**
     * If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.
     */
    public SourceBambooHr withCustomReportsIncludeDefaultFields(boolean customReportsIncludeDefaultFields) {
        Utils.checkNotNull(customReportsIncludeDefaultFields, "customReportsIncludeDefaultFields");
        this.customReportsIncludeDefaultFields = Optional.ofNullable(customReportsIncludeDefaultFields);
        return this;
    }

    /**
     * If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.
     */
    public SourceBambooHr withCustomReportsIncludeDefaultFields(Optional<Boolean> customReportsIncludeDefaultFields) {
        Utils.checkNotNull(customReportsIncludeDefaultFields, "customReportsIncludeDefaultFields");
        this.customReportsIncludeDefaultFields = customReportsIncludeDefaultFields;
        return this;
    }

    public SourceBambooHr withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    public SourceBambooHr withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Sub Domain of bamboo hr
     */
    public SourceBambooHr withSubdomain(String subdomain) {
        Utils.checkNotNull(subdomain, "subdomain");
        this.subdomain = subdomain;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceBambooHr other = (SourceBambooHr) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.customReportsFields, other.customReportsFields) &&
            Objects.deepEquals(this.customReportsIncludeDefaultFields, other.customReportsIncludeDefaultFields) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.subdomain, other.subdomain);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            customReportsFields,
            customReportsIncludeDefaultFields,
            sourceType,
            startDate,
            subdomain);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceBambooHr.class,
                "apiKey", apiKey,
                "customReportsFields", customReportsFields,
                "customReportsIncludeDefaultFields", customReportsIncludeDefaultFields,
                "sourceType", sourceType,
                "startDate", startDate,
                "subdomain", subdomain);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> customReportsFields = Optional.empty();
 
        private Optional<Boolean> customReportsIncludeDefaultFields;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
 
        private String subdomain;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Api key of bamboo hr
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Comma-separated list of fields to include in custom reports.
         */
        public Builder customReportsFields(String customReportsFields) {
            Utils.checkNotNull(customReportsFields, "customReportsFields");
            this.customReportsFields = Optional.ofNullable(customReportsFields);
            return this;
        }

        /**
         * Comma-separated list of fields to include in custom reports.
         */
        public Builder customReportsFields(Optional<String> customReportsFields) {
            Utils.checkNotNull(customReportsFields, "customReportsFields");
            this.customReportsFields = customReportsFields;
            return this;
        }

        /**
         * If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.
         */
        public Builder customReportsIncludeDefaultFields(boolean customReportsIncludeDefaultFields) {
            Utils.checkNotNull(customReportsIncludeDefaultFields, "customReportsIncludeDefaultFields");
            this.customReportsIncludeDefaultFields = Optional.ofNullable(customReportsIncludeDefaultFields);
            return this;
        }

        /**
         * If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names.
         */
        public Builder customReportsIncludeDefaultFields(Optional<Boolean> customReportsIncludeDefaultFields) {
            Utils.checkNotNull(customReportsIncludeDefaultFields, "customReportsIncludeDefaultFields");
            this.customReportsIncludeDefaultFields = customReportsIncludeDefaultFields;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Sub Domain of bamboo hr
         */
        public Builder subdomain(String subdomain) {
            Utils.checkNotNull(subdomain, "subdomain");
            this.subdomain = subdomain;
            return this;
        }
        
        public SourceBambooHr build() {
            if (customReportsIncludeDefaultFields == null) {
                customReportsIncludeDefaultFields = _SINGLETON_VALUE_CustomReportsIncludeDefaultFields.value();
            }            return new SourceBambooHr(
                apiKey,
                customReportsFields,
                customReportsIncludeDefaultFields,
                startDate,
                subdomain);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_CustomReportsIncludeDefaultFields =
                new LazySingletonValue<>(
                        "custom_reports_include_default_fields",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<BambooHr> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"bamboo-hr\"",
                        new TypeReference<BambooHr>() {});
    }
}

