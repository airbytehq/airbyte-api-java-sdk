/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourceQuickbooks {

    @JsonProperty("credentials")
    private SourceQuickbooksAuthorizationMethod credentials;

    /**
     * Determines whether to use the sandbox or production environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sandbox")
    private Optional<Boolean> sandbox;

    @JsonProperty("sourceType")
    private Quickbooks sourceType;

    /**
     * The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceQuickbooks(
            @JsonProperty("credentials") SourceQuickbooksAuthorizationMethod credentials,
            @JsonProperty("sandbox") Optional<Boolean> sandbox,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(sandbox, "sandbox");
        Utils.checkNotNull(startDate, "startDate");
        this.credentials = credentials;
        this.sandbox = sandbox;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceQuickbooks(
            SourceQuickbooksAuthorizationMethod credentials,
            OffsetDateTime startDate) {
        this(credentials, Optional.empty(), startDate);
    }

    @JsonIgnore
    public SourceQuickbooksAuthorizationMethod credentials() {
        return credentials;
    }

    /**
     * Determines whether to use the sandbox or production environment.
     */
    @JsonIgnore
    public Optional<Boolean> sandbox() {
        return sandbox;
    }

    @JsonIgnore
    public Quickbooks sourceType() {
        return sourceType;
    }

    /**
     * The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceQuickbooks withCredentials(SourceQuickbooksAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Determines whether to use the sandbox or production environment.
     */
    public SourceQuickbooks withSandbox(boolean sandbox) {
        Utils.checkNotNull(sandbox, "sandbox");
        this.sandbox = Optional.ofNullable(sandbox);
        return this;
    }

    /**
     * Determines whether to use the sandbox or production environment.
     */
    public SourceQuickbooks withSandbox(Optional<Boolean> sandbox) {
        Utils.checkNotNull(sandbox, "sandbox");
        this.sandbox = sandbox;
        return this;
    }

    /**
     * The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourceQuickbooks withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceQuickbooks other = (SourceQuickbooks) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.sandbox, other.sandbox) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            sandbox,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceQuickbooks.class,
                "credentials", credentials,
                "sandbox", sandbox,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private SourceQuickbooksAuthorizationMethod credentials;
 
        private Optional<Boolean> sandbox;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(SourceQuickbooksAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Determines whether to use the sandbox or production environment.
         */
        public Builder sandbox(boolean sandbox) {
            Utils.checkNotNull(sandbox, "sandbox");
            this.sandbox = Optional.ofNullable(sandbox);
            return this;
        }

        /**
         * Determines whether to use the sandbox or production environment.
         */
        public Builder sandbox(Optional<Boolean> sandbox) {
            Utils.checkNotNull(sandbox, "sandbox");
            this.sandbox = sandbox;
            return this;
        }

        /**
         * The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceQuickbooks build() {
            if (sandbox == null) {
                sandbox = _SINGLETON_VALUE_Sandbox.value();
            }            return new SourceQuickbooks(
                credentials,
                sandbox,
                startDate);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Sandbox =
                new LazySingletonValue<>(
                        "sandbox",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Quickbooks> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"quickbooks\"",
                        new TypeReference<Quickbooks>() {});
    }
}

