/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourcePipeliner {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<String> password;

    @JsonProperty("service")
    private DataCenter service;

    @JsonProperty("sourceType")
    private Pipeliner sourceType;

    @JsonProperty("spaceid")
    private String spaceid;

    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourcePipeliner(
            @JsonProperty("password") Optional<String> password,
            @JsonProperty("service") DataCenter service,
            @JsonProperty("spaceid") String spaceid,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(service, "service");
        Utils.checkNotNull(spaceid, "spaceid");
        Utils.checkNotNull(username, "username");
        this.password = password;
        this.service = service;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.spaceid = spaceid;
        this.username = username;
    }
    
    public SourcePipeliner(
            DataCenter service,
            String spaceid,
            String username) {
        this(Optional.empty(), service, spaceid, username);
    }

    @JsonIgnore
    public Optional<String> password() {
        return password;
    }

    @JsonIgnore
    public DataCenter service() {
        return service;
    }

    @JsonIgnore
    public Pipeliner sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public String spaceid() {
        return spaceid;
    }

    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourcePipeliner withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    public SourcePipeliner withPassword(Optional<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public SourcePipeliner withService(DataCenter service) {
        Utils.checkNotNull(service, "service");
        this.service = service;
        return this;
    }

    public SourcePipeliner withSpaceid(String spaceid) {
        Utils.checkNotNull(spaceid, "spaceid");
        this.spaceid = spaceid;
        return this;
    }

    public SourcePipeliner withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePipeliner other = (SourcePipeliner) o;
        return 
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.service, other.service) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.spaceid, other.spaceid) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            password,
            service,
            sourceType,
            spaceid,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePipeliner.class,
                "password", password,
                "service", service,
                "sourceType", sourceType,
                "spaceid", spaceid,
                "username", username);
    }
    
    public final static class Builder {
 
        private Optional<String> password = Optional.empty();
 
        private DataCenter service;
 
        private String spaceid;
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder password(Optional<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder service(DataCenter service) {
            Utils.checkNotNull(service, "service");
            this.service = service;
            return this;
        }

        public Builder spaceid(String spaceid) {
            Utils.checkNotNull(spaceid, "spaceid");
            this.spaceid = spaceid;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourcePipeliner build() {
            return new SourcePipeliner(
                password,
                service,
                spaceid,
                username);
        }

        private static final LazySingletonValue<Pipeliner> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"pipeliner\"",
                        new TypeReference<Pipeliner>() {});
    }
}
