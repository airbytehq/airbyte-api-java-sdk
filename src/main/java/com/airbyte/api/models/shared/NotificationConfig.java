/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * NotificationConfig
 * 
 * <p>Configures a notification.
 */
public class NotificationConfig {

    /**
     * Configures an email notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends EmailNotificationConfig> email;

    /**
     * Configures a webhook notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook")
    private Optional<? extends WebhookNotificationConfig> webhook;

    @JsonCreator
    public NotificationConfig(
            @JsonProperty("email") Optional<? extends EmailNotificationConfig> email,
            @JsonProperty("webhook") Optional<? extends WebhookNotificationConfig> webhook) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(webhook, "webhook");
        this.email = email;
        this.webhook = webhook;
    }
    
    public NotificationConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Configures an email notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmailNotificationConfig> email() {
        return (Optional<EmailNotificationConfig>) email;
    }

    /**
     * Configures a webhook notification.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WebhookNotificationConfig> webhook() {
        return (Optional<WebhookNotificationConfig>) webhook;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Configures an email notification.
     */
    public NotificationConfig withEmail(EmailNotificationConfig email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * Configures an email notification.
     */
    public NotificationConfig withEmail(Optional<? extends EmailNotificationConfig> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Configures a webhook notification.
     */
    public NotificationConfig withWebhook(WebhookNotificationConfig webhook) {
        Utils.checkNotNull(webhook, "webhook");
        this.webhook = Optional.ofNullable(webhook);
        return this;
    }

    /**
     * Configures a webhook notification.
     */
    public NotificationConfig withWebhook(Optional<? extends WebhookNotificationConfig> webhook) {
        Utils.checkNotNull(webhook, "webhook");
        this.webhook = webhook;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotificationConfig other = (NotificationConfig) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.webhook, other.webhook);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            webhook);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NotificationConfig.class,
                "email", email,
                "webhook", webhook);
    }
    
    public final static class Builder {
 
        private Optional<? extends EmailNotificationConfig> email = Optional.empty();
 
        private Optional<? extends WebhookNotificationConfig> webhook = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Configures an email notification.
         */
        public Builder email(EmailNotificationConfig email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * Configures an email notification.
         */
        public Builder email(Optional<? extends EmailNotificationConfig> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Configures a webhook notification.
         */
        public Builder webhook(WebhookNotificationConfig webhook) {
            Utils.checkNotNull(webhook, "webhook");
            this.webhook = Optional.ofNullable(webhook);
            return this;
        }

        /**
         * Configures a webhook notification.
         */
        public Builder webhook(Optional<? extends WebhookNotificationConfig> webhook) {
            Utils.checkNotNull(webhook, "webhook");
            this.webhook = webhook;
            return this;
        }
        
        public NotificationConfig build() {
            return new NotificationConfig(
                email,
                webhook);
        }
    }
}
