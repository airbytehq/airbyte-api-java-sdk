/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourcePostgres {

    /**
     * Name of the database.
     */
    @JsonProperty("database")
    private String database;

    /**
     * Hostname of the database.
     */
    @JsonProperty("host")
    private String host;

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (Eg. key1=value1&amp;key2=value2&amp;key3=value3). For more information read about &lt;a href="https://jdbc.postgresql.org/documentation/head/connect.html"&gt;JDBC URL parameters&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jdbc_url_params")
    private Optional<? extends String> jdbcUrlParams;

    /**
     * Password associated with the username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<? extends String> password;

    /**
     * Port of the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<? extends Long> port;

    /**
     * Configures how data is extracted from the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replication_method")
    private Optional<? extends SourcePostgresUpdateMethod> replicationMethod;

    /**
     * The list of schemas (case sensitive) to sync from. Defaults to public.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemas")
    private Optional<? extends java.util.List<String>> schemas;

    @JsonProperty("sourceType")
    private SourcePostgresPostgres sourceType;

    /**
     * SSL connection modes. 
     *   Read more &lt;a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"&gt; in the docs&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssl_mode")
    private Optional<? extends java.lang.Object> sslMode;

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tunnel_method")
    private Optional<? extends SourcePostgresSSHTunnelMethod> tunnelMethod;

    /**
     * Username to access the database.
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourcePostgres(
            @JsonProperty("database") String database,
            @JsonProperty("host") String host,
            @JsonProperty("jdbc_url_params") Optional<? extends String> jdbcUrlParams,
            @JsonProperty("password") Optional<? extends String> password,
            @JsonProperty("port") Optional<? extends Long> port,
            @JsonProperty("replication_method") Optional<? extends SourcePostgresUpdateMethod> replicationMethod,
            @JsonProperty("schemas") Optional<? extends java.util.List<String>> schemas,
            @JsonProperty("ssl_mode") Optional<? extends java.lang.Object> sslMode,
            @JsonProperty("tunnel_method") Optional<? extends SourcePostgresSSHTunnelMethod> tunnelMethod,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(replicationMethod, "replicationMethod");
        Utils.checkNotNull(schemas, "schemas");
        Utils.checkNotNull(sslMode, "sslMode");
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        Utils.checkNotNull(username, "username");
        this.database = database;
        this.host = host;
        this.jdbcUrlParams = jdbcUrlParams;
        this.password = password;
        this.port = port;
        this.replicationMethod = replicationMethod;
        this.schemas = schemas;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.sslMode = sslMode;
        this.tunnelMethod = tunnelMethod;
        this.username = username;
    }
    
    public SourcePostgres(
            String database,
            String host,
            String username) {
        this(database, host, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), username);
    }

    /**
     * Name of the database.
     */
    @JsonIgnore
    public String database() {
        return database;
    }

    /**
     * Hostname of the database.
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (Eg. key1=value1&amp;key2=value2&amp;key3=value3). For more information read about &lt;a href="https://jdbc.postgresql.org/documentation/head/connect.html"&gt;JDBC URL parameters&lt;/a&gt;.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> jdbcUrlParams() {
        return (Optional<String>) jdbcUrlParams;
    }

    /**
     * Password associated with the username.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> password() {
        return (Optional<String>) password;
    }

    /**
     * Port of the database.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> port() {
        return (Optional<Long>) port;
    }

    /**
     * Configures how data is extracted from the database.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourcePostgresUpdateMethod> replicationMethod() {
        return (Optional<SourcePostgresUpdateMethod>) replicationMethod;
    }

    /**
     * The list of schemas (case sensitive) to sync from. Defaults to public.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> schemas() {
        return (Optional<java.util.List<String>>) schemas;
    }

    @JsonIgnore
    public SourcePostgresPostgres sourceType() {
        return sourceType;
    }

    /**
     * SSL connection modes. 
     *   Read more &lt;a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"&gt; in the docs&lt;/a&gt;.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.lang.Object> sslMode() {
        return (Optional<java.lang.Object>) sslMode;
    }

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourcePostgresSSHTunnelMethod> tunnelMethod() {
        return (Optional<SourcePostgresSSHTunnelMethod>) tunnelMethod;
    }

    /**
     * Username to access the database.
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the database.
     */
    public SourcePostgres withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    /**
     * Hostname of the database.
     */
    public SourcePostgres withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (Eg. key1=value1&amp;key2=value2&amp;key3=value3). For more information read about &lt;a href="https://jdbc.postgresql.org/documentation/head/connect.html"&gt;JDBC URL parameters&lt;/a&gt;.
     */
    public SourcePostgres withJdbcUrlParams(String jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (Eg. key1=value1&amp;key2=value2&amp;key3=value3). For more information read about &lt;a href="https://jdbc.postgresql.org/documentation/head/connect.html"&gt;JDBC URL parameters&lt;/a&gt;.
     */
    public SourcePostgres withJdbcUrlParams(Optional<? extends String> jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = jdbcUrlParams;
        return this;
    }

    /**
     * Password associated with the username.
     */
    public SourcePostgres withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    /**
     * Password associated with the username.
     */
    public SourcePostgres withPassword(Optional<? extends String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Port of the database.
     */
    public SourcePostgres withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Port of the database.
     */
    public SourcePostgres withPort(Optional<? extends Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * Configures how data is extracted from the database.
     */
    public SourcePostgres withReplicationMethod(SourcePostgresUpdateMethod replicationMethod) {
        Utils.checkNotNull(replicationMethod, "replicationMethod");
        this.replicationMethod = Optional.ofNullable(replicationMethod);
        return this;
    }

    /**
     * Configures how data is extracted from the database.
     */
    public SourcePostgres withReplicationMethod(Optional<? extends SourcePostgresUpdateMethod> replicationMethod) {
        Utils.checkNotNull(replicationMethod, "replicationMethod");
        this.replicationMethod = replicationMethod;
        return this;
    }

    /**
     * The list of schemas (case sensitive) to sync from. Defaults to public.
     */
    public SourcePostgres withSchemas(java.util.List<String> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = Optional.ofNullable(schemas);
        return this;
    }

    /**
     * The list of schemas (case sensitive) to sync from. Defaults to public.
     */
    public SourcePostgres withSchemas(Optional<? extends java.util.List<String>> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = schemas;
        return this;
    }

    /**
     * SSL connection modes. 
     *   Read more &lt;a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"&gt; in the docs&lt;/a&gt;.
     */
    public SourcePostgres withSslMode(java.lang.Object sslMode) {
        Utils.checkNotNull(sslMode, "sslMode");
        this.sslMode = Optional.ofNullable(sslMode);
        return this;
    }

    /**
     * SSL connection modes. 
     *   Read more &lt;a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"&gt; in the docs&lt;/a&gt;.
     */
    public SourcePostgres withSslMode(Optional<? extends java.lang.Object> sslMode) {
        Utils.checkNotNull(sslMode, "sslMode");
        this.sslMode = sslMode;
        return this;
    }

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    public SourcePostgres withTunnelMethod(SourcePostgresSSHTunnelMethod tunnelMethod) {
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        this.tunnelMethod = Optional.ofNullable(tunnelMethod);
        return this;
    }

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    public SourcePostgres withTunnelMethod(Optional<? extends SourcePostgresSSHTunnelMethod> tunnelMethod) {
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        this.tunnelMethod = tunnelMethod;
        return this;
    }

    /**
     * Username to access the database.
     */
    public SourcePostgres withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePostgres other = (SourcePostgres) o;
        return 
            java.util.Objects.deepEquals(this.database, other.database) &&
            java.util.Objects.deepEquals(this.host, other.host) &&
            java.util.Objects.deepEquals(this.jdbcUrlParams, other.jdbcUrlParams) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.port, other.port) &&
            java.util.Objects.deepEquals(this.replicationMethod, other.replicationMethod) &&
            java.util.Objects.deepEquals(this.schemas, other.schemas) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.sslMode, other.sslMode) &&
            java.util.Objects.deepEquals(this.tunnelMethod, other.tunnelMethod) &&
            java.util.Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            database,
            host,
            jdbcUrlParams,
            password,
            port,
            replicationMethod,
            schemas,
            sourceType,
            sslMode,
            tunnelMethod,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePostgres.class,
                "database", database,
                "host", host,
                "jdbcUrlParams", jdbcUrlParams,
                "password", password,
                "port", port,
                "replicationMethod", replicationMethod,
                "schemas", schemas,
                "sourceType", sourceType,
                "sslMode", sslMode,
                "tunnelMethod", tunnelMethod,
                "username", username);
    }
    
    public final static class Builder {
 
        private String database;
 
        private String host;
 
        private Optional<? extends String> jdbcUrlParams = Optional.empty();
 
        private Optional<? extends String> password = Optional.empty();
 
        private Optional<? extends Long> port;
 
        private Optional<? extends SourcePostgresUpdateMethod> replicationMethod = Optional.empty();
 
        private Optional<? extends java.util.List<String>> schemas = Optional.empty();
 
        private Optional<? extends java.lang.Object> sslMode = Optional.empty();
 
        private Optional<? extends SourcePostgresSSHTunnelMethod> tunnelMethod = Optional.empty();
 
        private String username;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the database.
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        /**
         * Hostname of the database.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (Eg. key1=value1&amp;key2=value2&amp;key3=value3). For more information read about &lt;a href="https://jdbc.postgresql.org/documentation/head/connect.html"&gt;JDBC URL parameters&lt;/a&gt;.
         */
        public Builder jdbcUrlParams(String jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (Eg. key1=value1&amp;key2=value2&amp;key3=value3). For more information read about &lt;a href="https://jdbc.postgresql.org/documentation/head/connect.html"&gt;JDBC URL parameters&lt;/a&gt;.
         */
        public Builder jdbcUrlParams(Optional<? extends String> jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = jdbcUrlParams;
            return this;
        }

        /**
         * Password associated with the username.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        /**
         * Password associated with the username.
         */
        public Builder password(Optional<? extends String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Port of the database.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Port of the database.
         */
        public Builder port(Optional<? extends Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * Configures how data is extracted from the database.
         */
        public Builder replicationMethod(SourcePostgresUpdateMethod replicationMethod) {
            Utils.checkNotNull(replicationMethod, "replicationMethod");
            this.replicationMethod = Optional.ofNullable(replicationMethod);
            return this;
        }

        /**
         * Configures how data is extracted from the database.
         */
        public Builder replicationMethod(Optional<? extends SourcePostgresUpdateMethod> replicationMethod) {
            Utils.checkNotNull(replicationMethod, "replicationMethod");
            this.replicationMethod = replicationMethod;
            return this;
        }

        /**
         * The list of schemas (case sensitive) to sync from. Defaults to public.
         */
        public Builder schemas(java.util.List<String> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = Optional.ofNullable(schemas);
            return this;
        }

        /**
         * The list of schemas (case sensitive) to sync from. Defaults to public.
         */
        public Builder schemas(Optional<? extends java.util.List<String>> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = schemas;
            return this;
        }

        /**
         * SSL connection modes. 
         *   Read more &lt;a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"&gt; in the docs&lt;/a&gt;.
         */
        public Builder sslMode(java.lang.Object sslMode) {
            Utils.checkNotNull(sslMode, "sslMode");
            this.sslMode = Optional.ofNullable(sslMode);
            return this;
        }

        /**
         * SSL connection modes. 
         *   Read more &lt;a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"&gt; in the docs&lt;/a&gt;.
         */
        public Builder sslMode(Optional<? extends java.lang.Object> sslMode) {
            Utils.checkNotNull(sslMode, "sslMode");
            this.sslMode = sslMode;
            return this;
        }

        /**
         * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
         */
        public Builder tunnelMethod(SourcePostgresSSHTunnelMethod tunnelMethod) {
            Utils.checkNotNull(tunnelMethod, "tunnelMethod");
            this.tunnelMethod = Optional.ofNullable(tunnelMethod);
            return this;
        }

        /**
         * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
         */
        public Builder tunnelMethod(Optional<? extends SourcePostgresSSHTunnelMethod> tunnelMethod) {
            Utils.checkNotNull(tunnelMethod, "tunnelMethod");
            this.tunnelMethod = tunnelMethod;
            return this;
        }

        /**
         * Username to access the database.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourcePostgres build() {
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            return new SourcePostgres(
                database,
                host,
                jdbcUrlParams,
                password,
                port,
                replicationMethod,
                schemas,
                sslMode,
                tunnelMethod,
                username);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "5432",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<SourcePostgresPostgres> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"postgres\"",
                        new TypeReference<SourcePostgresPostgres>() {});
    }
}

