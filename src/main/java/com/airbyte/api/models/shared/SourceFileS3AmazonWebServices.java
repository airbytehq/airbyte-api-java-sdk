/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceFileS3AmazonWebServices {

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aws_access_key_id")
    private Optional<? extends String> awsAccessKeyId;

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aws_secret_access_key")
    private Optional<? extends String> awsSecretAccessKey;

    @JsonProperty("storage")
    private SourceFileSchemasStorage storage;

    public SourceFileS3AmazonWebServices(
            @JsonProperty("aws_access_key_id") Optional<? extends String> awsAccessKeyId,
            @JsonProperty("aws_secret_access_key") Optional<? extends String> awsSecretAccessKey) {
        Utils.checkNotNull(awsAccessKeyId, "awsAccessKeyId");
        Utils.checkNotNull(awsSecretAccessKey, "awsSecretAccessKey");
        this.awsAccessKeyId = awsAccessKeyId;
        this.awsSecretAccessKey = awsSecretAccessKey;
        this.storage = Builder._SINGLETON_VALUE_Storage.value();
    }

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    public Optional<? extends String> awsAccessKeyId() {
        return awsAccessKeyId;
    }

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    public Optional<? extends String> awsSecretAccessKey() {
        return awsSecretAccessKey;
    }

    public SourceFileSchemasStorage storage() {
        return storage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    public SourceFileS3AmazonWebServices withAwsAccessKeyId(String awsAccessKeyId) {
        Utils.checkNotNull(awsAccessKeyId, "awsAccessKeyId");
        this.awsAccessKeyId = Optional.ofNullable(awsAccessKeyId);
        return this;
    }

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    public SourceFileS3AmazonWebServices withAwsAccessKeyId(Optional<? extends String> awsAccessKeyId) {
        Utils.checkNotNull(awsAccessKeyId, "awsAccessKeyId");
        this.awsAccessKeyId = awsAccessKeyId;
        return this;
    }

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    public SourceFileS3AmazonWebServices withAwsSecretAccessKey(String awsSecretAccessKey) {
        Utils.checkNotNull(awsSecretAccessKey, "awsSecretAccessKey");
        this.awsSecretAccessKey = Optional.ofNullable(awsSecretAccessKey);
        return this;
    }

    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    public SourceFileS3AmazonWebServices withAwsSecretAccessKey(Optional<? extends String> awsSecretAccessKey) {
        Utils.checkNotNull(awsSecretAccessKey, "awsSecretAccessKey");
        this.awsSecretAccessKey = awsSecretAccessKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFileS3AmazonWebServices other = (SourceFileS3AmazonWebServices) o;
        return 
            java.util.Objects.deepEquals(this.awsAccessKeyId, other.awsAccessKeyId) &&
            java.util.Objects.deepEquals(this.awsSecretAccessKey, other.awsSecretAccessKey) &&
            java.util.Objects.deepEquals(this.storage, other.storage);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            awsAccessKeyId,
            awsSecretAccessKey,
            storage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFileS3AmazonWebServices.class,
                "awsAccessKeyId", awsAccessKeyId,
                "awsSecretAccessKey", awsSecretAccessKey,
                "storage", storage);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> awsAccessKeyId = Optional.empty();
 
        private Optional<? extends String> awsSecretAccessKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
         */
        public Builder awsAccessKeyId(String awsAccessKeyId) {
            Utils.checkNotNull(awsAccessKeyId, "awsAccessKeyId");
            this.awsAccessKeyId = Optional.ofNullable(awsAccessKeyId);
            return this;
        }

        /**
         * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
         */
        public Builder awsAccessKeyId(Optional<? extends String> awsAccessKeyId) {
            Utils.checkNotNull(awsAccessKeyId, "awsAccessKeyId");
            this.awsAccessKeyId = awsAccessKeyId;
            return this;
        }

        /**
         * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
         */
        public Builder awsSecretAccessKey(String awsSecretAccessKey) {
            Utils.checkNotNull(awsSecretAccessKey, "awsSecretAccessKey");
            this.awsSecretAccessKey = Optional.ofNullable(awsSecretAccessKey);
            return this;
        }

        /**
         * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
         */
        public Builder awsSecretAccessKey(Optional<? extends String> awsSecretAccessKey) {
            Utils.checkNotNull(awsSecretAccessKey, "awsSecretAccessKey");
            this.awsSecretAccessKey = awsSecretAccessKey;
            return this;
        }
        
        public SourceFileS3AmazonWebServices build() {
            return new SourceFileS3AmazonWebServices(
                awsAccessKeyId,
                awsSecretAccessKey);
        }

        private static final LazySingletonValue<SourceFileSchemasStorage> _SINGLETON_VALUE_Storage =
                new LazySingletonValue<>(
                        "storage",
                        "\"S3\"",
                        new TypeReference<SourceFileSchemasStorage>() {});
    }
}

