/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * SourceGoogleDriveDocumentFileTypeFormatExperimental - Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
 */

public class SourceGoogleDriveDocumentFileTypeFormatExperimental {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filetype")
    private Optional<? extends SourceGoogleDriveSchemasStreamsFormatFormatFiletype> filetype;

    /**
     * Processing configuration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing")
    private Optional<? extends SourceGoogleDriveProcessing> processing;

    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_unprocessable_files")
    private Optional<? extends Boolean> skipUnprocessableFiles;

    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strategy")
    private Optional<? extends SourceGoogleDriveParsingStrategy> strategy;

    public SourceGoogleDriveDocumentFileTypeFormatExperimental(
            @JsonProperty("processing") Optional<? extends SourceGoogleDriveProcessing> processing,
            @JsonProperty("skip_unprocessable_files") Optional<? extends Boolean> skipUnprocessableFiles,
            @JsonProperty("strategy") Optional<? extends SourceGoogleDriveParsingStrategy> strategy) {
        Utils.checkNotNull(processing, "processing");
        Utils.checkNotNull(skipUnprocessableFiles, "skipUnprocessableFiles");
        Utils.checkNotNull(strategy, "strategy");
        this.filetype = Builder._SINGLETON_VALUE_Filetype.value();
        this.processing = processing;
        this.skipUnprocessableFiles = skipUnprocessableFiles;
        this.strategy = strategy;
    }

    public Optional<? extends SourceGoogleDriveSchemasStreamsFormatFormatFiletype> filetype() {
        return filetype;
    }

    /**
     * Processing configuration
     */
    public Optional<? extends SourceGoogleDriveProcessing> processing() {
        return processing;
    }

    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync.
     */
    public Optional<? extends Boolean> skipUnprocessableFiles() {
        return skipUnprocessableFiles;
    }

    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
     */
    public Optional<? extends SourceGoogleDriveParsingStrategy> strategy() {
        return strategy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Processing configuration
     */
    public SourceGoogleDriveDocumentFileTypeFormatExperimental withProcessing(SourceGoogleDriveProcessing processing) {
        Utils.checkNotNull(processing, "processing");
        this.processing = Optional.ofNullable(processing);
        return this;
    }

    /**
     * Processing configuration
     */
    public SourceGoogleDriveDocumentFileTypeFormatExperimental withProcessing(Optional<? extends SourceGoogleDriveProcessing> processing) {
        Utils.checkNotNull(processing, "processing");
        this.processing = processing;
        return this;
    }

    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync.
     */
    public SourceGoogleDriveDocumentFileTypeFormatExperimental withSkipUnprocessableFiles(boolean skipUnprocessableFiles) {
        Utils.checkNotNull(skipUnprocessableFiles, "skipUnprocessableFiles");
        this.skipUnprocessableFiles = Optional.ofNullable(skipUnprocessableFiles);
        return this;
    }

    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync.
     */
    public SourceGoogleDriveDocumentFileTypeFormatExperimental withSkipUnprocessableFiles(Optional<? extends Boolean> skipUnprocessableFiles) {
        Utils.checkNotNull(skipUnprocessableFiles, "skipUnprocessableFiles");
        this.skipUnprocessableFiles = skipUnprocessableFiles;
        return this;
    }

    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
     */
    public SourceGoogleDriveDocumentFileTypeFormatExperimental withStrategy(SourceGoogleDriveParsingStrategy strategy) {
        Utils.checkNotNull(strategy, "strategy");
        this.strategy = Optional.ofNullable(strategy);
        return this;
    }

    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
     */
    public SourceGoogleDriveDocumentFileTypeFormatExperimental withStrategy(Optional<? extends SourceGoogleDriveParsingStrategy> strategy) {
        Utils.checkNotNull(strategy, "strategy");
        this.strategy = strategy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGoogleDriveDocumentFileTypeFormatExperimental other = (SourceGoogleDriveDocumentFileTypeFormatExperimental) o;
        return 
            java.util.Objects.deepEquals(this.filetype, other.filetype) &&
            java.util.Objects.deepEquals(this.processing, other.processing) &&
            java.util.Objects.deepEquals(this.skipUnprocessableFiles, other.skipUnprocessableFiles) &&
            java.util.Objects.deepEquals(this.strategy, other.strategy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            filetype,
            processing,
            skipUnprocessableFiles,
            strategy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGoogleDriveDocumentFileTypeFormatExperimental.class,
                "filetype", filetype,
                "processing", processing,
                "skipUnprocessableFiles", skipUnprocessableFiles,
                "strategy", strategy);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceGoogleDriveProcessing> processing = Optional.empty();
 
        private Optional<? extends Boolean> skipUnprocessableFiles;
 
        private Optional<? extends SourceGoogleDriveParsingStrategy> strategy;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Processing configuration
         */
        public Builder processing(SourceGoogleDriveProcessing processing) {
            Utils.checkNotNull(processing, "processing");
            this.processing = Optional.ofNullable(processing);
            return this;
        }

        /**
         * Processing configuration
         */
        public Builder processing(Optional<? extends SourceGoogleDriveProcessing> processing) {
            Utils.checkNotNull(processing, "processing");
            this.processing = processing;
            return this;
        }

        /**
         * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync.
         */
        public Builder skipUnprocessableFiles(boolean skipUnprocessableFiles) {
            Utils.checkNotNull(skipUnprocessableFiles, "skipUnprocessableFiles");
            this.skipUnprocessableFiles = Optional.ofNullable(skipUnprocessableFiles);
            return this;
        }

        /**
         * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync.
         */
        public Builder skipUnprocessableFiles(Optional<? extends Boolean> skipUnprocessableFiles) {
            Utils.checkNotNull(skipUnprocessableFiles, "skipUnprocessableFiles");
            this.skipUnprocessableFiles = skipUnprocessableFiles;
            return this;
        }

        /**
         * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
         */
        public Builder strategy(SourceGoogleDriveParsingStrategy strategy) {
            Utils.checkNotNull(strategy, "strategy");
            this.strategy = Optional.ofNullable(strategy);
            return this;
        }

        /**
         * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
         */
        public Builder strategy(Optional<? extends SourceGoogleDriveParsingStrategy> strategy) {
            Utils.checkNotNull(strategy, "strategy");
            this.strategy = strategy;
            return this;
        }
        
        public SourceGoogleDriveDocumentFileTypeFormatExperimental build() {
            if (skipUnprocessableFiles == null) {
                skipUnprocessableFiles = _SINGLETON_VALUE_SkipUnprocessableFiles.value();
            }
            if (strategy == null) {
                strategy = _SINGLETON_VALUE_Strategy.value();
            }
            return new SourceGoogleDriveDocumentFileTypeFormatExperimental(
                processing,
                skipUnprocessableFiles,
                strategy);
        }

        private static final LazySingletonValue<Optional<? extends SourceGoogleDriveSchemasStreamsFormatFormatFiletype>> _SINGLETON_VALUE_Filetype =
                new LazySingletonValue<>(
                        "filetype",
                        "\"unstructured\"",
                        new TypeReference<Optional<? extends SourceGoogleDriveSchemasStreamsFormatFormatFiletype>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_SkipUnprocessableFiles =
                new LazySingletonValue<>(
                        "skip_unprocessable_files",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends SourceGoogleDriveParsingStrategy>> _SINGLETON_VALUE_Strategy =
                new LazySingletonValue<>(
                        "strategy",
                        "\"auto\"",
                        new TypeReference<Optional<? extends SourceGoogleDriveParsingStrategy>>() {});
    }
}

