/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceNetsuiteEnterprisePasswordAuthentication
 * 
 * <p>Authenticate using a password.
 */
public class SourceNetsuiteEnterprisePasswordAuthentication {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_method")
    private Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod> authenticationMethod;

    /**
     * The password associated with the username.
     */
    @JsonProperty("password")
    private String password;

    @JsonCreator
    public SourceNetsuiteEnterprisePasswordAuthentication(
            @JsonProperty("authentication_method") Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod> authenticationMethod,
            @JsonProperty("password") String password) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        Utils.checkNotNull(password, "password");
        this.additionalProperties = new HashMap<>();
        this.authenticationMethod = authenticationMethod;
        this.password = password;
    }
    
    public SourceNetsuiteEnterprisePasswordAuthentication(
            String password) {
        this(Optional.empty(), password);
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod> authenticationMethod() {
        return (Optional<SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod>) authenticationMethod;
    }

    /**
     * The password associated with the username.
     */
    @JsonIgnore
    public String password() {
        return password;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public SourceNetsuiteEnterprisePasswordAuthentication withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public SourceNetsuiteEnterprisePasswordAuthentication withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public SourceNetsuiteEnterprisePasswordAuthentication withAuthenticationMethod(SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod authenticationMethod) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        this.authenticationMethod = Optional.ofNullable(authenticationMethod);
        return this;
    }

    public SourceNetsuiteEnterprisePasswordAuthentication withAuthenticationMethod(Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod> authenticationMethod) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        this.authenticationMethod = authenticationMethod;
        return this;
    }

    /**
     * The password associated with the username.
     */
    public SourceNetsuiteEnterprisePasswordAuthentication withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceNetsuiteEnterprisePasswordAuthentication other = (SourceNetsuiteEnterprisePasswordAuthentication) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.authenticationMethod, other.authenticationMethod) &&
            Objects.deepEquals(this.password, other.password);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            authenticationMethod,
            password);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceNetsuiteEnterprisePasswordAuthentication.class,
                "additionalProperties", additionalProperties,
                "authenticationMethod", authenticationMethod,
                "password", password);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod> authenticationMethod;
 
        private String password;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder authenticationMethod(SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod authenticationMethod) {
            Utils.checkNotNull(authenticationMethod, "authenticationMethod");
            this.authenticationMethod = Optional.ofNullable(authenticationMethod);
            return this;
        }

        public Builder authenticationMethod(Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod> authenticationMethod) {
            Utils.checkNotNull(authenticationMethod, "authenticationMethod");
            this.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * The password associated with the username.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }
        
        public SourceNetsuiteEnterprisePasswordAuthentication build() {
            if (authenticationMethod == null) {
                authenticationMethod = _SINGLETON_VALUE_AuthenticationMethod.value();
            }
            return new SourceNetsuiteEnterprisePasswordAuthentication(
                authenticationMethod,
                password)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod>> _SINGLETON_VALUE_AuthenticationMethod =
                new LazySingletonValue<>(
                        "authentication_method",
                        "\"password_authentication\"",
                        new TypeReference<Optional<? extends SourceNetsuiteEnterpriseSchemasAuthenticationMethodAuthenticationMethod>>() {});
    }
}
