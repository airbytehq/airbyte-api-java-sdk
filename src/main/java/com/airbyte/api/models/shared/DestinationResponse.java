/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * DestinationResponse
 * 
 * <p>Provides details of a single destination.
 */
public class DestinationResponse {

    /**
     * The values required to configure the destination.
     */
    @JsonProperty("configuration")
    private DestinationConfiguration configuration;

    @JsonProperty("createdAt")
    private long createdAt;

    @JsonProperty("definitionId")
    private String definitionId;

    @JsonProperty("destinationId")
    private String destinationId;

    @JsonProperty("destinationType")
    private String destinationType;

    @JsonProperty("name")
    private String name;

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceAllocation")
    private Optional<? extends ScopedResourceRequirements> resourceAllocation;

    @JsonProperty("workspaceId")
    private String workspaceId;

    @JsonCreator
    public DestinationResponse(
            @JsonProperty("configuration") DestinationConfiguration configuration,
            @JsonProperty("createdAt") long createdAt,
            @JsonProperty("definitionId") String definitionId,
            @JsonProperty("destinationId") String destinationId,
            @JsonProperty("destinationType") String destinationType,
            @JsonProperty("name") String name,
            @JsonProperty("resourceAllocation") Optional<? extends ScopedResourceRequirements> resourceAllocation,
            @JsonProperty("workspaceId") String workspaceId) {
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(definitionId, "definitionId");
        Utils.checkNotNull(destinationId, "destinationId");
        Utils.checkNotNull(destinationType, "destinationType");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(resourceAllocation, "resourceAllocation");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.configuration = configuration;
        this.createdAt = createdAt;
        this.definitionId = definitionId;
        this.destinationId = destinationId;
        this.destinationType = destinationType;
        this.name = name;
        this.resourceAllocation = resourceAllocation;
        this.workspaceId = workspaceId;
    }
    
    public DestinationResponse(
            DestinationConfiguration configuration,
            long createdAt,
            String definitionId,
            String destinationId,
            String destinationType,
            String name,
            String workspaceId) {
        this(configuration, createdAt, definitionId, destinationId, destinationType, name, Optional.empty(), workspaceId);
    }

    /**
     * The values required to configure the destination.
     */
    @JsonIgnore
    public DestinationConfiguration configuration() {
        return configuration;
    }

    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String definitionId() {
        return definitionId;
    }

    @JsonIgnore
    public String destinationId() {
        return destinationId;
    }

    @JsonIgnore
    public String destinationType() {
        return destinationType;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ScopedResourceRequirements> resourceAllocation() {
        return (Optional<ScopedResourceRequirements>) resourceAllocation;
    }

    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The values required to configure the destination.
     */
    public DestinationResponse withConfiguration(DestinationConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    public DestinationResponse withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public DestinationResponse withDefinitionId(String definitionId) {
        Utils.checkNotNull(definitionId, "definitionId");
        this.definitionId = definitionId;
        return this;
    }

    public DestinationResponse withDestinationId(String destinationId) {
        Utils.checkNotNull(destinationId, "destinationId");
        this.destinationId = destinationId;
        return this;
    }

    public DestinationResponse withDestinationType(String destinationType) {
        Utils.checkNotNull(destinationType, "destinationType");
        this.destinationType = destinationType;
        return this;
    }

    public DestinationResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    public DestinationResponse withResourceAllocation(ScopedResourceRequirements resourceAllocation) {
        Utils.checkNotNull(resourceAllocation, "resourceAllocation");
        this.resourceAllocation = Optional.ofNullable(resourceAllocation);
        return this;
    }

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    public DestinationResponse withResourceAllocation(Optional<? extends ScopedResourceRequirements> resourceAllocation) {
        Utils.checkNotNull(resourceAllocation, "resourceAllocation");
        this.resourceAllocation = resourceAllocation;
        return this;
    }

    public DestinationResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationResponse other = (DestinationResponse) o;
        return 
            Objects.deepEquals(this.configuration, other.configuration) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.definitionId, other.definitionId) &&
            Objects.deepEquals(this.destinationId, other.destinationId) &&
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.resourceAllocation, other.resourceAllocation) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            configuration,
            createdAt,
            definitionId,
            destinationId,
            destinationType,
            name,
            resourceAllocation,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationResponse.class,
                "configuration", configuration,
                "createdAt", createdAt,
                "definitionId", definitionId,
                "destinationId", destinationId,
                "destinationType", destinationType,
                "name", name,
                "resourceAllocation", resourceAllocation,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private DestinationConfiguration configuration;
 
        private Long createdAt;
 
        private String definitionId;
 
        private String destinationId;
 
        private String destinationType;
 
        private String name;
 
        private Optional<? extends ScopedResourceRequirements> resourceAllocation = Optional.empty();
 
        private String workspaceId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The values required to configure the destination.
         */
        public Builder configuration(DestinationConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder definitionId(String definitionId) {
            Utils.checkNotNull(definitionId, "definitionId");
            this.definitionId = definitionId;
            return this;
        }

        public Builder destinationId(String destinationId) {
            Utils.checkNotNull(destinationId, "destinationId");
            this.destinationId = destinationId;
            return this;
        }

        public Builder destinationType(String destinationType) {
            Utils.checkNotNull(destinationType, "destinationType");
            this.destinationType = destinationType;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
         */
        public Builder resourceAllocation(ScopedResourceRequirements resourceAllocation) {
            Utils.checkNotNull(resourceAllocation, "resourceAllocation");
            this.resourceAllocation = Optional.ofNullable(resourceAllocation);
            return this;
        }

        /**
         * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
         */
        public Builder resourceAllocation(Optional<? extends ScopedResourceRequirements> resourceAllocation) {
            Utils.checkNotNull(resourceAllocation, "resourceAllocation");
            this.resourceAllocation = resourceAllocation;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public DestinationResponse build() {
            return new DestinationResponse(
                configuration,
                createdAt,
                definitionId,
                destinationId,
                destinationType,
                name,
                resourceAllocation,
                workspaceId);
        }
    }
}
