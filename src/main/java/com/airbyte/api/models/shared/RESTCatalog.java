/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * RESTCatalog - The RESTCatalog connects to a REST server at the specified URI
 */

public class RESTCatalog {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_type")
    private Optional<? extends DestinationIcebergSchemasCatalogConfigCatalogType> catalogType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rest_credential")
    private Optional<? extends String> restCredential;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rest_token")
    private Optional<? extends String> restToken;

    @JsonProperty("rest_uri")
    private String restUri;

    @JsonCreator
    public RESTCatalog(
            @JsonProperty("catalog_type") Optional<? extends DestinationIcebergSchemasCatalogConfigCatalogType> catalogType,
            @JsonProperty("rest_credential") Optional<? extends String> restCredential,
            @JsonProperty("rest_token") Optional<? extends String> restToken,
            @JsonProperty("rest_uri") String restUri) {
        Utils.checkNotNull(catalogType, "catalogType");
        Utils.checkNotNull(restCredential, "restCredential");
        Utils.checkNotNull(restToken, "restToken");
        Utils.checkNotNull(restUri, "restUri");
        this.catalogType = catalogType;
        this.restCredential = restCredential;
        this.restToken = restToken;
        this.restUri = restUri;
    }
    
    public RESTCatalog(
            String restUri) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), restUri);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationIcebergSchemasCatalogConfigCatalogType> catalogType() {
        return (Optional<DestinationIcebergSchemasCatalogConfigCatalogType>) catalogType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> restCredential() {
        return (Optional<String>) restCredential;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> restToken() {
        return (Optional<String>) restToken;
    }

    @JsonIgnore
    public String restUri() {
        return restUri;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RESTCatalog withCatalogType(DestinationIcebergSchemasCatalogConfigCatalogType catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = Optional.ofNullable(catalogType);
        return this;
    }

    public RESTCatalog withCatalogType(Optional<? extends DestinationIcebergSchemasCatalogConfigCatalogType> catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = catalogType;
        return this;
    }

    public RESTCatalog withRestCredential(String restCredential) {
        Utils.checkNotNull(restCredential, "restCredential");
        this.restCredential = Optional.ofNullable(restCredential);
        return this;
    }

    public RESTCatalog withRestCredential(Optional<? extends String> restCredential) {
        Utils.checkNotNull(restCredential, "restCredential");
        this.restCredential = restCredential;
        return this;
    }

    public RESTCatalog withRestToken(String restToken) {
        Utils.checkNotNull(restToken, "restToken");
        this.restToken = Optional.ofNullable(restToken);
        return this;
    }

    public RESTCatalog withRestToken(Optional<? extends String> restToken) {
        Utils.checkNotNull(restToken, "restToken");
        this.restToken = restToken;
        return this;
    }

    public RESTCatalog withRestUri(String restUri) {
        Utils.checkNotNull(restUri, "restUri");
        this.restUri = restUri;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RESTCatalog other = (RESTCatalog) o;
        return 
            java.util.Objects.deepEquals(this.catalogType, other.catalogType) &&
            java.util.Objects.deepEquals(this.restCredential, other.restCredential) &&
            java.util.Objects.deepEquals(this.restToken, other.restToken) &&
            java.util.Objects.deepEquals(this.restUri, other.restUri);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            catalogType,
            restCredential,
            restToken,
            restUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RESTCatalog.class,
                "catalogType", catalogType,
                "restCredential", restCredential,
                "restToken", restToken,
                "restUri", restUri);
    }
    
    public final static class Builder {
 
        private Optional<? extends DestinationIcebergSchemasCatalogConfigCatalogType> catalogType;
 
        private Optional<? extends String> restCredential = Optional.empty();
 
        private Optional<? extends String> restToken = Optional.empty();
 
        private String restUri;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder catalogType(DestinationIcebergSchemasCatalogConfigCatalogType catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = Optional.ofNullable(catalogType);
            return this;
        }

        public Builder catalogType(Optional<? extends DestinationIcebergSchemasCatalogConfigCatalogType> catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = catalogType;
            return this;
        }

        public Builder restCredential(String restCredential) {
            Utils.checkNotNull(restCredential, "restCredential");
            this.restCredential = Optional.ofNullable(restCredential);
            return this;
        }

        public Builder restCredential(Optional<? extends String> restCredential) {
            Utils.checkNotNull(restCredential, "restCredential");
            this.restCredential = restCredential;
            return this;
        }

        public Builder restToken(String restToken) {
            Utils.checkNotNull(restToken, "restToken");
            this.restToken = Optional.ofNullable(restToken);
            return this;
        }

        public Builder restToken(Optional<? extends String> restToken) {
            Utils.checkNotNull(restToken, "restToken");
            this.restToken = restToken;
            return this;
        }

        public Builder restUri(String restUri) {
            Utils.checkNotNull(restUri, "restUri");
            this.restUri = restUri;
            return this;
        }
        
        public RESTCatalog build() {
            if (catalogType == null) {
                catalogType = _SINGLETON_VALUE_CatalogType.value();
            }
            return new RESTCatalog(
                catalogType,
                restCredential,
                restToken,
                restUri);
        }

        private static final LazySingletonValue<Optional<? extends DestinationIcebergSchemasCatalogConfigCatalogType>> _SINGLETON_VALUE_CatalogType =
                new LazySingletonValue<>(
                        "catalog_type",
                        "\"Rest\"",
                        new TypeReference<Optional<? extends DestinationIcebergSchemasCatalogConfigCatalogType>>() {});
    }
}

