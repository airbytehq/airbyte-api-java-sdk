/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class Header {

    @JsonProperty("header_key")
    private String headerKey;

    @JsonProperty("value")
    private String value;

    @JsonCreator
    public Header(
            @JsonProperty("header_key") String headerKey,
            @JsonProperty("value") String value) {
        Utils.checkNotNull(headerKey, "headerKey");
        Utils.checkNotNull(value, "value");
        this.headerKey = headerKey;
        this.value = value;
    }

    @JsonIgnore
    public String headerKey() {
        return headerKey;
    }

    @JsonIgnore
    public String value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Header withHeaderKey(String headerKey) {
        Utils.checkNotNull(headerKey, "headerKey");
        this.headerKey = headerKey;
        return this;
    }

    public Header withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Header other = (Header) o;
        return 
            java.util.Objects.deepEquals(this.headerKey, other.headerKey) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            headerKey,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Header.class,
                "headerKey", headerKey,
                "value", value);
    }
    
    public final static class Builder {
 
        private String headerKey;
 
        private String value;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder headerKey(String headerKey) {
            Utils.checkNotNull(headerKey, "headerKey");
            this.headerKey = headerKey;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public Header build() {
            return new Header(
                headerKey,
                value);
        }
    }
}

