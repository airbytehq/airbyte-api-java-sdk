/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceConvertkit {

    @JsonProperty("credentials")
    private AuthenticationType credentials;

    @JsonProperty("sourceType")
    private Convertkit sourceType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    @JsonCreator
    public SourceConvertkit(
            @JsonProperty("credentials") AuthenticationType credentials,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(startDate, "startDate");
        this.credentials = credentials;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceConvertkit(
            AuthenticationType credentials) {
        this(credentials, Optional.empty());
    }

    @JsonIgnore
    public AuthenticationType credentials() {
        return credentials;
    }

    @JsonIgnore
    public Convertkit sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceConvertkit withCredentials(AuthenticationType credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    public SourceConvertkit withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    public SourceConvertkit withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceConvertkit other = (SourceConvertkit) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceConvertkit.class,
                "credentials", credentials,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private AuthenticationType credentials;
 
        private Optional<OffsetDateTime> startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(AuthenticationType credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceConvertkit build() {
            if (startDate == null) {
                startDate = _SINGLETON_VALUE_StartDate.value();
            }
            return new SourceConvertkit(
                credentials,
                startDate);
        }

        private static final LazySingletonValue<Convertkit> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"convertkit\"",
                        new TypeReference<Convertkit>() {});

        private static final LazySingletonValue<Optional<OffsetDateTime>> _SINGLETON_VALUE_StartDate =
                new LazySingletonValue<>(
                        "start_date",
                        "\"2013-01-01T00:00:00Z\"",
                        new TypeReference<Optional<OffsetDateTime>>() {});
    }
}
