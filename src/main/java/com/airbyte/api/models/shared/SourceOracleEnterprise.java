/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceOracleEnterprise {

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_privileges")
    private Optional<Boolean> checkPrivileges;

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkpoint_target_interval_seconds")
    private Optional<Long> checkpointTargetIntervalSeconds;

    /**
     * Maximum number of concurrent queries to the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concurrency")
    private Optional<Long> concurrency;

    /**
     * The scheme by which to establish a database connection.
     */
    @JsonProperty("connection_data")
    private SourceOracleEnterpriseConnectBy connectionData;

    /**
     * Configures how data is extracted from the database.
     */
    @JsonProperty("cursor")
    private SourceOracleEnterpriseUpdateMethod cursor;

    /**
     * The encryption method with is used when communicating with the database.
     */
    @JsonProperty("encryption")
    private SourceOracleEnterpriseEncryption encryption;

    /**
     * Hostname of the database.
     */
    @JsonProperty("host")
    private String host;

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jdbc_url_params")
    private Optional<String> jdbcUrlParams;

    /**
     * The password associated with the username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<String> password;

    /**
     * Port of the database.
     * Oracle Corporations recommends the following port numbers:
     * 1521 - Default listening port for client connections to the listener. 
     * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<Long> port;

    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemas")
    private Optional<? extends List<String>> schemas;

    @JsonProperty("sourceType")
    private OracleEnterprise sourceType;

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    @JsonProperty("tunnel_method")
    private SourceOracleEnterpriseSSHTunnelMethod tunnelMethod;

    /**
     * The username which is used to access the database.
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourceOracleEnterprise(
            @JsonProperty("check_privileges") Optional<Boolean> checkPrivileges,
            @JsonProperty("checkpoint_target_interval_seconds") Optional<Long> checkpointTargetIntervalSeconds,
            @JsonProperty("concurrency") Optional<Long> concurrency,
            @JsonProperty("connection_data") SourceOracleEnterpriseConnectBy connectionData,
            @JsonProperty("cursor") SourceOracleEnterpriseUpdateMethod cursor,
            @JsonProperty("encryption") SourceOracleEnterpriseEncryption encryption,
            @JsonProperty("host") String host,
            @JsonProperty("jdbc_url_params") Optional<String> jdbcUrlParams,
            @JsonProperty("password") Optional<String> password,
            @JsonProperty("port") Optional<Long> port,
            @JsonProperty("schemas") Optional<? extends List<String>> schemas,
            @JsonProperty("tunnel_method") SourceOracleEnterpriseSSHTunnelMethod tunnelMethod,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(checkPrivileges, "checkPrivileges");
        Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
        Utils.checkNotNull(concurrency, "concurrency");
        Utils.checkNotNull(connectionData, "connectionData");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(encryption, "encryption");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(schemas, "schemas");
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        Utils.checkNotNull(username, "username");
        this.checkPrivileges = checkPrivileges;
        this.checkpointTargetIntervalSeconds = checkpointTargetIntervalSeconds;
        this.concurrency = concurrency;
        this.connectionData = connectionData;
        this.cursor = cursor;
        this.encryption = encryption;
        this.host = host;
        this.jdbcUrlParams = jdbcUrlParams;
        this.password = password;
        this.port = port;
        this.schemas = schemas;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.tunnelMethod = tunnelMethod;
        this.username = username;
    }
    
    public SourceOracleEnterprise(
            SourceOracleEnterpriseConnectBy connectionData,
            SourceOracleEnterpriseUpdateMethod cursor,
            SourceOracleEnterpriseEncryption encryption,
            String host,
            SourceOracleEnterpriseSSHTunnelMethod tunnelMethod,
            String username) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), connectionData, cursor, encryption, host, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), tunnelMethod, username);
    }

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    @JsonIgnore
    public Optional<Boolean> checkPrivileges() {
        return checkPrivileges;
    }

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    @JsonIgnore
    public Optional<Long> checkpointTargetIntervalSeconds() {
        return checkpointTargetIntervalSeconds;
    }

    /**
     * Maximum number of concurrent queries to the database.
     */
    @JsonIgnore
    public Optional<Long> concurrency() {
        return concurrency;
    }

    /**
     * The scheme by which to establish a database connection.
     */
    @JsonIgnore
    public SourceOracleEnterpriseConnectBy connectionData() {
        return connectionData;
    }

    /**
     * Configures how data is extracted from the database.
     */
    @JsonIgnore
    public SourceOracleEnterpriseUpdateMethod cursor() {
        return cursor;
    }

    /**
     * The encryption method with is used when communicating with the database.
     */
    @JsonIgnore
    public SourceOracleEnterpriseEncryption encryption() {
        return encryption;
    }

    /**
     * Hostname of the database.
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonIgnore
    public Optional<String> jdbcUrlParams() {
        return jdbcUrlParams;
    }

    /**
     * The password associated with the username.
     */
    @JsonIgnore
    public Optional<String> password() {
        return password;
    }

    /**
     * Port of the database.
     * Oracle Corporations recommends the following port numbers:
     * 1521 - Default listening port for client connections to the listener. 
     * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
     */
    @JsonIgnore
    public Optional<Long> port() {
        return port;
    }

    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> schemas() {
        return (Optional<List<String>>) schemas;
    }

    @JsonIgnore
    public OracleEnterprise sourceType() {
        return sourceType;
    }

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    @JsonIgnore
    public SourceOracleEnterpriseSSHTunnelMethod tunnelMethod() {
        return tunnelMethod;
    }

    /**
     * The username which is used to access the database.
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    public SourceOracleEnterprise withCheckPrivileges(boolean checkPrivileges) {
        Utils.checkNotNull(checkPrivileges, "checkPrivileges");
        this.checkPrivileges = Optional.ofNullable(checkPrivileges);
        return this;
    }

    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
     */
    public SourceOracleEnterprise withCheckPrivileges(Optional<Boolean> checkPrivileges) {
        Utils.checkNotNull(checkPrivileges, "checkPrivileges");
        this.checkPrivileges = checkPrivileges;
        return this;
    }

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    public SourceOracleEnterprise withCheckpointTargetIntervalSeconds(long checkpointTargetIntervalSeconds) {
        Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
        this.checkpointTargetIntervalSeconds = Optional.ofNullable(checkpointTargetIntervalSeconds);
        return this;
    }

    /**
     * How often (in seconds) a stream should checkpoint, when possible.
     */
    public SourceOracleEnterprise withCheckpointTargetIntervalSeconds(Optional<Long> checkpointTargetIntervalSeconds) {
        Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
        this.checkpointTargetIntervalSeconds = checkpointTargetIntervalSeconds;
        return this;
    }

    /**
     * Maximum number of concurrent queries to the database.
     */
    public SourceOracleEnterprise withConcurrency(long concurrency) {
        Utils.checkNotNull(concurrency, "concurrency");
        this.concurrency = Optional.ofNullable(concurrency);
        return this;
    }

    /**
     * Maximum number of concurrent queries to the database.
     */
    public SourceOracleEnterprise withConcurrency(Optional<Long> concurrency) {
        Utils.checkNotNull(concurrency, "concurrency");
        this.concurrency = concurrency;
        return this;
    }

    /**
     * The scheme by which to establish a database connection.
     */
    public SourceOracleEnterprise withConnectionData(SourceOracleEnterpriseConnectBy connectionData) {
        Utils.checkNotNull(connectionData, "connectionData");
        this.connectionData = connectionData;
        return this;
    }

    /**
     * Configures how data is extracted from the database.
     */
    public SourceOracleEnterprise withCursor(SourceOracleEnterpriseUpdateMethod cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The encryption method with is used when communicating with the database.
     */
    public SourceOracleEnterprise withEncryption(SourceOracleEnterpriseEncryption encryption) {
        Utils.checkNotNull(encryption, "encryption");
        this.encryption = encryption;
        return this;
    }

    /**
     * Hostname of the database.
     */
    public SourceOracleEnterprise withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public SourceOracleEnterprise withJdbcUrlParams(String jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public SourceOracleEnterprise withJdbcUrlParams(Optional<String> jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = jdbcUrlParams;
        return this;
    }

    /**
     * The password associated with the username.
     */
    public SourceOracleEnterprise withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    /**
     * The password associated with the username.
     */
    public SourceOracleEnterprise withPassword(Optional<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Port of the database.
     * Oracle Corporations recommends the following port numbers:
     * 1521 - Default listening port for client connections to the listener. 
     * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
     */
    public SourceOracleEnterprise withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Port of the database.
     * Oracle Corporations recommends the following port numbers:
     * 1521 - Default listening port for client connections to the listener. 
     * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
     */
    public SourceOracleEnterprise withPort(Optional<Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    public SourceOracleEnterprise withSchemas(List<String> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = Optional.ofNullable(schemas);
        return this;
    }

    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    public SourceOracleEnterprise withSchemas(Optional<? extends List<String>> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = schemas;
        return this;
    }

    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    public SourceOracleEnterprise withTunnelMethod(SourceOracleEnterpriseSSHTunnelMethod tunnelMethod) {
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        this.tunnelMethod = tunnelMethod;
        return this;
    }

    /**
     * The username which is used to access the database.
     */
    public SourceOracleEnterprise withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOracleEnterprise other = (SourceOracleEnterprise) o;
        return 
            Objects.deepEquals(this.checkPrivileges, other.checkPrivileges) &&
            Objects.deepEquals(this.checkpointTargetIntervalSeconds, other.checkpointTargetIntervalSeconds) &&
            Objects.deepEquals(this.concurrency, other.concurrency) &&
            Objects.deepEquals(this.connectionData, other.connectionData) &&
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.encryption, other.encryption) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.jdbcUrlParams, other.jdbcUrlParams) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.port, other.port) &&
            Objects.deepEquals(this.schemas, other.schemas) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.tunnelMethod, other.tunnelMethod) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            checkPrivileges,
            checkpointTargetIntervalSeconds,
            concurrency,
            connectionData,
            cursor,
            encryption,
            host,
            jdbcUrlParams,
            password,
            port,
            schemas,
            sourceType,
            tunnelMethod,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOracleEnterprise.class,
                "checkPrivileges", checkPrivileges,
                "checkpointTargetIntervalSeconds", checkpointTargetIntervalSeconds,
                "concurrency", concurrency,
                "connectionData", connectionData,
                "cursor", cursor,
                "encryption", encryption,
                "host", host,
                "jdbcUrlParams", jdbcUrlParams,
                "password", password,
                "port", port,
                "schemas", schemas,
                "sourceType", sourceType,
                "tunnelMethod", tunnelMethod,
                "username", username);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> checkPrivileges;
 
        private Optional<Long> checkpointTargetIntervalSeconds;
 
        private Optional<Long> concurrency;
 
        private SourceOracleEnterpriseConnectBy connectionData;
 
        private SourceOracleEnterpriseUpdateMethod cursor;
 
        private SourceOracleEnterpriseEncryption encryption;
 
        private String host;
 
        private Optional<String> jdbcUrlParams = Optional.empty();
 
        private Optional<String> password = Optional.empty();
 
        private Optional<Long> port;
 
        private Optional<? extends List<String>> schemas = Optional.empty();
 
        private SourceOracleEnterpriseSSHTunnelMethod tunnelMethod;
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
         */
        public Builder checkPrivileges(boolean checkPrivileges) {
            Utils.checkNotNull(checkPrivileges, "checkPrivileges");
            this.checkPrivileges = Optional.ofNullable(checkPrivileges);
            return this;
        }

        /**
         * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.
         */
        public Builder checkPrivileges(Optional<Boolean> checkPrivileges) {
            Utils.checkNotNull(checkPrivileges, "checkPrivileges");
            this.checkPrivileges = checkPrivileges;
            return this;
        }

        /**
         * How often (in seconds) a stream should checkpoint, when possible.
         */
        public Builder checkpointTargetIntervalSeconds(long checkpointTargetIntervalSeconds) {
            Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
            this.checkpointTargetIntervalSeconds = Optional.ofNullable(checkpointTargetIntervalSeconds);
            return this;
        }

        /**
         * How often (in seconds) a stream should checkpoint, when possible.
         */
        public Builder checkpointTargetIntervalSeconds(Optional<Long> checkpointTargetIntervalSeconds) {
            Utils.checkNotNull(checkpointTargetIntervalSeconds, "checkpointTargetIntervalSeconds");
            this.checkpointTargetIntervalSeconds = checkpointTargetIntervalSeconds;
            return this;
        }

        /**
         * Maximum number of concurrent queries to the database.
         */
        public Builder concurrency(long concurrency) {
            Utils.checkNotNull(concurrency, "concurrency");
            this.concurrency = Optional.ofNullable(concurrency);
            return this;
        }

        /**
         * Maximum number of concurrent queries to the database.
         */
        public Builder concurrency(Optional<Long> concurrency) {
            Utils.checkNotNull(concurrency, "concurrency");
            this.concurrency = concurrency;
            return this;
        }

        /**
         * The scheme by which to establish a database connection.
         */
        public Builder connectionData(SourceOracleEnterpriseConnectBy connectionData) {
            Utils.checkNotNull(connectionData, "connectionData");
            this.connectionData = connectionData;
            return this;
        }

        /**
         * Configures how data is extracted from the database.
         */
        public Builder cursor(SourceOracleEnterpriseUpdateMethod cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * The encryption method with is used when communicating with the database.
         */
        public Builder encryption(SourceOracleEnterpriseEncryption encryption) {
            Utils.checkNotNull(encryption, "encryption");
            this.encryption = encryption;
            return this;
        }

        /**
         * Hostname of the database.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(String jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(Optional<String> jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = jdbcUrlParams;
            return this;
        }

        /**
         * The password associated with the username.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        /**
         * The password associated with the username.
         */
        public Builder password(Optional<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Port of the database.
         * Oracle Corporations recommends the following port numbers:
         * 1521 - Default listening port for client connections to the listener. 
         * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Port of the database.
         * Oracle Corporations recommends the following port numbers:
         * 1521 - Default listening port for client connections to the listener. 
         * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
         */
        public Builder port(Optional<Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * The list of schemas to sync from. Defaults to user. Case sensitive.
         */
        public Builder schemas(List<String> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = Optional.ofNullable(schemas);
            return this;
        }

        /**
         * The list of schemas to sync from. Defaults to user. Case sensitive.
         */
        public Builder schemas(Optional<? extends List<String>> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = schemas;
            return this;
        }

        /**
         * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
         */
        public Builder tunnelMethod(SourceOracleEnterpriseSSHTunnelMethod tunnelMethod) {
            Utils.checkNotNull(tunnelMethod, "tunnelMethod");
            this.tunnelMethod = tunnelMethod;
            return this;
        }

        /**
         * The username which is used to access the database.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourceOracleEnterprise build() {
            if (checkPrivileges == null) {
                checkPrivileges = _SINGLETON_VALUE_CheckPrivileges.value();
            }
            if (checkpointTargetIntervalSeconds == null) {
                checkpointTargetIntervalSeconds = _SINGLETON_VALUE_CheckpointTargetIntervalSeconds.value();
            }
            if (concurrency == null) {
                concurrency = _SINGLETON_VALUE_Concurrency.value();
            }
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            return new SourceOracleEnterprise(
                checkPrivileges,
                checkpointTargetIntervalSeconds,
                concurrency,
                connectionData,
                cursor,
                encryption,
                host,
                jdbcUrlParams,
                password,
                port,
                schemas,
                tunnelMethod,
                username);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_CheckPrivileges =
                new LazySingletonValue<>(
                        "check_privileges",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_CheckpointTargetIntervalSeconds =
                new LazySingletonValue<>(
                        "checkpoint_target_interval_seconds",
                        "300",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Concurrency =
                new LazySingletonValue<>(
                        "concurrency",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "1521",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<OracleEnterprise> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"oracle-enterprise\"",
                        new TypeReference<OracleEnterprise>() {});
    }
}
