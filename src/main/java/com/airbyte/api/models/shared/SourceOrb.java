/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceOrb {

    /**
     * Orb API Key, issued from the Orb admin console.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookback_window_days")
    private Optional<? extends Long> lookbackWindowDays;

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numeric_event_properties_keys")
    private Optional<? extends java.util.List<String>> numericEventPropertiesKeys;

    /**
     * Orb Plan ID to filter subscriptions that should have usage fetched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_id")
    private Optional<? extends String> planId;

    @JsonProperty("sourceType")
    private Orb sourceType;

    /**
     * UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
     */
    @JsonProperty("start_date")
    private String startDate;

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("string_event_properties_keys")
    private Optional<? extends java.util.List<String>> stringEventPropertiesKeys;

    /**
     * Property key name to group subscription usage by.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_usage_grouping_key")
    private Optional<? extends String> subscriptionUsageGroupingKey;

    public SourceOrb(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("lookback_window_days") Optional<? extends Long> lookbackWindowDays,
            @JsonProperty("numeric_event_properties_keys") Optional<? extends java.util.List<String>> numericEventPropertiesKeys,
            @JsonProperty("plan_id") Optional<? extends String> planId,
            @JsonProperty("start_date") String startDate,
            @JsonProperty("string_event_properties_keys") Optional<? extends java.util.List<String>> stringEventPropertiesKeys,
            @JsonProperty("subscription_usage_grouping_key") Optional<? extends String> subscriptionUsageGroupingKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(lookbackWindowDays, "lookbackWindowDays");
        Utils.checkNotNull(numericEventPropertiesKeys, "numericEventPropertiesKeys");
        Utils.checkNotNull(planId, "planId");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(stringEventPropertiesKeys, "stringEventPropertiesKeys");
        Utils.checkNotNull(subscriptionUsageGroupingKey, "subscriptionUsageGroupingKey");
        this.apiKey = apiKey;
        this.lookbackWindowDays = lookbackWindowDays;
        this.numericEventPropertiesKeys = numericEventPropertiesKeys;
        this.planId = planId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.stringEventPropertiesKeys = stringEventPropertiesKeys;
        this.subscriptionUsageGroupingKey = subscriptionUsageGroupingKey;
    }

    /**
     * Orb API Key, issued from the Orb admin console.
     */
    public String apiKey() {
        return apiKey;
    }

    /**
     * When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.
     */
    public Optional<? extends Long> lookbackWindowDays() {
        return lookbackWindowDays;
    }

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    public Optional<? extends java.util.List<String>> numericEventPropertiesKeys() {
        return numericEventPropertiesKeys;
    }

    /**
     * Orb Plan ID to filter subscriptions that should have usage fetched.
     */
    public Optional<? extends String> planId() {
        return planId;
    }

    public Orb sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
     */
    public String startDate() {
        return startDate;
    }

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    public Optional<? extends java.util.List<String>> stringEventPropertiesKeys() {
        return stringEventPropertiesKeys;
    }

    /**
     * Property key name to group subscription usage by.
     */
    public Optional<? extends String> subscriptionUsageGroupingKey() {
        return subscriptionUsageGroupingKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Orb API Key, issued from the Orb admin console.
     */
    public SourceOrb withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.
     */
    public SourceOrb withLookbackWindowDays(long lookbackWindowDays) {
        Utils.checkNotNull(lookbackWindowDays, "lookbackWindowDays");
        this.lookbackWindowDays = Optional.ofNullable(lookbackWindowDays);
        return this;
    }

    /**
     * When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.
     */
    public SourceOrb withLookbackWindowDays(Optional<? extends Long> lookbackWindowDays) {
        Utils.checkNotNull(lookbackWindowDays, "lookbackWindowDays");
        this.lookbackWindowDays = lookbackWindowDays;
        return this;
    }

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    public SourceOrb withNumericEventPropertiesKeys(java.util.List<String> numericEventPropertiesKeys) {
        Utils.checkNotNull(numericEventPropertiesKeys, "numericEventPropertiesKeys");
        this.numericEventPropertiesKeys = Optional.ofNullable(numericEventPropertiesKeys);
        return this;
    }

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    public SourceOrb withNumericEventPropertiesKeys(Optional<? extends java.util.List<String>> numericEventPropertiesKeys) {
        Utils.checkNotNull(numericEventPropertiesKeys, "numericEventPropertiesKeys");
        this.numericEventPropertiesKeys = numericEventPropertiesKeys;
        return this;
    }

    /**
     * Orb Plan ID to filter subscriptions that should have usage fetched.
     */
    public SourceOrb withPlanId(String planId) {
        Utils.checkNotNull(planId, "planId");
        this.planId = Optional.ofNullable(planId);
        return this;
    }

    /**
     * Orb Plan ID to filter subscriptions that should have usage fetched.
     */
    public SourceOrb withPlanId(Optional<? extends String> planId) {
        Utils.checkNotNull(planId, "planId");
        this.planId = planId;
        return this;
    }

    /**
     * UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
     */
    public SourceOrb withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    public SourceOrb withStringEventPropertiesKeys(java.util.List<String> stringEventPropertiesKeys) {
        Utils.checkNotNull(stringEventPropertiesKeys, "stringEventPropertiesKeys");
        this.stringEventPropertiesKeys = Optional.ofNullable(stringEventPropertiesKeys);
        return this;
    }

    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    public SourceOrb withStringEventPropertiesKeys(Optional<? extends java.util.List<String>> stringEventPropertiesKeys) {
        Utils.checkNotNull(stringEventPropertiesKeys, "stringEventPropertiesKeys");
        this.stringEventPropertiesKeys = stringEventPropertiesKeys;
        return this;
    }

    /**
     * Property key name to group subscription usage by.
     */
    public SourceOrb withSubscriptionUsageGroupingKey(String subscriptionUsageGroupingKey) {
        Utils.checkNotNull(subscriptionUsageGroupingKey, "subscriptionUsageGroupingKey");
        this.subscriptionUsageGroupingKey = Optional.ofNullable(subscriptionUsageGroupingKey);
        return this;
    }

    /**
     * Property key name to group subscription usage by.
     */
    public SourceOrb withSubscriptionUsageGroupingKey(Optional<? extends String> subscriptionUsageGroupingKey) {
        Utils.checkNotNull(subscriptionUsageGroupingKey, "subscriptionUsageGroupingKey");
        this.subscriptionUsageGroupingKey = subscriptionUsageGroupingKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOrb other = (SourceOrb) o;
        return 
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.lookbackWindowDays, other.lookbackWindowDays) &&
            java.util.Objects.deepEquals(this.numericEventPropertiesKeys, other.numericEventPropertiesKeys) &&
            java.util.Objects.deepEquals(this.planId, other.planId) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.stringEventPropertiesKeys, other.stringEventPropertiesKeys) &&
            java.util.Objects.deepEquals(this.subscriptionUsageGroupingKey, other.subscriptionUsageGroupingKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKey,
            lookbackWindowDays,
            numericEventPropertiesKeys,
            planId,
            sourceType,
            startDate,
            stringEventPropertiesKeys,
            subscriptionUsageGroupingKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOrb.class,
                "apiKey", apiKey,
                "lookbackWindowDays", lookbackWindowDays,
                "numericEventPropertiesKeys", numericEventPropertiesKeys,
                "planId", planId,
                "sourceType", sourceType,
                "startDate", startDate,
                "stringEventPropertiesKeys", stringEventPropertiesKeys,
                "subscriptionUsageGroupingKey", subscriptionUsageGroupingKey);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<? extends Long> lookbackWindowDays;
 
        private Optional<? extends java.util.List<String>> numericEventPropertiesKeys = Optional.empty();
 
        private Optional<? extends String> planId = Optional.empty();
 
        private String startDate;
 
        private Optional<? extends java.util.List<String>> stringEventPropertiesKeys = Optional.empty();
 
        private Optional<? extends String> subscriptionUsageGroupingKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Orb API Key, issued from the Orb admin console.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.
         */
        public Builder lookbackWindowDays(long lookbackWindowDays) {
            Utils.checkNotNull(lookbackWindowDays, "lookbackWindowDays");
            this.lookbackWindowDays = Optional.ofNullable(lookbackWindowDays);
            return this;
        }

        /**
         * When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced.
         */
        public Builder lookbackWindowDays(Optional<? extends Long> lookbackWindowDays) {
            Utils.checkNotNull(lookbackWindowDays, "lookbackWindowDays");
            this.lookbackWindowDays = lookbackWindowDays;
            return this;
        }

        /**
         * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
         */
        public Builder numericEventPropertiesKeys(java.util.List<String> numericEventPropertiesKeys) {
            Utils.checkNotNull(numericEventPropertiesKeys, "numericEventPropertiesKeys");
            this.numericEventPropertiesKeys = Optional.ofNullable(numericEventPropertiesKeys);
            return this;
        }

        /**
         * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
         */
        public Builder numericEventPropertiesKeys(Optional<? extends java.util.List<String>> numericEventPropertiesKeys) {
            Utils.checkNotNull(numericEventPropertiesKeys, "numericEventPropertiesKeys");
            this.numericEventPropertiesKeys = numericEventPropertiesKeys;
            return this;
        }

        /**
         * Orb Plan ID to filter subscriptions that should have usage fetched.
         */
        public Builder planId(String planId) {
            Utils.checkNotNull(planId, "planId");
            this.planId = Optional.ofNullable(planId);
            return this;
        }

        /**
         * Orb Plan ID to filter subscriptions that should have usage fetched.
         */
        public Builder planId(Optional<? extends String> planId) {
            Utils.checkNotNull(planId, "planId");
            this.planId = planId;
            return this;
        }

        /**
         * UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
         */
        public Builder stringEventPropertiesKeys(java.util.List<String> stringEventPropertiesKeys) {
            Utils.checkNotNull(stringEventPropertiesKeys, "stringEventPropertiesKeys");
            this.stringEventPropertiesKeys = Optional.ofNullable(stringEventPropertiesKeys);
            return this;
        }

        /**
         * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
         */
        public Builder stringEventPropertiesKeys(Optional<? extends java.util.List<String>> stringEventPropertiesKeys) {
            Utils.checkNotNull(stringEventPropertiesKeys, "stringEventPropertiesKeys");
            this.stringEventPropertiesKeys = stringEventPropertiesKeys;
            return this;
        }

        /**
         * Property key name to group subscription usage by.
         */
        public Builder subscriptionUsageGroupingKey(String subscriptionUsageGroupingKey) {
            Utils.checkNotNull(subscriptionUsageGroupingKey, "subscriptionUsageGroupingKey");
            this.subscriptionUsageGroupingKey = Optional.ofNullable(subscriptionUsageGroupingKey);
            return this;
        }

        /**
         * Property key name to group subscription usage by.
         */
        public Builder subscriptionUsageGroupingKey(Optional<? extends String> subscriptionUsageGroupingKey) {
            Utils.checkNotNull(subscriptionUsageGroupingKey, "subscriptionUsageGroupingKey");
            this.subscriptionUsageGroupingKey = subscriptionUsageGroupingKey;
            return this;
        }
        
        public SourceOrb build() {
            if (lookbackWindowDays == null) {
                lookbackWindowDays = _SINGLETON_VALUE_LookbackWindowDays.value();
            }
            return new SourceOrb(
                apiKey,
                lookbackWindowDays,
                numericEventPropertiesKeys,
                planId,
                startDate,
                stringEventPropertiesKeys,
                subscriptionUsageGroupingKey);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_LookbackWindowDays =
                new LazySingletonValue<>(
                        "lookback_window_days",
                        "0",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Orb> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"orb\"",
                        new TypeReference<Orb>() {});
    }
}

