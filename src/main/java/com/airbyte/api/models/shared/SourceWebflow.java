/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceWebflow {

    /**
     * The version of the Webflow API to use. See https://developers.webflow.com/#versioning
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accept_version")
    private Optional<String> acceptVersion;

    /**
     * The API token for authenticating to Webflow. See https://university.webflow.com/lesson/intro-to-the-webflow-api
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The id of the Webflow site you are requesting data from. See https://developers.webflow.com/#sites
     */
    @JsonProperty("site_id")
    private String siteId;

    @JsonProperty("sourceType")
    private Webflow sourceType;

    @JsonCreator
    public SourceWebflow(
            @JsonProperty("accept_version") Optional<String> acceptVersion,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("site_id") String siteId) {
        Utils.checkNotNull(acceptVersion, "acceptVersion");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(siteId, "siteId");
        this.acceptVersion = acceptVersion;
        this.apiKey = apiKey;
        this.siteId = siteId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceWebflow(
            String apiKey,
            String siteId) {
        this(Optional.empty(), apiKey, siteId);
    }

    /**
     * The version of the Webflow API to use. See https://developers.webflow.com/#versioning
     */
    @JsonIgnore
    public Optional<String> acceptVersion() {
        return acceptVersion;
    }

    /**
     * The API token for authenticating to Webflow. See https://university.webflow.com/lesson/intro-to-the-webflow-api
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The id of the Webflow site you are requesting data from. See https://developers.webflow.com/#sites
     */
    @JsonIgnore
    public String siteId() {
        return siteId;
    }

    @JsonIgnore
    public Webflow sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The version of the Webflow API to use. See https://developers.webflow.com/#versioning
     */
    public SourceWebflow withAcceptVersion(String acceptVersion) {
        Utils.checkNotNull(acceptVersion, "acceptVersion");
        this.acceptVersion = Optional.ofNullable(acceptVersion);
        return this;
    }

    /**
     * The version of the Webflow API to use. See https://developers.webflow.com/#versioning
     */
    public SourceWebflow withAcceptVersion(Optional<String> acceptVersion) {
        Utils.checkNotNull(acceptVersion, "acceptVersion");
        this.acceptVersion = acceptVersion;
        return this;
    }

    /**
     * The API token for authenticating to Webflow. See https://university.webflow.com/lesson/intro-to-the-webflow-api
     */
    public SourceWebflow withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The id of the Webflow site you are requesting data from. See https://developers.webflow.com/#sites
     */
    public SourceWebflow withSiteId(String siteId) {
        Utils.checkNotNull(siteId, "siteId");
        this.siteId = siteId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceWebflow other = (SourceWebflow) o;
        return 
            Objects.deepEquals(this.acceptVersion, other.acceptVersion) &&
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.siteId, other.siteId) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            acceptVersion,
            apiKey,
            siteId,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceWebflow.class,
                "acceptVersion", acceptVersion,
                "apiKey", apiKey,
                "siteId", siteId,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<String> acceptVersion = Optional.empty();
 
        private String apiKey;
 
        private String siteId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The version of the Webflow API to use. See https://developers.webflow.com/#versioning
         */
        public Builder acceptVersion(String acceptVersion) {
            Utils.checkNotNull(acceptVersion, "acceptVersion");
            this.acceptVersion = Optional.ofNullable(acceptVersion);
            return this;
        }

        /**
         * The version of the Webflow API to use. See https://developers.webflow.com/#versioning
         */
        public Builder acceptVersion(Optional<String> acceptVersion) {
            Utils.checkNotNull(acceptVersion, "acceptVersion");
            this.acceptVersion = acceptVersion;
            return this;
        }

        /**
         * The API token for authenticating to Webflow. See https://university.webflow.com/lesson/intro-to-the-webflow-api
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The id of the Webflow site you are requesting data from. See https://developers.webflow.com/#sites
         */
        public Builder siteId(String siteId) {
            Utils.checkNotNull(siteId, "siteId");
            this.siteId = siteId;
            return this;
        }
        
        public SourceWebflow build() {
            return new SourceWebflow(
                acceptVersion,
                apiKey,
                siteId);
        }

        private static final LazySingletonValue<Webflow> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"webflow\"",
                        new TypeReference<Webflow>() {});
    }
}

