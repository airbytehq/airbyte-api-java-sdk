/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceMicrosoftDataverse {

    /**
     * App Registration Client Id
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * App Registration Client Secret
     */
    @JsonProperty("client_secret_value")
    private String clientSecretValue;

    /**
     * Max number of results per page. Default=5000
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("odata_maxpagesize")
    private Optional<? extends Long> odataMaxpagesize;

    @JsonProperty("sourceType")
    private MicrosoftDataverse sourceType;

    /**
     * Tenant Id of your Microsoft Dataverse Instance
     */
    @JsonProperty("tenant_id")
    private String tenantId;

    /**
     * URL to Microsoft Dataverse API
     */
    @JsonProperty("url")
    private String url;

    @JsonCreator
    public SourceMicrosoftDataverse(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret_value") String clientSecretValue,
            @JsonProperty("odata_maxpagesize") Optional<? extends Long> odataMaxpagesize,
            @JsonProperty("tenant_id") String tenantId,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecretValue, "clientSecretValue");
        Utils.checkNotNull(odataMaxpagesize, "odataMaxpagesize");
        Utils.checkNotNull(tenantId, "tenantId");
        Utils.checkNotNull(url, "url");
        this.clientId = clientId;
        this.clientSecretValue = clientSecretValue;
        this.odataMaxpagesize = odataMaxpagesize;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.tenantId = tenantId;
        this.url = url;
    }
    
    public SourceMicrosoftDataverse(
            String clientId,
            String clientSecretValue,
            String tenantId,
            String url) {
        this(clientId, clientSecretValue, Optional.empty(), tenantId, url);
    }

    /**
     * App Registration Client Id
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * App Registration Client Secret
     */
    @JsonIgnore
    public String clientSecretValue() {
        return clientSecretValue;
    }

    /**
     * Max number of results per page. Default=5000
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> odataMaxpagesize() {
        return (Optional<Long>) odataMaxpagesize;
    }

    @JsonIgnore
    public MicrosoftDataverse sourceType() {
        return sourceType;
    }

    /**
     * Tenant Id of your Microsoft Dataverse Instance
     */
    @JsonIgnore
    public String tenantId() {
        return tenantId;
    }

    /**
     * URL to Microsoft Dataverse API
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * App Registration Client Id
     */
    public SourceMicrosoftDataverse withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * App Registration Client Secret
     */
    public SourceMicrosoftDataverse withClientSecretValue(String clientSecretValue) {
        Utils.checkNotNull(clientSecretValue, "clientSecretValue");
        this.clientSecretValue = clientSecretValue;
        return this;
    }

    /**
     * Max number of results per page. Default=5000
     */
    public SourceMicrosoftDataverse withOdataMaxpagesize(long odataMaxpagesize) {
        Utils.checkNotNull(odataMaxpagesize, "odataMaxpagesize");
        this.odataMaxpagesize = Optional.ofNullable(odataMaxpagesize);
        return this;
    }

    /**
     * Max number of results per page. Default=5000
     */
    public SourceMicrosoftDataverse withOdataMaxpagesize(Optional<? extends Long> odataMaxpagesize) {
        Utils.checkNotNull(odataMaxpagesize, "odataMaxpagesize");
        this.odataMaxpagesize = odataMaxpagesize;
        return this;
    }

    /**
     * Tenant Id of your Microsoft Dataverse Instance
     */
    public SourceMicrosoftDataverse withTenantId(String tenantId) {
        Utils.checkNotNull(tenantId, "tenantId");
        this.tenantId = tenantId;
        return this;
    }

    /**
     * URL to Microsoft Dataverse API
     */
    public SourceMicrosoftDataverse withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMicrosoftDataverse other = (SourceMicrosoftDataverse) o;
        return 
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecretValue, other.clientSecretValue) &&
            java.util.Objects.deepEquals(this.odataMaxpagesize, other.odataMaxpagesize) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.tenantId, other.tenantId) &&
            java.util.Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            clientId,
            clientSecretValue,
            odataMaxpagesize,
            sourceType,
            tenantId,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMicrosoftDataverse.class,
                "clientId", clientId,
                "clientSecretValue", clientSecretValue,
                "odataMaxpagesize", odataMaxpagesize,
                "sourceType", sourceType,
                "tenantId", tenantId,
                "url", url);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecretValue;
 
        private Optional<? extends Long> odataMaxpagesize;
 
        private String tenantId;
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * App Registration Client Id
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * App Registration Client Secret
         */
        public Builder clientSecretValue(String clientSecretValue) {
            Utils.checkNotNull(clientSecretValue, "clientSecretValue");
            this.clientSecretValue = clientSecretValue;
            return this;
        }

        /**
         * Max number of results per page. Default=5000
         */
        public Builder odataMaxpagesize(long odataMaxpagesize) {
            Utils.checkNotNull(odataMaxpagesize, "odataMaxpagesize");
            this.odataMaxpagesize = Optional.ofNullable(odataMaxpagesize);
            return this;
        }

        /**
         * Max number of results per page. Default=5000
         */
        public Builder odataMaxpagesize(Optional<? extends Long> odataMaxpagesize) {
            Utils.checkNotNull(odataMaxpagesize, "odataMaxpagesize");
            this.odataMaxpagesize = odataMaxpagesize;
            return this;
        }

        /**
         * Tenant Id of your Microsoft Dataverse Instance
         */
        public Builder tenantId(String tenantId) {
            Utils.checkNotNull(tenantId, "tenantId");
            this.tenantId = tenantId;
            return this;
        }

        /**
         * URL to Microsoft Dataverse API
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public SourceMicrosoftDataverse build() {
            if (odataMaxpagesize == null) {
                odataMaxpagesize = _SINGLETON_VALUE_OdataMaxpagesize.value();
            }
            return new SourceMicrosoftDataverse(
                clientId,
                clientSecretValue,
                odataMaxpagesize,
                tenantId,
                url);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_OdataMaxpagesize =
                new LazySingletonValue<>(
                        "odata_maxpagesize",
                        "5000",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<MicrosoftDataverse> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"microsoft-dataverse\"",
                        new TypeReference<MicrosoftDataverse>() {});
    }
}

