/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class SourceNotion {

    /**
     * Choose either OAuth (recommended for Airbyte Cloud) or Access Token. See our &lt;a href='https://docs.airbyte.com/integrations/sources/notion#setup-guide'&gt;docs&lt;/a&gt; for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceNotionAuthenticationMethod> credentials;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    private Optional<? extends SourceNotionNotion> sourceType;

    /**
     * UTC date and time in the format YYYY-MM-DDTHH:MM:SS.000Z. During incremental sync, any data generated before this date will not be replicated. If left blank, the start date will be set to 2 years before the present date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    @JsonCreator
    public SourceNotion(
            @JsonProperty("credentials") Optional<? extends SourceNotionAuthenticationMethod> credentials,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(startDate, "startDate");
        this.credentials = credentials;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceNotion() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Choose either OAuth (recommended for Airbyte Cloud) or Access Token. See our &lt;a href='https://docs.airbyte.com/integrations/sources/notion#setup-guide'&gt;docs&lt;/a&gt; for more information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceNotionAuthenticationMethod> credentials() {
        return (Optional<SourceNotionAuthenticationMethod>) credentials;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceNotionNotion> sourceType() {
        return (Optional<SourceNotionNotion>) sourceType;
    }

    /**
     * UTC date and time in the format YYYY-MM-DDTHH:MM:SS.000Z. During incremental sync, any data generated before this date will not be replicated. If left blank, the start date will be set to 2 years before the present date.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return (Optional<OffsetDateTime>) startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Choose either OAuth (recommended for Airbyte Cloud) or Access Token. See our &lt;a href='https://docs.airbyte.com/integrations/sources/notion#setup-guide'&gt;docs&lt;/a&gt; for more information.
     */
    public SourceNotion withCredentials(SourceNotionAuthenticationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * Choose either OAuth (recommended for Airbyte Cloud) or Access Token. See our &lt;a href='https://docs.airbyte.com/integrations/sources/notion#setup-guide'&gt;docs&lt;/a&gt; for more information.
     */
    public SourceNotion withCredentials(Optional<? extends SourceNotionAuthenticationMethod> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * UTC date and time in the format YYYY-MM-DDTHH:MM:SS.000Z. During incremental sync, any data generated before this date will not be replicated. If left blank, the start date will be set to 2 years before the present date.
     */
    public SourceNotion withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * UTC date and time in the format YYYY-MM-DDTHH:MM:SS.000Z. During incremental sync, any data generated before this date will not be replicated. If left blank, the start date will be set to 2 years before the present date.
     */
    public SourceNotion withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceNotion other = (SourceNotion) o;
        return 
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentials,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceNotion.class,
                "credentials", credentials,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceNotionAuthenticationMethod> credentials = Optional.empty();
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Choose either OAuth (recommended for Airbyte Cloud) or Access Token. See our &lt;a href='https://docs.airbyte.com/integrations/sources/notion#setup-guide'&gt;docs&lt;/a&gt; for more information.
         */
        public Builder credentials(SourceNotionAuthenticationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * Choose either OAuth (recommended for Airbyte Cloud) or Access Token. See our &lt;a href='https://docs.airbyte.com/integrations/sources/notion#setup-guide'&gt;docs&lt;/a&gt; for more information.
         */
        public Builder credentials(Optional<? extends SourceNotionAuthenticationMethod> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * UTC date and time in the format YYYY-MM-DDTHH:MM:SS.000Z. During incremental sync, any data generated before this date will not be replicated. If left blank, the start date will be set to 2 years before the present date.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * UTC date and time in the format YYYY-MM-DDTHH:MM:SS.000Z. During incremental sync, any data generated before this date will not be replicated. If left blank, the start date will be set to 2 years before the present date.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceNotion build() {
            return new SourceNotion(
                credentials,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends SourceNotionNotion>> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"notion\"",
                        new TypeReference<Optional<? extends SourceNotionNotion>>() {});
    }
}

