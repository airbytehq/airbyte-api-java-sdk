/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceRentcast {

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<String> address;

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bath_rooms")
    private Optional<Long> bathRooms;

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bedrooms")
    private Optional<Double> bedrooms;

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_type_")
    private Optional<String> dataType;

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("days_old")
    private Optional<String> daysOld;

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("history_range")
    private Optional<String> historyRange;

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private Optional<String> latitude;

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private Optional<String> longitude;

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("property_type")
    private Optional<String> propertyType;

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radius")
    private Optional<String> radius;

    @JsonProperty("sourceType")
    private Rentcast sourceType;

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipcode")
    private Optional<String> zipcode;

    @JsonCreator
    public SourceRentcast(
            @JsonProperty("address") Optional<String> address,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("bath_rooms") Optional<Long> bathRooms,
            @JsonProperty("bedrooms") Optional<Double> bedrooms,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("data_type_") Optional<String> dataType,
            @JsonProperty("days_old") Optional<String> daysOld,
            @JsonProperty("history_range") Optional<String> historyRange,
            @JsonProperty("latitude") Optional<String> latitude,
            @JsonProperty("longitude") Optional<String> longitude,
            @JsonProperty("property_type") Optional<String> propertyType,
            @JsonProperty("radius") Optional<String> radius,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("zipcode") Optional<String> zipcode) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(bathRooms, "bathRooms");
        Utils.checkNotNull(bedrooms, "bedrooms");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(daysOld, "daysOld");
        Utils.checkNotNull(historyRange, "historyRange");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(propertyType, "propertyType");
        Utils.checkNotNull(radius, "radius");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(zipcode, "zipcode");
        this.address = address;
        this.apiKey = apiKey;
        this.bathRooms = bathRooms;
        this.bedrooms = bedrooms;
        this.city = city;
        this.dataType = dataType;
        this.daysOld = daysOld;
        this.historyRange = historyRange;
        this.latitude = latitude;
        this.longitude = longitude;
        this.propertyType = propertyType;
        this.radius = radius;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.state = state;
        this.status = status;
        this.zipcode = zipcode;
    }
    
    public SourceRentcast(
            String apiKey) {
        this(Optional.empty(), apiKey, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    @JsonIgnore
    public Optional<String> address() {
        return address;
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    @JsonIgnore
    public Optional<Long> bathRooms() {
        return bathRooms;
    }

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    @JsonIgnore
    public Optional<Double> bedrooms() {
        return bedrooms;
    }

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    @JsonIgnore
    public Optional<String> dataType() {
        return dataType;
    }

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    @JsonIgnore
    public Optional<String> daysOld() {
        return daysOld;
    }

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    @JsonIgnore
    public Optional<String> historyRange() {
        return historyRange;
    }

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @JsonIgnore
    public Optional<String> latitude() {
        return latitude;
    }

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @JsonIgnore
    public Optional<String> longitude() {
        return longitude;
    }

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    @JsonIgnore
    public Optional<String> propertyType() {
        return propertyType;
    }

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    @JsonIgnore
    public Optional<String> radius() {
        return radius;
    }

    @JsonIgnore
    public Rentcast sourceType() {
        return sourceType;
    }

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    @JsonIgnore
    public Optional<String> zipcode() {
        return zipcode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    public SourceRentcast withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    public SourceRentcast withAddress(Optional<String> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public SourceRentcast withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    public SourceRentcast withBathRooms(long bathRooms) {
        Utils.checkNotNull(bathRooms, "bathRooms");
        this.bathRooms = Optional.ofNullable(bathRooms);
        return this;
    }

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    public SourceRentcast withBathRooms(Optional<Long> bathRooms) {
        Utils.checkNotNull(bathRooms, "bathRooms");
        this.bathRooms = bathRooms;
        return this;
    }

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    public SourceRentcast withBedrooms(double bedrooms) {
        Utils.checkNotNull(bedrooms, "bedrooms");
        this.bedrooms = Optional.ofNullable(bedrooms);
        return this;
    }

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    public SourceRentcast withBedrooms(Optional<Double> bedrooms) {
        Utils.checkNotNull(bedrooms, "bedrooms");
        this.bedrooms = bedrooms;
        return this;
    }

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    public SourceRentcast withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    public SourceRentcast withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    public SourceRentcast withDataType(String dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = Optional.ofNullable(dataType);
        return this;
    }

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    public SourceRentcast withDataType(Optional<String> dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    public SourceRentcast withDaysOld(String daysOld) {
        Utils.checkNotNull(daysOld, "daysOld");
        this.daysOld = Optional.ofNullable(daysOld);
        return this;
    }

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    public SourceRentcast withDaysOld(Optional<String> daysOld) {
        Utils.checkNotNull(daysOld, "daysOld");
        this.daysOld = daysOld;
        return this;
    }

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    public SourceRentcast withHistoryRange(String historyRange) {
        Utils.checkNotNull(historyRange, "historyRange");
        this.historyRange = Optional.ofNullable(historyRange);
        return this;
    }

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    public SourceRentcast withHistoryRange(Optional<String> historyRange) {
        Utils.checkNotNull(historyRange, "historyRange");
        this.historyRange = historyRange;
        return this;
    }

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLatitude(String latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = Optional.ofNullable(latitude);
        return this;
    }

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLatitude(Optional<String> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLongitude(String longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = Optional.ofNullable(longitude);
        return this;
    }

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLongitude(Optional<String> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    public SourceRentcast withPropertyType(String propertyType) {
        Utils.checkNotNull(propertyType, "propertyType");
        this.propertyType = Optional.ofNullable(propertyType);
        return this;
    }

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    public SourceRentcast withPropertyType(Optional<String> propertyType) {
        Utils.checkNotNull(propertyType, "propertyType");
        this.propertyType = propertyType;
        return this;
    }

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    public SourceRentcast withRadius(String radius) {
        Utils.checkNotNull(radius, "radius");
        this.radius = Optional.ofNullable(radius);
        return this;
    }

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    public SourceRentcast withRadius(Optional<String> radius) {
        Utils.checkNotNull(radius, "radius");
        this.radius = radius;
        return this;
    }

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    public SourceRentcast withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    public SourceRentcast withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    public SourceRentcast withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    public SourceRentcast withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    public SourceRentcast withZipcode(String zipcode) {
        Utils.checkNotNull(zipcode, "zipcode");
        this.zipcode = Optional.ofNullable(zipcode);
        return this;
    }

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    public SourceRentcast withZipcode(Optional<String> zipcode) {
        Utils.checkNotNull(zipcode, "zipcode");
        this.zipcode = zipcode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceRentcast other = (SourceRentcast) o;
        return 
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.bathRooms, other.bathRooms) &&
            Objects.deepEquals(this.bedrooms, other.bedrooms) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.dataType, other.dataType) &&
            Objects.deepEquals(this.daysOld, other.daysOld) &&
            Objects.deepEquals(this.historyRange, other.historyRange) &&
            Objects.deepEquals(this.latitude, other.latitude) &&
            Objects.deepEquals(this.longitude, other.longitude) &&
            Objects.deepEquals(this.propertyType, other.propertyType) &&
            Objects.deepEquals(this.radius, other.radius) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.zipcode, other.zipcode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address,
            apiKey,
            bathRooms,
            bedrooms,
            city,
            dataType,
            daysOld,
            historyRange,
            latitude,
            longitude,
            propertyType,
            radius,
            sourceType,
            state,
            status,
            zipcode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceRentcast.class,
                "address", address,
                "apiKey", apiKey,
                "bathRooms", bathRooms,
                "bedrooms", bedrooms,
                "city", city,
                "dataType", dataType,
                "daysOld", daysOld,
                "historyRange", historyRange,
                "latitude", latitude,
                "longitude", longitude,
                "propertyType", propertyType,
                "radius", radius,
                "sourceType", sourceType,
                "state", state,
                "status", status,
                "zipcode", zipcode);
    }
    
    public final static class Builder {
 
        private Optional<String> address = Optional.empty();
 
        private String apiKey;
 
        private Optional<Long> bathRooms = Optional.empty();
 
        private Optional<Double> bedrooms = Optional.empty();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> dataType = Optional.empty();
 
        private Optional<String> daysOld = Optional.empty();
 
        private Optional<String> historyRange = Optional.empty();
 
        private Optional<String> latitude = Optional.empty();
 
        private Optional<String> longitude = Optional.empty();
 
        private Optional<String> propertyType = Optional.empty();
 
        private Optional<String> radius = Optional.empty();
 
        private Optional<String> state = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<String> zipcode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
         */
        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
         */
        public Builder address(Optional<String> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
         */
        public Builder bathRooms(long bathRooms) {
            Utils.checkNotNull(bathRooms, "bathRooms");
            this.bathRooms = Optional.ofNullable(bathRooms);
            return this;
        }

        /**
         * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
         */
        public Builder bathRooms(Optional<Long> bathRooms) {
            Utils.checkNotNull(bathRooms, "bathRooms");
            this.bathRooms = bathRooms;
            return this;
        }

        /**
         * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
         */
        public Builder bedrooms(double bedrooms) {
            Utils.checkNotNull(bedrooms, "bedrooms");
            this.bedrooms = Optional.ofNullable(bedrooms);
            return this;
        }

        /**
         * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
         */
        public Builder bedrooms(Optional<Double> bedrooms) {
            Utils.checkNotNull(bedrooms, "bedrooms");
            this.bedrooms = bedrooms;
            return this;
        }

        /**
         * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
         */
        public Builder dataType(String dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = Optional.ofNullable(dataType);
            return this;
        }

        /**
         * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
         */
        public Builder dataType(Optional<String> dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
         */
        public Builder daysOld(String daysOld) {
            Utils.checkNotNull(daysOld, "daysOld");
            this.daysOld = Optional.ofNullable(daysOld);
            return this;
        }

        /**
         * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
         */
        public Builder daysOld(Optional<String> daysOld) {
            Utils.checkNotNull(daysOld, "daysOld");
            this.daysOld = daysOld;
            return this;
        }

        /**
         * The time range for historical record entries, in months. Defaults to 12 if not provided
         */
        public Builder historyRange(String historyRange) {
            Utils.checkNotNull(historyRange, "historyRange");
            this.historyRange = Optional.ofNullable(historyRange);
            return this;
        }

        /**
         * The time range for historical record entries, in months. Defaults to 12 if not provided
         */
        public Builder historyRange(Optional<String> historyRange) {
            Utils.checkNotNull(historyRange, "historyRange");
            this.historyRange = historyRange;
            return this;
        }

        /**
         * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder latitude(String latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = Optional.ofNullable(latitude);
            return this;
        }

        /**
         * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder latitude(Optional<String> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        /**
         * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder longitude(String longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = Optional.ofNullable(longitude);
            return this;
        }

        /**
         * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder longitude(Optional<String> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        /**
         * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
         */
        public Builder propertyType(String propertyType) {
            Utils.checkNotNull(propertyType, "propertyType");
            this.propertyType = Optional.ofNullable(propertyType);
            return this;
        }

        /**
         * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
         */
        public Builder propertyType(Optional<String> propertyType) {
            Utils.checkNotNull(propertyType, "propertyType");
            this.propertyType = propertyType;
            return this;
        }

        /**
         * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
         */
        public Builder radius(String radius) {
            Utils.checkNotNull(radius, "radius");
            this.radius = Optional.ofNullable(radius);
            return this;
        }

        /**
         * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
         */
        public Builder radius(Optional<String> radius) {
            Utils.checkNotNull(radius, "radius");
            this.radius = radius;
            return this;
        }

        /**
         * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * The current listing status, used to search for listings matching this criteria : Active or Inactive
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current listing status, used to search for listings matching this criteria : Active or Inactive
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The 5-digit zip code, used to search for listings in a specific zip code
         */
        public Builder zipcode(String zipcode) {
            Utils.checkNotNull(zipcode, "zipcode");
            this.zipcode = Optional.ofNullable(zipcode);
            return this;
        }

        /**
         * The 5-digit zip code, used to search for listings in a specific zip code
         */
        public Builder zipcode(Optional<String> zipcode) {
            Utils.checkNotNull(zipcode, "zipcode");
            this.zipcode = zipcode;
            return this;
        }
        
        public SourceRentcast build() {
            return new SourceRentcast(
                address,
                apiKey,
                bathRooms,
                bedrooms,
                city,
                dataType,
                daysOld,
                historyRange,
                latitude,
                longitude,
                propertyType,
                radius,
                state,
                status,
                zipcode);
        }

        private static final LazySingletonValue<Rentcast> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"rentcast\"",
                        new TypeReference<Rentcast>() {});
    }
}

