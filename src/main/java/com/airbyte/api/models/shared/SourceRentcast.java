/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceRentcast {

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends String> address;

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bath_rooms")
    private Optional<? extends Long> bathRooms;

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bedrooms")
    private Optional<? extends Double> bedrooms;

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<? extends String> city;

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_type_")
    private Optional<? extends String> dataType;

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("days_old")
    private Optional<? extends String> daysOld;

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("history_range")
    private Optional<? extends String> historyRange;

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private Optional<? extends String> latitude;

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private Optional<? extends String> longitude;

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("property_type")
    private Optional<? extends String> propertyType;

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radius")
    private Optional<? extends String> radius;

    @JsonProperty("sourceType")
    private Rentcast sourceType;

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends String> state;

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends String> status;

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipcode")
    private Optional<? extends String> zipcode;

    @JsonCreator
    public SourceRentcast(
            @JsonProperty("address") Optional<? extends String> address,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("bath_rooms") Optional<? extends Long> bathRooms,
            @JsonProperty("bedrooms") Optional<? extends Double> bedrooms,
            @JsonProperty("city") Optional<? extends String> city,
            @JsonProperty("data_type_") Optional<? extends String> dataType,
            @JsonProperty("days_old") Optional<? extends String> daysOld,
            @JsonProperty("history_range") Optional<? extends String> historyRange,
            @JsonProperty("latitude") Optional<? extends String> latitude,
            @JsonProperty("longitude") Optional<? extends String> longitude,
            @JsonProperty("property_type") Optional<? extends String> propertyType,
            @JsonProperty("radius") Optional<? extends String> radius,
            @JsonProperty("state") Optional<? extends String> state,
            @JsonProperty("status") Optional<? extends String> status,
            @JsonProperty("zipcode") Optional<? extends String> zipcode) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(bathRooms, "bathRooms");
        Utils.checkNotNull(bedrooms, "bedrooms");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(daysOld, "daysOld");
        Utils.checkNotNull(historyRange, "historyRange");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(propertyType, "propertyType");
        Utils.checkNotNull(radius, "radius");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(zipcode, "zipcode");
        this.address = address;
        this.apiKey = apiKey;
        this.bathRooms = bathRooms;
        this.bedrooms = bedrooms;
        this.city = city;
        this.dataType = dataType;
        this.daysOld = daysOld;
        this.historyRange = historyRange;
        this.latitude = latitude;
        this.longitude = longitude;
        this.propertyType = propertyType;
        this.radius = radius;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.state = state;
        this.status = status;
        this.zipcode = zipcode;
    }
    
    public SourceRentcast(
            String apiKey) {
        this(Optional.empty(), apiKey, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> address() {
        return (Optional<String>) address;
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> bathRooms() {
        return (Optional<Long>) bathRooms;
    }

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> bedrooms() {
        return (Optional<Double>) bedrooms;
    }

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> city() {
        return (Optional<String>) city;
    }

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> dataType() {
        return (Optional<String>) dataType;
    }

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> daysOld() {
        return (Optional<String>) daysOld;
    }

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> historyRange() {
        return (Optional<String>) historyRange;
    }

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> latitude() {
        return (Optional<String>) latitude;
    }

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> longitude() {
        return (Optional<String>) longitude;
    }

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> propertyType() {
        return (Optional<String>) propertyType;
    }

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> radius() {
        return (Optional<String>) radius;
    }

    @JsonIgnore
    public Rentcast sourceType() {
        return sourceType;
    }

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> state() {
        return (Optional<String>) state;
    }

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> status() {
        return (Optional<String>) status;
    }

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> zipcode() {
        return (Optional<String>) zipcode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    public SourceRentcast withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    public SourceRentcast withAddress(Optional<? extends String> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public SourceRentcast withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    public SourceRentcast withBathRooms(long bathRooms) {
        Utils.checkNotNull(bathRooms, "bathRooms");
        this.bathRooms = Optional.ofNullable(bathRooms);
        return this;
    }

    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    public SourceRentcast withBathRooms(Optional<? extends Long> bathRooms) {
        Utils.checkNotNull(bathRooms, "bathRooms");
        this.bathRooms = bathRooms;
        return this;
    }

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    public SourceRentcast withBedrooms(double bedrooms) {
        Utils.checkNotNull(bedrooms, "bedrooms");
        this.bedrooms = Optional.ofNullable(bedrooms);
        return this;
    }

    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    public SourceRentcast withBedrooms(Optional<? extends Double> bedrooms) {
        Utils.checkNotNull(bedrooms, "bedrooms");
        this.bedrooms = bedrooms;
        return this;
    }

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    public SourceRentcast withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    public SourceRentcast withCity(Optional<? extends String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    public SourceRentcast withDataType(String dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = Optional.ofNullable(dataType);
        return this;
    }

    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    public SourceRentcast withDataType(Optional<? extends String> dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    public SourceRentcast withDaysOld(String daysOld) {
        Utils.checkNotNull(daysOld, "daysOld");
        this.daysOld = Optional.ofNullable(daysOld);
        return this;
    }

    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    public SourceRentcast withDaysOld(Optional<? extends String> daysOld) {
        Utils.checkNotNull(daysOld, "daysOld");
        this.daysOld = daysOld;
        return this;
    }

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    public SourceRentcast withHistoryRange(String historyRange) {
        Utils.checkNotNull(historyRange, "historyRange");
        this.historyRange = Optional.ofNullable(historyRange);
        return this;
    }

    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    public SourceRentcast withHistoryRange(Optional<? extends String> historyRange) {
        Utils.checkNotNull(historyRange, "historyRange");
        this.historyRange = historyRange;
        return this;
    }

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLatitude(String latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = Optional.ofNullable(latitude);
        return this;
    }

    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLatitude(Optional<? extends String> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLongitude(String longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = Optional.ofNullable(longitude);
        return this;
    }

    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    public SourceRentcast withLongitude(Optional<? extends String> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    public SourceRentcast withPropertyType(String propertyType) {
        Utils.checkNotNull(propertyType, "propertyType");
        this.propertyType = Optional.ofNullable(propertyType);
        return this;
    }

    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    public SourceRentcast withPropertyType(Optional<? extends String> propertyType) {
        Utils.checkNotNull(propertyType, "propertyType");
        this.propertyType = propertyType;
        return this;
    }

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    public SourceRentcast withRadius(String radius) {
        Utils.checkNotNull(radius, "radius");
        this.radius = Optional.ofNullable(radius);
        return this;
    }

    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    public SourceRentcast withRadius(Optional<? extends String> radius) {
        Utils.checkNotNull(radius, "radius");
        this.radius = radius;
        return this;
    }

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    public SourceRentcast withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    public SourceRentcast withState(Optional<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    public SourceRentcast withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    public SourceRentcast withStatus(Optional<? extends String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    public SourceRentcast withZipcode(String zipcode) {
        Utils.checkNotNull(zipcode, "zipcode");
        this.zipcode = Optional.ofNullable(zipcode);
        return this;
    }

    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    public SourceRentcast withZipcode(Optional<? extends String> zipcode) {
        Utils.checkNotNull(zipcode, "zipcode");
        this.zipcode = zipcode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceRentcast other = (SourceRentcast) o;
        return 
            java.util.Objects.deepEquals(this.address, other.address) &&
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.bathRooms, other.bathRooms) &&
            java.util.Objects.deepEquals(this.bedrooms, other.bedrooms) &&
            java.util.Objects.deepEquals(this.city, other.city) &&
            java.util.Objects.deepEquals(this.dataType, other.dataType) &&
            java.util.Objects.deepEquals(this.daysOld, other.daysOld) &&
            java.util.Objects.deepEquals(this.historyRange, other.historyRange) &&
            java.util.Objects.deepEquals(this.latitude, other.latitude) &&
            java.util.Objects.deepEquals(this.longitude, other.longitude) &&
            java.util.Objects.deepEquals(this.propertyType, other.propertyType) &&
            java.util.Objects.deepEquals(this.radius, other.radius) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.zipcode, other.zipcode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            address,
            apiKey,
            bathRooms,
            bedrooms,
            city,
            dataType,
            daysOld,
            historyRange,
            latitude,
            longitude,
            propertyType,
            radius,
            sourceType,
            state,
            status,
            zipcode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceRentcast.class,
                "address", address,
                "apiKey", apiKey,
                "bathRooms", bathRooms,
                "bedrooms", bedrooms,
                "city", city,
                "dataType", dataType,
                "daysOld", daysOld,
                "historyRange", historyRange,
                "latitude", latitude,
                "longitude", longitude,
                "propertyType", propertyType,
                "radius", radius,
                "sourceType", sourceType,
                "state", state,
                "status", status,
                "zipcode", zipcode);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> address = Optional.empty();
 
        private String apiKey;
 
        private Optional<? extends Long> bathRooms = Optional.empty();
 
        private Optional<? extends Double> bedrooms = Optional.empty();
 
        private Optional<? extends String> city = Optional.empty();
 
        private Optional<? extends String> dataType = Optional.empty();
 
        private Optional<? extends String> daysOld = Optional.empty();
 
        private Optional<? extends String> historyRange = Optional.empty();
 
        private Optional<? extends String> latitude = Optional.empty();
 
        private Optional<? extends String> longitude = Optional.empty();
 
        private Optional<? extends String> propertyType = Optional.empty();
 
        private Optional<? extends String> radius = Optional.empty();
 
        private Optional<? extends String> state = Optional.empty();
 
        private Optional<? extends String> status = Optional.empty();
 
        private Optional<? extends String> zipcode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
         */
        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
         */
        public Builder address(Optional<? extends String> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
         */
        public Builder bathRooms(long bathRooms) {
            Utils.checkNotNull(bathRooms, "bathRooms");
            this.bathRooms = Optional.ofNullable(bathRooms);
            return this;
        }

        /**
         * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
         */
        public Builder bathRooms(Optional<? extends Long> bathRooms) {
            Utils.checkNotNull(bathRooms, "bathRooms");
            this.bathRooms = bathRooms;
            return this;
        }

        /**
         * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
         */
        public Builder bedrooms(double bedrooms) {
            Utils.checkNotNull(bedrooms, "bedrooms");
            this.bedrooms = Optional.ofNullable(bedrooms);
            return this;
        }

        /**
         * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
         */
        public Builder bedrooms(Optional<? extends Double> bedrooms) {
            Utils.checkNotNull(bedrooms, "bedrooms");
            this.bedrooms = bedrooms;
            return this;
        }

        /**
         * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
         */
        public Builder city(Optional<? extends String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
         */
        public Builder dataType(String dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = Optional.ofNullable(dataType);
            return this;
        }

        /**
         * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
         */
        public Builder dataType(Optional<? extends String> dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
         */
        public Builder daysOld(String daysOld) {
            Utils.checkNotNull(daysOld, "daysOld");
            this.daysOld = Optional.ofNullable(daysOld);
            return this;
        }

        /**
         * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
         */
        public Builder daysOld(Optional<? extends String> daysOld) {
            Utils.checkNotNull(daysOld, "daysOld");
            this.daysOld = daysOld;
            return this;
        }

        /**
         * The time range for historical record entries, in months. Defaults to 12 if not provided
         */
        public Builder historyRange(String historyRange) {
            Utils.checkNotNull(historyRange, "historyRange");
            this.historyRange = Optional.ofNullable(historyRange);
            return this;
        }

        /**
         * The time range for historical record entries, in months. Defaults to 12 if not provided
         */
        public Builder historyRange(Optional<? extends String> historyRange) {
            Utils.checkNotNull(historyRange, "historyRange");
            this.historyRange = historyRange;
            return this;
        }

        /**
         * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder latitude(String latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = Optional.ofNullable(latitude);
            return this;
        }

        /**
         * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder latitude(Optional<? extends String> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        /**
         * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder longitude(String longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = Optional.ofNullable(longitude);
            return this;
        }

        /**
         * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
         */
        public Builder longitude(Optional<? extends String> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        /**
         * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
         */
        public Builder propertyType(String propertyType) {
            Utils.checkNotNull(propertyType, "propertyType");
            this.propertyType = Optional.ofNullable(propertyType);
            return this;
        }

        /**
         * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
         */
        public Builder propertyType(Optional<? extends String> propertyType) {
            Utils.checkNotNull(propertyType, "propertyType");
            this.propertyType = propertyType;
            return this;
        }

        /**
         * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
         */
        public Builder radius(String radius) {
            Utils.checkNotNull(radius, "radius");
            this.radius = Optional.ofNullable(radius);
            return this;
        }

        /**
         * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
         */
        public Builder radius(Optional<? extends String> radius) {
            Utils.checkNotNull(radius, "radius");
            this.radius = radius;
            return this;
        }

        /**
         * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
         */
        public Builder state(Optional<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * The current listing status, used to search for listings matching this criteria : Active or Inactive
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current listing status, used to search for listings matching this criteria : Active or Inactive
         */
        public Builder status(Optional<? extends String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The 5-digit zip code, used to search for listings in a specific zip code
         */
        public Builder zipcode(String zipcode) {
            Utils.checkNotNull(zipcode, "zipcode");
            this.zipcode = Optional.ofNullable(zipcode);
            return this;
        }

        /**
         * The 5-digit zip code, used to search for listings in a specific zip code
         */
        public Builder zipcode(Optional<? extends String> zipcode) {
            Utils.checkNotNull(zipcode, "zipcode");
            this.zipcode = zipcode;
            return this;
        }
        
        public SourceRentcast build() {
            return new SourceRentcast(
                address,
                apiKey,
                bathRooms,
                bedrooms,
                city,
                dataType,
                daysOld,
                historyRange,
                latitude,
                longitude,
                propertyType,
                radius,
                state,
                status,
                zipcode);
        }

        private static final LazySingletonValue<Rentcast> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"rentcast\"",
                        new TypeReference<Rentcast>() {});
    }
}

