/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class CreateDefinitionRequest {

    @JsonProperty("dockerImageTag")
    private String dockerImageTag;

    @JsonProperty("dockerRepository")
    private String dockerRepository;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentationUrl")
    private Optional<String> documentationUrl;

    @JsonProperty("name")
    private String name;

    @JsonCreator
    public CreateDefinitionRequest(
            @JsonProperty("dockerImageTag") String dockerImageTag,
            @JsonProperty("dockerRepository") String dockerRepository,
            @JsonProperty("documentationUrl") Optional<String> documentationUrl,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(dockerImageTag, "dockerImageTag");
        Utils.checkNotNull(dockerRepository, "dockerRepository");
        Utils.checkNotNull(documentationUrl, "documentationUrl");
        Utils.checkNotNull(name, "name");
        this.dockerImageTag = dockerImageTag;
        this.dockerRepository = dockerRepository;
        this.documentationUrl = documentationUrl;
        this.name = name;
    }
    
    public CreateDefinitionRequest(
            String dockerImageTag,
            String dockerRepository,
            String name) {
        this(dockerImageTag, dockerRepository, Optional.empty(), name);
    }

    @JsonIgnore
    public String dockerImageTag() {
        return dockerImageTag;
    }

    @JsonIgnore
    public String dockerRepository() {
        return dockerRepository;
    }

    @JsonIgnore
    public Optional<String> documentationUrl() {
        return documentationUrl;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CreateDefinitionRequest withDockerImageTag(String dockerImageTag) {
        Utils.checkNotNull(dockerImageTag, "dockerImageTag");
        this.dockerImageTag = dockerImageTag;
        return this;
    }

    public CreateDefinitionRequest withDockerRepository(String dockerRepository) {
        Utils.checkNotNull(dockerRepository, "dockerRepository");
        this.dockerRepository = dockerRepository;
        return this;
    }

    public CreateDefinitionRequest withDocumentationUrl(String documentationUrl) {
        Utils.checkNotNull(documentationUrl, "documentationUrl");
        this.documentationUrl = Optional.ofNullable(documentationUrl);
        return this;
    }

    public CreateDefinitionRequest withDocumentationUrl(Optional<String> documentationUrl) {
        Utils.checkNotNull(documentationUrl, "documentationUrl");
        this.documentationUrl = documentationUrl;
        return this;
    }

    public CreateDefinitionRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDefinitionRequest other = (CreateDefinitionRequest) o;
        return 
            Objects.deepEquals(this.dockerImageTag, other.dockerImageTag) &&
            Objects.deepEquals(this.dockerRepository, other.dockerRepository) &&
            Objects.deepEquals(this.documentationUrl, other.documentationUrl) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dockerImageTag,
            dockerRepository,
            documentationUrl,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDefinitionRequest.class,
                "dockerImageTag", dockerImageTag,
                "dockerRepository", dockerRepository,
                "documentationUrl", documentationUrl,
                "name", name);
    }
    
    public final static class Builder {
 
        private String dockerImageTag;
 
        private String dockerRepository;
 
        private Optional<String> documentationUrl = Optional.empty();
 
        private String name;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dockerImageTag(String dockerImageTag) {
            Utils.checkNotNull(dockerImageTag, "dockerImageTag");
            this.dockerImageTag = dockerImageTag;
            return this;
        }

        public Builder dockerRepository(String dockerRepository) {
            Utils.checkNotNull(dockerRepository, "dockerRepository");
            this.dockerRepository = dockerRepository;
            return this;
        }

        public Builder documentationUrl(String documentationUrl) {
            Utils.checkNotNull(documentationUrl, "documentationUrl");
            this.documentationUrl = Optional.ofNullable(documentationUrl);
            return this;
        }

        public Builder documentationUrl(Optional<String> documentationUrl) {
            Utils.checkNotNull(documentationUrl, "documentationUrl");
            this.documentationUrl = documentationUrl;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public CreateDefinitionRequest build() {
            return new CreateDefinitionRequest(
                dockerImageTag,
                dockerRepository,
                documentationUrl,
                name);
        }
    }
}
