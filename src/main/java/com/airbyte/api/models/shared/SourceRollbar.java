/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;

public class SourceRollbar {

    @JsonProperty("account_access_token")
    private String accountAccessToken;

    @JsonProperty("project_access_token")
    private String projectAccessToken;

    @JsonProperty("sourceType")
    private Rollbar sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceRollbar(
            @JsonProperty("account_access_token") String accountAccessToken,
            @JsonProperty("project_access_token") String projectAccessToken,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(accountAccessToken, "accountAccessToken");
        Utils.checkNotNull(projectAccessToken, "projectAccessToken");
        Utils.checkNotNull(startDate, "startDate");
        this.accountAccessToken = accountAccessToken;
        this.projectAccessToken = projectAccessToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    @JsonIgnore
    public String accountAccessToken() {
        return accountAccessToken;
    }

    @JsonIgnore
    public String projectAccessToken() {
        return projectAccessToken;
    }

    @JsonIgnore
    public Rollbar sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceRollbar withAccountAccessToken(String accountAccessToken) {
        Utils.checkNotNull(accountAccessToken, "accountAccessToken");
        this.accountAccessToken = accountAccessToken;
        return this;
    }

    public SourceRollbar withProjectAccessToken(String projectAccessToken) {
        Utils.checkNotNull(projectAccessToken, "projectAccessToken");
        this.projectAccessToken = projectAccessToken;
        return this;
    }

    public SourceRollbar withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceRollbar other = (SourceRollbar) o;
        return 
            java.util.Objects.deepEquals(this.accountAccessToken, other.accountAccessToken) &&
            java.util.Objects.deepEquals(this.projectAccessToken, other.projectAccessToken) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountAccessToken,
            projectAccessToken,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceRollbar.class,
                "accountAccessToken", accountAccessToken,
                "projectAccessToken", projectAccessToken,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String accountAccessToken;
 
        private String projectAccessToken;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountAccessToken(String accountAccessToken) {
            Utils.checkNotNull(accountAccessToken, "accountAccessToken");
            this.accountAccessToken = accountAccessToken;
            return this;
        }

        public Builder projectAccessToken(String projectAccessToken) {
            Utils.checkNotNull(projectAccessToken, "projectAccessToken");
            this.projectAccessToken = projectAccessToken;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceRollbar build() {
            return new SourceRollbar(
                accountAccessToken,
                projectAccessToken,
                startDate);
        }

        private static final LazySingletonValue<Rollbar> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"rollbar\"",
                        new TypeReference<Rollbar>() {});
    }
}

