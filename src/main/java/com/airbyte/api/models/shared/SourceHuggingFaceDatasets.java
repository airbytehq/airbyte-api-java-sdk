/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceHuggingFaceDatasets {

    @JsonProperty("dataset_name")
    private String datasetName;

    /**
     * Splits to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset_splits")
    private Optional<? extends List<Object>> datasetSplits;

    /**
     * Dataset Subsets to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset_subsets")
    private Optional<? extends List<Object>> datasetSubsets;

    @JsonProperty("sourceType")
    private HuggingFaceDatasets sourceType;

    @JsonCreator
    public SourceHuggingFaceDatasets(
            @JsonProperty("dataset_name") String datasetName,
            @JsonProperty("dataset_splits") Optional<? extends List<Object>> datasetSplits,
            @JsonProperty("dataset_subsets") Optional<? extends List<Object>> datasetSubsets) {
        Utils.checkNotNull(datasetName, "datasetName");
        Utils.checkNotNull(datasetSplits, "datasetSplits");
        Utils.checkNotNull(datasetSubsets, "datasetSubsets");
        this.datasetName = datasetName;
        this.datasetSplits = datasetSplits;
        this.datasetSubsets = datasetSubsets;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceHuggingFaceDatasets(
            String datasetName) {
        this(datasetName, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String datasetName() {
        return datasetName;
    }

    /**
     * Splits to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> datasetSplits() {
        return (Optional<List<Object>>) datasetSplits;
    }

    /**
     * Dataset Subsets to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> datasetSubsets() {
        return (Optional<List<Object>>) datasetSubsets;
    }

    @JsonIgnore
    public HuggingFaceDatasets sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceHuggingFaceDatasets withDatasetName(String datasetName) {
        Utils.checkNotNull(datasetName, "datasetName");
        this.datasetName = datasetName;
        return this;
    }

    /**
     * Splits to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    public SourceHuggingFaceDatasets withDatasetSplits(List<Object> datasetSplits) {
        Utils.checkNotNull(datasetSplits, "datasetSplits");
        this.datasetSplits = Optional.ofNullable(datasetSplits);
        return this;
    }

    /**
     * Splits to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    public SourceHuggingFaceDatasets withDatasetSplits(Optional<? extends List<Object>> datasetSplits) {
        Utils.checkNotNull(datasetSplits, "datasetSplits");
        this.datasetSplits = datasetSplits;
        return this;
    }

    /**
     * Dataset Subsets to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    public SourceHuggingFaceDatasets withDatasetSubsets(List<Object> datasetSubsets) {
        Utils.checkNotNull(datasetSubsets, "datasetSubsets");
        this.datasetSubsets = Optional.ofNullable(datasetSubsets);
        return this;
    }

    /**
     * Dataset Subsets to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    public SourceHuggingFaceDatasets withDatasetSubsets(Optional<? extends List<Object>> datasetSubsets) {
        Utils.checkNotNull(datasetSubsets, "datasetSubsets");
        this.datasetSubsets = datasetSubsets;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceHuggingFaceDatasets other = (SourceHuggingFaceDatasets) o;
        return 
            Objects.deepEquals(this.datasetName, other.datasetName) &&
            Objects.deepEquals(this.datasetSplits, other.datasetSplits) &&
            Objects.deepEquals(this.datasetSubsets, other.datasetSubsets) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datasetName,
            datasetSplits,
            datasetSubsets,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceHuggingFaceDatasets.class,
                "datasetName", datasetName,
                "datasetSplits", datasetSplits,
                "datasetSubsets", datasetSubsets,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String datasetName;
 
        private Optional<? extends List<Object>> datasetSplits = Optional.empty();
 
        private Optional<? extends List<Object>> datasetSubsets = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder datasetName(String datasetName) {
            Utils.checkNotNull(datasetName, "datasetName");
            this.datasetName = datasetName;
            return this;
        }

        /**
         * Splits to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
         */
        public Builder datasetSplits(List<Object> datasetSplits) {
            Utils.checkNotNull(datasetSplits, "datasetSplits");
            this.datasetSplits = Optional.ofNullable(datasetSplits);
            return this;
        }

        /**
         * Splits to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
         */
        public Builder datasetSplits(Optional<? extends List<Object>> datasetSplits) {
            Utils.checkNotNull(datasetSplits, "datasetSplits");
            this.datasetSplits = datasetSplits;
            return this;
        }

        /**
         * Dataset Subsets to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
         */
        public Builder datasetSubsets(List<Object> datasetSubsets) {
            Utils.checkNotNull(datasetSubsets, "datasetSubsets");
            this.datasetSubsets = Optional.ofNullable(datasetSubsets);
            return this;
        }

        /**
         * Dataset Subsets to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
         */
        public Builder datasetSubsets(Optional<? extends List<Object>> datasetSubsets) {
            Utils.checkNotNull(datasetSubsets, "datasetSubsets");
            this.datasetSubsets = datasetSubsets;
            return this;
        }
        
        public SourceHuggingFaceDatasets build() {
            return new SourceHuggingFaceDatasets(
                datasetName,
                datasetSplits,
                datasetSubsets);
        }

        private static final LazySingletonValue<HuggingFaceDatasets> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"hugging-face-datasets\"",
                        new TypeReference<HuggingFaceDatasets>() {});
    }
}
