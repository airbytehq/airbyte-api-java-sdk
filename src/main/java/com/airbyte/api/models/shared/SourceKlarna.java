/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceKlarna {

    /**
     * A string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs (https://developers.klarna.com/api/#authentication)
     */
    @JsonProperty("password")
    private String password;

    /**
     * Propertie defining if connector is used against playground or production environment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playground")
    private Optional<? extends Boolean> playground;

    /**
     * Base url region (For playground eu https://docs.klarna.com/klarna-payments/api/payments-api/#tag/API-URLs). Supported 'eu', 'us', 'oc'
     */
    @JsonProperty("region")
    private SourceKlarnaRegion region;

    @JsonProperty("sourceType")
    private Klarna sourceType;

    /**
     * Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string (https://developers.klarna.com/api/#authentication)
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourceKlarna(
            @JsonProperty("password") String password,
            @JsonProperty("playground") Optional<? extends Boolean> playground,
            @JsonProperty("region") SourceKlarnaRegion region,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(playground, "playground");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(username, "username");
        this.password = password;
        this.playground = playground;
        this.region = region;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.username = username;
    }
    
    public SourceKlarna(
            String password,
            SourceKlarnaRegion region,
            String username) {
        this(password, Optional.empty(), region, username);
    }

    /**
     * A string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs (https://developers.klarna.com/api/#authentication)
     */
    @JsonIgnore
    public String password() {
        return password;
    }

    /**
     * Propertie defining if connector is used against playground or production environment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> playground() {
        return (Optional<Boolean>) playground;
    }

    /**
     * Base url region (For playground eu https://docs.klarna.com/klarna-payments/api/payments-api/#tag/API-URLs). Supported 'eu', 'us', 'oc'
     */
    @JsonIgnore
    public SourceKlarnaRegion region() {
        return region;
    }

    @JsonIgnore
    public Klarna sourceType() {
        return sourceType;
    }

    /**
     * Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string (https://developers.klarna.com/api/#authentication)
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs (https://developers.klarna.com/api/#authentication)
     */
    public SourceKlarna withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Propertie defining if connector is used against playground or production environment
     */
    public SourceKlarna withPlayground(boolean playground) {
        Utils.checkNotNull(playground, "playground");
        this.playground = Optional.ofNullable(playground);
        return this;
    }

    /**
     * Propertie defining if connector is used against playground or production environment
     */
    public SourceKlarna withPlayground(Optional<? extends Boolean> playground) {
        Utils.checkNotNull(playground, "playground");
        this.playground = playground;
        return this;
    }

    /**
     * Base url region (For playground eu https://docs.klarna.com/klarna-payments/api/payments-api/#tag/API-URLs). Supported 'eu', 'us', 'oc'
     */
    public SourceKlarna withRegion(SourceKlarnaRegion region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string (https://developers.klarna.com/api/#authentication)
     */
    public SourceKlarna withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceKlarna other = (SourceKlarna) o;
        return 
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.playground, other.playground) &&
            java.util.Objects.deepEquals(this.region, other.region) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            password,
            playground,
            region,
            sourceType,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceKlarna.class,
                "password", password,
                "playground", playground,
                "region", region,
                "sourceType", sourceType,
                "username", username);
    }
    
    public final static class Builder {
 
        private String password;
 
        private Optional<? extends Boolean> playground;
 
        private SourceKlarnaRegion region;
 
        private String username;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs (https://developers.klarna.com/api/#authentication)
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Propertie defining if connector is used against playground or production environment
         */
        public Builder playground(boolean playground) {
            Utils.checkNotNull(playground, "playground");
            this.playground = Optional.ofNullable(playground);
            return this;
        }

        /**
         * Propertie defining if connector is used against playground or production environment
         */
        public Builder playground(Optional<? extends Boolean> playground) {
            Utils.checkNotNull(playground, "playground");
            this.playground = playground;
            return this;
        }

        /**
         * Base url region (For playground eu https://docs.klarna.com/klarna-payments/api/payments-api/#tag/API-URLs). Supported 'eu', 'us', 'oc'
         */
        public Builder region(SourceKlarnaRegion region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string (https://developers.klarna.com/api/#authentication)
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourceKlarna build() {
            if (playground == null) {
                playground = _SINGLETON_VALUE_Playground.value();
            }
            return new SourceKlarna(
                password,
                playground,
                region,
                username);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Playground =
                new LazySingletonValue<>(
                        "playground",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Klarna> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"klarna\"",
                        new TypeReference<Klarna>() {});
    }
}

