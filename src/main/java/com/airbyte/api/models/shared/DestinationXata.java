/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class DestinationXata {

    /**
     * API Key to connect.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * URL pointing to your workspace.
     */
    @JsonProperty("db_url")
    private String dbUrl;

    @JsonProperty("destinationType")
    private Xata destinationType;

    public DestinationXata(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("db_url") String dbUrl) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(dbUrl, "dbUrl");
        this.apiKey = apiKey;
        this.dbUrl = dbUrl;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
    }

    /**
     * API Key to connect.
     */
    public String apiKey() {
        return apiKey;
    }

    /**
     * URL pointing to your workspace.
     */
    public String dbUrl() {
        return dbUrl;
    }

    public Xata destinationType() {
        return destinationType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API Key to connect.
     */
    public DestinationXata withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * URL pointing to your workspace.
     */
    public DestinationXata withDbUrl(String dbUrl) {
        Utils.checkNotNull(dbUrl, "dbUrl");
        this.dbUrl = dbUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationXata other = (DestinationXata) o;
        return 
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.dbUrl, other.dbUrl) &&
            java.util.Objects.deepEquals(this.destinationType, other.destinationType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKey,
            dbUrl,
            destinationType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationXata.class,
                "apiKey", apiKey,
                "dbUrl", dbUrl,
                "destinationType", destinationType);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private String dbUrl;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API Key to connect.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * URL pointing to your workspace.
         */
        public Builder dbUrl(String dbUrl) {
            Utils.checkNotNull(dbUrl, "dbUrl");
            this.dbUrl = dbUrl;
            return this;
        }
        
        public DestinationXata build() {
            return new DestinationXata(
                apiKey,
                dbUrl);
        }

        private static final LazySingletonValue<Xata> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"xata\"",
                        new TypeReference<Xata>() {});
    }
}

