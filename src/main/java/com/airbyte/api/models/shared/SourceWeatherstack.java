/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SourceWeatherstack {

    /**
     * API access key used to retrieve data from the Weatherstack API.(https://weatherstack.com/product)
     */
    @JsonProperty("access_key")
    private String accessKey;

    /**
     * This is required for enabling the Historical date API with format- (YYYY-MM-DD). * Note, only supported by paid accounts
     */
    @JsonProperty("historical_date")
    private String historicalDate;

    /**
     * A location to query such as city, IP, latitudeLongitude, or zipcode. Multiple locations with semicolon seperated if using a professional plan or higher. For more info- (https://weatherstack.com/documentation#query_parameter)
     */
    @JsonProperty("query")
    private String query;

    @JsonProperty("sourceType")
    private Weatherstack sourceType;

    @JsonCreator
    public SourceWeatherstack(
            @JsonProperty("access_key") String accessKey,
            @JsonProperty("historical_date") String historicalDate,
            @JsonProperty("query") String query) {
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(historicalDate, "historicalDate");
        Utils.checkNotNull(query, "query");
        this.accessKey = accessKey;
        this.historicalDate = historicalDate;
        this.query = query;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * API access key used to retrieve data from the Weatherstack API.(https://weatherstack.com/product)
     */
    @JsonIgnore
    public String accessKey() {
        return accessKey;
    }

    /**
     * This is required for enabling the Historical date API with format- (YYYY-MM-DD). * Note, only supported by paid accounts
     */
    @JsonIgnore
    public String historicalDate() {
        return historicalDate;
    }

    /**
     * A location to query such as city, IP, latitudeLongitude, or zipcode. Multiple locations with semicolon seperated if using a professional plan or higher. For more info- (https://weatherstack.com/documentation#query_parameter)
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    @JsonIgnore
    public Weatherstack sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API access key used to retrieve data from the Weatherstack API.(https://weatherstack.com/product)
     */
    public SourceWeatherstack withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    /**
     * This is required for enabling the Historical date API with format- (YYYY-MM-DD). * Note, only supported by paid accounts
     */
    public SourceWeatherstack withHistoricalDate(String historicalDate) {
        Utils.checkNotNull(historicalDate, "historicalDate");
        this.historicalDate = historicalDate;
        return this;
    }

    /**
     * A location to query such as city, IP, latitudeLongitude, or zipcode. Multiple locations with semicolon seperated if using a professional plan or higher. For more info- (https://weatherstack.com/documentation#query_parameter)
     */
    public SourceWeatherstack withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceWeatherstack other = (SourceWeatherstack) o;
        return 
            Objects.deepEquals(this.accessKey, other.accessKey) &&
            Objects.deepEquals(this.historicalDate, other.historicalDate) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessKey,
            historicalDate,
            query,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceWeatherstack.class,
                "accessKey", accessKey,
                "historicalDate", historicalDate,
                "query", query,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String accessKey;
 
        private String historicalDate;
 
        private String query;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API access key used to retrieve data from the Weatherstack API.(https://weatherstack.com/product)
         */
        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }

        /**
         * This is required for enabling the Historical date API with format- (YYYY-MM-DD). * Note, only supported by paid accounts
         */
        public Builder historicalDate(String historicalDate) {
            Utils.checkNotNull(historicalDate, "historicalDate");
            this.historicalDate = historicalDate;
            return this;
        }

        /**
         * A location to query such as city, IP, latitudeLongitude, or zipcode. Multiple locations with semicolon seperated if using a professional plan or higher. For more info- (https://weatherstack.com/documentation#query_parameter)
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }
        
        public SourceWeatherstack build() {
            return new SourceWeatherstack(
                accessKey,
                historicalDate,
                query);
        }

        private static final LazySingletonValue<Weatherstack> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"weatherstack\"",
                        new TypeReference<Weatherstack>() {});
    }
}

