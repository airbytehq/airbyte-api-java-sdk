/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class Equal implements RowFilteringOperation {

    /**
     * The value to compare the field against.
     */
    @JsonProperty("comparisonValue")
    private String comparisonValue;

    /**
     * The name of the field to apply the operation on.
     */
    @JsonProperty("fieldName")
    private String fieldName;

    @JsonProperty("type")
    private RowFilteringOperationType type;

    @JsonCreator
    public Equal(
            @JsonProperty("comparisonValue") String comparisonValue,
            @JsonProperty("fieldName") String fieldName,
            @JsonProperty("type") RowFilteringOperationType type) {
        Utils.checkNotNull(comparisonValue, "comparisonValue");
        Utils.checkNotNull(fieldName, "fieldName");
        Utils.checkNotNull(type, "type");
        this.comparisonValue = comparisonValue;
        this.fieldName = fieldName;
        this.type = type;
    }

    /**
     * The value to compare the field against.
     */
    @JsonIgnore
    public String comparisonValue() {
        return comparisonValue;
    }

    /**
     * The name of the field to apply the operation on.
     */
    @JsonIgnore
    public String fieldName() {
        return fieldName;
    }

    @JsonIgnore
    @Override
    public String type() {
        return Utils.discriminatorToString(type);
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The value to compare the field against.
     */
    public Equal withComparisonValue(String comparisonValue) {
        Utils.checkNotNull(comparisonValue, "comparisonValue");
        this.comparisonValue = comparisonValue;
        return this;
    }

    /**
     * The name of the field to apply the operation on.
     */
    public Equal withFieldName(String fieldName) {
        Utils.checkNotNull(fieldName, "fieldName");
        this.fieldName = fieldName;
        return this;
    }

    public Equal withType(RowFilteringOperationType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Equal other = (Equal) o;
        return 
            Objects.deepEquals(this.comparisonValue, other.comparisonValue) &&
            Objects.deepEquals(this.fieldName, other.fieldName) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            comparisonValue,
            fieldName,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Equal.class,
                "comparisonValue", comparisonValue,
                "fieldName", fieldName,
                "type", type);
    }
    
    public final static class Builder {
 
        private String comparisonValue;
 
        private String fieldName;
 
        private RowFilteringOperationType type;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The value to compare the field against.
         */
        public Builder comparisonValue(String comparisonValue) {
            Utils.checkNotNull(comparisonValue, "comparisonValue");
            this.comparisonValue = comparisonValue;
            return this;
        }

        /**
         * The name of the field to apply the operation on.
         */
        public Builder fieldName(String fieldName) {
            Utils.checkNotNull(fieldName, "fieldName");
            this.fieldName = fieldName;
            return this;
        }

        public Builder type(RowFilteringOperationType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Equal build() {
            return new Equal(
                comparisonValue,
                fieldName,
                type);
        }
    }
}
