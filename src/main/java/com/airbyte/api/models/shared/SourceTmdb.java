/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceTmdb {

    /**
     * API Key from tmdb account
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Language expressed in ISO 639-1 scheme, Mandate for required streams (Example en-US)
     */
    @JsonProperty("language")
    private String language;

    /**
     * Target movie ID, Mandate for movie streams (Example is 550)
     */
    @JsonProperty("movie_id")
    private String movieId;

    /**
     * Target movie ID, Mandate for search streams
     */
    @JsonProperty("query")
    private String query;

    @JsonProperty("sourceType")
    private Tmdb sourceType;

    @JsonCreator
    public SourceTmdb(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("language") String language,
            @JsonProperty("movie_id") String movieId,
            @JsonProperty("query") String query) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(movieId, "movieId");
        Utils.checkNotNull(query, "query");
        this.apiKey = apiKey;
        this.language = language;
        this.movieId = movieId;
        this.query = query;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * API Key from tmdb account
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Language expressed in ISO 639-1 scheme, Mandate for required streams (Example en-US)
     */
    @JsonIgnore
    public String language() {
        return language;
    }

    /**
     * Target movie ID, Mandate for movie streams (Example is 550)
     */
    @JsonIgnore
    public String movieId() {
        return movieId;
    }

    /**
     * Target movie ID, Mandate for search streams
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    @JsonIgnore
    public Tmdb sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * API Key from tmdb account
     */
    public SourceTmdb withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Language expressed in ISO 639-1 scheme, Mandate for required streams (Example en-US)
     */
    public SourceTmdb withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    /**
     * Target movie ID, Mandate for movie streams (Example is 550)
     */
    public SourceTmdb withMovieId(String movieId) {
        Utils.checkNotNull(movieId, "movieId");
        this.movieId = movieId;
        return this;
    }

    /**
     * Target movie ID, Mandate for search streams
     */
    public SourceTmdb withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceTmdb other = (SourceTmdb) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.language, other.language) &&
            Objects.deepEquals(this.movieId, other.movieId) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            language,
            movieId,
            query,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceTmdb.class,
                "apiKey", apiKey,
                "language", language,
                "movieId", movieId,
                "query", query,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private String language;
 
        private String movieId;
 
        private String query;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API Key from tmdb account
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Language expressed in ISO 639-1 scheme, Mandate for required streams (Example en-US)
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        /**
         * Target movie ID, Mandate for movie streams (Example is 550)
         */
        public Builder movieId(String movieId) {
            Utils.checkNotNull(movieId, "movieId");
            this.movieId = movieId;
            return this;
        }

        /**
         * Target movie ID, Mandate for search streams
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }
        
        public SourceTmdb build() {
            return new SourceTmdb(
                apiKey,
                language,
                movieId,
                query);
        }

        private static final LazySingletonValue<Tmdb> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"tmdb\"",
                        new TypeReference<Tmdb>() {});
    }
}
