/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SourcePokeapi {

    /**
     * Pokemon requested from the API.
     */
    @JsonProperty("pokemon_name")
    private PokemonName pokemonName;

    @JsonProperty("sourceType")
    private Pokeapi sourceType;

    @JsonCreator
    public SourcePokeapi(
            @JsonProperty("pokemon_name") PokemonName pokemonName) {
        Utils.checkNotNull(pokemonName, "pokemonName");
        this.pokemonName = pokemonName;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * Pokemon requested from the API.
     */
    @JsonIgnore
    public PokemonName pokemonName() {
        return pokemonName;
    }

    @JsonIgnore
    public Pokeapi sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Pokemon requested from the API.
     */
    public SourcePokeapi withPokemonName(PokemonName pokemonName) {
        Utils.checkNotNull(pokemonName, "pokemonName");
        this.pokemonName = pokemonName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePokeapi other = (SourcePokeapi) o;
        return 
            Objects.deepEquals(this.pokemonName, other.pokemonName) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pokemonName,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePokeapi.class,
                "pokemonName", pokemonName,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private PokemonName pokemonName;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Pokemon requested from the API.
         */
        public Builder pokemonName(PokemonName pokemonName) {
            Utils.checkNotNull(pokemonName, "pokemonName");
            this.pokemonName = pokemonName;
            return this;
        }
        
        public SourcePokeapi build() {
            return new SourcePokeapi(
                pokemonName);
        }

        private static final LazySingletonValue<Pokeapi> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"pokeapi\"",
                        new TypeReference<Pokeapi>() {});
    }
}

