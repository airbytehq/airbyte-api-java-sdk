/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceMonday {

    /**
     * The IDs of the boards that the Items and Boards streams will extract records from. When left empty, streams will extract records from all boards that exist within the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("board_ids")
    private Optional<? extends List<Long>> boardIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceMondayAuthorizationMethod> credentials;

    /**
     * The number of worker threads to use for the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_workers")
    private Optional<Long> numWorkers;

    @JsonProperty("sourceType")
    private SourceMondayMonday sourceType;

    @JsonCreator
    public SourceMonday(
            @JsonProperty("board_ids") Optional<? extends List<Long>> boardIds,
            @JsonProperty("credentials") Optional<? extends SourceMondayAuthorizationMethod> credentials,
            @JsonProperty("num_workers") Optional<Long> numWorkers) {
        Utils.checkNotNull(boardIds, "boardIds");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(numWorkers, "numWorkers");
        this.boardIds = boardIds;
        this.credentials = credentials;
        this.numWorkers = numWorkers;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceMonday() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The IDs of the boards that the Items and Boards streams will extract records from. When left empty, streams will extract records from all boards that exist within the account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> boardIds() {
        return (Optional<List<Long>>) boardIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceMondayAuthorizationMethod> credentials() {
        return (Optional<SourceMondayAuthorizationMethod>) credentials;
    }

    /**
     * The number of worker threads to use for the sync.
     */
    @JsonIgnore
    public Optional<Long> numWorkers() {
        return numWorkers;
    }

    @JsonIgnore
    public SourceMondayMonday sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The IDs of the boards that the Items and Boards streams will extract records from. When left empty, streams will extract records from all boards that exist within the account.
     */
    public SourceMonday withBoardIds(List<Long> boardIds) {
        Utils.checkNotNull(boardIds, "boardIds");
        this.boardIds = Optional.ofNullable(boardIds);
        return this;
    }

    /**
     * The IDs of the boards that the Items and Boards streams will extract records from. When left empty, streams will extract records from all boards that exist within the account.
     */
    public SourceMonday withBoardIds(Optional<? extends List<Long>> boardIds) {
        Utils.checkNotNull(boardIds, "boardIds");
        this.boardIds = boardIds;
        return this;
    }

    public SourceMonday withCredentials(SourceMondayAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    public SourceMonday withCredentials(Optional<? extends SourceMondayAuthorizationMethod> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The number of worker threads to use for the sync.
     */
    public SourceMonday withNumWorkers(long numWorkers) {
        Utils.checkNotNull(numWorkers, "numWorkers");
        this.numWorkers = Optional.ofNullable(numWorkers);
        return this;
    }

    /**
     * The number of worker threads to use for the sync.
     */
    public SourceMonday withNumWorkers(Optional<Long> numWorkers) {
        Utils.checkNotNull(numWorkers, "numWorkers");
        this.numWorkers = numWorkers;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMonday other = (SourceMonday) o;
        return 
            Objects.deepEquals(this.boardIds, other.boardIds) &&
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.numWorkers, other.numWorkers) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            boardIds,
            credentials,
            numWorkers,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMonday.class,
                "boardIds", boardIds,
                "credentials", credentials,
                "numWorkers", numWorkers,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Long>> boardIds = Optional.empty();
 
        private Optional<? extends SourceMondayAuthorizationMethod> credentials = Optional.empty();
 
        private Optional<Long> numWorkers;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The IDs of the boards that the Items and Boards streams will extract records from. When left empty, streams will extract records from all boards that exist within the account.
         */
        public Builder boardIds(List<Long> boardIds) {
            Utils.checkNotNull(boardIds, "boardIds");
            this.boardIds = Optional.ofNullable(boardIds);
            return this;
        }

        /**
         * The IDs of the boards that the Items and Boards streams will extract records from. When left empty, streams will extract records from all boards that exist within the account.
         */
        public Builder boardIds(Optional<? extends List<Long>> boardIds) {
            Utils.checkNotNull(boardIds, "boardIds");
            this.boardIds = boardIds;
            return this;
        }

        public Builder credentials(SourceMondayAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        public Builder credentials(Optional<? extends SourceMondayAuthorizationMethod> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The number of worker threads to use for the sync.
         */
        public Builder numWorkers(long numWorkers) {
            Utils.checkNotNull(numWorkers, "numWorkers");
            this.numWorkers = Optional.ofNullable(numWorkers);
            return this;
        }

        /**
         * The number of worker threads to use for the sync.
         */
        public Builder numWorkers(Optional<Long> numWorkers) {
            Utils.checkNotNull(numWorkers, "numWorkers");
            this.numWorkers = numWorkers;
            return this;
        }
        
        public SourceMonday build() {
            if (numWorkers == null) {
                numWorkers = _SINGLETON_VALUE_NumWorkers.value();
            }
            return new SourceMonday(
                boardIds,
                credentials,
                numWorkers);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_NumWorkers =
                new LazySingletonValue<>(
                        "num_workers",
                        "4",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<SourceMondayMonday> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"monday\"",
                        new TypeReference<SourceMondayMonday>() {});
    }
}
