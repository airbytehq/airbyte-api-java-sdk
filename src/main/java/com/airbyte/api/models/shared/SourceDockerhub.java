/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class SourceDockerhub {

    /**
     * Username of DockerHub person or organization (for https://hub.docker.com/v2/repositories/USERNAME/ API call)
     */
    @JsonProperty("docker_username")
    private String dockerUsername;

    @JsonProperty("sourceType")
    private Dockerhub sourceType;

    @JsonCreator
    public SourceDockerhub(
            @JsonProperty("docker_username") String dockerUsername) {
        Utils.checkNotNull(dockerUsername, "dockerUsername");
        this.dockerUsername = dockerUsername;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * Username of DockerHub person or organization (for https://hub.docker.com/v2/repositories/USERNAME/ API call)
     */
    @JsonIgnore
    public String dockerUsername() {
        return dockerUsername;
    }

    @JsonIgnore
    public Dockerhub sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Username of DockerHub person or organization (for https://hub.docker.com/v2/repositories/USERNAME/ API call)
     */
    public SourceDockerhub withDockerUsername(String dockerUsername) {
        Utils.checkNotNull(dockerUsername, "dockerUsername");
        this.dockerUsername = dockerUsername;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceDockerhub other = (SourceDockerhub) o;
        return 
            java.util.Objects.deepEquals(this.dockerUsername, other.dockerUsername) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dockerUsername,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceDockerhub.class,
                "dockerUsername", dockerUsername,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String dockerUsername;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Username of DockerHub person or organization (for https://hub.docker.com/v2/repositories/USERNAME/ API call)
         */
        public Builder dockerUsername(String dockerUsername) {
            Utils.checkNotNull(dockerUsername, "dockerUsername");
            this.dockerUsername = dockerUsername;
            return this;
        }
        
        public SourceDockerhub build() {
            return new SourceDockerhub(
                dockerUsername);
        }

        private static final LazySingletonValue<Dockerhub> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"dockerhub\"",
                        new TypeReference<Dockerhub>() {});
    }
}

