/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;

public class SourceOnesignal {

    /**
     * Applications keys, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys"&gt;docs&lt;/a&gt; for more information on how to obtain this data
     */
    @JsonProperty("applications")
    private List<Applications> applications;

    /**
     * Comma-separated list of names and the value (sum/count) for the returned outcome data. See the &lt;a href="https://documentation.onesignal.com/reference/view-outcomes"&gt;docs&lt;/a&gt; for more details
     */
    @JsonProperty("outcome_names")
    private String outcomeNames;

    @JsonProperty("sourceType")
    private Onesignal sourceType;

    /**
     * The date from which you'd like to replicate data for OneSignal API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * OneSignal User Auth Key, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys#user-auth-key"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonProperty("user_auth_key")
    private String userAuthKey;

    @JsonCreator
    public SourceOnesignal(
            @JsonProperty("applications") List<Applications> applications,
            @JsonProperty("outcome_names") String outcomeNames,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("user_auth_key") String userAuthKey) {
        Utils.checkNotNull(applications, "applications");
        Utils.checkNotNull(outcomeNames, "outcomeNames");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(userAuthKey, "userAuthKey");
        this.applications = applications;
        this.outcomeNames = outcomeNames;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.userAuthKey = userAuthKey;
    }

    /**
     * Applications keys, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys"&gt;docs&lt;/a&gt; for more information on how to obtain this data
     */
    @JsonIgnore
    public List<Applications> applications() {
        return applications;
    }

    /**
     * Comma-separated list of names and the value (sum/count) for the returned outcome data. See the &lt;a href="https://documentation.onesignal.com/reference/view-outcomes"&gt;docs&lt;/a&gt; for more details
     */
    @JsonIgnore
    public String outcomeNames() {
        return outcomeNames;
    }

    @JsonIgnore
    public Onesignal sourceType() {
        return sourceType;
    }

    /**
     * The date from which you'd like to replicate data for OneSignal API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * OneSignal User Auth Key, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys#user-auth-key"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonIgnore
    public String userAuthKey() {
        return userAuthKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Applications keys, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys"&gt;docs&lt;/a&gt; for more information on how to obtain this data
     */
    public SourceOnesignal withApplications(List<Applications> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = applications;
        return this;
    }

    /**
     * Comma-separated list of names and the value (sum/count) for the returned outcome data. See the &lt;a href="https://documentation.onesignal.com/reference/view-outcomes"&gt;docs&lt;/a&gt; for more details
     */
    public SourceOnesignal withOutcomeNames(String outcomeNames) {
        Utils.checkNotNull(outcomeNames, "outcomeNames");
        this.outcomeNames = outcomeNames;
        return this;
    }

    /**
     * The date from which you'd like to replicate data for OneSignal API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    public SourceOnesignal withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * OneSignal User Auth Key, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys#user-auth-key"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    public SourceOnesignal withUserAuthKey(String userAuthKey) {
        Utils.checkNotNull(userAuthKey, "userAuthKey");
        this.userAuthKey = userAuthKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOnesignal other = (SourceOnesignal) o;
        return 
            Objects.deepEquals(this.applications, other.applications) &&
            Objects.deepEquals(this.outcomeNames, other.outcomeNames) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.userAuthKey, other.userAuthKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            applications,
            outcomeNames,
            sourceType,
            startDate,
            userAuthKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOnesignal.class,
                "applications", applications,
                "outcomeNames", outcomeNames,
                "sourceType", sourceType,
                "startDate", startDate,
                "userAuthKey", userAuthKey);
    }
    
    public final static class Builder {
 
        private List<Applications> applications;
 
        private String outcomeNames;
 
        private OffsetDateTime startDate;
 
        private String userAuthKey;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Applications keys, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys"&gt;docs&lt;/a&gt; for more information on how to obtain this data
         */
        public Builder applications(List<Applications> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = applications;
            return this;
        }

        /**
         * Comma-separated list of names and the value (sum/count) for the returned outcome data. See the &lt;a href="https://documentation.onesignal.com/reference/view-outcomes"&gt;docs&lt;/a&gt; for more details
         */
        public Builder outcomeNames(String outcomeNames) {
            Utils.checkNotNull(outcomeNames, "outcomeNames");
            this.outcomeNames = outcomeNames;
            return this;
        }

        /**
         * The date from which you'd like to replicate data for OneSignal API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * OneSignal User Auth Key, see the &lt;a href="https://documentation.onesignal.com/docs/accounts-and-keys#user-auth-key"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
         */
        public Builder userAuthKey(String userAuthKey) {
            Utils.checkNotNull(userAuthKey, "userAuthKey");
            this.userAuthKey = userAuthKey;
            return this;
        }
        
        public SourceOnesignal build() {
            return new SourceOnesignal(
                applications,
                outcomeNames,
                startDate,
                userAuthKey);
        }

        private static final LazySingletonValue<Onesignal> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"onesignal\"",
                        new TypeReference<Onesignal>() {});
    }
}
