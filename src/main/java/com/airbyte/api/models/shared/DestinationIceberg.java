/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class DestinationIceberg {

    /**
     * Catalog config of Iceberg.
     */
    @JsonProperty("catalog_config")
    private IcebergCatalogConfig catalogConfig;

    @JsonProperty("destinationType")
    private Iceberg destinationType;

    /**
     * File format of Iceberg storage.
     */
    @JsonProperty("format_config")
    private FileFormat formatConfig;

    /**
     * Storage config of Iceberg.
     */
    @JsonProperty("storage_config")
    private StorageConfig storageConfig;

    @JsonCreator
    public DestinationIceberg(
            @JsonProperty("catalog_config") IcebergCatalogConfig catalogConfig,
            @JsonProperty("format_config") FileFormat formatConfig,
            @JsonProperty("storage_config") StorageConfig storageConfig) {
        Utils.checkNotNull(catalogConfig, "catalogConfig");
        Utils.checkNotNull(formatConfig, "formatConfig");
        Utils.checkNotNull(storageConfig, "storageConfig");
        this.catalogConfig = catalogConfig;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.formatConfig = formatConfig;
        this.storageConfig = storageConfig;
    }

    /**
     * Catalog config of Iceberg.
     */
    @JsonIgnore
    public IcebergCatalogConfig catalogConfig() {
        return catalogConfig;
    }

    @JsonIgnore
    public Iceberg destinationType() {
        return destinationType;
    }

    /**
     * File format of Iceberg storage.
     */
    @JsonIgnore
    public FileFormat formatConfig() {
        return formatConfig;
    }

    /**
     * Storage config of Iceberg.
     */
    @JsonIgnore
    public StorageConfig storageConfig() {
        return storageConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Catalog config of Iceberg.
     */
    public DestinationIceberg withCatalogConfig(IcebergCatalogConfig catalogConfig) {
        Utils.checkNotNull(catalogConfig, "catalogConfig");
        this.catalogConfig = catalogConfig;
        return this;
    }

    /**
     * File format of Iceberg storage.
     */
    public DestinationIceberg withFormatConfig(FileFormat formatConfig) {
        Utils.checkNotNull(formatConfig, "formatConfig");
        this.formatConfig = formatConfig;
        return this;
    }

    /**
     * Storage config of Iceberg.
     */
    public DestinationIceberg withStorageConfig(StorageConfig storageConfig) {
        Utils.checkNotNull(storageConfig, "storageConfig");
        this.storageConfig = storageConfig;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationIceberg other = (DestinationIceberg) o;
        return 
            Objects.deepEquals(this.catalogConfig, other.catalogConfig) &&
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.formatConfig, other.formatConfig) &&
            Objects.deepEquals(this.storageConfig, other.storageConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            catalogConfig,
            destinationType,
            formatConfig,
            storageConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationIceberg.class,
                "catalogConfig", catalogConfig,
                "destinationType", destinationType,
                "formatConfig", formatConfig,
                "storageConfig", storageConfig);
    }
    
    public final static class Builder {
 
        private IcebergCatalogConfig catalogConfig;
 
        private FileFormat formatConfig;
 
        private StorageConfig storageConfig;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Catalog config of Iceberg.
         */
        public Builder catalogConfig(IcebergCatalogConfig catalogConfig) {
            Utils.checkNotNull(catalogConfig, "catalogConfig");
            this.catalogConfig = catalogConfig;
            return this;
        }

        /**
         * File format of Iceberg storage.
         */
        public Builder formatConfig(FileFormat formatConfig) {
            Utils.checkNotNull(formatConfig, "formatConfig");
            this.formatConfig = formatConfig;
            return this;
        }

        /**
         * Storage config of Iceberg.
         */
        public Builder storageConfig(StorageConfig storageConfig) {
            Utils.checkNotNull(storageConfig, "storageConfig");
            this.storageConfig = storageConfig;
            return this;
        }
        
        public DestinationIceberg build() {
            return new DestinationIceberg(
                catalogConfig,
                formatConfig,
                storageConfig);
        }

        private static final LazySingletonValue<Iceberg> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"iceberg\"",
                        new TypeReference<Iceberg>() {});
    }
}

