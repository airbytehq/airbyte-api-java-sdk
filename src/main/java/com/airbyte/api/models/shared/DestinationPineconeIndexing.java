/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * DestinationPineconeIndexing
 * 
 * <p>Pinecone is a popular vector store that can be used to store and retrieve embeddings.
 */
public class DestinationPineconeIndexing {

    /**
     * Pinecone index in your project to load data into
     */
    @JsonProperty("index")
    private String index;

    /**
     * Pinecone Cloud environment to use
     */
    @JsonProperty("pinecone_environment")
    private String pineconeEnvironment;

    /**
     * The Pinecone API key to use matching the environment (copy from Pinecone console)
     */
    @JsonProperty("pinecone_key")
    private String pineconeKey;

    @JsonCreator
    public DestinationPineconeIndexing(
            @JsonProperty("index") String index,
            @JsonProperty("pinecone_environment") String pineconeEnvironment,
            @JsonProperty("pinecone_key") String pineconeKey) {
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(pineconeEnvironment, "pineconeEnvironment");
        Utils.checkNotNull(pineconeKey, "pineconeKey");
        this.index = index;
        this.pineconeEnvironment = pineconeEnvironment;
        this.pineconeKey = pineconeKey;
    }

    /**
     * Pinecone index in your project to load data into
     */
    @JsonIgnore
    public String index() {
        return index;
    }

    /**
     * Pinecone Cloud environment to use
     */
    @JsonIgnore
    public String pineconeEnvironment() {
        return pineconeEnvironment;
    }

    /**
     * The Pinecone API key to use matching the environment (copy from Pinecone console)
     */
    @JsonIgnore
    public String pineconeKey() {
        return pineconeKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Pinecone index in your project to load data into
     */
    public DestinationPineconeIndexing withIndex(String index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * Pinecone Cloud environment to use
     */
    public DestinationPineconeIndexing withPineconeEnvironment(String pineconeEnvironment) {
        Utils.checkNotNull(pineconeEnvironment, "pineconeEnvironment");
        this.pineconeEnvironment = pineconeEnvironment;
        return this;
    }

    /**
     * The Pinecone API key to use matching the environment (copy from Pinecone console)
     */
    public DestinationPineconeIndexing withPineconeKey(String pineconeKey) {
        Utils.checkNotNull(pineconeKey, "pineconeKey");
        this.pineconeKey = pineconeKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationPineconeIndexing other = (DestinationPineconeIndexing) o;
        return 
            Objects.deepEquals(this.index, other.index) &&
            Objects.deepEquals(this.pineconeEnvironment, other.pineconeEnvironment) &&
            Objects.deepEquals(this.pineconeKey, other.pineconeKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            index,
            pineconeEnvironment,
            pineconeKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationPineconeIndexing.class,
                "index", index,
                "pineconeEnvironment", pineconeEnvironment,
                "pineconeKey", pineconeKey);
    }
    
    public final static class Builder {
 
        private String index;
 
        private String pineconeEnvironment;
 
        private String pineconeKey;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Pinecone index in your project to load data into
         */
        public Builder index(String index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        /**
         * Pinecone Cloud environment to use
         */
        public Builder pineconeEnvironment(String pineconeEnvironment) {
            Utils.checkNotNull(pineconeEnvironment, "pineconeEnvironment");
            this.pineconeEnvironment = pineconeEnvironment;
            return this;
        }

        /**
         * The Pinecone API key to use matching the environment (copy from Pinecone console)
         */
        public Builder pineconeKey(String pineconeKey) {
            Utils.checkNotNull(pineconeKey, "pineconeKey");
            this.pineconeKey = pineconeKey;
            return this;
        }
        
        public DestinationPineconeIndexing build() {
            return new DestinationPineconeIndexing(
                index,
                pineconeEnvironment,
                pineconeKey);
        }
    }
}
