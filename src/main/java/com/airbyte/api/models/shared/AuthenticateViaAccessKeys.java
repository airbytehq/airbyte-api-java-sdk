/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class AuthenticateViaAccessKeys {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * The access key id to access Dynamodb. Airbyte requires read permissions to the database
     */
    @JsonProperty("access_key_id")
    private String accessKeyId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private Optional<? extends SourceDynamodbAuthType> authType;

    /**
     * The corresponding secret to the access key id.
     */
    @JsonProperty("secret_access_key")
    private String secretAccessKey;

    @JsonCreator
    public AuthenticateViaAccessKeys(
            @JsonProperty("access_key_id") String accessKeyId,
            @JsonProperty("secret_access_key") String secretAccessKey) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.additionalProperties = new HashMap<>();
        this.accessKeyId = accessKeyId;
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.secretAccessKey = secretAccessKey;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * The access key id to access Dynamodb. Airbyte requires read permissions to the database
     */
    @JsonIgnore
    public String accessKeyId() {
        return accessKeyId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceDynamodbAuthType> authType() {
        return (Optional<SourceDynamodbAuthType>) authType;
    }

    /**
     * The corresponding secret to the access key id.
     */
    @JsonIgnore
    public String secretAccessKey() {
        return secretAccessKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    @JsonAnySetter
    public AuthenticateViaAccessKeys withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public AuthenticateViaAccessKeys withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * The access key id to access Dynamodb. Airbyte requires read permissions to the database
     */
    public AuthenticateViaAccessKeys withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * The corresponding secret to the access key id.
     */
    public AuthenticateViaAccessKeys withSecretAccessKey(String secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = secretAccessKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthenticateViaAccessKeys other = (AuthenticateViaAccessKeys) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.accessKeyId, other.accessKeyId) &&
            Objects.deepEquals(this.authType, other.authType) &&
            Objects.deepEquals(this.secretAccessKey, other.secretAccessKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            accessKeyId,
            authType,
            secretAccessKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthenticateViaAccessKeys.class,
                "additionalProperties", additionalProperties,
                "accessKeyId", accessKeyId,
                "authType", authType,
                "secretAccessKey", secretAccessKey);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private String accessKeyId;
 
        private String secretAccessKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * The access key id to access Dynamodb. Airbyte requires read permissions to the database
         */
        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * The corresponding secret to the access key id.
         */
        public Builder secretAccessKey(String secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        
        public AuthenticateViaAccessKeys build() {
            return new AuthenticateViaAccessKeys(
                accessKeyId,
                secretAccessKey)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceDynamodbAuthType>> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"User\"",
                        new TypeReference<Optional<? extends SourceDynamodbAuthType>>() {});
    }
}

