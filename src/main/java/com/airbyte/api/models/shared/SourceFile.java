/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceFile {

    /**
     * The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).
     */
    @JsonProperty("dataset_name")
    private String datasetName;

    /**
     * The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    private Optional<? extends FileFormat> format;

    /**
     * The storage Provider or Location of the file(s) which should be replicated.
     */
    @JsonProperty("provider")
    private StorageProvider provider;

    /**
     * This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reader_options")
    private Optional<? extends String> readerOptions;

    @JsonProperty("sourceType")
    private File sourceType;

    /**
     * The URL path to access the file which should be replicated.
     */
    @JsonProperty("url")
    private String url;

    public SourceFile(
            @JsonProperty("dataset_name") String datasetName,
            @JsonProperty("format") Optional<? extends FileFormat> format,
            @JsonProperty("provider") StorageProvider provider,
            @JsonProperty("reader_options") Optional<? extends String> readerOptions,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(datasetName, "datasetName");
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(readerOptions, "readerOptions");
        Utils.checkNotNull(url, "url");
        this.datasetName = datasetName;
        this.format = format;
        this.provider = provider;
        this.readerOptions = readerOptions;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.url = url;
    }

    /**
     * The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).
     */
    public String datasetName() {
        return datasetName;
    }

    /**
     * The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).
     */
    public Optional<? extends FileFormat> format() {
        return format;
    }

    /**
     * The storage Provider or Location of the file(s) which should be replicated.
     */
    public StorageProvider provider() {
        return provider;
    }

    /**
     * This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.
     */
    public Optional<? extends String> readerOptions() {
        return readerOptions;
    }

    public File sourceType() {
        return sourceType;
    }

    /**
     * The URL path to access the file which should be replicated.
     */
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).
     */
    public SourceFile withDatasetName(String datasetName) {
        Utils.checkNotNull(datasetName, "datasetName");
        this.datasetName = datasetName;
        return this;
    }

    /**
     * The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).
     */
    public SourceFile withFormat(FileFormat format) {
        Utils.checkNotNull(format, "format");
        this.format = Optional.ofNullable(format);
        return this;
    }

    /**
     * The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).
     */
    public SourceFile withFormat(Optional<? extends FileFormat> format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    /**
     * The storage Provider or Location of the file(s) which should be replicated.
     */
    public SourceFile withProvider(StorageProvider provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.
     */
    public SourceFile withReaderOptions(String readerOptions) {
        Utils.checkNotNull(readerOptions, "readerOptions");
        this.readerOptions = Optional.ofNullable(readerOptions);
        return this;
    }

    /**
     * This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.
     */
    public SourceFile withReaderOptions(Optional<? extends String> readerOptions) {
        Utils.checkNotNull(readerOptions, "readerOptions");
        this.readerOptions = readerOptions;
        return this;
    }

    /**
     * The URL path to access the file which should be replicated.
     */
    public SourceFile withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFile other = (SourceFile) o;
        return 
            java.util.Objects.deepEquals(this.datasetName, other.datasetName) &&
            java.util.Objects.deepEquals(this.format, other.format) &&
            java.util.Objects.deepEquals(this.provider, other.provider) &&
            java.util.Objects.deepEquals(this.readerOptions, other.readerOptions) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            datasetName,
            format,
            provider,
            readerOptions,
            sourceType,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFile.class,
                "datasetName", datasetName,
                "format", format,
                "provider", provider,
                "readerOptions", readerOptions,
                "sourceType", sourceType,
                "url", url);
    }
    
    public final static class Builder {
 
        private String datasetName;
 
        private Optional<? extends FileFormat> format;
 
        private StorageProvider provider;
 
        private Optional<? extends String> readerOptions = Optional.empty();
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).
         */
        public Builder datasetName(String datasetName) {
            Utils.checkNotNull(datasetName, "datasetName");
            this.datasetName = datasetName;
            return this;
        }

        /**
         * The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).
         */
        public Builder format(FileFormat format) {
            Utils.checkNotNull(format, "format");
            this.format = Optional.ofNullable(format);
            return this;
        }

        /**
         * The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).
         */
        public Builder format(Optional<? extends FileFormat> format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        /**
         * The storage Provider or Location of the file(s) which should be replicated.
         */
        public Builder provider(StorageProvider provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        /**
         * This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.
         */
        public Builder readerOptions(String readerOptions) {
            Utils.checkNotNull(readerOptions, "readerOptions");
            this.readerOptions = Optional.ofNullable(readerOptions);
            return this;
        }

        /**
         * This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.
         */
        public Builder readerOptions(Optional<? extends String> readerOptions) {
            Utils.checkNotNull(readerOptions, "readerOptions");
            this.readerOptions = readerOptions;
            return this;
        }

        /**
         * The URL path to access the file which should be replicated.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public SourceFile build() {
            if (format == null) {
                format = _SINGLETON_VALUE_Format.value();
            }
            return new SourceFile(
                datasetName,
                format,
                provider,
                readerOptions,
                url);
        }

        private static final LazySingletonValue<Optional<? extends FileFormat>> _SINGLETON_VALUE_Format =
                new LazySingletonValue<>(
                        "format",
                        "\"csv\"",
                        new TypeReference<Optional<? extends FileFormat>>() {});

        private static final LazySingletonValue<File> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"file\"",
                        new TypeReference<File>() {});
    }
}

