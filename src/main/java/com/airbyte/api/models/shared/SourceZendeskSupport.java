/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourceZendeskSupport {

    /**
     * Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceZendeskSupportAuthentication> credentials;

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Zendesk Support plan. More info about the rate limit plan tiers can be found on Zendesk's API &lt;a href="https://developer.zendesk.com/api-reference/introduction/rate-limits/#zendesk-support-plan-limits"&gt;docs&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_workers")
    private Optional<Long> numWorkers;

    @JsonProperty("sourceType")
    private SourceZendeskSupportZendeskSupport sourceType;

    /**
     * The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
     */
    @JsonProperty("subdomain")
    private String subdomain;

    @JsonCreator
    public SourceZendeskSupport(
            @JsonProperty("credentials") Optional<? extends SourceZendeskSupportAuthentication> credentials,
            @JsonProperty("num_workers") Optional<Long> numWorkers,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("subdomain") String subdomain) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(numWorkers, "numWorkers");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(subdomain, "subdomain");
        this.credentials = credentials;
        this.numWorkers = numWorkers;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.subdomain = subdomain;
    }
    
    public SourceZendeskSupport(
            String subdomain) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), subdomain);
    }

    /**
     * Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceZendeskSupportAuthentication> credentials() {
        return (Optional<SourceZendeskSupportAuthentication>) credentials;
    }

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Zendesk Support plan. More info about the rate limit plan tiers can be found on Zendesk's API &lt;a href="https://developer.zendesk.com/api-reference/introduction/rate-limits/#zendesk-support-plan-limits"&gt;docs&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<Long> numWorkers() {
        return numWorkers;
    }

    @JsonIgnore
    public SourceZendeskSupportZendeskSupport sourceType() {
        return sourceType;
    }

    /**
     * The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
     */
    @JsonIgnore
    public String subdomain() {
        return subdomain;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
     */
    public SourceZendeskSupport withCredentials(SourceZendeskSupportAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
     */
    public SourceZendeskSupport withCredentials(Optional<? extends SourceZendeskSupportAuthentication> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Zendesk Support plan. More info about the rate limit plan tiers can be found on Zendesk's API &lt;a href="https://developer.zendesk.com/api-reference/introduction/rate-limits/#zendesk-support-plan-limits"&gt;docs&lt;/a&gt;.
     */
    public SourceZendeskSupport withNumWorkers(long numWorkers) {
        Utils.checkNotNull(numWorkers, "numWorkers");
        this.numWorkers = Optional.ofNullable(numWorkers);
        return this;
    }

    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Zendesk Support plan. More info about the rate limit plan tiers can be found on Zendesk's API &lt;a href="https://developer.zendesk.com/api-reference/introduction/rate-limits/#zendesk-support-plan-limits"&gt;docs&lt;/a&gt;.
     */
    public SourceZendeskSupport withNumWorkers(Optional<Long> numWorkers) {
        Utils.checkNotNull(numWorkers, "numWorkers");
        this.numWorkers = numWorkers;
        return this;
    }

    /**
     * The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    public SourceZendeskSupport withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    public SourceZendeskSupport withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
     */
    public SourceZendeskSupport withSubdomain(String subdomain) {
        Utils.checkNotNull(subdomain, "subdomain");
        this.subdomain = subdomain;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZendeskSupport other = (SourceZendeskSupport) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.numWorkers, other.numWorkers) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.subdomain, other.subdomain);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            numWorkers,
            sourceType,
            startDate,
            subdomain);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZendeskSupport.class,
                "credentials", credentials,
                "numWorkers", numWorkers,
                "sourceType", sourceType,
                "startDate", startDate,
                "subdomain", subdomain);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceZendeskSupportAuthentication> credentials = Optional.empty();
 
        private Optional<Long> numWorkers;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
 
        private String subdomain;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
         */
        public Builder credentials(SourceZendeskSupportAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
         */
        public Builder credentials(Optional<? extends SourceZendeskSupportAuthentication> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Zendesk Support plan. More info about the rate limit plan tiers can be found on Zendesk's API &lt;a href="https://developer.zendesk.com/api-reference/introduction/rate-limits/#zendesk-support-plan-limits"&gt;docs&lt;/a&gt;.
         */
        public Builder numWorkers(long numWorkers) {
            Utils.checkNotNull(numWorkers, "numWorkers");
            this.numWorkers = Optional.ofNullable(numWorkers);
            return this;
        }

        /**
         * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Zendesk Support plan. More info about the rate limit plan tiers can be found on Zendesk's API &lt;a href="https://developer.zendesk.com/api-reference/introduction/rate-limits/#zendesk-support-plan-limits"&gt;docs&lt;/a&gt;.
         */
        public Builder numWorkers(Optional<Long> numWorkers) {
            Utils.checkNotNull(numWorkers, "numWorkers");
            this.numWorkers = numWorkers;
            return this;
        }

        /**
         * The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
         */
        public Builder subdomain(String subdomain) {
            Utils.checkNotNull(subdomain, "subdomain");
            this.subdomain = subdomain;
            return this;
        }
        
        public SourceZendeskSupport build() {
            if (numWorkers == null) {
                numWorkers = _SINGLETON_VALUE_NumWorkers.value();
            }            return new SourceZendeskSupport(
                credentials,
                numWorkers,
                startDate,
                subdomain);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_NumWorkers =
                new LazySingletonValue<>(
                        "num_workers",
                        "3",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<SourceZendeskSupportZendeskSupport> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"zendesk-support\"",
                        new TypeReference<SourceZendeskSupportZendeskSupport>() {});
    }
}

