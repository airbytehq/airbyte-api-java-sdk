/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class AuthenticateViaClientCredentials {

    /**
     * Client ID of your Microsoft developer application
     */
    @JsonProperty("app_client_id")
    private String appClientId;

    /**
     * Client Secret of your Microsoft developer application
     */
    @JsonProperty("app_client_secret")
    private String appClientSecret;

    /**
     * Tenant ID of the Microsoft Azure Application
     */
    @JsonProperty("app_tenant_id")
    private String appTenantId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private Optional<? extends SourceAzureBlobStorageSchemasAuthType> authType;

    @JsonCreator
    public AuthenticateViaClientCredentials(
            @JsonProperty("app_client_id") String appClientId,
            @JsonProperty("app_client_secret") String appClientSecret,
            @JsonProperty("app_tenant_id") String appTenantId) {
        Utils.checkNotNull(appClientId, "appClientId");
        Utils.checkNotNull(appClientSecret, "appClientSecret");
        Utils.checkNotNull(appTenantId, "appTenantId");
        this.appClientId = appClientId;
        this.appClientSecret = appClientSecret;
        this.appTenantId = appTenantId;
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
    }

    /**
     * Client ID of your Microsoft developer application
     */
    @JsonIgnore
    public String appClientId() {
        return appClientId;
    }

    /**
     * Client Secret of your Microsoft developer application
     */
    @JsonIgnore
    public String appClientSecret() {
        return appClientSecret;
    }

    /**
     * Tenant ID of the Microsoft Azure Application
     */
    @JsonIgnore
    public String appTenantId() {
        return appTenantId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceAzureBlobStorageSchemasAuthType> authType() {
        return (Optional<SourceAzureBlobStorageSchemasAuthType>) authType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Client ID of your Microsoft developer application
     */
    public AuthenticateViaClientCredentials withAppClientId(String appClientId) {
        Utils.checkNotNull(appClientId, "appClientId");
        this.appClientId = appClientId;
        return this;
    }

    /**
     * Client Secret of your Microsoft developer application
     */
    public AuthenticateViaClientCredentials withAppClientSecret(String appClientSecret) {
        Utils.checkNotNull(appClientSecret, "appClientSecret");
        this.appClientSecret = appClientSecret;
        return this;
    }

    /**
     * Tenant ID of the Microsoft Azure Application
     */
    public AuthenticateViaClientCredentials withAppTenantId(String appTenantId) {
        Utils.checkNotNull(appTenantId, "appTenantId");
        this.appTenantId = appTenantId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthenticateViaClientCredentials other = (AuthenticateViaClientCredentials) o;
        return 
            Objects.deepEquals(this.appClientId, other.appClientId) &&
            Objects.deepEquals(this.appClientSecret, other.appClientSecret) &&
            Objects.deepEquals(this.appTenantId, other.appTenantId) &&
            Objects.deepEquals(this.authType, other.authType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appClientId,
            appClientSecret,
            appTenantId,
            authType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthenticateViaClientCredentials.class,
                "appClientId", appClientId,
                "appClientSecret", appClientSecret,
                "appTenantId", appTenantId,
                "authType", authType);
    }
    
    public final static class Builder {
 
        private String appClientId;
 
        private String appClientSecret;
 
        private String appTenantId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Client ID of your Microsoft developer application
         */
        public Builder appClientId(String appClientId) {
            Utils.checkNotNull(appClientId, "appClientId");
            this.appClientId = appClientId;
            return this;
        }

        /**
         * Client Secret of your Microsoft developer application
         */
        public Builder appClientSecret(String appClientSecret) {
            Utils.checkNotNull(appClientSecret, "appClientSecret");
            this.appClientSecret = appClientSecret;
            return this;
        }

        /**
         * Tenant ID of the Microsoft Azure Application
         */
        public Builder appTenantId(String appTenantId) {
            Utils.checkNotNull(appTenantId, "appTenantId");
            this.appTenantId = appTenantId;
            return this;
        }
        
        public AuthenticateViaClientCredentials build() {
            return new AuthenticateViaClientCredentials(
                appClientId,
                appClientSecret,
                appTenantId);
        }

        private static final LazySingletonValue<Optional<? extends SourceAzureBlobStorageSchemasAuthType>> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"client_credentials\"",
                        new TypeReference<Optional<? extends SourceAzureBlobStorageSchemasAuthType>>() {});
    }
}
