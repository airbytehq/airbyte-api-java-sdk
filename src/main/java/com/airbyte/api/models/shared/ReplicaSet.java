/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class ReplicaSet {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance")
    private Optional<? extends DestinationMongodbInstance> instance;

    /**
     * A replica set name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replica_set")
    private Optional<String> replicaSet;

    /**
     * The members of a replica set. Please specify `host`:`port` of each member seperated by comma.
     */
    @JsonProperty("server_addresses")
    private String serverAddresses;

    @JsonCreator
    public ReplicaSet(
            @JsonProperty("instance") Optional<? extends DestinationMongodbInstance> instance,
            @JsonProperty("replica_set") Optional<String> replicaSet,
            @JsonProperty("server_addresses") String serverAddresses) {
        Utils.checkNotNull(instance, "instance");
        Utils.checkNotNull(replicaSet, "replicaSet");
        Utils.checkNotNull(serverAddresses, "serverAddresses");
        this.instance = instance;
        this.replicaSet = replicaSet;
        this.serverAddresses = serverAddresses;
    }
    
    public ReplicaSet(
            String serverAddresses) {
        this(Optional.empty(), Optional.empty(), serverAddresses);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationMongodbInstance> instance() {
        return (Optional<DestinationMongodbInstance>) instance;
    }

    /**
     * A replica set name.
     */
    @JsonIgnore
    public Optional<String> replicaSet() {
        return replicaSet;
    }

    /**
     * The members of a replica set. Please specify `host`:`port` of each member seperated by comma.
     */
    @JsonIgnore
    public String serverAddresses() {
        return serverAddresses;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ReplicaSet withInstance(DestinationMongodbInstance instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = Optional.ofNullable(instance);
        return this;
    }

    public ReplicaSet withInstance(Optional<? extends DestinationMongodbInstance> instance) {
        Utils.checkNotNull(instance, "instance");
        this.instance = instance;
        return this;
    }

    /**
     * A replica set name.
     */
    public ReplicaSet withReplicaSet(String replicaSet) {
        Utils.checkNotNull(replicaSet, "replicaSet");
        this.replicaSet = Optional.ofNullable(replicaSet);
        return this;
    }

    /**
     * A replica set name.
     */
    public ReplicaSet withReplicaSet(Optional<String> replicaSet) {
        Utils.checkNotNull(replicaSet, "replicaSet");
        this.replicaSet = replicaSet;
        return this;
    }

    /**
     * The members of a replica set. Please specify `host`:`port` of each member seperated by comma.
     */
    public ReplicaSet withServerAddresses(String serverAddresses) {
        Utils.checkNotNull(serverAddresses, "serverAddresses");
        this.serverAddresses = serverAddresses;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReplicaSet other = (ReplicaSet) o;
        return 
            Objects.deepEquals(this.instance, other.instance) &&
            Objects.deepEquals(this.replicaSet, other.replicaSet) &&
            Objects.deepEquals(this.serverAddresses, other.serverAddresses);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            instance,
            replicaSet,
            serverAddresses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReplicaSet.class,
                "instance", instance,
                "replicaSet", replicaSet,
                "serverAddresses", serverAddresses);
    }
    
    public final static class Builder {
 
        private Optional<? extends DestinationMongodbInstance> instance;
 
        private Optional<String> replicaSet = Optional.empty();
 
        private String serverAddresses;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder instance(DestinationMongodbInstance instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = Optional.ofNullable(instance);
            return this;
        }

        public Builder instance(Optional<? extends DestinationMongodbInstance> instance) {
            Utils.checkNotNull(instance, "instance");
            this.instance = instance;
            return this;
        }

        /**
         * A replica set name.
         */
        public Builder replicaSet(String replicaSet) {
            Utils.checkNotNull(replicaSet, "replicaSet");
            this.replicaSet = Optional.ofNullable(replicaSet);
            return this;
        }

        /**
         * A replica set name.
         */
        public Builder replicaSet(Optional<String> replicaSet) {
            Utils.checkNotNull(replicaSet, "replicaSet");
            this.replicaSet = replicaSet;
            return this;
        }

        /**
         * The members of a replica set. Please specify `host`:`port` of each member seperated by comma.
         */
        public Builder serverAddresses(String serverAddresses) {
            Utils.checkNotNull(serverAddresses, "serverAddresses");
            this.serverAddresses = serverAddresses;
            return this;
        }
        
        public ReplicaSet build() {
            if (instance == null) {
                instance = _SINGLETON_VALUE_Instance.value();
            }
            return new ReplicaSet(
                instance,
                replicaSet,
                serverAddresses);
        }

        private static final LazySingletonValue<Optional<? extends DestinationMongodbInstance>> _SINGLETON_VALUE_Instance =
                new LazySingletonValue<>(
                        "instance",
                        "\"replica\"",
                        new TypeReference<Optional<? extends DestinationMongodbInstance>>() {});
    }
}
