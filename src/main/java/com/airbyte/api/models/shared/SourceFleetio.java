/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class SourceFleetio {

    @JsonProperty("account_token")
    private String accountToken;

    @JsonProperty("api_key")
    private String apiKey;

    @JsonProperty("sourceType")
    private Fleetio sourceType;

    @JsonCreator
    public SourceFleetio(
            @JsonProperty("account_token") String accountToken,
            @JsonProperty("api_key") String apiKey) {
        Utils.checkNotNull(accountToken, "accountToken");
        Utils.checkNotNull(apiKey, "apiKey");
        this.accountToken = accountToken;
        this.apiKey = apiKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    @JsonIgnore
    public String accountToken() {
        return accountToken;
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    @JsonIgnore
    public Fleetio sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceFleetio withAccountToken(String accountToken) {
        Utils.checkNotNull(accountToken, "accountToken");
        this.accountToken = accountToken;
        return this;
    }

    public SourceFleetio withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFleetio other = (SourceFleetio) o;
        return 
            java.util.Objects.deepEquals(this.accountToken, other.accountToken) &&
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountToken,
            apiKey,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFleetio.class,
                "accountToken", accountToken,
                "apiKey", apiKey,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String accountToken;
 
        private String apiKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountToken(String accountToken) {
            Utils.checkNotNull(accountToken, "accountToken");
            this.accountToken = accountToken;
            return this;
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }
        
        public SourceFleetio build() {
            return new SourceFleetio(
                accountToken,
                apiKey);
        }

        private static final LazySingletonValue<Fleetio> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"fleetio\"",
                        new TypeReference<Fleetio>() {});
    }
}

