/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Throttled {

    /**
     * Number of milli-second to pause in between records.
     */
    @JsonProperty("millis_per_record")
    private long millisPerRecord;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test_destination_type")
    private Optional<? extends DestinationDevNullSchemasTestDestinationType> testDestinationType;

    @JsonCreator
    public Throttled(
            @JsonProperty("millis_per_record") long millisPerRecord) {
        Utils.checkNotNull(millisPerRecord, "millisPerRecord");
        this.millisPerRecord = millisPerRecord;
        this.testDestinationType = Builder._SINGLETON_VALUE_TestDestinationType.value();
    }

    /**
     * Number of milli-second to pause in between records.
     */
    @JsonIgnore
    public long millisPerRecord() {
        return millisPerRecord;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationDevNullSchemasTestDestinationType> testDestinationType() {
        return (Optional<DestinationDevNullSchemasTestDestinationType>) testDestinationType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of milli-second to pause in between records.
     */
    public Throttled withMillisPerRecord(long millisPerRecord) {
        Utils.checkNotNull(millisPerRecord, "millisPerRecord");
        this.millisPerRecord = millisPerRecord;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Throttled other = (Throttled) o;
        return 
            java.util.Objects.deepEquals(this.millisPerRecord, other.millisPerRecord) &&
            java.util.Objects.deepEquals(this.testDestinationType, other.testDestinationType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            millisPerRecord,
            testDestinationType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Throttled.class,
                "millisPerRecord", millisPerRecord,
                "testDestinationType", testDestinationType);
    }
    
    public final static class Builder {
 
        private Long millisPerRecord;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of milli-second to pause in between records.
         */
        public Builder millisPerRecord(long millisPerRecord) {
            Utils.checkNotNull(millisPerRecord, "millisPerRecord");
            this.millisPerRecord = millisPerRecord;
            return this;
        }
        
        public Throttled build() {
            return new Throttled(
                millisPerRecord);
        }

        private static final LazySingletonValue<Optional<? extends DestinationDevNullSchemasTestDestinationType>> _SINGLETON_VALUE_TestDestinationType =
                new LazySingletonValue<>(
                        "test_destination_type",
                        "\"THROTTLED\"",
                        new TypeReference<Optional<? extends DestinationDevNullSchemasTestDestinationType>>() {});
    }
}

