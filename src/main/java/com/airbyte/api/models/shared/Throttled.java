/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class Throttled {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * The number of milliseconds to wait between each record.
     */
    @JsonProperty("millis_per_record")
    private long millisPerRecord;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test_destination_type")
    private Optional<? extends DestinationDevNullSchemasTestDestinationType> testDestinationType;

    @JsonCreator
    public Throttled(
            @JsonProperty("millis_per_record") long millisPerRecord,
            @JsonProperty("test_destination_type") Optional<? extends DestinationDevNullSchemasTestDestinationType> testDestinationType) {
        Utils.checkNotNull(millisPerRecord, "millisPerRecord");
        Utils.checkNotNull(testDestinationType, "testDestinationType");
        this.additionalProperties = new HashMap<>();
        this.millisPerRecord = millisPerRecord;
        this.testDestinationType = testDestinationType;
    }
    
    public Throttled(
            long millisPerRecord) {
        this(millisPerRecord, Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * The number of milliseconds to wait between each record.
     */
    @JsonIgnore
    public long millisPerRecord() {
        return millisPerRecord;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationDevNullSchemasTestDestinationType> testDestinationType() {
        return (Optional<DestinationDevNullSchemasTestDestinationType>) testDestinationType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    @JsonAnySetter
    public Throttled withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public Throttled withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * The number of milliseconds to wait between each record.
     */
    public Throttled withMillisPerRecord(long millisPerRecord) {
        Utils.checkNotNull(millisPerRecord, "millisPerRecord");
        this.millisPerRecord = millisPerRecord;
        return this;
    }

    public Throttled withTestDestinationType(DestinationDevNullSchemasTestDestinationType testDestinationType) {
        Utils.checkNotNull(testDestinationType, "testDestinationType");
        this.testDestinationType = Optional.ofNullable(testDestinationType);
        return this;
    }

    public Throttled withTestDestinationType(Optional<? extends DestinationDevNullSchemasTestDestinationType> testDestinationType) {
        Utils.checkNotNull(testDestinationType, "testDestinationType");
        this.testDestinationType = testDestinationType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Throttled other = (Throttled) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.millisPerRecord, other.millisPerRecord) &&
            Objects.deepEquals(this.testDestinationType, other.testDestinationType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            millisPerRecord,
            testDestinationType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Throttled.class,
                "additionalProperties", additionalProperties,
                "millisPerRecord", millisPerRecord,
                "testDestinationType", testDestinationType);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Long millisPerRecord;
 
        private Optional<? extends DestinationDevNullSchemasTestDestinationType> testDestinationType;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * The number of milliseconds to wait between each record.
         */
        public Builder millisPerRecord(long millisPerRecord) {
            Utils.checkNotNull(millisPerRecord, "millisPerRecord");
            this.millisPerRecord = millisPerRecord;
            return this;
        }

        public Builder testDestinationType(DestinationDevNullSchemasTestDestinationType testDestinationType) {
            Utils.checkNotNull(testDestinationType, "testDestinationType");
            this.testDestinationType = Optional.ofNullable(testDestinationType);
            return this;
        }

        public Builder testDestinationType(Optional<? extends DestinationDevNullSchemasTestDestinationType> testDestinationType) {
            Utils.checkNotNull(testDestinationType, "testDestinationType");
            this.testDestinationType = testDestinationType;
            return this;
        }
        
        public Throttled build() {
            if (testDestinationType == null) {
                testDestinationType = _SINGLETON_VALUE_TestDestinationType.value();
            }            return new Throttled(
                millisPerRecord,
                testDestinationType)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends DestinationDevNullSchemasTestDestinationType>> _SINGLETON_VALUE_TestDestinationType =
                new LazySingletonValue<>(
                        "test_destination_type",
                        "\"THROTTLED\"",
                        new TypeReference<Optional<? extends DestinationDevNullSchemasTestDestinationType>>() {});
    }
}

