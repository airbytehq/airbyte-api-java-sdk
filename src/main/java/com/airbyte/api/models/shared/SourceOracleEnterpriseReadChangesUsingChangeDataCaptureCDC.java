/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC
 * 
 * <p>&lt;i&gt;Recommended&lt;/i&gt; - Incrementally reads new inserts, updates, and deletes using Oracle's &lt;a href="https://docs.airbyte.com/integrations/enterprise-connectors/source-oracle#getting-started"&gt; change data capture feature&lt;/a&gt;. This must be enabled on your database.
 */
public class SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor_method")
    private Optional<? extends SourceOracleEnterpriseSchemasCursorMethod> cursorMethod;

    /**
     * The amount of time to allow the Debezium Engine to shut down, in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debezium_shutdown_timeout_seconds")
    private Optional<Long> debeziumShutdownTimeoutSeconds;

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initial_load_timeout_hours")
    private Optional<Long> initialLoadTimeoutHours;

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invalid_cdc_cursor_position_behavior")
    private Optional<? extends SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior;

    @JsonCreator
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC(
            @JsonProperty("cursor_method") Optional<? extends SourceOracleEnterpriseSchemasCursorMethod> cursorMethod,
            @JsonProperty("debezium_shutdown_timeout_seconds") Optional<Long> debeziumShutdownTimeoutSeconds,
            @JsonProperty("initial_load_timeout_hours") Optional<Long> initialLoadTimeoutHours,
            @JsonProperty("invalid_cdc_cursor_position_behavior") Optional<? extends SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior) {
        Utils.checkNotNull(cursorMethod, "cursorMethod");
        Utils.checkNotNull(debeziumShutdownTimeoutSeconds, "debeziumShutdownTimeoutSeconds");
        Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
        Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
        this.additionalProperties = new HashMap<>();
        this.cursorMethod = cursorMethod;
        this.debeziumShutdownTimeoutSeconds = debeziumShutdownTimeoutSeconds;
        this.initialLoadTimeoutHours = initialLoadTimeoutHours;
        this.invalidCdcCursorPositionBehavior = invalidCdcCursorPositionBehavior;
    }
    
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceOracleEnterpriseSchemasCursorMethod> cursorMethod() {
        return (Optional<SourceOracleEnterpriseSchemasCursorMethod>) cursorMethod;
    }

    /**
     * The amount of time to allow the Debezium Engine to shut down, in seconds.
     */
    @JsonIgnore
    public Optional<Long> debeziumShutdownTimeoutSeconds() {
        return debeziumShutdownTimeoutSeconds;
    }

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC events.
     */
    @JsonIgnore
    public Optional<Long> initialLoadTimeoutHours() {
        return initialLoadTimeoutHours;
    }

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior() {
        return (Optional<SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced>) invalidCdcCursorPositionBehavior;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withCursorMethod(SourceOracleEnterpriseSchemasCursorMethod cursorMethod) {
        Utils.checkNotNull(cursorMethod, "cursorMethod");
        this.cursorMethod = Optional.ofNullable(cursorMethod);
        return this;
    }

    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withCursorMethod(Optional<? extends SourceOracleEnterpriseSchemasCursorMethod> cursorMethod) {
        Utils.checkNotNull(cursorMethod, "cursorMethod");
        this.cursorMethod = cursorMethod;
        return this;
    }

    /**
     * The amount of time to allow the Debezium Engine to shut down, in seconds.
     */
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withDebeziumShutdownTimeoutSeconds(long debeziumShutdownTimeoutSeconds) {
        Utils.checkNotNull(debeziumShutdownTimeoutSeconds, "debeziumShutdownTimeoutSeconds");
        this.debeziumShutdownTimeoutSeconds = Optional.ofNullable(debeziumShutdownTimeoutSeconds);
        return this;
    }

    /**
     * The amount of time to allow the Debezium Engine to shut down, in seconds.
     */
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withDebeziumShutdownTimeoutSeconds(Optional<Long> debeziumShutdownTimeoutSeconds) {
        Utils.checkNotNull(debeziumShutdownTimeoutSeconds, "debeziumShutdownTimeoutSeconds");
        this.debeziumShutdownTimeoutSeconds = debeziumShutdownTimeoutSeconds;
        return this;
    }

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC events.
     */
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withInitialLoadTimeoutHours(long initialLoadTimeoutHours) {
        Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
        this.initialLoadTimeoutHours = Optional.ofNullable(initialLoadTimeoutHours);
        return this;
    }

    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC events.
     */
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withInitialLoadTimeoutHours(Optional<Long> initialLoadTimeoutHours) {
        Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
        this.initialLoadTimeoutHours = initialLoadTimeoutHours;
        return this;
    }

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withInvalidCdcCursorPositionBehavior(SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced invalidCdcCursorPositionBehavior) {
        Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
        this.invalidCdcCursorPositionBehavior = Optional.ofNullable(invalidCdcCursorPositionBehavior);
        return this;
    }

    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     */
    public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC withInvalidCdcCursorPositionBehavior(Optional<? extends SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior) {
        Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
        this.invalidCdcCursorPositionBehavior = invalidCdcCursorPositionBehavior;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC other = (SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.cursorMethod, other.cursorMethod) &&
            Objects.deepEquals(this.debeziumShutdownTimeoutSeconds, other.debeziumShutdownTimeoutSeconds) &&
            Objects.deepEquals(this.initialLoadTimeoutHours, other.initialLoadTimeoutHours) &&
            Objects.deepEquals(this.invalidCdcCursorPositionBehavior, other.invalidCdcCursorPositionBehavior);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            cursorMethod,
            debeziumShutdownTimeoutSeconds,
            initialLoadTimeoutHours,
            invalidCdcCursorPositionBehavior);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC.class,
                "additionalProperties", additionalProperties,
                "cursorMethod", cursorMethod,
                "debeziumShutdownTimeoutSeconds", debeziumShutdownTimeoutSeconds,
                "initialLoadTimeoutHours", initialLoadTimeoutHours,
                "invalidCdcCursorPositionBehavior", invalidCdcCursorPositionBehavior);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends SourceOracleEnterpriseSchemasCursorMethod> cursorMethod;
 
        private Optional<Long> debeziumShutdownTimeoutSeconds;
 
        private Optional<Long> initialLoadTimeoutHours;
 
        private Optional<? extends SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder cursorMethod(SourceOracleEnterpriseSchemasCursorMethod cursorMethod) {
            Utils.checkNotNull(cursorMethod, "cursorMethod");
            this.cursorMethod = Optional.ofNullable(cursorMethod);
            return this;
        }

        public Builder cursorMethod(Optional<? extends SourceOracleEnterpriseSchemasCursorMethod> cursorMethod) {
            Utils.checkNotNull(cursorMethod, "cursorMethod");
            this.cursorMethod = cursorMethod;
            return this;
        }

        /**
         * The amount of time to allow the Debezium Engine to shut down, in seconds.
         */
        public Builder debeziumShutdownTimeoutSeconds(long debeziumShutdownTimeoutSeconds) {
            Utils.checkNotNull(debeziumShutdownTimeoutSeconds, "debeziumShutdownTimeoutSeconds");
            this.debeziumShutdownTimeoutSeconds = Optional.ofNullable(debeziumShutdownTimeoutSeconds);
            return this;
        }

        /**
         * The amount of time to allow the Debezium Engine to shut down, in seconds.
         */
        public Builder debeziumShutdownTimeoutSeconds(Optional<Long> debeziumShutdownTimeoutSeconds) {
            Utils.checkNotNull(debeziumShutdownTimeoutSeconds, "debeziumShutdownTimeoutSeconds");
            this.debeziumShutdownTimeoutSeconds = debeziumShutdownTimeoutSeconds;
            return this;
        }

        /**
         * The amount of time an initial load is allowed to continue for before catching up on CDC events.
         */
        public Builder initialLoadTimeoutHours(long initialLoadTimeoutHours) {
            Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
            this.initialLoadTimeoutHours = Optional.ofNullable(initialLoadTimeoutHours);
            return this;
        }

        /**
         * The amount of time an initial load is allowed to continue for before catching up on CDC events.
         */
        public Builder initialLoadTimeoutHours(Optional<Long> initialLoadTimeoutHours) {
            Utils.checkNotNull(initialLoadTimeoutHours, "initialLoadTimeoutHours");
            this.initialLoadTimeoutHours = initialLoadTimeoutHours;
            return this;
        }

        /**
         * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
         */
        public Builder invalidCdcCursorPositionBehavior(SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced invalidCdcCursorPositionBehavior) {
            Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
            this.invalidCdcCursorPositionBehavior = Optional.ofNullable(invalidCdcCursorPositionBehavior);
            return this;
        }

        /**
         * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
         */
        public Builder invalidCdcCursorPositionBehavior(Optional<? extends SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced> invalidCdcCursorPositionBehavior) {
            Utils.checkNotNull(invalidCdcCursorPositionBehavior, "invalidCdcCursorPositionBehavior");
            this.invalidCdcCursorPositionBehavior = invalidCdcCursorPositionBehavior;
            return this;
        }
        
        public SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC build() {
            if (cursorMethod == null) {
                cursorMethod = _SINGLETON_VALUE_CursorMethod.value();
            }
            if (debeziumShutdownTimeoutSeconds == null) {
                debeziumShutdownTimeoutSeconds = _SINGLETON_VALUE_DebeziumShutdownTimeoutSeconds.value();
            }
            if (initialLoadTimeoutHours == null) {
                initialLoadTimeoutHours = _SINGLETON_VALUE_InitialLoadTimeoutHours.value();
            }
            if (invalidCdcCursorPositionBehavior == null) {
                invalidCdcCursorPositionBehavior = _SINGLETON_VALUE_InvalidCdcCursorPositionBehavior.value();
            }
            return new SourceOracleEnterpriseReadChangesUsingChangeDataCaptureCDC(
                cursorMethod,
                debeziumShutdownTimeoutSeconds,
                initialLoadTimeoutHours,
                invalidCdcCursorPositionBehavior)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceOracleEnterpriseSchemasCursorMethod>> _SINGLETON_VALUE_CursorMethod =
                new LazySingletonValue<>(
                        "cursor_method",
                        "\"cdc\"",
                        new TypeReference<Optional<? extends SourceOracleEnterpriseSchemasCursorMethod>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_DebeziumShutdownTimeoutSeconds =
                new LazySingletonValue<>(
                        "debezium_shutdown_timeout_seconds",
                        "60",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_InitialLoadTimeoutHours =
                new LazySingletonValue<>(
                        "initial_load_timeout_hours",
                        "8",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<? extends SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced>> _SINGLETON_VALUE_InvalidCdcCursorPositionBehavior =
                new LazySingletonValue<>(
                        "invalid_cdc_cursor_position_behavior",
                        "\"Fail sync\"",
                        new TypeReference<Optional<? extends SourceOracleEnterpriseInvalidCDCPositionBehaviorAdvanced>>() {});
    }
}
