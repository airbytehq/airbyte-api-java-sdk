/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceKeka {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Your client identifier for authentication.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * Your client secret for secure authentication.
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    @JsonProperty("grant_type")
    private String grantType;

    @JsonProperty("scope")
    private String scope;

    @JsonProperty("sourceType")
    private Keka sourceType;

    @JsonCreator
    public SourceKeka(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("grant_type") String grantType,
            @JsonProperty("scope") String scope) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(grantType, "grantType");
        Utils.checkNotNull(scope, "scope");
        this.apiKey = apiKey;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.grantType = grantType;
        this.scope = scope;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Your client identifier for authentication.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * Your client secret for secure authentication.
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    @JsonIgnore
    public String grantType() {
        return grantType;
    }

    @JsonIgnore
    public String scope() {
        return scope;
    }

    @JsonIgnore
    public Keka sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceKeka withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Your client identifier for authentication.
     */
    public SourceKeka withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Your client secret for secure authentication.
     */
    public SourceKeka withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    public SourceKeka withGrantType(String grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    public SourceKeka withScope(String scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceKeka other = (SourceKeka) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.grantType, other.grantType) &&
            Objects.deepEquals(this.scope, other.scope) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            clientId,
            clientSecret,
            grantType,
            scope,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceKeka.class,
                "apiKey", apiKey,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "grantType", grantType,
                "scope", scope,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private String clientId;
 
        private String clientSecret;
 
        private String grantType;
 
        private String scope;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Your client identifier for authentication.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Your client secret for secure authentication.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder grantType(String grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }

        public Builder scope(String scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }
        
        public SourceKeka build() {
            return new SourceKeka(
                apiKey,
                clientId,
                clientSecret,
                grantType,
                scope);
        }

        private static final LazySingletonValue<Keka> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"keka\"",
                        new TypeReference<Keka>() {});
    }
}
