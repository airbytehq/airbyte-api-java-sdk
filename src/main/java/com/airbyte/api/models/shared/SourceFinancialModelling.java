/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceFinancialModelling {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The stock exchange : AMEX, AMS, AQS, ASX, ATH, BER, BME, BRU, BSE, BUD, BUE, BVC, CAI, CBOE, CNQ, CPH, DFM, DOH, DUS, DXE, EGX, EURONEXT, HAM, HEL, HKSE, ICE, IOB, IST, JKT, JNB, JPX, KLS, KOE, KSC, KUW, LSE, MCX, MEX, MIL, MUN, NASDAQ, NEO, NSE, NYSE, NZE, OEM, OQX, OSL, OTC, PNK, PRA, RIS, SAO, SAU, SES, SET, SGO, SHH, SHZ, SIX, STO, STU, TAI, TLV, TSX, TSXV, TWO, VIE, VSE, WSE, XETRA
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exchange")
    private Optional<String> exchange;

    /**
     * Used in screener to filter out stocks with a market cap lower than the give marketcap
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketcaplowerthan")
    private Optional<String> marketcaplowerthan;

    /**
     * Used in screener to filter out stocks with a market cap more than the give marketcap
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketcapmorethan")
    private Optional<String> marketcapmorethan;

    @JsonProperty("sourceType")
    private FinancialModelling sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * For example 1min, 5min, 15min, 30min, 1hour, 4hour
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_frame")
    private Optional<? extends TimeFrame> timeFrame;

    @JsonCreator
    public SourceFinancialModelling(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("exchange") Optional<String> exchange,
            @JsonProperty("marketcaplowerthan") Optional<String> marketcaplowerthan,
            @JsonProperty("marketcapmorethan") Optional<String> marketcapmorethan,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("time_frame") Optional<? extends TimeFrame> timeFrame) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(exchange, "exchange");
        Utils.checkNotNull(marketcaplowerthan, "marketcaplowerthan");
        Utils.checkNotNull(marketcapmorethan, "marketcapmorethan");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(timeFrame, "timeFrame");
        this.apiKey = apiKey;
        this.exchange = exchange;
        this.marketcaplowerthan = marketcaplowerthan;
        this.marketcapmorethan = marketcapmorethan;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.timeFrame = timeFrame;
    }
    
    public SourceFinancialModelling(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), Optional.empty(), startDate, Optional.empty());
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The stock exchange : AMEX, AMS, AQS, ASX, ATH, BER, BME, BRU, BSE, BUD, BUE, BVC, CAI, CBOE, CNQ, CPH, DFM, DOH, DUS, DXE, EGX, EURONEXT, HAM, HEL, HKSE, ICE, IOB, IST, JKT, JNB, JPX, KLS, KOE, KSC, KUW, LSE, MCX, MEX, MIL, MUN, NASDAQ, NEO, NSE, NYSE, NZE, OEM, OQX, OSL, OTC, PNK, PRA, RIS, SAO, SAU, SES, SET, SGO, SHH, SHZ, SIX, STO, STU, TAI, TLV, TSX, TSXV, TWO, VIE, VSE, WSE, XETRA
     */
    @JsonIgnore
    public Optional<String> exchange() {
        return exchange;
    }

    /**
     * Used in screener to filter out stocks with a market cap lower than the give marketcap
     */
    @JsonIgnore
    public Optional<String> marketcaplowerthan() {
        return marketcaplowerthan;
    }

    /**
     * Used in screener to filter out stocks with a market cap more than the give marketcap
     */
    @JsonIgnore
    public Optional<String> marketcapmorethan() {
        return marketcapmorethan;
    }

    @JsonIgnore
    public FinancialModelling sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * For example 1min, 5min, 15min, 30min, 1hour, 4hour
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TimeFrame> timeFrame() {
        return (Optional<TimeFrame>) timeFrame;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceFinancialModelling withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The stock exchange : AMEX, AMS, AQS, ASX, ATH, BER, BME, BRU, BSE, BUD, BUE, BVC, CAI, CBOE, CNQ, CPH, DFM, DOH, DUS, DXE, EGX, EURONEXT, HAM, HEL, HKSE, ICE, IOB, IST, JKT, JNB, JPX, KLS, KOE, KSC, KUW, LSE, MCX, MEX, MIL, MUN, NASDAQ, NEO, NSE, NYSE, NZE, OEM, OQX, OSL, OTC, PNK, PRA, RIS, SAO, SAU, SES, SET, SGO, SHH, SHZ, SIX, STO, STU, TAI, TLV, TSX, TSXV, TWO, VIE, VSE, WSE, XETRA
     */
    public SourceFinancialModelling withExchange(String exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = Optional.ofNullable(exchange);
        return this;
    }

    /**
     * The stock exchange : AMEX, AMS, AQS, ASX, ATH, BER, BME, BRU, BSE, BUD, BUE, BVC, CAI, CBOE, CNQ, CPH, DFM, DOH, DUS, DXE, EGX, EURONEXT, HAM, HEL, HKSE, ICE, IOB, IST, JKT, JNB, JPX, KLS, KOE, KSC, KUW, LSE, MCX, MEX, MIL, MUN, NASDAQ, NEO, NSE, NYSE, NZE, OEM, OQX, OSL, OTC, PNK, PRA, RIS, SAO, SAU, SES, SET, SGO, SHH, SHZ, SIX, STO, STU, TAI, TLV, TSX, TSXV, TWO, VIE, VSE, WSE, XETRA
     */
    public SourceFinancialModelling withExchange(Optional<String> exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = exchange;
        return this;
    }

    /**
     * Used in screener to filter out stocks with a market cap lower than the give marketcap
     */
    public SourceFinancialModelling withMarketcaplowerthan(String marketcaplowerthan) {
        Utils.checkNotNull(marketcaplowerthan, "marketcaplowerthan");
        this.marketcaplowerthan = Optional.ofNullable(marketcaplowerthan);
        return this;
    }

    /**
     * Used in screener to filter out stocks with a market cap lower than the give marketcap
     */
    public SourceFinancialModelling withMarketcaplowerthan(Optional<String> marketcaplowerthan) {
        Utils.checkNotNull(marketcaplowerthan, "marketcaplowerthan");
        this.marketcaplowerthan = marketcaplowerthan;
        return this;
    }

    /**
     * Used in screener to filter out stocks with a market cap more than the give marketcap
     */
    public SourceFinancialModelling withMarketcapmorethan(String marketcapmorethan) {
        Utils.checkNotNull(marketcapmorethan, "marketcapmorethan");
        this.marketcapmorethan = Optional.ofNullable(marketcapmorethan);
        return this;
    }

    /**
     * Used in screener to filter out stocks with a market cap more than the give marketcap
     */
    public SourceFinancialModelling withMarketcapmorethan(Optional<String> marketcapmorethan) {
        Utils.checkNotNull(marketcapmorethan, "marketcapmorethan");
        this.marketcapmorethan = marketcapmorethan;
        return this;
    }

    public SourceFinancialModelling withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * For example 1min, 5min, 15min, 30min, 1hour, 4hour
     */
    public SourceFinancialModelling withTimeFrame(TimeFrame timeFrame) {
        Utils.checkNotNull(timeFrame, "timeFrame");
        this.timeFrame = Optional.ofNullable(timeFrame);
        return this;
    }

    /**
     * For example 1min, 5min, 15min, 30min, 1hour, 4hour
     */
    public SourceFinancialModelling withTimeFrame(Optional<? extends TimeFrame> timeFrame) {
        Utils.checkNotNull(timeFrame, "timeFrame");
        this.timeFrame = timeFrame;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFinancialModelling other = (SourceFinancialModelling) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.exchange, other.exchange) &&
            Objects.deepEquals(this.marketcaplowerthan, other.marketcaplowerthan) &&
            Objects.deepEquals(this.marketcapmorethan, other.marketcapmorethan) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.timeFrame, other.timeFrame);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            exchange,
            marketcaplowerthan,
            marketcapmorethan,
            sourceType,
            startDate,
            timeFrame);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFinancialModelling.class,
                "apiKey", apiKey,
                "exchange", exchange,
                "marketcaplowerthan", marketcaplowerthan,
                "marketcapmorethan", marketcapmorethan,
                "sourceType", sourceType,
                "startDate", startDate,
                "timeFrame", timeFrame);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> exchange;
 
        private Optional<String> marketcaplowerthan = Optional.empty();
 
        private Optional<String> marketcapmorethan = Optional.empty();
 
        private OffsetDateTime startDate;
 
        private Optional<? extends TimeFrame> timeFrame;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The stock exchange : AMEX, AMS, AQS, ASX, ATH, BER, BME, BRU, BSE, BUD, BUE, BVC, CAI, CBOE, CNQ, CPH, DFM, DOH, DUS, DXE, EGX, EURONEXT, HAM, HEL, HKSE, ICE, IOB, IST, JKT, JNB, JPX, KLS, KOE, KSC, KUW, LSE, MCX, MEX, MIL, MUN, NASDAQ, NEO, NSE, NYSE, NZE, OEM, OQX, OSL, OTC, PNK, PRA, RIS, SAO, SAU, SES, SET, SGO, SHH, SHZ, SIX, STO, STU, TAI, TLV, TSX, TSXV, TWO, VIE, VSE, WSE, XETRA
         */
        public Builder exchange(String exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = Optional.ofNullable(exchange);
            return this;
        }

        /**
         * The stock exchange : AMEX, AMS, AQS, ASX, ATH, BER, BME, BRU, BSE, BUD, BUE, BVC, CAI, CBOE, CNQ, CPH, DFM, DOH, DUS, DXE, EGX, EURONEXT, HAM, HEL, HKSE, ICE, IOB, IST, JKT, JNB, JPX, KLS, KOE, KSC, KUW, LSE, MCX, MEX, MIL, MUN, NASDAQ, NEO, NSE, NYSE, NZE, OEM, OQX, OSL, OTC, PNK, PRA, RIS, SAO, SAU, SES, SET, SGO, SHH, SHZ, SIX, STO, STU, TAI, TLV, TSX, TSXV, TWO, VIE, VSE, WSE, XETRA
         */
        public Builder exchange(Optional<String> exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = exchange;
            return this;
        }

        /**
         * Used in screener to filter out stocks with a market cap lower than the give marketcap
         */
        public Builder marketcaplowerthan(String marketcaplowerthan) {
            Utils.checkNotNull(marketcaplowerthan, "marketcaplowerthan");
            this.marketcaplowerthan = Optional.ofNullable(marketcaplowerthan);
            return this;
        }

        /**
         * Used in screener to filter out stocks with a market cap lower than the give marketcap
         */
        public Builder marketcaplowerthan(Optional<String> marketcaplowerthan) {
            Utils.checkNotNull(marketcaplowerthan, "marketcaplowerthan");
            this.marketcaplowerthan = marketcaplowerthan;
            return this;
        }

        /**
         * Used in screener to filter out stocks with a market cap more than the give marketcap
         */
        public Builder marketcapmorethan(String marketcapmorethan) {
            Utils.checkNotNull(marketcapmorethan, "marketcapmorethan");
            this.marketcapmorethan = Optional.ofNullable(marketcapmorethan);
            return this;
        }

        /**
         * Used in screener to filter out stocks with a market cap more than the give marketcap
         */
        public Builder marketcapmorethan(Optional<String> marketcapmorethan) {
            Utils.checkNotNull(marketcapmorethan, "marketcapmorethan");
            this.marketcapmorethan = marketcapmorethan;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * For example 1min, 5min, 15min, 30min, 1hour, 4hour
         */
        public Builder timeFrame(TimeFrame timeFrame) {
            Utils.checkNotNull(timeFrame, "timeFrame");
            this.timeFrame = Optional.ofNullable(timeFrame);
            return this;
        }

        /**
         * For example 1min, 5min, 15min, 30min, 1hour, 4hour
         */
        public Builder timeFrame(Optional<? extends TimeFrame> timeFrame) {
            Utils.checkNotNull(timeFrame, "timeFrame");
            this.timeFrame = timeFrame;
            return this;
        }
        
        public SourceFinancialModelling build() {
            if (exchange == null) {
                exchange = _SINGLETON_VALUE_Exchange.value();
            }
            if (timeFrame == null) {
                timeFrame = _SINGLETON_VALUE_TimeFrame.value();
            }
            return new SourceFinancialModelling(
                apiKey,
                exchange,
                marketcaplowerthan,
                marketcapmorethan,
                startDate,
                timeFrame);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Exchange =
                new LazySingletonValue<>(
                        "exchange",
                        "\"NASDAQ\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<FinancialModelling> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"financial-modelling\"",
                        new TypeReference<FinancialModelling>() {});

        private static final LazySingletonValue<Optional<? extends TimeFrame>> _SINGLETON_VALUE_TimeFrame =
                new LazySingletonValue<>(
                        "time_frame",
                        "\"4hour\"",
                        new TypeReference<Optional<? extends TimeFrame>>() {});
    }
}
