/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AirbyteApiConnectionSchedule - schedule for when the the connection should run, per the schedule type
 */

public class AirbyteApiConnectionSchedule {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cronExpression")
    private Optional<? extends String> cronExpression;

    @JsonProperty("scheduleType")
    private ScheduleTypeEnum scheduleType;

    @JsonCreator
    public AirbyteApiConnectionSchedule(
            @JsonProperty("cronExpression") Optional<? extends String> cronExpression,
            @JsonProperty("scheduleType") ScheduleTypeEnum scheduleType) {
        Utils.checkNotNull(cronExpression, "cronExpression");
        Utils.checkNotNull(scheduleType, "scheduleType");
        this.cronExpression = cronExpression;
        this.scheduleType = scheduleType;
    }
    
    public AirbyteApiConnectionSchedule(
            ScheduleTypeEnum scheduleType) {
        this(Optional.empty(), scheduleType);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> cronExpression() {
        return (Optional<String>) cronExpression;
    }

    @JsonIgnore
    public ScheduleTypeEnum scheduleType() {
        return scheduleType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AirbyteApiConnectionSchedule withCronExpression(String cronExpression) {
        Utils.checkNotNull(cronExpression, "cronExpression");
        this.cronExpression = Optional.ofNullable(cronExpression);
        return this;
    }

    public AirbyteApiConnectionSchedule withCronExpression(Optional<? extends String> cronExpression) {
        Utils.checkNotNull(cronExpression, "cronExpression");
        this.cronExpression = cronExpression;
        return this;
    }

    public AirbyteApiConnectionSchedule withScheduleType(ScheduleTypeEnum scheduleType) {
        Utils.checkNotNull(scheduleType, "scheduleType");
        this.scheduleType = scheduleType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AirbyteApiConnectionSchedule other = (AirbyteApiConnectionSchedule) o;
        return 
            java.util.Objects.deepEquals(this.cronExpression, other.cronExpression) &&
            java.util.Objects.deepEquals(this.scheduleType, other.scheduleType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            cronExpression,
            scheduleType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AirbyteApiConnectionSchedule.class,
                "cronExpression", cronExpression,
                "scheduleType", scheduleType);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> cronExpression = Optional.empty();
 
        private ScheduleTypeEnum scheduleType;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder cronExpression(String cronExpression) {
            Utils.checkNotNull(cronExpression, "cronExpression");
            this.cronExpression = Optional.ofNullable(cronExpression);
            return this;
        }

        public Builder cronExpression(Optional<? extends String> cronExpression) {
            Utils.checkNotNull(cronExpression, "cronExpression");
            this.cronExpression = cronExpression;
            return this;
        }

        public Builder scheduleType(ScheduleTypeEnum scheduleType) {
            Utils.checkNotNull(scheduleType, "scheduleType");
            this.scheduleType = scheduleType;
            return this;
        }
        
        public AirbyteApiConnectionSchedule build() {
            return new AirbyteApiConnectionSchedule(
                cronExpression,
                scheduleType);
        }
    }
}

