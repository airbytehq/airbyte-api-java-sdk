/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;

public class SourceMercadoAds {

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_refresh_token")
    private String clientRefreshToken;

    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Cannot exceed 90 days from current day for Product Ads
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<LocalDate> endDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookback_days")
    private Optional<Double> lookbackDays;

    @JsonProperty("sourceType")
    private MercadoAds sourceType;

    /**
     * Cannot exceed 90 days from current day for Product Ads, and 90 days from "End Date" on Brand and Display Ads
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<LocalDate> startDate;

    @JsonCreator
    public SourceMercadoAds(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_refresh_token") String clientRefreshToken,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("end_date") Optional<LocalDate> endDate,
            @JsonProperty("lookback_days") Optional<Double> lookbackDays,
            @JsonProperty("start_date") Optional<LocalDate> startDate) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientRefreshToken, "clientRefreshToken");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(lookbackDays, "lookbackDays");
        Utils.checkNotNull(startDate, "startDate");
        this.clientId = clientId;
        this.clientRefreshToken = clientRefreshToken;
        this.clientSecret = clientSecret;
        this.endDate = endDate;
        this.lookbackDays = lookbackDays;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceMercadoAds(
            String clientId,
            String clientRefreshToken,
            String clientSecret) {
        this(clientId, clientRefreshToken, clientSecret, Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String clientRefreshToken() {
        return clientRefreshToken;
    }

    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Cannot exceed 90 days from current day for Product Ads
     */
    @JsonIgnore
    public Optional<LocalDate> endDate() {
        return endDate;
    }

    @JsonIgnore
    public Optional<Double> lookbackDays() {
        return lookbackDays;
    }

    @JsonIgnore
    public MercadoAds sourceType() {
        return sourceType;
    }

    /**
     * Cannot exceed 90 days from current day for Product Ads, and 90 days from "End Date" on Brand and Display Ads
     */
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceMercadoAds withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public SourceMercadoAds withClientRefreshToken(String clientRefreshToken) {
        Utils.checkNotNull(clientRefreshToken, "clientRefreshToken");
        this.clientRefreshToken = clientRefreshToken;
        return this;
    }

    public SourceMercadoAds withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Cannot exceed 90 days from current day for Product Ads
     */
    public SourceMercadoAds withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Cannot exceed 90 days from current day for Product Ads
     */
    public SourceMercadoAds withEndDate(Optional<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    public SourceMercadoAds withLookbackDays(double lookbackDays) {
        Utils.checkNotNull(lookbackDays, "lookbackDays");
        this.lookbackDays = Optional.ofNullable(lookbackDays);
        return this;
    }

    public SourceMercadoAds withLookbackDays(Optional<Double> lookbackDays) {
        Utils.checkNotNull(lookbackDays, "lookbackDays");
        this.lookbackDays = lookbackDays;
        return this;
    }

    /**
     * Cannot exceed 90 days from current day for Product Ads, and 90 days from "End Date" on Brand and Display Ads
     */
    public SourceMercadoAds withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Cannot exceed 90 days from current day for Product Ads, and 90 days from "End Date" on Brand and Display Ads
     */
    public SourceMercadoAds withStartDate(Optional<LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMercadoAds other = (SourceMercadoAds) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientRefreshToken, other.clientRefreshToken) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.lookbackDays, other.lookbackDays) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientRefreshToken,
            clientSecret,
            endDate,
            lookbackDays,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMercadoAds.class,
                "clientId", clientId,
                "clientRefreshToken", clientRefreshToken,
                "clientSecret", clientSecret,
                "endDate", endDate,
                "lookbackDays", lookbackDays,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientRefreshToken;
 
        private String clientSecret;
 
        private Optional<LocalDate> endDate = Optional.empty();
 
        private Optional<Double> lookbackDays;
 
        private Optional<LocalDate> startDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientRefreshToken(String clientRefreshToken) {
            Utils.checkNotNull(clientRefreshToken, "clientRefreshToken");
            this.clientRefreshToken = clientRefreshToken;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Cannot exceed 90 days from current day for Product Ads
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Cannot exceed 90 days from current day for Product Ads
         */
        public Builder endDate(Optional<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        public Builder lookbackDays(double lookbackDays) {
            Utils.checkNotNull(lookbackDays, "lookbackDays");
            this.lookbackDays = Optional.ofNullable(lookbackDays);
            return this;
        }

        public Builder lookbackDays(Optional<Double> lookbackDays) {
            Utils.checkNotNull(lookbackDays, "lookbackDays");
            this.lookbackDays = lookbackDays;
            return this;
        }

        /**
         * Cannot exceed 90 days from current day for Product Ads, and 90 days from "End Date" on Brand and Display Ads
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Cannot exceed 90 days from current day for Product Ads, and 90 days from "End Date" on Brand and Display Ads
         */
        public Builder startDate(Optional<LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceMercadoAds build() {
            if (lookbackDays == null) {
                lookbackDays = _SINGLETON_VALUE_LookbackDays.value();
            }
            return new SourceMercadoAds(
                clientId,
                clientRefreshToken,
                clientSecret,
                endDate,
                lookbackDays,
                startDate);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_LookbackDays =
                new LazySingletonValue<>(
                        "lookback_days",
                        "7",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<MercadoAds> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"mercado-ads\"",
                        new TypeReference<MercadoAds>() {});
    }
}
