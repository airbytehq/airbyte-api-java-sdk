/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceSftp {

    /**
     * The server authentication method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceSftpAuthentication> credentials;

    /**
     * The regular expression to specify files for sync in a chosen Folder Path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_pattern")
    private Optional<String> filePattern;

    /**
     * Coma separated file types. Currently only 'csv' and 'json' types are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_types")
    private Optional<String> fileTypes;

    /**
     * The directory to search files for sync
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder_path")
    private Optional<String> folderPath;

    /**
     * The server host address
     */
    @JsonProperty("host")
    private String host;

    /**
     * The server port
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<Long> port;

    @JsonProperty("sourceType")
    private Sftp sourceType;

    /**
     * The server user
     */
    @JsonProperty("user")
    private String user;

    @JsonCreator
    public SourceSftp(
            @JsonProperty("credentials") Optional<? extends SourceSftpAuthentication> credentials,
            @JsonProperty("file_pattern") Optional<String> filePattern,
            @JsonProperty("file_types") Optional<String> fileTypes,
            @JsonProperty("folder_path") Optional<String> folderPath,
            @JsonProperty("host") String host,
            @JsonProperty("port") Optional<Long> port,
            @JsonProperty("user") String user) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(filePattern, "filePattern");
        Utils.checkNotNull(fileTypes, "fileTypes");
        Utils.checkNotNull(folderPath, "folderPath");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(user, "user");
        this.credentials = credentials;
        this.filePattern = filePattern;
        this.fileTypes = fileTypes;
        this.folderPath = folderPath;
        this.host = host;
        this.port = port;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.user = user;
    }
    
    public SourceSftp(
            String host,
            String user) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), host, Optional.empty(), user);
    }

    /**
     * The server authentication method
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSftpAuthentication> credentials() {
        return (Optional<SourceSftpAuthentication>) credentials;
    }

    /**
     * The regular expression to specify files for sync in a chosen Folder Path
     */
    @JsonIgnore
    public Optional<String> filePattern() {
        return filePattern;
    }

    /**
     * Coma separated file types. Currently only 'csv' and 'json' types are supported.
     */
    @JsonIgnore
    public Optional<String> fileTypes() {
        return fileTypes;
    }

    /**
     * The directory to search files for sync
     */
    @JsonIgnore
    public Optional<String> folderPath() {
        return folderPath;
    }

    /**
     * The server host address
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * The server port
     */
    @JsonIgnore
    public Optional<Long> port() {
        return port;
    }

    @JsonIgnore
    public Sftp sourceType() {
        return sourceType;
    }

    /**
     * The server user
     */
    @JsonIgnore
    public String user() {
        return user;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The server authentication method
     */
    public SourceSftp withCredentials(SourceSftpAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * The server authentication method
     */
    public SourceSftp withCredentials(Optional<? extends SourceSftpAuthentication> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The regular expression to specify files for sync in a chosen Folder Path
     */
    public SourceSftp withFilePattern(String filePattern) {
        Utils.checkNotNull(filePattern, "filePattern");
        this.filePattern = Optional.ofNullable(filePattern);
        return this;
    }

    /**
     * The regular expression to specify files for sync in a chosen Folder Path
     */
    public SourceSftp withFilePattern(Optional<String> filePattern) {
        Utils.checkNotNull(filePattern, "filePattern");
        this.filePattern = filePattern;
        return this;
    }

    /**
     * Coma separated file types. Currently only 'csv' and 'json' types are supported.
     */
    public SourceSftp withFileTypes(String fileTypes) {
        Utils.checkNotNull(fileTypes, "fileTypes");
        this.fileTypes = Optional.ofNullable(fileTypes);
        return this;
    }

    /**
     * Coma separated file types. Currently only 'csv' and 'json' types are supported.
     */
    public SourceSftp withFileTypes(Optional<String> fileTypes) {
        Utils.checkNotNull(fileTypes, "fileTypes");
        this.fileTypes = fileTypes;
        return this;
    }

    /**
     * The directory to search files for sync
     */
    public SourceSftp withFolderPath(String folderPath) {
        Utils.checkNotNull(folderPath, "folderPath");
        this.folderPath = Optional.ofNullable(folderPath);
        return this;
    }

    /**
     * The directory to search files for sync
     */
    public SourceSftp withFolderPath(Optional<String> folderPath) {
        Utils.checkNotNull(folderPath, "folderPath");
        this.folderPath = folderPath;
        return this;
    }

    /**
     * The server host address
     */
    public SourceSftp withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * The server port
     */
    public SourceSftp withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * The server port
     */
    public SourceSftp withPort(Optional<Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * The server user
     */
    public SourceSftp withUser(String user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSftp other = (SourceSftp) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.filePattern, other.filePattern) &&
            Objects.deepEquals(this.fileTypes, other.fileTypes) &&
            Objects.deepEquals(this.folderPath, other.folderPath) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.port, other.port) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            filePattern,
            fileTypes,
            folderPath,
            host,
            port,
            sourceType,
            user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSftp.class,
                "credentials", credentials,
                "filePattern", filePattern,
                "fileTypes", fileTypes,
                "folderPath", folderPath,
                "host", host,
                "port", port,
                "sourceType", sourceType,
                "user", user);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceSftpAuthentication> credentials = Optional.empty();
 
        private Optional<String> filePattern;
 
        private Optional<String> fileTypes;
 
        private Optional<String> folderPath;
 
        private String host;
 
        private Optional<Long> port;
 
        private String user;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The server authentication method
         */
        public Builder credentials(SourceSftpAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * The server authentication method
         */
        public Builder credentials(Optional<? extends SourceSftpAuthentication> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The regular expression to specify files for sync in a chosen Folder Path
         */
        public Builder filePattern(String filePattern) {
            Utils.checkNotNull(filePattern, "filePattern");
            this.filePattern = Optional.ofNullable(filePattern);
            return this;
        }

        /**
         * The regular expression to specify files for sync in a chosen Folder Path
         */
        public Builder filePattern(Optional<String> filePattern) {
            Utils.checkNotNull(filePattern, "filePattern");
            this.filePattern = filePattern;
            return this;
        }

        /**
         * Coma separated file types. Currently only 'csv' and 'json' types are supported.
         */
        public Builder fileTypes(String fileTypes) {
            Utils.checkNotNull(fileTypes, "fileTypes");
            this.fileTypes = Optional.ofNullable(fileTypes);
            return this;
        }

        /**
         * Coma separated file types. Currently only 'csv' and 'json' types are supported.
         */
        public Builder fileTypes(Optional<String> fileTypes) {
            Utils.checkNotNull(fileTypes, "fileTypes");
            this.fileTypes = fileTypes;
            return this;
        }

        /**
         * The directory to search files for sync
         */
        public Builder folderPath(String folderPath) {
            Utils.checkNotNull(folderPath, "folderPath");
            this.folderPath = Optional.ofNullable(folderPath);
            return this;
        }

        /**
         * The directory to search files for sync
         */
        public Builder folderPath(Optional<String> folderPath) {
            Utils.checkNotNull(folderPath, "folderPath");
            this.folderPath = folderPath;
            return this;
        }

        /**
         * The server host address
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * The server port
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * The server port
         */
        public Builder port(Optional<Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * The server user
         */
        public Builder user(String user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }
        
        public SourceSftp build() {
            if (filePattern == null) {
                filePattern = _SINGLETON_VALUE_FilePattern.value();
            }
            if (fileTypes == null) {
                fileTypes = _SINGLETON_VALUE_FileTypes.value();
            }
            if (folderPath == null) {
                folderPath = _SINGLETON_VALUE_FolderPath.value();
            }
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            return new SourceSftp(
                credentials,
                filePattern,
                fileTypes,
                folderPath,
                host,
                port,
                user);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_FilePattern =
                new LazySingletonValue<>(
                        "file_pattern",
                        "\"\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_FileTypes =
                new LazySingletonValue<>(
                        "file_types",
                        "\"csv,json\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_FolderPath =
                new LazySingletonValue<>(
                        "folder_path",
                        "\"\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "22",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Sftp> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"sftp\"",
                        new TypeReference<Sftp>() {});
    }
}
