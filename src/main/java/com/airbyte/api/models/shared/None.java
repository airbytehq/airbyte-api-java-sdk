/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * None - No authentication will be used
 */

public class None {

    @JsonProperty("method")
    private DestinationElasticsearchMethod method;

    @JsonCreator
    public None() {
        
        this.method = Builder._SINGLETON_VALUE_Method.value();
    }

    @JsonIgnore
    public DestinationElasticsearchMethod method() {
        return method;
    }

    public final static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        None other = (None) o;
        return 
            Objects.deepEquals(this.method, other.method);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            method);
    }
    
    @Override
    public String toString() {
        return Utils.toString(None.class,
                "method", method);
    }
    
    public final static class Builder {  
        
        private Builder() {
          // force use of static builder() method
        }
        
        public None build() {
            return new None(
                );
        }

        private static final LazySingletonValue<DestinationElasticsearchMethod> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"none\"",
                        new TypeReference<DestinationElasticsearchMethod>() {});
    }
}

