/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DestinationCreateRequest {

    /**
     * The values required to configure the destination.
     */
    @JsonProperty("configuration")
    private DestinationConfiguration configuration;

    /**
     * The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("definitionId")
    private Optional<? extends String> definitionId;

    /**
     * Name of the destination e.g. dev-mysql-instance.
     */
    @JsonProperty("name")
    private String name;

    @JsonProperty("workspaceId")
    private String workspaceId;

    public DestinationCreateRequest(
            @JsonProperty("configuration") DestinationConfiguration configuration,
            @JsonProperty("definitionId") Optional<? extends String> definitionId,
            @JsonProperty("name") String name,
            @JsonProperty("workspaceId") String workspaceId) {
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(definitionId, "definitionId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.configuration = configuration;
        this.definitionId = definitionId;
        this.name = name;
        this.workspaceId = workspaceId;
    }

    /**
     * The values required to configure the destination.
     */
    public DestinationConfiguration configuration() {
        return configuration;
    }

    /**
     * The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided.
     */
    public Optional<? extends String> definitionId() {
        return definitionId;
    }

    /**
     * Name of the destination e.g. dev-mysql-instance.
     */
    public String name() {
        return name;
    }

    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The values required to configure the destination.
     */
    public DestinationCreateRequest withConfiguration(DestinationConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    /**
     * The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided.
     */
    public DestinationCreateRequest withDefinitionId(String definitionId) {
        Utils.checkNotNull(definitionId, "definitionId");
        this.definitionId = Optional.ofNullable(definitionId);
        return this;
    }

    /**
     * The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided.
     */
    public DestinationCreateRequest withDefinitionId(Optional<? extends String> definitionId) {
        Utils.checkNotNull(definitionId, "definitionId");
        this.definitionId = definitionId;
        return this;
    }

    /**
     * Name of the destination e.g. dev-mysql-instance.
     */
    public DestinationCreateRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public DestinationCreateRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationCreateRequest other = (DestinationCreateRequest) o;
        return 
            java.util.Objects.deepEquals(this.configuration, other.configuration) &&
            java.util.Objects.deepEquals(this.definitionId, other.definitionId) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            configuration,
            definitionId,
            name,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationCreateRequest.class,
                "configuration", configuration,
                "definitionId", definitionId,
                "name", name,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private DestinationConfiguration configuration;
 
        private Optional<? extends String> definitionId = Optional.empty();
 
        private String name;
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The values required to configure the destination.
         */
        public Builder configuration(DestinationConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        /**
         * The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided.
         */
        public Builder definitionId(String definitionId) {
            Utils.checkNotNull(definitionId, "definitionId");
            this.definitionId = Optional.ofNullable(definitionId);
            return this;
        }

        /**
         * The UUID of the connector definition. One of configuration.destinationType or definitionId must be provided.
         */
        public Builder definitionId(Optional<? extends String> definitionId) {
            Utils.checkNotNull(definitionId, "definitionId");
            this.definitionId = definitionId;
            return this;
        }

        /**
         * Name of the destination e.g. dev-mysql-instance.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public DestinationCreateRequest build() {
            return new DestinationCreateRequest(
                configuration,
                definitionId,
                name,
                workspaceId);
        }
    }
}

