/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class SourceZendeskSupportAPIToken {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * The value of the API token generated. See our &lt;a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide"&gt;full documentation&lt;/a&gt; for more information on generating this token.
     */
    @JsonProperty("api_token")
    private String apiToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceZendeskSupportSchemasCredentials> credentials;

    /**
     * The user email for your Zendesk account.
     */
    @JsonProperty("email")
    private String email;

    @JsonCreator
    public SourceZendeskSupportAPIToken(
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("email") String email) {
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(email, "email");
        this.additionalProperties = new HashMap<>();
        this.apiToken = apiToken;
        this.credentials = Builder._SINGLETON_VALUE_Credentials.value();
        this.email = email;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * The value of the API token generated. See our &lt;a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide"&gt;full documentation&lt;/a&gt; for more information on generating this token.
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceZendeskSupportSchemasCredentials> credentials() {
        return (Optional<SourceZendeskSupportSchemasCredentials>) credentials;
    }

    /**
     * The user email for your Zendesk account.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    public final static Builder builder() {
        return new Builder();
    }

    @JsonAnySetter
    public SourceZendeskSupportAPIToken withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public SourceZendeskSupportAPIToken withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * The value of the API token generated. See our &lt;a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide"&gt;full documentation&lt;/a&gt; for more information on generating this token.
     */
    public SourceZendeskSupportAPIToken withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * The user email for your Zendesk account.
     */
    public SourceZendeskSupportAPIToken withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZendeskSupportAPIToken other = (SourceZendeskSupportAPIToken) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.email, other.email);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            apiToken,
            credentials,
            email);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZendeskSupportAPIToken.class,
                "additionalProperties", additionalProperties,
                "apiToken", apiToken,
                "credentials", credentials,
                "email", email);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private String apiToken;
 
        private String email;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * The value of the API token generated. See our &lt;a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide"&gt;full documentation&lt;/a&gt; for more information on generating this token.
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * The user email for your Zendesk account.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }
        
        public SourceZendeskSupportAPIToken build() {
            return new SourceZendeskSupportAPIToken(
                apiToken,
                email)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceZendeskSupportSchemasCredentials>> _SINGLETON_VALUE_Credentials =
                new LazySingletonValue<>(
                        "credentials",
                        "\"api_token\"",
                        new TypeReference<Optional<? extends SourceZendeskSupportSchemasCredentials>>() {});
    }
}

