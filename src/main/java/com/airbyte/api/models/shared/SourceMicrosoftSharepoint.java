/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * SourceMicrosoftSharepoint - SourceMicrosoftSharePointSpec class for Microsoft SharePoint Source Specification.
 * This class combines the authentication details with additional configuration for the SharePoint API.
 */

public class SourceMicrosoftSharepoint {

    /**
     * Credentials for connecting to the One Drive API
     */
    @JsonProperty("credentials")
    private SourceMicrosoftSharepointAuthentication credentials;

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder_path")
    private Optional<? extends String> folderPath;

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_scope")
    private Optional<? extends SourceMicrosoftSharepointSearchScope> searchScope;

    @JsonProperty("sourceType")
    private SourceMicrosoftSharepointMicrosoftSharepoint sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    @JsonProperty("streams")
    private java.util.List<SourceMicrosoftSharepointFileBasedStreamConfig> streams;

    public SourceMicrosoftSharepoint(
            @JsonProperty("credentials") SourceMicrosoftSharepointAuthentication credentials,
            @JsonProperty("folder_path") Optional<? extends String> folderPath,
            @JsonProperty("search_scope") Optional<? extends SourceMicrosoftSharepointSearchScope> searchScope,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate,
            @JsonProperty("streams") java.util.List<SourceMicrosoftSharepointFileBasedStreamConfig> streams) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(folderPath, "folderPath");
        Utils.checkNotNull(searchScope, "searchScope");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(streams, "streams");
        this.credentials = credentials;
        this.folderPath = folderPath;
        this.searchScope = searchScope;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.streams = streams;
    }

    /**
     * Credentials for connecting to the One Drive API
     */
    public SourceMicrosoftSharepointAuthentication credentials() {
        return credentials;
    }

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    public Optional<? extends String> folderPath() {
        return folderPath;
    }

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    public Optional<? extends SourceMicrosoftSharepointSearchScope> searchScope() {
        return searchScope;
    }

    public SourceMicrosoftSharepointMicrosoftSharepoint sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    public Optional<? extends OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    public java.util.List<SourceMicrosoftSharepointFileBasedStreamConfig> streams() {
        return streams;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Credentials for connecting to the One Drive API
     */
    public SourceMicrosoftSharepoint withCredentials(SourceMicrosoftSharepointAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    public SourceMicrosoftSharepoint withFolderPath(String folderPath) {
        Utils.checkNotNull(folderPath, "folderPath");
        this.folderPath = Optional.ofNullable(folderPath);
        return this;
    }

    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
     */
    public SourceMicrosoftSharepoint withFolderPath(Optional<? extends String> folderPath) {
        Utils.checkNotNull(folderPath, "folderPath");
        this.folderPath = folderPath;
        return this;
    }

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    public SourceMicrosoftSharepoint withSearchScope(SourceMicrosoftSharepointSearchScope searchScope) {
        Utils.checkNotNull(searchScope, "searchScope");
        this.searchScope = Optional.ofNullable(searchScope);
        return this;
    }

    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
     */
    public SourceMicrosoftSharepoint withSearchScope(Optional<? extends SourceMicrosoftSharepointSearchScope> searchScope) {
        Utils.checkNotNull(searchScope, "searchScope");
        this.searchScope = searchScope;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    public SourceMicrosoftSharepoint withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    public SourceMicrosoftSharepoint withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    public SourceMicrosoftSharepoint withStreams(java.util.List<SourceMicrosoftSharepointFileBasedStreamConfig> streams) {
        Utils.checkNotNull(streams, "streams");
        this.streams = streams;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMicrosoftSharepoint other = (SourceMicrosoftSharepoint) o;
        return 
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.folderPath, other.folderPath) &&
            java.util.Objects.deepEquals(this.searchScope, other.searchScope) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.streams, other.streams);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentials,
            folderPath,
            searchScope,
            sourceType,
            startDate,
            streams);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMicrosoftSharepoint.class,
                "credentials", credentials,
                "folderPath", folderPath,
                "searchScope", searchScope,
                "sourceType", sourceType,
                "startDate", startDate,
                "streams", streams);
    }
    
    public final static class Builder {
 
        private SourceMicrosoftSharepointAuthentication credentials;
 
        private Optional<? extends String> folderPath;
 
        private Optional<? extends SourceMicrosoftSharepointSearchScope> searchScope;
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();
 
        private java.util.List<SourceMicrosoftSharepointFileBasedStreamConfig> streams;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Credentials for connecting to the One Drive API
         */
        public Builder credentials(SourceMicrosoftSharepointAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
         */
        public Builder folderPath(String folderPath) {
            Utils.checkNotNull(folderPath, "folderPath");
            this.folderPath = Optional.ofNullable(folderPath);
            return this;
        }

        /**
         * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items.
         */
        public Builder folderPath(Optional<? extends String> folderPath) {
            Utils.checkNotNull(folderPath, "folderPath");
            this.folderPath = folderPath;
            return this;
        }

        /**
         * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
         */
        public Builder searchScope(SourceMicrosoftSharepointSearchScope searchScope) {
            Utils.checkNotNull(searchScope, "searchScope");
            this.searchScope = Optional.ofNullable(searchScope);
            return this;
        }

        /**
         * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both.
         */
        public Builder searchScope(Optional<? extends SourceMicrosoftSharepointSearchScope> searchScope) {
            Utils.checkNotNull(searchScope, "searchScope");
            this.searchScope = searchScope;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Each instance of this configuration defines a &lt;a href="https://docs.airbyte.com/cloud/core-concepts#stream"&gt;stream&lt;/a&gt;. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
         */
        public Builder streams(java.util.List<SourceMicrosoftSharepointFileBasedStreamConfig> streams) {
            Utils.checkNotNull(streams, "streams");
            this.streams = streams;
            return this;
        }
        
        public SourceMicrosoftSharepoint build() {
            if (folderPath == null) {
                folderPath = _SINGLETON_VALUE_FolderPath.value();
            }
            if (searchScope == null) {
                searchScope = _SINGLETON_VALUE_SearchScope.value();
            }
            return new SourceMicrosoftSharepoint(
                credentials,
                folderPath,
                searchScope,
                startDate,
                streams);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_FolderPath =
                new LazySingletonValue<>(
                        "folder_path",
                        "\".\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends SourceMicrosoftSharepointSearchScope>> _SINGLETON_VALUE_SearchScope =
                new LazySingletonValue<>(
                        "search_scope",
                        "\"ALL\"",
                        new TypeReference<Optional<? extends SourceMicrosoftSharepointSearchScope>>() {});

        private static final LazySingletonValue<SourceMicrosoftSharepointMicrosoftSharepoint> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"microsoft-sharepoint\"",
                        new TypeReference<SourceMicrosoftSharepointMicrosoftSharepoint>() {});
    }
}

