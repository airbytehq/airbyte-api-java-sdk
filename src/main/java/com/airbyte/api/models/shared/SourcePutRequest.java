/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SourcePutRequest {

    /**
     * The values required to configure the source.
     */
    @JsonProperty("configuration")
    private SourceConfiguration configuration;

    @JsonProperty("name")
    private String name;

    @JsonCreator
    public SourcePutRequest(
            @JsonProperty("configuration") SourceConfiguration configuration,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(name, "name");
        this.configuration = configuration;
        this.name = name;
    }

    /**
     * The values required to configure the source.
     */
    @JsonIgnore
    public SourceConfiguration configuration() {
        return configuration;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The values required to configure the source.
     */
    public SourcePutRequest withConfiguration(SourceConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    public SourcePutRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePutRequest other = (SourcePutRequest) o;
        return 
            Objects.deepEquals(this.configuration, other.configuration) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            configuration,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePutRequest.class,
                "configuration", configuration,
                "name", name);
    }
    
    public final static class Builder {
 
        private SourceConfiguration configuration;
 
        private String name;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The values required to configure the source.
         */
        public Builder configuration(SourceConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public SourcePutRequest build() {
            return new SourcePutRequest(
                configuration,
                name);
        }
    }
}

