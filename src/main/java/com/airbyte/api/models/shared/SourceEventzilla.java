/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceEventzilla {

    @JsonProperty("sourceType")
    private Eventzilla sourceType;

    /**
     * API key to use. Generate it by creating a new application within your Eventzilla account settings under Settings &gt; App Management.
     */
    @JsonProperty("x-api-key")
    private String xApiKey;

    @JsonCreator
    public SourceEventzilla(
            @JsonProperty("x-api-key") String xApiKey) {
        Utils.checkNotNull(xApiKey, "xApiKey");
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.xApiKey = xApiKey;
    }

    @JsonIgnore
    public Eventzilla sourceType() {
        return sourceType;
    }

    /**
     * API key to use. Generate it by creating a new application within your Eventzilla account settings under Settings &gt; App Management.
     */
    @JsonIgnore
    public String xApiKey() {
        return xApiKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * API key to use. Generate it by creating a new application within your Eventzilla account settings under Settings &gt; App Management.
     */
    public SourceEventzilla withXApiKey(String xApiKey) {
        Utils.checkNotNull(xApiKey, "xApiKey");
        this.xApiKey = xApiKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceEventzilla other = (SourceEventzilla) o;
        return 
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.xApiKey, other.xApiKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sourceType,
            xApiKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceEventzilla.class,
                "sourceType", sourceType,
                "xApiKey", xApiKey);
    }
    
    public final static class Builder {
 
        private String xApiKey;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API key to use. Generate it by creating a new application within your Eventzilla account settings under Settings &gt; App Management.
         */
        public Builder xApiKey(String xApiKey) {
            Utils.checkNotNull(xApiKey, "xApiKey");
            this.xApiKey = xApiKey;
            return this;
        }
        
        public SourceEventzilla build() {
            return new SourceEventzilla(
                xApiKey);
        }

        private static final LazySingletonValue<Eventzilla> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"eventzilla\"",
                        new TypeReference<Eventzilla>() {});
    }
}
