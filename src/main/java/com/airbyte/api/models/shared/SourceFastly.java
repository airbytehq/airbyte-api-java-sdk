/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;

public class SourceFastly {

    /**
     * Your Fastly API token. You can generate this token in the Fastly web interface under Account Settings or via the Fastly API. Ensure the token has the appropriate scope for your use case.
     */
    @JsonProperty("fastly_api_token")
    private String fastlyApiToken;

    @JsonProperty("sourceType")
    private Fastly sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceFastly(
            @JsonProperty("fastly_api_token") String fastlyApiToken,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(fastlyApiToken, "fastlyApiToken");
        Utils.checkNotNull(startDate, "startDate");
        this.fastlyApiToken = fastlyApiToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * Your Fastly API token. You can generate this token in the Fastly web interface under Account Settings or via the Fastly API. Ensure the token has the appropriate scope for your use case.
     */
    @JsonIgnore
    public String fastlyApiToken() {
        return fastlyApiToken;
    }

    @JsonIgnore
    public Fastly sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Your Fastly API token. You can generate this token in the Fastly web interface under Account Settings or via the Fastly API. Ensure the token has the appropriate scope for your use case.
     */
    public SourceFastly withFastlyApiToken(String fastlyApiToken) {
        Utils.checkNotNull(fastlyApiToken, "fastlyApiToken");
        this.fastlyApiToken = fastlyApiToken;
        return this;
    }

    public SourceFastly withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFastly other = (SourceFastly) o;
        return 
            Objects.deepEquals(this.fastlyApiToken, other.fastlyApiToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fastlyApiToken,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFastly.class,
                "fastlyApiToken", fastlyApiToken,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String fastlyApiToken;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your Fastly API token. You can generate this token in the Fastly web interface under Account Settings or via the Fastly API. Ensure the token has the appropriate scope for your use case.
         */
        public Builder fastlyApiToken(String fastlyApiToken) {
            Utils.checkNotNull(fastlyApiToken, "fastlyApiToken");
            this.fastlyApiToken = fastlyApiToken;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceFastly build() {
            return new SourceFastly(
                fastlyApiToken,
                startDate);
        }

        private static final LazySingletonValue<Fastly> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"fastly\"",
                        new TypeReference<Fastly>() {});
    }
}
