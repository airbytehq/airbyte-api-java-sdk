/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class SourceFacebookMarketing {

    /**
     * The value of the generated access token. From your App’s Dashboard, click on "Marketing API" then "Tools". Select permissions &lt;b&gt;ads_management, ads_read, read_insights, business_management&lt;/b&gt;. Then click on "Get token". See the &lt;a href="https://docs.airbyte.com/integrations/sources/facebook-marketing"&gt;docs&lt;/a&gt; for more information.
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * The Facebook Ad account ID(s) to pull data from. The Ad account ID number is in the account dropdown menu or in your browser's address bar of your &lt;a href="https://adsmanager.facebook.com/adsmanager/"&gt;Meta Ads Manager&lt;/a&gt;. See the &lt;a href="https://www.facebook.com/business/help/1492627900875762"&gt;docs&lt;/a&gt; for more information.
     */
    @JsonProperty("account_ids")
    private java.util.List<String> accountIds;

    /**
     * Allows action_breakdowns to be an empty list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action_breakdowns_allow_empty")
    private Optional<? extends Boolean> actionBreakdownsAllowEmpty;

    /**
     * The Client Id for your OAuth app
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    private Optional<? extends String> clientId;

    /**
     * The Client Secret for your OAuth app
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_secret")
    private Optional<? extends String> clientSecret;

    /**
     * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_insights")
    private Optional<? extends java.util.List<InsightConfig>> customInsights;

    /**
     * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<? extends OffsetDateTime> endDate;

    /**
     * Set to active if you want to fetch the thumbnail_url and store the result in thumbnail_data_url for each Ad Creative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fetch_thumbnail_images")
    private Optional<? extends Boolean> fetchThumbnailImages;

    /**
     * Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_deleted")
    private Optional<? extends Boolean> includeDeleted;

    /**
     * Insights Job Timeout establishes the maximum amount of time (in minutes) of waiting for the report job to complete. When timeout is reached the job is considered failed and we are trying to request smaller amount of data by breaking the job to few smaller ones. If you definitely know that 60 minutes is not enough for your report to be processed then you can decrease the timeout value, so we start breaking job to smaller parts faster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insights_job_timeout")
    private Optional<? extends Long> insightsJobTimeout;

    /**
     * The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insights_lookback_window")
    private Optional<? extends Long> insightsLookbackWindow;

    /**
     * Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    private Optional<? extends Long> pageSize;

    @JsonProperty("sourceType")
    private SourceFacebookMarketingFacebookMarketing sourceType;

    /**
     * The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. If not set then all data will be replicated for usual streams and only last 2 years for insight streams.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    public SourceFacebookMarketing(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("account_ids") java.util.List<String> accountIds,
            @JsonProperty("action_breakdowns_allow_empty") Optional<? extends Boolean> actionBreakdownsAllowEmpty,
            @JsonProperty("client_id") Optional<? extends String> clientId,
            @JsonProperty("client_secret") Optional<? extends String> clientSecret,
            @JsonProperty("custom_insights") Optional<? extends java.util.List<InsightConfig>> customInsights,
            @JsonProperty("end_date") Optional<? extends OffsetDateTime> endDate,
            @JsonProperty("fetch_thumbnail_images") Optional<? extends Boolean> fetchThumbnailImages,
            @JsonProperty("include_deleted") Optional<? extends Boolean> includeDeleted,
            @JsonProperty("insights_job_timeout") Optional<? extends Long> insightsJobTimeout,
            @JsonProperty("insights_lookback_window") Optional<? extends Long> insightsLookbackWindow,
            @JsonProperty("page_size") Optional<? extends Long> pageSize,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(accountIds, "accountIds");
        Utils.checkNotNull(actionBreakdownsAllowEmpty, "actionBreakdownsAllowEmpty");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(customInsights, "customInsights");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(fetchThumbnailImages, "fetchThumbnailImages");
        Utils.checkNotNull(includeDeleted, "includeDeleted");
        Utils.checkNotNull(insightsJobTimeout, "insightsJobTimeout");
        Utils.checkNotNull(insightsLookbackWindow, "insightsLookbackWindow");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(startDate, "startDate");
        this.accessToken = accessToken;
        this.accountIds = accountIds;
        this.actionBreakdownsAllowEmpty = actionBreakdownsAllowEmpty;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.customInsights = customInsights;
        this.endDate = endDate;
        this.fetchThumbnailImages = fetchThumbnailImages;
        this.includeDeleted = includeDeleted;
        this.insightsJobTimeout = insightsJobTimeout;
        this.insightsLookbackWindow = insightsLookbackWindow;
        this.pageSize = pageSize;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * The value of the generated access token. From your App’s Dashboard, click on "Marketing API" then "Tools". Select permissions &lt;b&gt;ads_management, ads_read, read_insights, business_management&lt;/b&gt;. Then click on "Get token". See the &lt;a href="https://docs.airbyte.com/integrations/sources/facebook-marketing"&gt;docs&lt;/a&gt; for more information.
     */
    public String accessToken() {
        return accessToken;
    }

    /**
     * The Facebook Ad account ID(s) to pull data from. The Ad account ID number is in the account dropdown menu or in your browser's address bar of your &lt;a href="https://adsmanager.facebook.com/adsmanager/"&gt;Meta Ads Manager&lt;/a&gt;. See the &lt;a href="https://www.facebook.com/business/help/1492627900875762"&gt;docs&lt;/a&gt; for more information.
     */
    public java.util.List<String> accountIds() {
        return accountIds;
    }

    /**
     * Allows action_breakdowns to be an empty list
     */
    public Optional<? extends Boolean> actionBreakdownsAllowEmpty() {
        return actionBreakdownsAllowEmpty;
    }

    /**
     * The Client Id for your OAuth app
     */
    public Optional<? extends String> clientId() {
        return clientId;
    }

    /**
     * The Client Secret for your OAuth app
     */
    public Optional<? extends String> clientSecret() {
        return clientSecret;
    }

    /**
     * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
     */
    public Optional<? extends java.util.List<InsightConfig>> customInsights() {
        return customInsights;
    }

    /**
     * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
     */
    public Optional<? extends OffsetDateTime> endDate() {
        return endDate;
    }

    /**
     * Set to active if you want to fetch the thumbnail_url and store the result in thumbnail_data_url for each Ad Creative.
     */
    public Optional<? extends Boolean> fetchThumbnailImages() {
        return fetchThumbnailImages;
    }

    /**
     * Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.
     */
    public Optional<? extends Boolean> includeDeleted() {
        return includeDeleted;
    }

    /**
     * Insights Job Timeout establishes the maximum amount of time (in minutes) of waiting for the report job to complete. When timeout is reached the job is considered failed and we are trying to request smaller amount of data by breaking the job to few smaller ones. If you definitely know that 60 minutes is not enough for your report to be processed then you can decrease the timeout value, so we start breaking job to smaller parts faster.
     */
    public Optional<? extends Long> insightsJobTimeout() {
        return insightsJobTimeout;
    }

    /**
     * The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.
     */
    public Optional<? extends Long> insightsLookbackWindow() {
        return insightsLookbackWindow;
    }

    /**
     * Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.
     */
    public Optional<? extends Long> pageSize() {
        return pageSize;
    }

    public SourceFacebookMarketingFacebookMarketing sourceType() {
        return sourceType;
    }

    /**
     * The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. If not set then all data will be replicated for usual streams and only last 2 years for insight streams.
     */
    public Optional<? extends OffsetDateTime> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The value of the generated access token. From your App’s Dashboard, click on "Marketing API" then "Tools". Select permissions &lt;b&gt;ads_management, ads_read, read_insights, business_management&lt;/b&gt;. Then click on "Get token". See the &lt;a href="https://docs.airbyte.com/integrations/sources/facebook-marketing"&gt;docs&lt;/a&gt; for more information.
     */
    public SourceFacebookMarketing withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The Facebook Ad account ID(s) to pull data from. The Ad account ID number is in the account dropdown menu or in your browser's address bar of your &lt;a href="https://adsmanager.facebook.com/adsmanager/"&gt;Meta Ads Manager&lt;/a&gt;. See the &lt;a href="https://www.facebook.com/business/help/1492627900875762"&gt;docs&lt;/a&gt; for more information.
     */
    public SourceFacebookMarketing withAccountIds(java.util.List<String> accountIds) {
        Utils.checkNotNull(accountIds, "accountIds");
        this.accountIds = accountIds;
        return this;
    }

    /**
     * Allows action_breakdowns to be an empty list
     */
    public SourceFacebookMarketing withActionBreakdownsAllowEmpty(boolean actionBreakdownsAllowEmpty) {
        Utils.checkNotNull(actionBreakdownsAllowEmpty, "actionBreakdownsAllowEmpty");
        this.actionBreakdownsAllowEmpty = Optional.ofNullable(actionBreakdownsAllowEmpty);
        return this;
    }

    /**
     * Allows action_breakdowns to be an empty list
     */
    public SourceFacebookMarketing withActionBreakdownsAllowEmpty(Optional<? extends Boolean> actionBreakdownsAllowEmpty) {
        Utils.checkNotNull(actionBreakdownsAllowEmpty, "actionBreakdownsAllowEmpty");
        this.actionBreakdownsAllowEmpty = actionBreakdownsAllowEmpty;
        return this;
    }

    /**
     * The Client Id for your OAuth app
     */
    public SourceFacebookMarketing withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = Optional.ofNullable(clientId);
        return this;
    }

    /**
     * The Client Id for your OAuth app
     */
    public SourceFacebookMarketing withClientId(Optional<? extends String> clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The Client Secret for your OAuth app
     */
    public SourceFacebookMarketing withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = Optional.ofNullable(clientSecret);
        return this;
    }

    /**
     * The Client Secret for your OAuth app
     */
    public SourceFacebookMarketing withClientSecret(Optional<? extends String> clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
     */
    public SourceFacebookMarketing withCustomInsights(java.util.List<InsightConfig> customInsights) {
        Utils.checkNotNull(customInsights, "customInsights");
        this.customInsights = Optional.ofNullable(customInsights);
        return this;
    }

    /**
     * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
     */
    public SourceFacebookMarketing withCustomInsights(Optional<? extends java.util.List<InsightConfig>> customInsights) {
        Utils.checkNotNull(customInsights, "customInsights");
        this.customInsights = customInsights;
        return this;
    }

    /**
     * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
     */
    public SourceFacebookMarketing withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
     */
    public SourceFacebookMarketing withEndDate(Optional<? extends OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Set to active if you want to fetch the thumbnail_url and store the result in thumbnail_data_url for each Ad Creative.
     */
    public SourceFacebookMarketing withFetchThumbnailImages(boolean fetchThumbnailImages) {
        Utils.checkNotNull(fetchThumbnailImages, "fetchThumbnailImages");
        this.fetchThumbnailImages = Optional.ofNullable(fetchThumbnailImages);
        return this;
    }

    /**
     * Set to active if you want to fetch the thumbnail_url and store the result in thumbnail_data_url for each Ad Creative.
     */
    public SourceFacebookMarketing withFetchThumbnailImages(Optional<? extends Boolean> fetchThumbnailImages) {
        Utils.checkNotNull(fetchThumbnailImages, "fetchThumbnailImages");
        this.fetchThumbnailImages = fetchThumbnailImages;
        return this;
    }

    /**
     * Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.
     */
    public SourceFacebookMarketing withIncludeDeleted(boolean includeDeleted) {
        Utils.checkNotNull(includeDeleted, "includeDeleted");
        this.includeDeleted = Optional.ofNullable(includeDeleted);
        return this;
    }

    /**
     * Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.
     */
    public SourceFacebookMarketing withIncludeDeleted(Optional<? extends Boolean> includeDeleted) {
        Utils.checkNotNull(includeDeleted, "includeDeleted");
        this.includeDeleted = includeDeleted;
        return this;
    }

    /**
     * Insights Job Timeout establishes the maximum amount of time (in minutes) of waiting for the report job to complete. When timeout is reached the job is considered failed and we are trying to request smaller amount of data by breaking the job to few smaller ones. If you definitely know that 60 minutes is not enough for your report to be processed then you can decrease the timeout value, so we start breaking job to smaller parts faster.
     */
    public SourceFacebookMarketing withInsightsJobTimeout(long insightsJobTimeout) {
        Utils.checkNotNull(insightsJobTimeout, "insightsJobTimeout");
        this.insightsJobTimeout = Optional.ofNullable(insightsJobTimeout);
        return this;
    }

    /**
     * Insights Job Timeout establishes the maximum amount of time (in minutes) of waiting for the report job to complete. When timeout is reached the job is considered failed and we are trying to request smaller amount of data by breaking the job to few smaller ones. If you definitely know that 60 minutes is not enough for your report to be processed then you can decrease the timeout value, so we start breaking job to smaller parts faster.
     */
    public SourceFacebookMarketing withInsightsJobTimeout(Optional<? extends Long> insightsJobTimeout) {
        Utils.checkNotNull(insightsJobTimeout, "insightsJobTimeout");
        this.insightsJobTimeout = insightsJobTimeout;
        return this;
    }

    /**
     * The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.
     */
    public SourceFacebookMarketing withInsightsLookbackWindow(long insightsLookbackWindow) {
        Utils.checkNotNull(insightsLookbackWindow, "insightsLookbackWindow");
        this.insightsLookbackWindow = Optional.ofNullable(insightsLookbackWindow);
        return this;
    }

    /**
     * The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.
     */
    public SourceFacebookMarketing withInsightsLookbackWindow(Optional<? extends Long> insightsLookbackWindow) {
        Utils.checkNotNull(insightsLookbackWindow, "insightsLookbackWindow");
        this.insightsLookbackWindow = insightsLookbackWindow;
        return this;
    }

    /**
     * Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.
     */
    public SourceFacebookMarketing withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.
     */
    public SourceFacebookMarketing withPageSize(Optional<? extends Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. If not set then all data will be replicated for usual streams and only last 2 years for insight streams.
     */
    public SourceFacebookMarketing withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. If not set then all data will be replicated for usual streams and only last 2 years for insight streams.
     */
    public SourceFacebookMarketing withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFacebookMarketing other = (SourceFacebookMarketing) o;
        return 
            java.util.Objects.deepEquals(this.accessToken, other.accessToken) &&
            java.util.Objects.deepEquals(this.accountIds, other.accountIds) &&
            java.util.Objects.deepEquals(this.actionBreakdownsAllowEmpty, other.actionBreakdownsAllowEmpty) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.customInsights, other.customInsights) &&
            java.util.Objects.deepEquals(this.endDate, other.endDate) &&
            java.util.Objects.deepEquals(this.fetchThumbnailImages, other.fetchThumbnailImages) &&
            java.util.Objects.deepEquals(this.includeDeleted, other.includeDeleted) &&
            java.util.Objects.deepEquals(this.insightsJobTimeout, other.insightsJobTimeout) &&
            java.util.Objects.deepEquals(this.insightsLookbackWindow, other.insightsLookbackWindow) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessToken,
            accountIds,
            actionBreakdownsAllowEmpty,
            clientId,
            clientSecret,
            customInsights,
            endDate,
            fetchThumbnailImages,
            includeDeleted,
            insightsJobTimeout,
            insightsLookbackWindow,
            pageSize,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFacebookMarketing.class,
                "accessToken", accessToken,
                "accountIds", accountIds,
                "actionBreakdownsAllowEmpty", actionBreakdownsAllowEmpty,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "customInsights", customInsights,
                "endDate", endDate,
                "fetchThumbnailImages", fetchThumbnailImages,
                "includeDeleted", includeDeleted,
                "insightsJobTimeout", insightsJobTimeout,
                "insightsLookbackWindow", insightsLookbackWindow,
                "pageSize", pageSize,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private java.util.List<String> accountIds;
 
        private Optional<? extends Boolean> actionBreakdownsAllowEmpty;
 
        private Optional<? extends String> clientId = Optional.empty();
 
        private Optional<? extends String> clientSecret = Optional.empty();
 
        private Optional<? extends java.util.List<InsightConfig>> customInsights = Optional.empty();
 
        private Optional<? extends OffsetDateTime> endDate = Optional.empty();
 
        private Optional<? extends Boolean> fetchThumbnailImages;
 
        private Optional<? extends Boolean> includeDeleted;
 
        private Optional<? extends Long> insightsJobTimeout;
 
        private Optional<? extends Long> insightsLookbackWindow;
 
        private Optional<? extends Long> pageSize;
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The value of the generated access token. From your App’s Dashboard, click on "Marketing API" then "Tools". Select permissions &lt;b&gt;ads_management, ads_read, read_insights, business_management&lt;/b&gt;. Then click on "Get token". See the &lt;a href="https://docs.airbyte.com/integrations/sources/facebook-marketing"&gt;docs&lt;/a&gt; for more information.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The Facebook Ad account ID(s) to pull data from. The Ad account ID number is in the account dropdown menu or in your browser's address bar of your &lt;a href="https://adsmanager.facebook.com/adsmanager/"&gt;Meta Ads Manager&lt;/a&gt;. See the &lt;a href="https://www.facebook.com/business/help/1492627900875762"&gt;docs&lt;/a&gt; for more information.
         */
        public Builder accountIds(java.util.List<String> accountIds) {
            Utils.checkNotNull(accountIds, "accountIds");
            this.accountIds = accountIds;
            return this;
        }

        /**
         * Allows action_breakdowns to be an empty list
         */
        public Builder actionBreakdownsAllowEmpty(boolean actionBreakdownsAllowEmpty) {
            Utils.checkNotNull(actionBreakdownsAllowEmpty, "actionBreakdownsAllowEmpty");
            this.actionBreakdownsAllowEmpty = Optional.ofNullable(actionBreakdownsAllowEmpty);
            return this;
        }

        /**
         * Allows action_breakdowns to be an empty list
         */
        public Builder actionBreakdownsAllowEmpty(Optional<? extends Boolean> actionBreakdownsAllowEmpty) {
            Utils.checkNotNull(actionBreakdownsAllowEmpty, "actionBreakdownsAllowEmpty");
            this.actionBreakdownsAllowEmpty = actionBreakdownsAllowEmpty;
            return this;
        }

        /**
         * The Client Id for your OAuth app
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = Optional.ofNullable(clientId);
            return this;
        }

        /**
         * The Client Id for your OAuth app
         */
        public Builder clientId(Optional<? extends String> clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The Client Secret for your OAuth app
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = Optional.ofNullable(clientSecret);
            return this;
        }

        /**
         * The Client Secret for your OAuth app
         */
        public Builder clientSecret(Optional<? extends String> clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
         */
        public Builder customInsights(java.util.List<InsightConfig> customInsights) {
            Utils.checkNotNull(customInsights, "customInsights");
            this.customInsights = Optional.ofNullable(customInsights);
            return this;
        }

        /**
         * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
         */
        public Builder customInsights(Optional<? extends java.util.List<InsightConfig>> customInsights) {
            Utils.checkNotNull(customInsights, "customInsights");
            this.customInsights = customInsights;
            return this;
        }

        /**
         * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
         */
        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
         */
        public Builder endDate(Optional<? extends OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Set to active if you want to fetch the thumbnail_url and store the result in thumbnail_data_url for each Ad Creative.
         */
        public Builder fetchThumbnailImages(boolean fetchThumbnailImages) {
            Utils.checkNotNull(fetchThumbnailImages, "fetchThumbnailImages");
            this.fetchThumbnailImages = Optional.ofNullable(fetchThumbnailImages);
            return this;
        }

        /**
         * Set to active if you want to fetch the thumbnail_url and store the result in thumbnail_data_url for each Ad Creative.
         */
        public Builder fetchThumbnailImages(Optional<? extends Boolean> fetchThumbnailImages) {
            Utils.checkNotNull(fetchThumbnailImages, "fetchThumbnailImages");
            this.fetchThumbnailImages = fetchThumbnailImages;
            return this;
        }

        /**
         * Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.
         */
        public Builder includeDeleted(boolean includeDeleted) {
            Utils.checkNotNull(includeDeleted, "includeDeleted");
            this.includeDeleted = Optional.ofNullable(includeDeleted);
            return this;
        }

        /**
         * Set to active if you want to include data from deleted Campaigns, Ads, and AdSets.
         */
        public Builder includeDeleted(Optional<? extends Boolean> includeDeleted) {
            Utils.checkNotNull(includeDeleted, "includeDeleted");
            this.includeDeleted = includeDeleted;
            return this;
        }

        /**
         * Insights Job Timeout establishes the maximum amount of time (in minutes) of waiting for the report job to complete. When timeout is reached the job is considered failed and we are trying to request smaller amount of data by breaking the job to few smaller ones. If you definitely know that 60 minutes is not enough for your report to be processed then you can decrease the timeout value, so we start breaking job to smaller parts faster.
         */
        public Builder insightsJobTimeout(long insightsJobTimeout) {
            Utils.checkNotNull(insightsJobTimeout, "insightsJobTimeout");
            this.insightsJobTimeout = Optional.ofNullable(insightsJobTimeout);
            return this;
        }

        /**
         * Insights Job Timeout establishes the maximum amount of time (in minutes) of waiting for the report job to complete. When timeout is reached the job is considered failed and we are trying to request smaller amount of data by breaking the job to few smaller ones. If you definitely know that 60 minutes is not enough for your report to be processed then you can decrease the timeout value, so we start breaking job to smaller parts faster.
         */
        public Builder insightsJobTimeout(Optional<? extends Long> insightsJobTimeout) {
            Utils.checkNotNull(insightsJobTimeout, "insightsJobTimeout");
            this.insightsJobTimeout = insightsJobTimeout;
            return this;
        }

        /**
         * The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.
         */
        public Builder insightsLookbackWindow(long insightsLookbackWindow) {
            Utils.checkNotNull(insightsLookbackWindow, "insightsLookbackWindow");
            this.insightsLookbackWindow = Optional.ofNullable(insightsLookbackWindow);
            return this;
        }

        /**
         * The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here.
         */
        public Builder insightsLookbackWindow(Optional<? extends Long> insightsLookbackWindow) {
            Utils.checkNotNull(insightsLookbackWindow, "insightsLookbackWindow");
            this.insightsLookbackWindow = insightsLookbackWindow;
            return this;
        }

        /**
         * Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases.
         */
        public Builder pageSize(Optional<? extends Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. If not set then all data will be replicated for usual streams and only last 2 years for insight streams.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. If not set then all data will be replicated for usual streams and only last 2 years for insight streams.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceFacebookMarketing build() {
            if (actionBreakdownsAllowEmpty == null) {
                actionBreakdownsAllowEmpty = _SINGLETON_VALUE_ActionBreakdownsAllowEmpty.value();
            }
            if (fetchThumbnailImages == null) {
                fetchThumbnailImages = _SINGLETON_VALUE_FetchThumbnailImages.value();
            }
            if (includeDeleted == null) {
                includeDeleted = _SINGLETON_VALUE_IncludeDeleted.value();
            }
            if (insightsJobTimeout == null) {
                insightsJobTimeout = _SINGLETON_VALUE_InsightsJobTimeout.value();
            }
            if (insightsLookbackWindow == null) {
                insightsLookbackWindow = _SINGLETON_VALUE_InsightsLookbackWindow.value();
            }
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            return new SourceFacebookMarketing(
                accessToken,
                accountIds,
                actionBreakdownsAllowEmpty,
                clientId,
                clientSecret,
                customInsights,
                endDate,
                fetchThumbnailImages,
                includeDeleted,
                insightsJobTimeout,
                insightsLookbackWindow,
                pageSize,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_ActionBreakdownsAllowEmpty =
                new LazySingletonValue<>(
                        "action_breakdowns_allow_empty",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_FetchThumbnailImages =
                new LazySingletonValue<>(
                        "fetch_thumbnail_images",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_IncludeDeleted =
                new LazySingletonValue<>(
                        "include_deleted",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_InsightsJobTimeout =
                new LazySingletonValue<>(
                        "insights_job_timeout",
                        "60",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_InsightsLookbackWindow =
                new LazySingletonValue<>(
                        "insights_lookback_window",
                        "28",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "page_size",
                        "100",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<SourceFacebookMarketingFacebookMarketing> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"facebook-marketing\"",
                        new TypeReference<SourceFacebookMarketingFacebookMarketing>() {});
    }
}

