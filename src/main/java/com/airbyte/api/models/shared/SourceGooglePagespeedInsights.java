/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceGooglePagespeedInsights {

    /**
     * Google PageSpeed API Key. See &lt;a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey"&gt;here&lt;/a&gt;. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_key")
    private Optional<? extends String> apiKey;

    /**
     * Defines which Lighthouse category to run. One or many of: "accessibility", "best-practices", "performance", "pwa", "seo".
     */
    @JsonProperty("categories")
    private java.util.List<Categories> categories;

    @JsonProperty("sourceType")
    private GooglePagespeedInsights sourceType;

    /**
     * The analyses strategy to use. Either "desktop" or "mobile".
     */
    @JsonProperty("strategies")
    private java.util.List<Strategies> strategies;

    /**
     * The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain
     */
    @JsonProperty("urls")
    private java.util.List<String> urls;

    @JsonCreator
    public SourceGooglePagespeedInsights(
            @JsonProperty("api_key") Optional<? extends String> apiKey,
            @JsonProperty("categories") java.util.List<Categories> categories,
            @JsonProperty("strategies") java.util.List<Strategies> strategies,
            @JsonProperty("urls") java.util.List<String> urls) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(strategies, "strategies");
        Utils.checkNotNull(urls, "urls");
        this.apiKey = apiKey;
        this.categories = categories;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.strategies = strategies;
        this.urls = urls;
    }
    
    public SourceGooglePagespeedInsights(
            java.util.List<Categories> categories,
            java.util.List<Strategies> strategies,
            java.util.List<String> urls) {
        this(Optional.empty(), categories, strategies, urls);
    }

    /**
     * Google PageSpeed API Key. See &lt;a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey"&gt;here&lt;/a&gt;. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> apiKey() {
        return (Optional<String>) apiKey;
    }

    /**
     * Defines which Lighthouse category to run. One or many of: "accessibility", "best-practices", "performance", "pwa", "seo".
     */
    @JsonIgnore
    public java.util.List<Categories> categories() {
        return categories;
    }

    @JsonIgnore
    public GooglePagespeedInsights sourceType() {
        return sourceType;
    }

    /**
     * The analyses strategy to use. Either "desktop" or "mobile".
     */
    @JsonIgnore
    public java.util.List<Strategies> strategies() {
        return strategies;
    }

    /**
     * The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain
     */
    @JsonIgnore
    public java.util.List<String> urls() {
        return urls;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Google PageSpeed API Key. See &lt;a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey"&gt;here&lt;/a&gt;. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
     */
    public SourceGooglePagespeedInsights withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = Optional.ofNullable(apiKey);
        return this;
    }

    /**
     * Google PageSpeed API Key. See &lt;a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey"&gt;here&lt;/a&gt;. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
     */
    public SourceGooglePagespeedInsights withApiKey(Optional<? extends String> apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Defines which Lighthouse category to run. One or many of: "accessibility", "best-practices", "performance", "pwa", "seo".
     */
    public SourceGooglePagespeedInsights withCategories(java.util.List<Categories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    /**
     * The analyses strategy to use. Either "desktop" or "mobile".
     */
    public SourceGooglePagespeedInsights withStrategies(java.util.List<Strategies> strategies) {
        Utils.checkNotNull(strategies, "strategies");
        this.strategies = strategies;
        return this;
    }

    /**
     * The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain
     */
    public SourceGooglePagespeedInsights withUrls(java.util.List<String> urls) {
        Utils.checkNotNull(urls, "urls");
        this.urls = urls;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGooglePagespeedInsights other = (SourceGooglePagespeedInsights) o;
        return 
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.categories, other.categories) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.strategies, other.strategies) &&
            java.util.Objects.deepEquals(this.urls, other.urls);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKey,
            categories,
            sourceType,
            strategies,
            urls);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGooglePagespeedInsights.class,
                "apiKey", apiKey,
                "categories", categories,
                "sourceType", sourceType,
                "strategies", strategies,
                "urls", urls);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> apiKey = Optional.empty();
 
        private java.util.List<Categories> categories;
 
        private java.util.List<Strategies> strategies;
 
        private java.util.List<String> urls;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Google PageSpeed API Key. See &lt;a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey"&gt;here&lt;/a&gt;. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = Optional.ofNullable(apiKey);
            return this;
        }

        /**
         * Google PageSpeed API Key. See &lt;a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey"&gt;here&lt;/a&gt;. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
         */
        public Builder apiKey(Optional<? extends String> apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Defines which Lighthouse category to run. One or many of: "accessibility", "best-practices", "performance", "pwa", "seo".
         */
        public Builder categories(java.util.List<Categories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        /**
         * The analyses strategy to use. Either "desktop" or "mobile".
         */
        public Builder strategies(java.util.List<Strategies> strategies) {
            Utils.checkNotNull(strategies, "strategies");
            this.strategies = strategies;
            return this;
        }

        /**
         * The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain
         */
        public Builder urls(java.util.List<String> urls) {
            Utils.checkNotNull(urls, "urls");
            this.urls = urls;
            return this;
        }
        
        public SourceGooglePagespeedInsights build() {
            return new SourceGooglePagespeedInsights(
                apiKey,
                categories,
                strategies,
                urls);
        }

        private static final LazySingletonValue<GooglePagespeedInsights> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"google-pagespeed-insights\"",
                        new TypeReference<GooglePagespeedInsights>() {});
    }
}

