/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SourceSnowflake {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceSnowflakeAuthorizationMethod> credentials;

    /**
     * The database you created for Airbyte to access data.
     */
    @JsonProperty("database")
    private String database;

    /**
     * The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
     */
    @JsonProperty("host")
    private String host;

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jdbc_url_params")
    private Optional<String> jdbcUrlParams;

    /**
     * The role you created for Airbyte to access Snowflake.
     */
    @JsonProperty("role")
    private String role;

    /**
     * The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    private Optional<String> schema;

    @JsonProperty("sourceType")
    private SourceSnowflakeSnowflake sourceType;

    /**
     * The warehouse you created for Airbyte to access data.
     */
    @JsonProperty("warehouse")
    private String warehouse;

    @JsonCreator
    public SourceSnowflake(
            @JsonProperty("credentials") Optional<? extends SourceSnowflakeAuthorizationMethod> credentials,
            @JsonProperty("database") String database,
            @JsonProperty("host") String host,
            @JsonProperty("jdbc_url_params") Optional<String> jdbcUrlParams,
            @JsonProperty("role") String role,
            @JsonProperty("schema") Optional<String> schema,
            @JsonProperty("warehouse") String warehouse) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(schema, "schema");
        Utils.checkNotNull(warehouse, "warehouse");
        this.credentials = credentials;
        this.database = database;
        this.host = host;
        this.jdbcUrlParams = jdbcUrlParams;
        this.role = role;
        this.schema = schema;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.warehouse = warehouse;
    }
    
    public SourceSnowflake(
            String database,
            String host,
            String role,
            String warehouse) {
        this(Optional.empty(), database, host, Optional.empty(), role, Optional.empty(), warehouse);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSnowflakeAuthorizationMethod> credentials() {
        return (Optional<SourceSnowflakeAuthorizationMethod>) credentials;
    }

    /**
     * The database you created for Airbyte to access data.
     */
    @JsonIgnore
    public String database() {
        return database;
    }

    /**
     * The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonIgnore
    public Optional<String> jdbcUrlParams() {
        return jdbcUrlParams;
    }

    /**
     * The role you created for Airbyte to access Snowflake.
     */
    @JsonIgnore
    public String role() {
        return role;
    }

    /**
     * The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
     */
    @JsonIgnore
    public Optional<String> schema() {
        return schema;
    }

    @JsonIgnore
    public SourceSnowflakeSnowflake sourceType() {
        return sourceType;
    }

    /**
     * The warehouse you created for Airbyte to access data.
     */
    @JsonIgnore
    public String warehouse() {
        return warehouse;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceSnowflake withCredentials(SourceSnowflakeAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    public SourceSnowflake withCredentials(Optional<? extends SourceSnowflakeAuthorizationMethod> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The database you created for Airbyte to access data.
     */
    public SourceSnowflake withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    /**
     * The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
     */
    public SourceSnowflake withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public SourceSnowflake withJdbcUrlParams(String jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public SourceSnowflake withJdbcUrlParams(Optional<String> jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = jdbcUrlParams;
        return this;
    }

    /**
     * The role you created for Airbyte to access Snowflake.
     */
    public SourceSnowflake withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    /**
     * The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
     */
    public SourceSnowflake withSchema(String schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = Optional.ofNullable(schema);
        return this;
    }

    /**
     * The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
     */
    public SourceSnowflake withSchema(Optional<String> schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = schema;
        return this;
    }

    /**
     * The warehouse you created for Airbyte to access data.
     */
    public SourceSnowflake withWarehouse(String warehouse) {
        Utils.checkNotNull(warehouse, "warehouse");
        this.warehouse = warehouse;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSnowflake other = (SourceSnowflake) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.database, other.database) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.jdbcUrlParams, other.jdbcUrlParams) &&
            Objects.deepEquals(this.role, other.role) &&
            Objects.deepEquals(this.schema, other.schema) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.warehouse, other.warehouse);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            database,
            host,
            jdbcUrlParams,
            role,
            schema,
            sourceType,
            warehouse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSnowflake.class,
                "credentials", credentials,
                "database", database,
                "host", host,
                "jdbcUrlParams", jdbcUrlParams,
                "role", role,
                "schema", schema,
                "sourceType", sourceType,
                "warehouse", warehouse);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceSnowflakeAuthorizationMethod> credentials = Optional.empty();
 
        private String database;
 
        private String host;
 
        private Optional<String> jdbcUrlParams = Optional.empty();
 
        private String role;
 
        private Optional<String> schema = Optional.empty();
 
        private String warehouse;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(SourceSnowflakeAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        public Builder credentials(Optional<? extends SourceSnowflakeAuthorizationMethod> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The database you created for Airbyte to access data.
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        /**
         * The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(String jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(Optional<String> jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = jdbcUrlParams;
            return this;
        }

        /**
         * The role you created for Airbyte to access Snowflake.
         */
        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        /**
         * The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
         */
        public Builder schema(String schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
         */
        public Builder schema(Optional<String> schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = schema;
            return this;
        }

        /**
         * The warehouse you created for Airbyte to access data.
         */
        public Builder warehouse(String warehouse) {
            Utils.checkNotNull(warehouse, "warehouse");
            this.warehouse = warehouse;
            return this;
        }
        
        public SourceSnowflake build() {
            return new SourceSnowflake(
                credentials,
                database,
                host,
                jdbcUrlParams,
                role,
                schema,
                warehouse);
        }

        private static final LazySingletonValue<SourceSnowflakeSnowflake> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"snowflake\"",
                        new TypeReference<SourceSnowflakeSnowflake>() {});
    }
}

