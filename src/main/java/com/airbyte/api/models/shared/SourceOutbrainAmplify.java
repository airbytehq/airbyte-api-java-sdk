/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SourceOutbrainAmplify {

    /**
     * Credentials for making authenticated requests requires either username/password or access_token.
     */
    @JsonProperty("credentials")
    private SourceOutbrainAmplifyAuthenticationMethod credentials;

    /**
     * Date in the format YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * The granularity used for geo location data in reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geo_location_breakdown")
    private Optional<? extends GranularityForGeoLocationRegion> geoLocationBreakdown;

    /**
     * The granularity used for periodic data in reports. See &lt;a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown"&gt;the docs&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_granularity")
    private Optional<? extends GranularityForPeriodicReports> reportGranularity;

    @JsonProperty("sourceType")
    private OutbrainAmplify sourceType;

    /**
     * Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceOutbrainAmplify(
            @JsonProperty("credentials") SourceOutbrainAmplifyAuthenticationMethod credentials,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("geo_location_breakdown") Optional<? extends GranularityForGeoLocationRegion> geoLocationBreakdown,
            @JsonProperty("report_granularity") Optional<? extends GranularityForPeriodicReports> reportGranularity,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(geoLocationBreakdown, "geoLocationBreakdown");
        Utils.checkNotNull(reportGranularity, "reportGranularity");
        Utils.checkNotNull(startDate, "startDate");
        this.credentials = credentials;
        this.endDate = endDate;
        this.geoLocationBreakdown = geoLocationBreakdown;
        this.reportGranularity = reportGranularity;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceOutbrainAmplify(
            SourceOutbrainAmplifyAuthenticationMethod credentials,
            String startDate) {
        this(credentials, Optional.empty(), Optional.empty(), Optional.empty(), startDate);
    }

    /**
     * Credentials for making authenticated requests requires either username/password or access_token.
     */
    @JsonIgnore
    public SourceOutbrainAmplifyAuthenticationMethod credentials() {
        return credentials;
    }

    /**
     * Date in the format YYYY-MM-DD.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * The granularity used for geo location data in reports.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GranularityForGeoLocationRegion> geoLocationBreakdown() {
        return (Optional<GranularityForGeoLocationRegion>) geoLocationBreakdown;
    }

    /**
     * The granularity used for periodic data in reports. See &lt;a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown"&gt;the docs&lt;/a&gt;.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GranularityForPeriodicReports> reportGranularity() {
        return (Optional<GranularityForPeriodicReports>) reportGranularity;
    }

    @JsonIgnore
    public OutbrainAmplify sourceType() {
        return sourceType;
    }

    /**
     * Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Credentials for making authenticated requests requires either username/password or access_token.
     */
    public SourceOutbrainAmplify withCredentials(SourceOutbrainAmplifyAuthenticationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Date in the format YYYY-MM-DD.
     */
    public SourceOutbrainAmplify withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Date in the format YYYY-MM-DD.
     */
    public SourceOutbrainAmplify withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The granularity used for geo location data in reports.
     */
    public SourceOutbrainAmplify withGeoLocationBreakdown(GranularityForGeoLocationRegion geoLocationBreakdown) {
        Utils.checkNotNull(geoLocationBreakdown, "geoLocationBreakdown");
        this.geoLocationBreakdown = Optional.ofNullable(geoLocationBreakdown);
        return this;
    }

    /**
     * The granularity used for geo location data in reports.
     */
    public SourceOutbrainAmplify withGeoLocationBreakdown(Optional<? extends GranularityForGeoLocationRegion> geoLocationBreakdown) {
        Utils.checkNotNull(geoLocationBreakdown, "geoLocationBreakdown");
        this.geoLocationBreakdown = geoLocationBreakdown;
        return this;
    }

    /**
     * The granularity used for periodic data in reports. See &lt;a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown"&gt;the docs&lt;/a&gt;.
     */
    public SourceOutbrainAmplify withReportGranularity(GranularityForPeriodicReports reportGranularity) {
        Utils.checkNotNull(reportGranularity, "reportGranularity");
        this.reportGranularity = Optional.ofNullable(reportGranularity);
        return this;
    }

    /**
     * The granularity used for periodic data in reports. See &lt;a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown"&gt;the docs&lt;/a&gt;.
     */
    public SourceOutbrainAmplify withReportGranularity(Optional<? extends GranularityForPeriodicReports> reportGranularity) {
        Utils.checkNotNull(reportGranularity, "reportGranularity");
        this.reportGranularity = reportGranularity;
        return this;
    }

    /**
     * Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.
     */
    public SourceOutbrainAmplify withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOutbrainAmplify other = (SourceOutbrainAmplify) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.geoLocationBreakdown, other.geoLocationBreakdown) &&
            Objects.deepEquals(this.reportGranularity, other.reportGranularity) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            endDate,
            geoLocationBreakdown,
            reportGranularity,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOutbrainAmplify.class,
                "credentials", credentials,
                "endDate", endDate,
                "geoLocationBreakdown", geoLocationBreakdown,
                "reportGranularity", reportGranularity,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private SourceOutbrainAmplifyAuthenticationMethod credentials;
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<? extends GranularityForGeoLocationRegion> geoLocationBreakdown = Optional.empty();
 
        private Optional<? extends GranularityForPeriodicReports> reportGranularity = Optional.empty();
 
        private String startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Credentials for making authenticated requests requires either username/password or access_token.
         */
        public Builder credentials(SourceOutbrainAmplifyAuthenticationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Date in the format YYYY-MM-DD.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Date in the format YYYY-MM-DD.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * The granularity used for geo location data in reports.
         */
        public Builder geoLocationBreakdown(GranularityForGeoLocationRegion geoLocationBreakdown) {
            Utils.checkNotNull(geoLocationBreakdown, "geoLocationBreakdown");
            this.geoLocationBreakdown = Optional.ofNullable(geoLocationBreakdown);
            return this;
        }

        /**
         * The granularity used for geo location data in reports.
         */
        public Builder geoLocationBreakdown(Optional<? extends GranularityForGeoLocationRegion> geoLocationBreakdown) {
            Utils.checkNotNull(geoLocationBreakdown, "geoLocationBreakdown");
            this.geoLocationBreakdown = geoLocationBreakdown;
            return this;
        }

        /**
         * The granularity used for periodic data in reports. See &lt;a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown"&gt;the docs&lt;/a&gt;.
         */
        public Builder reportGranularity(GranularityForPeriodicReports reportGranularity) {
            Utils.checkNotNull(reportGranularity, "reportGranularity");
            this.reportGranularity = Optional.ofNullable(reportGranularity);
            return this;
        }

        /**
         * The granularity used for periodic data in reports. See &lt;a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown"&gt;the docs&lt;/a&gt;.
         */
        public Builder reportGranularity(Optional<? extends GranularityForPeriodicReports> reportGranularity) {
            Utils.checkNotNull(reportGranularity, "reportGranularity");
            this.reportGranularity = reportGranularity;
            return this;
        }

        /**
         * Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceOutbrainAmplify build() {
            return new SourceOutbrainAmplify(
                credentials,
                endDate,
                geoLocationBreakdown,
                reportGranularity,
                startDate);
        }

        private static final LazySingletonValue<OutbrainAmplify> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"outbrain-amplify\"",
                        new TypeReference<OutbrainAmplify>() {});
    }
}

