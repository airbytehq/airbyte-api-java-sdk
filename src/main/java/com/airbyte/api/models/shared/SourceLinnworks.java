/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;


public class SourceLinnworks {

    /**
     * Linnworks Application ID
     */
    @JsonProperty("application_id")
    private String applicationId;

    /**
     * Linnworks Application Secret
     */
    @JsonProperty("application_secret")
    private String applicationSecret;

    @JsonProperty("sourceType")
    private Linnworks sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonProperty("token")
    private String token;

    public SourceLinnworks(
            @JsonProperty("application_id") String applicationId,
            @JsonProperty("application_secret") String applicationSecret,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("token") String token) {
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(applicationSecret, "applicationSecret");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(token, "token");
        this.applicationId = applicationId;
        this.applicationSecret = applicationSecret;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.token = token;
    }

    /**
     * Linnworks Application ID
     */
    public String applicationId() {
        return applicationId;
    }

    /**
     * Linnworks Application Secret
     */
    public String applicationSecret() {
        return applicationSecret;
    }

    public Linnworks sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public OffsetDateTime startDate() {
        return startDate;
    }

    public String token() {
        return token;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Linnworks Application ID
     */
    public SourceLinnworks withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Linnworks Application Secret
     */
    public SourceLinnworks withApplicationSecret(String applicationSecret) {
        Utils.checkNotNull(applicationSecret, "applicationSecret");
        this.applicationSecret = applicationSecret;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourceLinnworks withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    public SourceLinnworks withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceLinnworks other = (SourceLinnworks) o;
        return 
            java.util.Objects.deepEquals(this.applicationId, other.applicationId) &&
            java.util.Objects.deepEquals(this.applicationSecret, other.applicationSecret) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.token, other.token);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            applicationId,
            applicationSecret,
            sourceType,
            startDate,
            token);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceLinnworks.class,
                "applicationId", applicationId,
                "applicationSecret", applicationSecret,
                "sourceType", sourceType,
                "startDate", startDate,
                "token", token);
    }
    
    public final static class Builder {
 
        private String applicationId;
 
        private String applicationSecret;
 
        private OffsetDateTime startDate;
 
        private String token;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Linnworks Application ID
         */
        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }

        /**
         * Linnworks Application Secret
         */
        public Builder applicationSecret(String applicationSecret) {
            Utils.checkNotNull(applicationSecret, "applicationSecret");
            this.applicationSecret = applicationSecret;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }
        
        public SourceLinnworks build() {
            return new SourceLinnworks(
                applicationId,
                applicationSecret,
                startDate,
                token);
        }

        private static final LazySingletonValue<Linnworks> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"linnworks\"",
                        new TypeReference<Linnworks>() {});
    }
}

