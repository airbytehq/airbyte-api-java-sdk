/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DestinationS3Glue {

    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_key_id")
    private Optional<? extends String> accessKeyId;

    @JsonProperty("destinationType")
    private S3Glue destinationType;

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_name_pattern")
    private Optional<? extends String> fileNamePattern;

    /**
     * Format of the data output. See &lt;a href="https://docs.airbyte.com/integrations/destinations/s3/#supported-output-schema"&gt;here&lt;/a&gt; for more details
     */
    @JsonProperty("format")
    private DestinationS3GlueOutputFormat format;

    /**
     * Name of the glue database for creating the tables, leave blank if no integration
     */
    @JsonProperty("glue_database")
    private String glueDatabase;

    /**
     * The library that your query engine will use for reading and writing data in your lake.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("glue_serialization_library")
    private Optional<? extends SerializationLibrary> glueSerializationLibrary;

    /**
     * The name of the S3 bucket. Read more &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("s3_bucket_name")
    private String s3BucketName;

    /**
     * Directory under the S3 bucket where data will be written. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=to%20format%20the-,bucket%20path,-%3A"&gt;here&lt;/a&gt;
     */
    @JsonProperty("s3_bucket_path")
    private String s3BucketPath;

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_bucket_region")
    private Optional<? extends DestinationS3GlueS3BucketRegion> s3BucketRegion;

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_endpoint")
    private Optional<? extends String> s3Endpoint;

    /**
     * Format string on how data will be organized inside the S3 bucket directory. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format"&gt;here&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_path_format")
    private Optional<? extends String> s3PathFormat;

    /**
     * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_access_key")
    private Optional<? extends String> secretAccessKey;

    public DestinationS3Glue(
            @JsonProperty("access_key_id") Optional<? extends String> accessKeyId,
            @JsonProperty("file_name_pattern") Optional<? extends String> fileNamePattern,
            @JsonProperty("format") DestinationS3GlueOutputFormat format,
            @JsonProperty("glue_database") String glueDatabase,
            @JsonProperty("glue_serialization_library") Optional<? extends SerializationLibrary> glueSerializationLibrary,
            @JsonProperty("s3_bucket_name") String s3BucketName,
            @JsonProperty("s3_bucket_path") String s3BucketPath,
            @JsonProperty("s3_bucket_region") Optional<? extends DestinationS3GlueS3BucketRegion> s3BucketRegion,
            @JsonProperty("s3_endpoint") Optional<? extends String> s3Endpoint,
            @JsonProperty("s3_path_format") Optional<? extends String> s3PathFormat,
            @JsonProperty("secret_access_key") Optional<? extends String> secretAccessKey) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(fileNamePattern, "fileNamePattern");
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(glueDatabase, "glueDatabase");
        Utils.checkNotNull(glueSerializationLibrary, "glueSerializationLibrary");
        Utils.checkNotNull(s3BucketName, "s3BucketName");
        Utils.checkNotNull(s3BucketPath, "s3BucketPath");
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        Utils.checkNotNull(s3Endpoint, "s3Endpoint");
        Utils.checkNotNull(s3PathFormat, "s3PathFormat");
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.accessKeyId = accessKeyId;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.fileNamePattern = fileNamePattern;
        this.format = format;
        this.glueDatabase = glueDatabase;
        this.glueSerializationLibrary = glueSerializationLibrary;
        this.s3BucketName = s3BucketName;
        this.s3BucketPath = s3BucketPath;
        this.s3BucketRegion = s3BucketRegion;
        this.s3Endpoint = s3Endpoint;
        this.s3PathFormat = s3PathFormat;
        this.secretAccessKey = secretAccessKey;
    }

    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
     */
    public Optional<? extends String> accessKeyId() {
        return accessKeyId;
    }

    public S3Glue destinationType() {
        return destinationType;
    }

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    public Optional<? extends String> fileNamePattern() {
        return fileNamePattern;
    }

    /**
     * Format of the data output. See &lt;a href="https://docs.airbyte.com/integrations/destinations/s3/#supported-output-schema"&gt;here&lt;/a&gt; for more details
     */
    public DestinationS3GlueOutputFormat format() {
        return format;
    }

    /**
     * Name of the glue database for creating the tables, leave blank if no integration
     */
    public String glueDatabase() {
        return glueDatabase;
    }

    /**
     * The library that your query engine will use for reading and writing data in your lake.
     */
    public Optional<? extends SerializationLibrary> glueSerializationLibrary() {
        return glueSerializationLibrary;
    }

    /**
     * The name of the S3 bucket. Read more &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;here&lt;/a&gt;.
     */
    public String s3BucketName() {
        return s3BucketName;
    }

    /**
     * Directory under the S3 bucket where data will be written. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=to%20format%20the-,bucket%20path,-%3A"&gt;here&lt;/a&gt;
     */
    public String s3BucketPath() {
        return s3BucketPath;
    }

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    public Optional<? extends DestinationS3GlueS3BucketRegion> s3BucketRegion() {
        return s3BucketRegion;
    }

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    public Optional<? extends String> s3Endpoint() {
        return s3Endpoint;
    }

    /**
     * Format string on how data will be organized inside the S3 bucket directory. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format"&gt;here&lt;/a&gt;
     */
    public Optional<? extends String> s3PathFormat() {
        return s3PathFormat;
    }

    /**
     * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
     */
    public Optional<? extends String> secretAccessKey() {
        return secretAccessKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
     */
    public DestinationS3Glue withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = Optional.ofNullable(accessKeyId);
        return this;
    }

    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
     */
    public DestinationS3Glue withAccessKeyId(Optional<? extends String> accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    public DestinationS3Glue withFileNamePattern(String fileNamePattern) {
        Utils.checkNotNull(fileNamePattern, "fileNamePattern");
        this.fileNamePattern = Optional.ofNullable(fileNamePattern);
        return this;
    }

    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    public DestinationS3Glue withFileNamePattern(Optional<? extends String> fileNamePattern) {
        Utils.checkNotNull(fileNamePattern, "fileNamePattern");
        this.fileNamePattern = fileNamePattern;
        return this;
    }

    /**
     * Format of the data output. See &lt;a href="https://docs.airbyte.com/integrations/destinations/s3/#supported-output-schema"&gt;here&lt;/a&gt; for more details
     */
    public DestinationS3Glue withFormat(DestinationS3GlueOutputFormat format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    /**
     * Name of the glue database for creating the tables, leave blank if no integration
     */
    public DestinationS3Glue withGlueDatabase(String glueDatabase) {
        Utils.checkNotNull(glueDatabase, "glueDatabase");
        this.glueDatabase = glueDatabase;
        return this;
    }

    /**
     * The library that your query engine will use for reading and writing data in your lake.
     */
    public DestinationS3Glue withGlueSerializationLibrary(SerializationLibrary glueSerializationLibrary) {
        Utils.checkNotNull(glueSerializationLibrary, "glueSerializationLibrary");
        this.glueSerializationLibrary = Optional.ofNullable(glueSerializationLibrary);
        return this;
    }

    /**
     * The library that your query engine will use for reading and writing data in your lake.
     */
    public DestinationS3Glue withGlueSerializationLibrary(Optional<? extends SerializationLibrary> glueSerializationLibrary) {
        Utils.checkNotNull(glueSerializationLibrary, "glueSerializationLibrary");
        this.glueSerializationLibrary = glueSerializationLibrary;
        return this;
    }

    /**
     * The name of the S3 bucket. Read more &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;here&lt;/a&gt;.
     */
    public DestinationS3Glue withS3BucketName(String s3BucketName) {
        Utils.checkNotNull(s3BucketName, "s3BucketName");
        this.s3BucketName = s3BucketName;
        return this;
    }

    /**
     * Directory under the S3 bucket where data will be written. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=to%20format%20the-,bucket%20path,-%3A"&gt;here&lt;/a&gt;
     */
    public DestinationS3Glue withS3BucketPath(String s3BucketPath) {
        Utils.checkNotNull(s3BucketPath, "s3BucketPath");
        this.s3BucketPath = s3BucketPath;
        return this;
    }

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    public DestinationS3Glue withS3BucketRegion(DestinationS3GlueS3BucketRegion s3BucketRegion) {
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        this.s3BucketRegion = Optional.ofNullable(s3BucketRegion);
        return this;
    }

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    public DestinationS3Glue withS3BucketRegion(Optional<? extends DestinationS3GlueS3BucketRegion> s3BucketRegion) {
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        this.s3BucketRegion = s3BucketRegion;
        return this;
    }

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    public DestinationS3Glue withS3Endpoint(String s3Endpoint) {
        Utils.checkNotNull(s3Endpoint, "s3Endpoint");
        this.s3Endpoint = Optional.ofNullable(s3Endpoint);
        return this;
    }

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    public DestinationS3Glue withS3Endpoint(Optional<? extends String> s3Endpoint) {
        Utils.checkNotNull(s3Endpoint, "s3Endpoint");
        this.s3Endpoint = s3Endpoint;
        return this;
    }

    /**
     * Format string on how data will be organized inside the S3 bucket directory. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format"&gt;here&lt;/a&gt;
     */
    public DestinationS3Glue withS3PathFormat(String s3PathFormat) {
        Utils.checkNotNull(s3PathFormat, "s3PathFormat");
        this.s3PathFormat = Optional.ofNullable(s3PathFormat);
        return this;
    }

    /**
     * Format string on how data will be organized inside the S3 bucket directory. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format"&gt;here&lt;/a&gt;
     */
    public DestinationS3Glue withS3PathFormat(Optional<? extends String> s3PathFormat) {
        Utils.checkNotNull(s3PathFormat, "s3PathFormat");
        this.s3PathFormat = s3PathFormat;
        return this;
    }

    /**
     * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
     */
    public DestinationS3Glue withSecretAccessKey(String secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = Optional.ofNullable(secretAccessKey);
        return this;
    }

    /**
     * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
     */
    public DestinationS3Glue withSecretAccessKey(Optional<? extends String> secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = secretAccessKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationS3Glue other = (DestinationS3Glue) o;
        return 
            java.util.Objects.deepEquals(this.accessKeyId, other.accessKeyId) &&
            java.util.Objects.deepEquals(this.destinationType, other.destinationType) &&
            java.util.Objects.deepEquals(this.fileNamePattern, other.fileNamePattern) &&
            java.util.Objects.deepEquals(this.format, other.format) &&
            java.util.Objects.deepEquals(this.glueDatabase, other.glueDatabase) &&
            java.util.Objects.deepEquals(this.glueSerializationLibrary, other.glueSerializationLibrary) &&
            java.util.Objects.deepEquals(this.s3BucketName, other.s3BucketName) &&
            java.util.Objects.deepEquals(this.s3BucketPath, other.s3BucketPath) &&
            java.util.Objects.deepEquals(this.s3BucketRegion, other.s3BucketRegion) &&
            java.util.Objects.deepEquals(this.s3Endpoint, other.s3Endpoint) &&
            java.util.Objects.deepEquals(this.s3PathFormat, other.s3PathFormat) &&
            java.util.Objects.deepEquals(this.secretAccessKey, other.secretAccessKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKeyId,
            destinationType,
            fileNamePattern,
            format,
            glueDatabase,
            glueSerializationLibrary,
            s3BucketName,
            s3BucketPath,
            s3BucketRegion,
            s3Endpoint,
            s3PathFormat,
            secretAccessKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationS3Glue.class,
                "accessKeyId", accessKeyId,
                "destinationType", destinationType,
                "fileNamePattern", fileNamePattern,
                "format", format,
                "glueDatabase", glueDatabase,
                "glueSerializationLibrary", glueSerializationLibrary,
                "s3BucketName", s3BucketName,
                "s3BucketPath", s3BucketPath,
                "s3BucketRegion", s3BucketRegion,
                "s3Endpoint", s3Endpoint,
                "s3PathFormat", s3PathFormat,
                "secretAccessKey", secretAccessKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> accessKeyId = Optional.empty();
 
        private Optional<? extends String> fileNamePattern = Optional.empty();
 
        private DestinationS3GlueOutputFormat format;
 
        private String glueDatabase;
 
        private Optional<? extends SerializationLibrary> glueSerializationLibrary;
 
        private String s3BucketName;
 
        private String s3BucketPath;
 
        private Optional<? extends DestinationS3GlueS3BucketRegion> s3BucketRegion;
 
        private Optional<? extends String> s3Endpoint;
 
        private Optional<? extends String> s3PathFormat = Optional.empty();
 
        private Optional<? extends String> secretAccessKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
         */
        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = Optional.ofNullable(accessKeyId);
            return this;
        }

        /**
         * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
         */
        public Builder accessKeyId(Optional<? extends String> accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * The pattern allows you to set the file-name format for the S3 staging file(s)
         */
        public Builder fileNamePattern(String fileNamePattern) {
            Utils.checkNotNull(fileNamePattern, "fileNamePattern");
            this.fileNamePattern = Optional.ofNullable(fileNamePattern);
            return this;
        }

        /**
         * The pattern allows you to set the file-name format for the S3 staging file(s)
         */
        public Builder fileNamePattern(Optional<? extends String> fileNamePattern) {
            Utils.checkNotNull(fileNamePattern, "fileNamePattern");
            this.fileNamePattern = fileNamePattern;
            return this;
        }

        /**
         * Format of the data output. See &lt;a href="https://docs.airbyte.com/integrations/destinations/s3/#supported-output-schema"&gt;here&lt;/a&gt; for more details
         */
        public Builder format(DestinationS3GlueOutputFormat format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        /**
         * Name of the glue database for creating the tables, leave blank if no integration
         */
        public Builder glueDatabase(String glueDatabase) {
            Utils.checkNotNull(glueDatabase, "glueDatabase");
            this.glueDatabase = glueDatabase;
            return this;
        }

        /**
         * The library that your query engine will use for reading and writing data in your lake.
         */
        public Builder glueSerializationLibrary(SerializationLibrary glueSerializationLibrary) {
            Utils.checkNotNull(glueSerializationLibrary, "glueSerializationLibrary");
            this.glueSerializationLibrary = Optional.ofNullable(glueSerializationLibrary);
            return this;
        }

        /**
         * The library that your query engine will use for reading and writing data in your lake.
         */
        public Builder glueSerializationLibrary(Optional<? extends SerializationLibrary> glueSerializationLibrary) {
            Utils.checkNotNull(glueSerializationLibrary, "glueSerializationLibrary");
            this.glueSerializationLibrary = glueSerializationLibrary;
            return this;
        }

        /**
         * The name of the S3 bucket. Read more &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;here&lt;/a&gt;.
         */
        public Builder s3BucketName(String s3BucketName) {
            Utils.checkNotNull(s3BucketName, "s3BucketName");
            this.s3BucketName = s3BucketName;
            return this;
        }

        /**
         * Directory under the S3 bucket where data will be written. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=to%20format%20the-,bucket%20path,-%3A"&gt;here&lt;/a&gt;
         */
        public Builder s3BucketPath(String s3BucketPath) {
            Utils.checkNotNull(s3BucketPath, "s3BucketPath");
            this.s3BucketPath = s3BucketPath;
            return this;
        }

        /**
         * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
         */
        public Builder s3BucketRegion(DestinationS3GlueS3BucketRegion s3BucketRegion) {
            Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
            this.s3BucketRegion = Optional.ofNullable(s3BucketRegion);
            return this;
        }

        /**
         * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
         */
        public Builder s3BucketRegion(Optional<? extends DestinationS3GlueS3BucketRegion> s3BucketRegion) {
            Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
            this.s3BucketRegion = s3BucketRegion;
            return this;
        }

        /**
         * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
         */
        public Builder s3Endpoint(String s3Endpoint) {
            Utils.checkNotNull(s3Endpoint, "s3Endpoint");
            this.s3Endpoint = Optional.ofNullable(s3Endpoint);
            return this;
        }

        /**
         * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
         */
        public Builder s3Endpoint(Optional<? extends String> s3Endpoint) {
            Utils.checkNotNull(s3Endpoint, "s3Endpoint");
            this.s3Endpoint = s3Endpoint;
            return this;
        }

        /**
         * Format string on how data will be organized inside the S3 bucket directory. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format"&gt;here&lt;/a&gt;
         */
        public Builder s3PathFormat(String s3PathFormat) {
            Utils.checkNotNull(s3PathFormat, "s3PathFormat");
            this.s3PathFormat = Optional.ofNullable(s3PathFormat);
            return this;
        }

        /**
         * Format string on how data will be organized inside the S3 bucket directory. Read more &lt;a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format"&gt;here&lt;/a&gt;
         */
        public Builder s3PathFormat(Optional<? extends String> s3PathFormat) {
            Utils.checkNotNull(s3PathFormat, "s3PathFormat");
            this.s3PathFormat = s3PathFormat;
            return this;
        }

        /**
         * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
         */
        public Builder secretAccessKey(String secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = Optional.ofNullable(secretAccessKey);
            return this;
        }

        /**
         * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
         */
        public Builder secretAccessKey(Optional<? extends String> secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        
        public DestinationS3Glue build() {
            if (glueSerializationLibrary == null) {
                glueSerializationLibrary = _SINGLETON_VALUE_GlueSerializationLibrary.value();
            }
            if (s3BucketRegion == null) {
                s3BucketRegion = _SINGLETON_VALUE_S3BucketRegion.value();
            }
            if (s3Endpoint == null) {
                s3Endpoint = _SINGLETON_VALUE_S3Endpoint.value();
            }
            return new DestinationS3Glue(
                accessKeyId,
                fileNamePattern,
                format,
                glueDatabase,
                glueSerializationLibrary,
                s3BucketName,
                s3BucketPath,
                s3BucketRegion,
                s3Endpoint,
                s3PathFormat,
                secretAccessKey);
        }

        private static final LazySingletonValue<S3Glue> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"s3-glue\"",
                        new TypeReference<S3Glue>() {});

        private static final LazySingletonValue<Optional<? extends SerializationLibrary>> _SINGLETON_VALUE_GlueSerializationLibrary =
                new LazySingletonValue<>(
                        "glue_serialization_library",
                        "\"org.openx.data.jsonserde.JsonSerDe\"",
                        new TypeReference<Optional<? extends SerializationLibrary>>() {});

        private static final LazySingletonValue<Optional<? extends DestinationS3GlueS3BucketRegion>> _SINGLETON_VALUE_S3BucketRegion =
                new LazySingletonValue<>(
                        "s3_bucket_region",
                        "\"\"",
                        new TypeReference<Optional<? extends DestinationS3GlueS3BucketRegion>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_S3Endpoint =
                new LazySingletonValue<>(
                        "s3_endpoint",
                        "\"\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

