/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class SourceZendeskSupportOAuth20 {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * The OAuth access token. See the &lt;a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/"&gt;Zendesk docs&lt;/a&gt; for more information on generating this token.
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * The OAuth client's ID. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    private Optional<String> clientId;

    /**
     * The OAuth client secret. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_secret")
    private Optional<String> clientSecret;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceZendeskSupportCredentials> credentials;

    @JsonCreator
    public SourceZendeskSupportOAuth20(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("client_id") Optional<String> clientId,
            @JsonProperty("client_secret") Optional<String> clientSecret) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.additionalProperties = new HashMap<>();
        this.accessToken = accessToken;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.credentials = Builder._SINGLETON_VALUE_Credentials.value();
    }
    
    public SourceZendeskSupportOAuth20(
            String accessToken) {
        this(accessToken, Optional.empty(), Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * The OAuth access token. See the &lt;a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/"&gt;Zendesk docs&lt;/a&gt; for more information on generating this token.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * The OAuth client's ID. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    @JsonIgnore
    public Optional<String> clientId() {
        return clientId;
    }

    /**
     * The OAuth client secret. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    @JsonIgnore
    public Optional<String> clientSecret() {
        return clientSecret;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceZendeskSupportCredentials> credentials() {
        return (Optional<SourceZendeskSupportCredentials>) credentials;
    }

    public final static Builder builder() {
        return new Builder();
    }

    @JsonAnySetter
    public SourceZendeskSupportOAuth20 withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public SourceZendeskSupportOAuth20 withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * The OAuth access token. See the &lt;a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/"&gt;Zendesk docs&lt;/a&gt; for more information on generating this token.
     */
    public SourceZendeskSupportOAuth20 withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The OAuth client's ID. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    public SourceZendeskSupportOAuth20 withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = Optional.ofNullable(clientId);
        return this;
    }

    /**
     * The OAuth client's ID. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    public SourceZendeskSupportOAuth20 withClientId(Optional<String> clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The OAuth client secret. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    public SourceZendeskSupportOAuth20 withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = Optional.ofNullable(clientSecret);
        return this;
    }

    /**
     * The OAuth client secret. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
     */
    public SourceZendeskSupportOAuth20 withClientSecret(Optional<String> clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZendeskSupportOAuth20 other = (SourceZendeskSupportOAuth20) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.credentials, other.credentials);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            accessToken,
            clientId,
            clientSecret,
            credentials);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZendeskSupportOAuth20.class,
                "additionalProperties", additionalProperties,
                "accessToken", accessToken,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "credentials", credentials);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private String accessToken;
 
        private Optional<String> clientId = Optional.empty();
 
        private Optional<String> clientSecret = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * The OAuth access token. See the &lt;a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/"&gt;Zendesk docs&lt;/a&gt; for more information on generating this token.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The OAuth client's ID. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = Optional.ofNullable(clientId);
            return this;
        }

        /**
         * The OAuth client's ID. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
         */
        public Builder clientId(Optional<String> clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The OAuth client secret. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = Optional.ofNullable(clientSecret);
            return this;
        }

        /**
         * The OAuth client secret. See &lt;a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&amp;text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once."&gt;this guide&lt;/a&gt; for more information.
         */
        public Builder clientSecret(Optional<String> clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }
        
        public SourceZendeskSupportOAuth20 build() {
            return new SourceZendeskSupportOAuth20(
                accessToken,
                clientId,
                clientSecret)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceZendeskSupportCredentials>> _SINGLETON_VALUE_Credentials =
                new LazySingletonValue<>(
                        "credentials",
                        "\"oauth2.0\"",
                        new TypeReference<Optional<? extends SourceZendeskSupportCredentials>>() {});
    }
}

