/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourcePosthog {

    /**
     * API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/posthog"&gt;docs&lt;/a&gt; for information on how to generate this key.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_url")
    private Optional<String> baseUrl;

    /**
     * Set lower value in case of failing long running sync of events stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events_time_step")
    private Optional<Long> eventsTimeStep;

    @JsonProperty("sourceType")
    private Posthog sourceType;

    /**
     * The date from which you'd like to replicate the data. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourcePosthog(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("base_url") Optional<String> baseUrl,
            @JsonProperty("events_time_step") Optional<Long> eventsTimeStep,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(baseUrl, "baseUrl");
        Utils.checkNotNull(eventsTimeStep, "eventsTimeStep");
        Utils.checkNotNull(startDate, "startDate");
        this.apiKey = apiKey;
        this.baseUrl = baseUrl;
        this.eventsTimeStep = eventsTimeStep;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourcePosthog(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), startDate);
    }

    /**
     * API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/posthog"&gt;docs&lt;/a&gt; for information on how to generate this key.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).
     */
    @JsonIgnore
    public Optional<String> baseUrl() {
        return baseUrl;
    }

    /**
     * Set lower value in case of failing long running sync of events stream.
     */
    @JsonIgnore
    public Optional<Long> eventsTimeStep() {
        return eventsTimeStep;
    }

    @JsonIgnore
    public Posthog sourceType() {
        return sourceType;
    }

    /**
     * The date from which you'd like to replicate the data. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/posthog"&gt;docs&lt;/a&gt; for information on how to generate this key.
     */
    public SourcePosthog withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).
     */
    public SourcePosthog withBaseUrl(String baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = Optional.ofNullable(baseUrl);
        return this;
    }

    /**
     * Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).
     */
    public SourcePosthog withBaseUrl(Optional<String> baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = baseUrl;
        return this;
    }

    /**
     * Set lower value in case of failing long running sync of events stream.
     */
    public SourcePosthog withEventsTimeStep(long eventsTimeStep) {
        Utils.checkNotNull(eventsTimeStep, "eventsTimeStep");
        this.eventsTimeStep = Optional.ofNullable(eventsTimeStep);
        return this;
    }

    /**
     * Set lower value in case of failing long running sync of events stream.
     */
    public SourcePosthog withEventsTimeStep(Optional<Long> eventsTimeStep) {
        Utils.checkNotNull(eventsTimeStep, "eventsTimeStep");
        this.eventsTimeStep = eventsTimeStep;
        return this;
    }

    /**
     * The date from which you'd like to replicate the data. Any data before this date will not be replicated.
     */
    public SourcePosthog withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePosthog other = (SourcePosthog) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.baseUrl, other.baseUrl) &&
            Objects.deepEquals(this.eventsTimeStep, other.eventsTimeStep) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            baseUrl,
            eventsTimeStep,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePosthog.class,
                "apiKey", apiKey,
                "baseUrl", baseUrl,
                "eventsTimeStep", eventsTimeStep,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> baseUrl;
 
        private Optional<Long> eventsTimeStep;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/posthog"&gt;docs&lt;/a&gt; for information on how to generate this key.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).
         */
        public Builder baseUrl(String baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = Optional.ofNullable(baseUrl);
            return this;
        }

        /**
         * Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com).
         */
        public Builder baseUrl(Optional<String> baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = baseUrl;
            return this;
        }

        /**
         * Set lower value in case of failing long running sync of events stream.
         */
        public Builder eventsTimeStep(long eventsTimeStep) {
            Utils.checkNotNull(eventsTimeStep, "eventsTimeStep");
            this.eventsTimeStep = Optional.ofNullable(eventsTimeStep);
            return this;
        }

        /**
         * Set lower value in case of failing long running sync of events stream.
         */
        public Builder eventsTimeStep(Optional<Long> eventsTimeStep) {
            Utils.checkNotNull(eventsTimeStep, "eventsTimeStep");
            this.eventsTimeStep = eventsTimeStep;
            return this;
        }

        /**
         * The date from which you'd like to replicate the data. Any data before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourcePosthog build() {
            if (baseUrl == null) {
                baseUrl = _SINGLETON_VALUE_BaseUrl.value();
            }
            if (eventsTimeStep == null) {
                eventsTimeStep = _SINGLETON_VALUE_EventsTimeStep.value();
            }            return new SourcePosthog(
                apiKey,
                baseUrl,
                eventsTimeStep,
                startDate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_BaseUrl =
                new LazySingletonValue<>(
                        "base_url",
                        "\"https://app.posthog.com\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_EventsTimeStep =
                new LazySingletonValue<>(
                        "events_time_step",
                        "30",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Posthog> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"posthog\"",
                        new TypeReference<Posthog>() {});
    }
}

