/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * PostgresConnection - Postgres can be used to store vector data and retrieve embeddings.
 */

public class PostgresConnection {

    @JsonProperty("credentials")
    private DestinationPgvectorCredentials credentials;

    /**
     * Enter the name of the database that you want to sync data into
     */
    @JsonProperty("database")
    private String database;

    /**
     * Enter the name of the default schema
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_schema")
    private Optional<String> defaultSchema;

    /**
     * Enter the account name you want to use to access the database.
     */
    @JsonProperty("host")
    private String host;

    /**
     * Enter the port you want to use to access the database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<Long> port;

    /**
     * Enter the name of the user you want to use to access the database
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public PostgresConnection(
            @JsonProperty("credentials") DestinationPgvectorCredentials credentials,
            @JsonProperty("database") String database,
            @JsonProperty("default_schema") Optional<String> defaultSchema,
            @JsonProperty("host") String host,
            @JsonProperty("port") Optional<Long> port,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(defaultSchema, "defaultSchema");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(username, "username");
        this.credentials = credentials;
        this.database = database;
        this.defaultSchema = defaultSchema;
        this.host = host;
        this.port = port;
        this.username = username;
    }
    
    public PostgresConnection(
            DestinationPgvectorCredentials credentials,
            String database,
            String host,
            String username) {
        this(credentials, database, Optional.empty(), host, Optional.empty(), username);
    }

    @JsonIgnore
    public DestinationPgvectorCredentials credentials() {
        return credentials;
    }

    /**
     * Enter the name of the database that you want to sync data into
     */
    @JsonIgnore
    public String database() {
        return database;
    }

    /**
     * Enter the name of the default schema
     */
    @JsonIgnore
    public Optional<String> defaultSchema() {
        return defaultSchema;
    }

    /**
     * Enter the account name you want to use to access the database.
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Enter the port you want to use to access the database
     */
    @JsonIgnore
    public Optional<Long> port() {
        return port;
    }

    /**
     * Enter the name of the user you want to use to access the database
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PostgresConnection withCredentials(DestinationPgvectorCredentials credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Enter the name of the database that you want to sync data into
     */
    public PostgresConnection withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    /**
     * Enter the name of the default schema
     */
    public PostgresConnection withDefaultSchema(String defaultSchema) {
        Utils.checkNotNull(defaultSchema, "defaultSchema");
        this.defaultSchema = Optional.ofNullable(defaultSchema);
        return this;
    }

    /**
     * Enter the name of the default schema
     */
    public PostgresConnection withDefaultSchema(Optional<String> defaultSchema) {
        Utils.checkNotNull(defaultSchema, "defaultSchema");
        this.defaultSchema = defaultSchema;
        return this;
    }

    /**
     * Enter the account name you want to use to access the database.
     */
    public PostgresConnection withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Enter the port you want to use to access the database
     */
    public PostgresConnection withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Enter the port you want to use to access the database
     */
    public PostgresConnection withPort(Optional<Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * Enter the name of the user you want to use to access the database
     */
    public PostgresConnection withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostgresConnection other = (PostgresConnection) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.database, other.database) &&
            Objects.deepEquals(this.defaultSchema, other.defaultSchema) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.port, other.port) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            database,
            defaultSchema,
            host,
            port,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostgresConnection.class,
                "credentials", credentials,
                "database", database,
                "defaultSchema", defaultSchema,
                "host", host,
                "port", port,
                "username", username);
    }
    
    public final static class Builder {
 
        private DestinationPgvectorCredentials credentials;
 
        private String database;
 
        private Optional<String> defaultSchema;
 
        private String host;
 
        private Optional<Long> port;
 
        private String username;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(DestinationPgvectorCredentials credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Enter the name of the database that you want to sync data into
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        /**
         * Enter the name of the default schema
         */
        public Builder defaultSchema(String defaultSchema) {
            Utils.checkNotNull(defaultSchema, "defaultSchema");
            this.defaultSchema = Optional.ofNullable(defaultSchema);
            return this;
        }

        /**
         * Enter the name of the default schema
         */
        public Builder defaultSchema(Optional<String> defaultSchema) {
            Utils.checkNotNull(defaultSchema, "defaultSchema");
            this.defaultSchema = defaultSchema;
            return this;
        }

        /**
         * Enter the account name you want to use to access the database.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Enter the port you want to use to access the database
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Enter the port you want to use to access the database
         */
        public Builder port(Optional<Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * Enter the name of the user you want to use to access the database
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public PostgresConnection build() {
            if (defaultSchema == null) {
                defaultSchema = _SINGLETON_VALUE_DefaultSchema.value();
            }
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }            return new PostgresConnection(
                credentials,
                database,
                defaultSchema,
                host,
                port,
                username);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_DefaultSchema =
                new LazySingletonValue<>(
                        "default_schema",
                        "\"public\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "5432",
                        new TypeReference<Optional<Long>>() {});
    }
}

