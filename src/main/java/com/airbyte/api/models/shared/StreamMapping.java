/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * StreamMapping
 * 
 * <p>Describes the relationship between a source stream and a destination table and how to update the information.
 */
public class StreamMapping {

    /**
     * The name for the table to update the data in the destination.
     */
    @JsonProperty("destination_table")
    private String destinationTable;

    /**
     * The name for the input stream.
     */
    @JsonProperty("source_stream")
    private String sourceStream;

    /**
     * How to update the data in the destination.
     */
    @JsonProperty("update_mode")
    private UpdateMode updateMode;

    /**
     * Given the operation is an upsert, a field representing an external ID needs to be provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upsert_key")
    private Optional<String> upsertKey;

    @JsonCreator
    public StreamMapping(
            @JsonProperty("destination_table") String destinationTable,
            @JsonProperty("source_stream") String sourceStream,
            @JsonProperty("update_mode") UpdateMode updateMode,
            @JsonProperty("upsert_key") Optional<String> upsertKey) {
        Utils.checkNotNull(destinationTable, "destinationTable");
        Utils.checkNotNull(sourceStream, "sourceStream");
        Utils.checkNotNull(updateMode, "updateMode");
        Utils.checkNotNull(upsertKey, "upsertKey");
        this.destinationTable = destinationTable;
        this.sourceStream = sourceStream;
        this.updateMode = updateMode;
        this.upsertKey = upsertKey;
    }
    
    public StreamMapping(
            String destinationTable,
            String sourceStream,
            UpdateMode updateMode) {
        this(destinationTable, sourceStream, updateMode, Optional.empty());
    }

    /**
     * The name for the table to update the data in the destination.
     */
    @JsonIgnore
    public String destinationTable() {
        return destinationTable;
    }

    /**
     * The name for the input stream.
     */
    @JsonIgnore
    public String sourceStream() {
        return sourceStream;
    }

    /**
     * How to update the data in the destination.
     */
    @JsonIgnore
    public UpdateMode updateMode() {
        return updateMode;
    }

    /**
     * Given the operation is an upsert, a field representing an external ID needs to be provided
     */
    @JsonIgnore
    public Optional<String> upsertKey() {
        return upsertKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name for the table to update the data in the destination.
     */
    public StreamMapping withDestinationTable(String destinationTable) {
        Utils.checkNotNull(destinationTable, "destinationTable");
        this.destinationTable = destinationTable;
        return this;
    }

    /**
     * The name for the input stream.
     */
    public StreamMapping withSourceStream(String sourceStream) {
        Utils.checkNotNull(sourceStream, "sourceStream");
        this.sourceStream = sourceStream;
        return this;
    }

    /**
     * How to update the data in the destination.
     */
    public StreamMapping withUpdateMode(UpdateMode updateMode) {
        Utils.checkNotNull(updateMode, "updateMode");
        this.updateMode = updateMode;
        return this;
    }

    /**
     * Given the operation is an upsert, a field representing an external ID needs to be provided
     */
    public StreamMapping withUpsertKey(String upsertKey) {
        Utils.checkNotNull(upsertKey, "upsertKey");
        this.upsertKey = Optional.ofNullable(upsertKey);
        return this;
    }

    /**
     * Given the operation is an upsert, a field representing an external ID needs to be provided
     */
    public StreamMapping withUpsertKey(Optional<String> upsertKey) {
        Utils.checkNotNull(upsertKey, "upsertKey");
        this.upsertKey = upsertKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamMapping other = (StreamMapping) o;
        return 
            Objects.deepEquals(this.destinationTable, other.destinationTable) &&
            Objects.deepEquals(this.sourceStream, other.sourceStream) &&
            Objects.deepEquals(this.updateMode, other.updateMode) &&
            Objects.deepEquals(this.upsertKey, other.upsertKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            destinationTable,
            sourceStream,
            updateMode,
            upsertKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreamMapping.class,
                "destinationTable", destinationTable,
                "sourceStream", sourceStream,
                "updateMode", updateMode,
                "upsertKey", upsertKey);
    }
    
    public final static class Builder {
 
        private String destinationTable;
 
        private String sourceStream;
 
        private UpdateMode updateMode;
 
        private Optional<String> upsertKey = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name for the table to update the data in the destination.
         */
        public Builder destinationTable(String destinationTable) {
            Utils.checkNotNull(destinationTable, "destinationTable");
            this.destinationTable = destinationTable;
            return this;
        }

        /**
         * The name for the input stream.
         */
        public Builder sourceStream(String sourceStream) {
            Utils.checkNotNull(sourceStream, "sourceStream");
            this.sourceStream = sourceStream;
            return this;
        }

        /**
         * How to update the data in the destination.
         */
        public Builder updateMode(UpdateMode updateMode) {
            Utils.checkNotNull(updateMode, "updateMode");
            this.updateMode = updateMode;
            return this;
        }

        /**
         * Given the operation is an upsert, a field representing an external ID needs to be provided
         */
        public Builder upsertKey(String upsertKey) {
            Utils.checkNotNull(upsertKey, "upsertKey");
            this.upsertKey = Optional.ofNullable(upsertKey);
            return this;
        }

        /**
         * Given the operation is an upsert, a field representing an external ID needs to be provided
         */
        public Builder upsertKey(Optional<String> upsertKey) {
            Utils.checkNotNull(upsertKey, "upsertKey");
            this.upsertKey = upsertKey;
            return this;
        }
        
        public StreamMapping build() {
            return new StreamMapping(
                destinationTable,
                sourceStream,
                updateMode,
                upsertKey);
        }
    }
}
