/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class DestinationConvex {

    /**
     * API access key used to send data to a Convex deployment.
     */
    @JsonProperty("access_key")
    private String accessKey;

    /**
     * URL of the Convex deployment that is the destination
     */
    @JsonProperty("deployment_url")
    private String deploymentUrl;

    @JsonProperty("destinationType")
    private Convex destinationType;

    @JsonCreator
    public DestinationConvex(
            @JsonProperty("access_key") String accessKey,
            @JsonProperty("deployment_url") String deploymentUrl) {
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(deploymentUrl, "deploymentUrl");
        this.accessKey = accessKey;
        this.deploymentUrl = deploymentUrl;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
    }

    /**
     * API access key used to send data to a Convex deployment.
     */
    @JsonIgnore
    public String accessKey() {
        return accessKey;
    }

    /**
     * URL of the Convex deployment that is the destination
     */
    @JsonIgnore
    public String deploymentUrl() {
        return deploymentUrl;
    }

    @JsonIgnore
    public Convex destinationType() {
        return destinationType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API access key used to send data to a Convex deployment.
     */
    public DestinationConvex withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    /**
     * URL of the Convex deployment that is the destination
     */
    public DestinationConvex withDeploymentUrl(String deploymentUrl) {
        Utils.checkNotNull(deploymentUrl, "deploymentUrl");
        this.deploymentUrl = deploymentUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationConvex other = (DestinationConvex) o;
        return 
            java.util.Objects.deepEquals(this.accessKey, other.accessKey) &&
            java.util.Objects.deepEquals(this.deploymentUrl, other.deploymentUrl) &&
            java.util.Objects.deepEquals(this.destinationType, other.destinationType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKey,
            deploymentUrl,
            destinationType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationConvex.class,
                "accessKey", accessKey,
                "deploymentUrl", deploymentUrl,
                "destinationType", destinationType);
    }
    
    public final static class Builder {
 
        private String accessKey;
 
        private String deploymentUrl;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API access key used to send data to a Convex deployment.
         */
        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }

        /**
         * URL of the Convex deployment that is the destination
         */
        public Builder deploymentUrl(String deploymentUrl) {
            Utils.checkNotNull(deploymentUrl, "deploymentUrl");
            this.deploymentUrl = deploymentUrl;
            return this;
        }
        
        public DestinationConvex build() {
            return new DestinationConvex(
                accessKey,
                deploymentUrl);
        }

        private static final LazySingletonValue<Convex> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"convex\"",
                        new TypeReference<Convex>() {});
    }
}

