/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceFacebookPages {

    /**
     * Facebook Page Access Token
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * Page ID
     */
    @JsonProperty("page_id")
    private String pageId;

    @JsonProperty("sourceType")
    private FacebookPages sourceType;

    @JsonCreator
    public SourceFacebookPages(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("page_id") String pageId) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(pageId, "pageId");
        this.accessToken = accessToken;
        this.pageId = pageId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * Facebook Page Access Token
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * Page ID
     */
    @JsonIgnore
    public String pageId() {
        return pageId;
    }

    @JsonIgnore
    public FacebookPages sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Facebook Page Access Token
     */
    public SourceFacebookPages withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Page ID
     */
    public SourceFacebookPages withPageId(String pageId) {
        Utils.checkNotNull(pageId, "pageId");
        this.pageId = pageId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFacebookPages other = (SourceFacebookPages) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.pageId, other.pageId) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            pageId,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFacebookPages.class,
                "accessToken", accessToken,
                "pageId", pageId,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private String pageId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Facebook Page Access Token
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Page ID
         */
        public Builder pageId(String pageId) {
            Utils.checkNotNull(pageId, "pageId");
            this.pageId = pageId;
            return this;
        }
        
        public SourceFacebookPages build() {
            return new SourceFacebookPages(
                accessToken,
                pageId);
        }

        private static final LazySingletonValue<FacebookPages> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"facebook-pages\"",
                        new TypeReference<FacebookPages>() {});
    }
}
