/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourceAkeneo {

    @JsonProperty("api_username")
    private String apiUsername;

    @JsonProperty("client_id")
    private String clientId;

    /**
     * https://cb8715249e.trial.akeneo.cloud
     */
    @JsonProperty("host")
    private String host;

    @JsonProperty("password")
    private String password;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    private Optional<String> secret;

    @JsonProperty("sourceType")
    private Akeneo sourceType;

    @JsonCreator
    public SourceAkeneo(
            @JsonProperty("api_username") String apiUsername,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("host") String host,
            @JsonProperty("password") String password,
            @JsonProperty("secret") Optional<String> secret) {
        Utils.checkNotNull(apiUsername, "apiUsername");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(secret, "secret");
        this.apiUsername = apiUsername;
        this.clientId = clientId;
        this.host = host;
        this.password = password;
        this.secret = secret;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceAkeneo(
            String apiUsername,
            String clientId,
            String host,
            String password) {
        this(apiUsername, clientId, host, password, Optional.empty());
    }

    @JsonIgnore
    public String apiUsername() {
        return apiUsername;
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * https://cb8715249e.trial.akeneo.cloud
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    @JsonIgnore
    public String password() {
        return password;
    }

    @JsonIgnore
    public Optional<String> secret() {
        return secret;
    }

    @JsonIgnore
    public Akeneo sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceAkeneo withApiUsername(String apiUsername) {
        Utils.checkNotNull(apiUsername, "apiUsername");
        this.apiUsername = apiUsername;
        return this;
    }

    public SourceAkeneo withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * https://cb8715249e.trial.akeneo.cloud
     */
    public SourceAkeneo withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    public SourceAkeneo withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public SourceAkeneo withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = Optional.ofNullable(secret);
        return this;
    }

    public SourceAkeneo withSecret(Optional<String> secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAkeneo other = (SourceAkeneo) o;
        return 
            Objects.deepEquals(this.apiUsername, other.apiUsername) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.secret, other.secret) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiUsername,
            clientId,
            host,
            password,
            secret,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAkeneo.class,
                "apiUsername", apiUsername,
                "clientId", clientId,
                "host", host,
                "password", password,
                "secret", secret,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String apiUsername;
 
        private String clientId;
 
        private String host;
 
        private String password;
 
        private Optional<String> secret = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiUsername(String apiUsername) {
            Utils.checkNotNull(apiUsername, "apiUsername");
            this.apiUsername = apiUsername;
            return this;
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * https://cb8715249e.trial.akeneo.cloud
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = Optional.ofNullable(secret);
            return this;
        }

        public Builder secret(Optional<String> secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }
        
        public SourceAkeneo build() {
            return new SourceAkeneo(
                apiUsername,
                clientId,
                host,
                password,
                secret);
        }

        private static final LazySingletonValue<Akeneo> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"akeneo\"",
                        new TypeReference<Akeneo>() {});
    }
}
