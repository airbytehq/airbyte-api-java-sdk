/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class SourceCircleci {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Job ID for fetching information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    private Optional<? extends String> jobId;

    /**
     * Job Number of the workflow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_number")
    private Optional<? extends String> jobNumber;

    /**
     * The org ID found in `https://app.circleci.com/settings/organization/circleci/xxxxx/overview`
     */
    @JsonProperty("org_id")
    private String orgId;

    /**
     * Project ID found in the project settings
     */
    @JsonProperty("project_id")
    private String projectId;

    @JsonProperty("sourceType")
    private Circleci sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * workflow ID of a project pipeline
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_id")
    private Optional<? extends String> workflowId;

    /**
     * Workflow name for fetching information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_name")
    private Optional<? extends String> workflowName;

    @JsonCreator
    public SourceCircleci(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("job_id") Optional<? extends String> jobId,
            @JsonProperty("job_number") Optional<? extends String> jobNumber,
            @JsonProperty("org_id") String orgId,
            @JsonProperty("project_id") String projectId,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("workflow_id") Optional<? extends String> workflowId,
            @JsonProperty("workflow_name") Optional<? extends String> workflowName) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(jobNumber, "jobNumber");
        Utils.checkNotNull(orgId, "orgId");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(workflowId, "workflowId");
        Utils.checkNotNull(workflowName, "workflowName");
        this.apiKey = apiKey;
        this.jobId = jobId;
        this.jobNumber = jobNumber;
        this.orgId = orgId;
        this.projectId = projectId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.workflowId = workflowId;
        this.workflowName = workflowName;
    }
    
    public SourceCircleci(
            String apiKey,
            String orgId,
            String projectId,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), orgId, projectId, startDate, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Job ID for fetching information
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> jobId() {
        return (Optional<String>) jobId;
    }

    /**
     * Job Number of the workflow
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> jobNumber() {
        return (Optional<String>) jobNumber;
    }

    /**
     * The org ID found in `https://app.circleci.com/settings/organization/circleci/xxxxx/overview`
     */
    @JsonIgnore
    public String orgId() {
        return orgId;
    }

    /**
     * Project ID found in the project settings
     */
    @JsonIgnore
    public String projectId() {
        return projectId;
    }

    @JsonIgnore
    public Circleci sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * workflow ID of a project pipeline
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> workflowId() {
        return (Optional<String>) workflowId;
    }

    /**
     * Workflow name for fetching information
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> workflowName() {
        return (Optional<String>) workflowName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceCircleci withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Job ID for fetching information
     */
    public SourceCircleci withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = Optional.ofNullable(jobId);
        return this;
    }

    /**
     * Job ID for fetching information
     */
    public SourceCircleci withJobId(Optional<? extends String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    /**
     * Job Number of the workflow
     */
    public SourceCircleci withJobNumber(String jobNumber) {
        Utils.checkNotNull(jobNumber, "jobNumber");
        this.jobNumber = Optional.ofNullable(jobNumber);
        return this;
    }

    /**
     * Job Number of the workflow
     */
    public SourceCircleci withJobNumber(Optional<? extends String> jobNumber) {
        Utils.checkNotNull(jobNumber, "jobNumber");
        this.jobNumber = jobNumber;
        return this;
    }

    /**
     * The org ID found in `https://app.circleci.com/settings/organization/circleci/xxxxx/overview`
     */
    public SourceCircleci withOrgId(String orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = orgId;
        return this;
    }

    /**
     * Project ID found in the project settings
     */
    public SourceCircleci withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    public SourceCircleci withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * workflow ID of a project pipeline
     */
    public SourceCircleci withWorkflowId(String workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = Optional.ofNullable(workflowId);
        return this;
    }

    /**
     * workflow ID of a project pipeline
     */
    public SourceCircleci withWorkflowId(Optional<? extends String> workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = workflowId;
        return this;
    }

    /**
     * Workflow name for fetching information
     */
    public SourceCircleci withWorkflowName(String workflowName) {
        Utils.checkNotNull(workflowName, "workflowName");
        this.workflowName = Optional.ofNullable(workflowName);
        return this;
    }

    /**
     * Workflow name for fetching information
     */
    public SourceCircleci withWorkflowName(Optional<? extends String> workflowName) {
        Utils.checkNotNull(workflowName, "workflowName");
        this.workflowName = workflowName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceCircleci other = (SourceCircleci) o;
        return 
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.jobId, other.jobId) &&
            java.util.Objects.deepEquals(this.jobNumber, other.jobNumber) &&
            java.util.Objects.deepEquals(this.orgId, other.orgId) &&
            java.util.Objects.deepEquals(this.projectId, other.projectId) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.workflowId, other.workflowId) &&
            java.util.Objects.deepEquals(this.workflowName, other.workflowName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKey,
            jobId,
            jobNumber,
            orgId,
            projectId,
            sourceType,
            startDate,
            workflowId,
            workflowName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceCircleci.class,
                "apiKey", apiKey,
                "jobId", jobId,
                "jobNumber", jobNumber,
                "orgId", orgId,
                "projectId", projectId,
                "sourceType", sourceType,
                "startDate", startDate,
                "workflowId", workflowId,
                "workflowName", workflowName);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<? extends String> jobId = Optional.empty();
 
        private Optional<? extends String> jobNumber;
 
        private String orgId;
 
        private String projectId;
 
        private OffsetDateTime startDate;
 
        private Optional<? extends String> workflowId = Optional.empty();
 
        private Optional<? extends String> workflowName;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Job ID for fetching information
         */
        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        /**
         * Job ID for fetching information
         */
        public Builder jobId(Optional<? extends String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        /**
         * Job Number of the workflow
         */
        public Builder jobNumber(String jobNumber) {
            Utils.checkNotNull(jobNumber, "jobNumber");
            this.jobNumber = Optional.ofNullable(jobNumber);
            return this;
        }

        /**
         * Job Number of the workflow
         */
        public Builder jobNumber(Optional<? extends String> jobNumber) {
            Utils.checkNotNull(jobNumber, "jobNumber");
            this.jobNumber = jobNumber;
            return this;
        }

        /**
         * The org ID found in `https://app.circleci.com/settings/organization/circleci/xxxxx/overview`
         */
        public Builder orgId(String orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = orgId;
            return this;
        }

        /**
         * Project ID found in the project settings
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * workflow ID of a project pipeline
         */
        public Builder workflowId(String workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * workflow ID of a project pipeline
         */
        public Builder workflowId(Optional<? extends String> workflowId) {
            Utils.checkNotNull(workflowId, "workflowId");
            this.workflowId = workflowId;
            return this;
        }

        /**
         * Workflow name for fetching information
         */
        public Builder workflowName(String workflowName) {
            Utils.checkNotNull(workflowName, "workflowName");
            this.workflowName = Optional.ofNullable(workflowName);
            return this;
        }

        /**
         * Workflow name for fetching information
         */
        public Builder workflowName(Optional<? extends String> workflowName) {
            Utils.checkNotNull(workflowName, "workflowName");
            this.workflowName = workflowName;
            return this;
        }
        
        public SourceCircleci build() {
            if (jobNumber == null) {
                jobNumber = _SINGLETON_VALUE_JobNumber.value();
            }
            if (workflowName == null) {
                workflowName = _SINGLETON_VALUE_WorkflowName.value();
            }
            return new SourceCircleci(
                apiKey,
                jobId,
                jobNumber,
                orgId,
                projectId,
                startDate,
                workflowId,
                workflowName);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_JobNumber =
                new LazySingletonValue<>(
                        "job_number",
                        "\"2\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Circleci> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"circleci\"",
                        new TypeReference<Circleci>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_WorkflowName =
                new LazySingletonValue<>(
                        "workflow_name",
                        "\"build-and-test\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

