/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SourceRetently {

    /**
     * Choose how to authenticate to Retently
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceRetentlyAuthenticationMechanism> credentials;

    @JsonProperty("sourceType")
    private Retently sourceType;

    @JsonCreator
    public SourceRetently(
            @JsonProperty("credentials") Optional<? extends SourceRetentlyAuthenticationMechanism> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceRetently() {
        this(Optional.empty());
    }

    /**
     * Choose how to authenticate to Retently
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceRetentlyAuthenticationMechanism> credentials() {
        return (Optional<SourceRetentlyAuthenticationMechanism>) credentials;
    }

    @JsonIgnore
    public Retently sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Choose how to authenticate to Retently
     */
    public SourceRetently withCredentials(SourceRetentlyAuthenticationMechanism credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * Choose how to authenticate to Retently
     */
    public SourceRetently withCredentials(Optional<? extends SourceRetentlyAuthenticationMechanism> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceRetently other = (SourceRetently) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceRetently.class,
                "credentials", credentials,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceRetentlyAuthenticationMechanism> credentials = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Choose how to authenticate to Retently
         */
        public Builder credentials(SourceRetentlyAuthenticationMechanism credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * Choose how to authenticate to Retently
         */
        public Builder credentials(Optional<? extends SourceRetentlyAuthenticationMechanism> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }
        
        public SourceRetently build() {
            return new SourceRetently(
                credentials);
        }

        private static final LazySingletonValue<Retently> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"retently\"",
                        new TypeReference<Retently>() {});
    }
}

