/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * JdbcCatalogUseRelationalDatabase - Using a table in a relational database to manage Iceberg tables through JDBC. Read more &lt;a href="https://iceberg.apache.org/docs/latest/jdbc/"&gt;here&lt;/a&gt;. Supporting: PostgreSQL
 */

public class JdbcCatalogUseRelationalDatabase {

    /**
     * Iceberg catalog metadata tables are written to catalog schema. The usual value for this field is "public".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_schema")
    private Optional<? extends String> catalogSchema;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_type")
    private Optional<? extends DestinationIcebergSchemasCatalogType> catalogType;

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("database")
    private Optional<? extends String> database;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jdbc_url")
    private Optional<? extends String> jdbcUrl;

    /**
     * Password associated with the username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<? extends String> password;

    /**
     * Encrypt data using SSL. When activating SSL, please select one of the connection modes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssl")
    private Optional<? extends Boolean> ssl;

    /**
     * Username to use to access the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<? extends String> username;

    @JsonCreator
    public JdbcCatalogUseRelationalDatabase(
            @JsonProperty("catalog_schema") Optional<? extends String> catalogSchema,
            @JsonProperty("catalog_type") Optional<? extends DestinationIcebergSchemasCatalogType> catalogType,
            @JsonProperty("database") Optional<? extends String> database,
            @JsonProperty("jdbc_url") Optional<? extends String> jdbcUrl,
            @JsonProperty("password") Optional<? extends String> password,
            @JsonProperty("ssl") Optional<? extends Boolean> ssl,
            @JsonProperty("username") Optional<? extends String> username) {
        Utils.checkNotNull(catalogSchema, "catalogSchema");
        Utils.checkNotNull(catalogType, "catalogType");
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(jdbcUrl, "jdbcUrl");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(ssl, "ssl");
        Utils.checkNotNull(username, "username");
        this.catalogSchema = catalogSchema;
        this.catalogType = catalogType;
        this.database = database;
        this.jdbcUrl = jdbcUrl;
        this.password = password;
        this.ssl = ssl;
        this.username = username;
    }
    
    public JdbcCatalogUseRelationalDatabase() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Iceberg catalog metadata tables are written to catalog schema. The usual value for this field is "public".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> catalogSchema() {
        return (Optional<String>) catalogSchema;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationIcebergSchemasCatalogType> catalogType() {
        return (Optional<DestinationIcebergSchemasCatalogType>) catalogType;
    }

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> database() {
        return (Optional<String>) database;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> jdbcUrl() {
        return (Optional<String>) jdbcUrl;
    }

    /**
     * Password associated with the username.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> password() {
        return (Optional<String>) password;
    }

    /**
     * Encrypt data using SSL. When activating SSL, please select one of the connection modes.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> ssl() {
        return (Optional<Boolean>) ssl;
    }

    /**
     * Username to use to access the database.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> username() {
        return (Optional<String>) username;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Iceberg catalog metadata tables are written to catalog schema. The usual value for this field is "public".
     */
    public JdbcCatalogUseRelationalDatabase withCatalogSchema(String catalogSchema) {
        Utils.checkNotNull(catalogSchema, "catalogSchema");
        this.catalogSchema = Optional.ofNullable(catalogSchema);
        return this;
    }

    /**
     * Iceberg catalog metadata tables are written to catalog schema. The usual value for this field is "public".
     */
    public JdbcCatalogUseRelationalDatabase withCatalogSchema(Optional<? extends String> catalogSchema) {
        Utils.checkNotNull(catalogSchema, "catalogSchema");
        this.catalogSchema = catalogSchema;
        return this;
    }

    public JdbcCatalogUseRelationalDatabase withCatalogType(DestinationIcebergSchemasCatalogType catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = Optional.ofNullable(catalogType);
        return this;
    }

    public JdbcCatalogUseRelationalDatabase withCatalogType(Optional<? extends DestinationIcebergSchemasCatalogType> catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = catalogType;
        return this;
    }

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    public JdbcCatalogUseRelationalDatabase withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = Optional.ofNullable(database);
        return this;
    }

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    public JdbcCatalogUseRelationalDatabase withDatabase(Optional<? extends String> database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    public JdbcCatalogUseRelationalDatabase withJdbcUrl(String jdbcUrl) {
        Utils.checkNotNull(jdbcUrl, "jdbcUrl");
        this.jdbcUrl = Optional.ofNullable(jdbcUrl);
        return this;
    }

    public JdbcCatalogUseRelationalDatabase withJdbcUrl(Optional<? extends String> jdbcUrl) {
        Utils.checkNotNull(jdbcUrl, "jdbcUrl");
        this.jdbcUrl = jdbcUrl;
        return this;
    }

    /**
     * Password associated with the username.
     */
    public JdbcCatalogUseRelationalDatabase withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    /**
     * Password associated with the username.
     */
    public JdbcCatalogUseRelationalDatabase withPassword(Optional<? extends String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Encrypt data using SSL. When activating SSL, please select one of the connection modes.
     */
    public JdbcCatalogUseRelationalDatabase withSsl(boolean ssl) {
        Utils.checkNotNull(ssl, "ssl");
        this.ssl = Optional.ofNullable(ssl);
        return this;
    }

    /**
     * Encrypt data using SSL. When activating SSL, please select one of the connection modes.
     */
    public JdbcCatalogUseRelationalDatabase withSsl(Optional<? extends Boolean> ssl) {
        Utils.checkNotNull(ssl, "ssl");
        this.ssl = ssl;
        return this;
    }

    /**
     * Username to use to access the database.
     */
    public JdbcCatalogUseRelationalDatabase withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    /**
     * Username to use to access the database.
     */
    public JdbcCatalogUseRelationalDatabase withUsername(Optional<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JdbcCatalogUseRelationalDatabase other = (JdbcCatalogUseRelationalDatabase) o;
        return 
            java.util.Objects.deepEquals(this.catalogSchema, other.catalogSchema) &&
            java.util.Objects.deepEquals(this.catalogType, other.catalogType) &&
            java.util.Objects.deepEquals(this.database, other.database) &&
            java.util.Objects.deepEquals(this.jdbcUrl, other.jdbcUrl) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.ssl, other.ssl) &&
            java.util.Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            catalogSchema,
            catalogType,
            database,
            jdbcUrl,
            password,
            ssl,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JdbcCatalogUseRelationalDatabase.class,
                "catalogSchema", catalogSchema,
                "catalogType", catalogType,
                "database", database,
                "jdbcUrl", jdbcUrl,
                "password", password,
                "ssl", ssl,
                "username", username);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> catalogSchema;
 
        private Optional<? extends DestinationIcebergSchemasCatalogType> catalogType;
 
        private Optional<? extends String> database;
 
        private Optional<? extends String> jdbcUrl = Optional.empty();
 
        private Optional<? extends String> password = Optional.empty();
 
        private Optional<? extends Boolean> ssl;
 
        private Optional<? extends String> username = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Iceberg catalog metadata tables are written to catalog schema. The usual value for this field is "public".
         */
        public Builder catalogSchema(String catalogSchema) {
            Utils.checkNotNull(catalogSchema, "catalogSchema");
            this.catalogSchema = Optional.ofNullable(catalogSchema);
            return this;
        }

        /**
         * Iceberg catalog metadata tables are written to catalog schema. The usual value for this field is "public".
         */
        public Builder catalogSchema(Optional<? extends String> catalogSchema) {
            Utils.checkNotNull(catalogSchema, "catalogSchema");
            this.catalogSchema = catalogSchema;
            return this;
        }

        public Builder catalogType(DestinationIcebergSchemasCatalogType catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = Optional.ofNullable(catalogType);
            return this;
        }

        public Builder catalogType(Optional<? extends DestinationIcebergSchemasCatalogType> catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = catalogType;
            return this;
        }

        /**
         * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = Optional.ofNullable(database);
            return this;
        }

        /**
         * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
         */
        public Builder database(Optional<? extends String> database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        public Builder jdbcUrl(String jdbcUrl) {
            Utils.checkNotNull(jdbcUrl, "jdbcUrl");
            this.jdbcUrl = Optional.ofNullable(jdbcUrl);
            return this;
        }

        public Builder jdbcUrl(Optional<? extends String> jdbcUrl) {
            Utils.checkNotNull(jdbcUrl, "jdbcUrl");
            this.jdbcUrl = jdbcUrl;
            return this;
        }

        /**
         * Password associated with the username.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        /**
         * Password associated with the username.
         */
        public Builder password(Optional<? extends String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Encrypt data using SSL. When activating SSL, please select one of the connection modes.
         */
        public Builder ssl(boolean ssl) {
            Utils.checkNotNull(ssl, "ssl");
            this.ssl = Optional.ofNullable(ssl);
            return this;
        }

        /**
         * Encrypt data using SSL. When activating SSL, please select one of the connection modes.
         */
        public Builder ssl(Optional<? extends Boolean> ssl) {
            Utils.checkNotNull(ssl, "ssl");
            this.ssl = ssl;
            return this;
        }

        /**
         * Username to use to access the database.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * Username to use to access the database.
         */
        public Builder username(Optional<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public JdbcCatalogUseRelationalDatabase build() {
            if (catalogSchema == null) {
                catalogSchema = _SINGLETON_VALUE_CatalogSchema.value();
            }
            if (catalogType == null) {
                catalogType = _SINGLETON_VALUE_CatalogType.value();
            }
            if (database == null) {
                database = _SINGLETON_VALUE_Database.value();
            }
            if (ssl == null) {
                ssl = _SINGLETON_VALUE_Ssl.value();
            }
            return new JdbcCatalogUseRelationalDatabase(
                catalogSchema,
                catalogType,
                database,
                jdbcUrl,
                password,
                ssl,
                username);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_CatalogSchema =
                new LazySingletonValue<>(
                        "catalog_schema",
                        "\"public\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends DestinationIcebergSchemasCatalogType>> _SINGLETON_VALUE_CatalogType =
                new LazySingletonValue<>(
                        "catalog_type",
                        "\"Jdbc\"",
                        new TypeReference<Optional<? extends DestinationIcebergSchemasCatalogType>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_Database =
                new LazySingletonValue<>(
                        "database",
                        "\"public\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Ssl =
                new LazySingletonValue<>(
                        "ssl",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

