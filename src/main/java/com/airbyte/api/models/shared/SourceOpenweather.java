/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceOpenweather {

    /**
     * API KEY
     */
    @JsonProperty("appid")
    private String appid;

    /**
     * You can use lang parameter to get the output in your language. The contents of the description field will be translated. See &lt;a href="https://openweathermap.org/api/one-call-api#multi"&gt;here&lt;/a&gt; for the list of supported languages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lang")
    private Optional<? extends Lang> lang;

    /**
     * Latitude, decimal (-90; 90). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    @JsonProperty("lat")
    private String lat;

    /**
     * Longitude, decimal (-180; 180). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    @JsonProperty("lon")
    private String lon;

    /**
     * True for particular day
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("only_current")
    private Optional<? extends Boolean> onlyCurrent;

    @JsonProperty("sourceType")
    private Openweather sourceType;

    /**
     * Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("units")
    private Optional<? extends Units> units;

    @JsonCreator
    public SourceOpenweather(
            @JsonProperty("appid") String appid,
            @JsonProperty("lang") Optional<? extends Lang> lang,
            @JsonProperty("lat") String lat,
            @JsonProperty("lon") String lon,
            @JsonProperty("only_current") Optional<? extends Boolean> onlyCurrent,
            @JsonProperty("units") Optional<? extends Units> units) {
        Utils.checkNotNull(appid, "appid");
        Utils.checkNotNull(lang, "lang");
        Utils.checkNotNull(lat, "lat");
        Utils.checkNotNull(lon, "lon");
        Utils.checkNotNull(onlyCurrent, "onlyCurrent");
        Utils.checkNotNull(units, "units");
        this.appid = appid;
        this.lang = lang;
        this.lat = lat;
        this.lon = lon;
        this.onlyCurrent = onlyCurrent;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.units = units;
    }
    
    public SourceOpenweather(
            String appid,
            String lat,
            String lon) {
        this(appid, Optional.empty(), lat, lon, Optional.empty(), Optional.empty());
    }

    /**
     * API KEY
     */
    @JsonIgnore
    public String appid() {
        return appid;
    }

    /**
     * You can use lang parameter to get the output in your language. The contents of the description field will be translated. See &lt;a href="https://openweathermap.org/api/one-call-api#multi"&gt;here&lt;/a&gt; for the list of supported languages.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Lang> lang() {
        return (Optional<Lang>) lang;
    }

    /**
     * Latitude, decimal (-90; 90). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    @JsonIgnore
    public String lat() {
        return lat;
    }

    /**
     * Longitude, decimal (-180; 180). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    @JsonIgnore
    public String lon() {
        return lon;
    }

    /**
     * True for particular day
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> onlyCurrent() {
        return (Optional<Boolean>) onlyCurrent;
    }

    @JsonIgnore
    public Openweather sourceType() {
        return sourceType;
    }

    /**
     * Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Units> units() {
        return (Optional<Units>) units;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API KEY
     */
    public SourceOpenweather withAppid(String appid) {
        Utils.checkNotNull(appid, "appid");
        this.appid = appid;
        return this;
    }

    /**
     * You can use lang parameter to get the output in your language. The contents of the description field will be translated. See &lt;a href="https://openweathermap.org/api/one-call-api#multi"&gt;here&lt;/a&gt; for the list of supported languages.
     */
    public SourceOpenweather withLang(Lang lang) {
        Utils.checkNotNull(lang, "lang");
        this.lang = Optional.ofNullable(lang);
        return this;
    }

    /**
     * You can use lang parameter to get the output in your language. The contents of the description field will be translated. See &lt;a href="https://openweathermap.org/api/one-call-api#multi"&gt;here&lt;/a&gt; for the list of supported languages.
     */
    public SourceOpenweather withLang(Optional<? extends Lang> lang) {
        Utils.checkNotNull(lang, "lang");
        this.lang = lang;
        return this;
    }

    /**
     * Latitude, decimal (-90; 90). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    public SourceOpenweather withLat(String lat) {
        Utils.checkNotNull(lat, "lat");
        this.lat = lat;
        return this;
    }

    /**
     * Longitude, decimal (-180; 180). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    public SourceOpenweather withLon(String lon) {
        Utils.checkNotNull(lon, "lon");
        this.lon = lon;
        return this;
    }

    /**
     * True for particular day
     */
    public SourceOpenweather withOnlyCurrent(boolean onlyCurrent) {
        Utils.checkNotNull(onlyCurrent, "onlyCurrent");
        this.onlyCurrent = Optional.ofNullable(onlyCurrent);
        return this;
    }

    /**
     * True for particular day
     */
    public SourceOpenweather withOnlyCurrent(Optional<? extends Boolean> onlyCurrent) {
        Utils.checkNotNull(onlyCurrent, "onlyCurrent");
        this.onlyCurrent = onlyCurrent;
        return this;
    }

    /**
     * Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
     */
    public SourceOpenweather withUnits(Units units) {
        Utils.checkNotNull(units, "units");
        this.units = Optional.ofNullable(units);
        return this;
    }

    /**
     * Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
     */
    public SourceOpenweather withUnits(Optional<? extends Units> units) {
        Utils.checkNotNull(units, "units");
        this.units = units;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOpenweather other = (SourceOpenweather) o;
        return 
            java.util.Objects.deepEquals(this.appid, other.appid) &&
            java.util.Objects.deepEquals(this.lang, other.lang) &&
            java.util.Objects.deepEquals(this.lat, other.lat) &&
            java.util.Objects.deepEquals(this.lon, other.lon) &&
            java.util.Objects.deepEquals(this.onlyCurrent, other.onlyCurrent) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.units, other.units);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            appid,
            lang,
            lat,
            lon,
            onlyCurrent,
            sourceType,
            units);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOpenweather.class,
                "appid", appid,
                "lang", lang,
                "lat", lat,
                "lon", lon,
                "onlyCurrent", onlyCurrent,
                "sourceType", sourceType,
                "units", units);
    }
    
    public final static class Builder {
 
        private String appid;
 
        private Optional<? extends Lang> lang = Optional.empty();
 
        private String lat;
 
        private String lon;
 
        private Optional<? extends Boolean> onlyCurrent = Optional.empty();
 
        private Optional<? extends Units> units = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API KEY
         */
        public Builder appid(String appid) {
            Utils.checkNotNull(appid, "appid");
            this.appid = appid;
            return this;
        }

        /**
         * You can use lang parameter to get the output in your language. The contents of the description field will be translated. See &lt;a href="https://openweathermap.org/api/one-call-api#multi"&gt;here&lt;/a&gt; for the list of supported languages.
         */
        public Builder lang(Lang lang) {
            Utils.checkNotNull(lang, "lang");
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        /**
         * You can use lang parameter to get the output in your language. The contents of the description field will be translated. See &lt;a href="https://openweathermap.org/api/one-call-api#multi"&gt;here&lt;/a&gt; for the list of supported languages.
         */
        public Builder lang(Optional<? extends Lang> lang) {
            Utils.checkNotNull(lang, "lang");
            this.lang = lang;
            return this;
        }

        /**
         * Latitude, decimal (-90; 90). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
         */
        public Builder lat(String lat) {
            Utils.checkNotNull(lat, "lat");
            this.lat = lat;
            return this;
        }

        /**
         * Longitude, decimal (-180; 180). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
         */
        public Builder lon(String lon) {
            Utils.checkNotNull(lon, "lon");
            this.lon = lon;
            return this;
        }

        /**
         * True for particular day
         */
        public Builder onlyCurrent(boolean onlyCurrent) {
            Utils.checkNotNull(onlyCurrent, "onlyCurrent");
            this.onlyCurrent = Optional.ofNullable(onlyCurrent);
            return this;
        }

        /**
         * True for particular day
         */
        public Builder onlyCurrent(Optional<? extends Boolean> onlyCurrent) {
            Utils.checkNotNull(onlyCurrent, "onlyCurrent");
            this.onlyCurrent = onlyCurrent;
            return this;
        }

        /**
         * Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
         */
        public Builder units(Units units) {
            Utils.checkNotNull(units, "units");
            this.units = Optional.ofNullable(units);
            return this;
        }

        /**
         * Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
         */
        public Builder units(Optional<? extends Units> units) {
            Utils.checkNotNull(units, "units");
            this.units = units;
            return this;
        }
        
        public SourceOpenweather build() {
            return new SourceOpenweather(
                appid,
                lang,
                lat,
                lon,
                onlyCurrent,
                units);
        }

        private static final LazySingletonValue<Openweather> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"openweather\"",
                        new TypeReference<Openweather>() {});
    }
}

