/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class WorkspaceCreateRequest {

    /**
     * Name of the workspace
     */
    @JsonProperty("name")
    private String name;

    /**
     * Configures workspace notifications.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifications")
    private Optional<? extends NotificationsConfig> notifications;

    /**
     * ID of organization to add workspace to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationId")
    private Optional<String> organizationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regionId")
    private Optional<String> regionId;

    @JsonCreator
    public WorkspaceCreateRequest(
            @JsonProperty("name") String name,
            @JsonProperty("notifications") Optional<? extends NotificationsConfig> notifications,
            @JsonProperty("organizationId") Optional<String> organizationId,
            @JsonProperty("regionId") Optional<String> regionId) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(notifications, "notifications");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(regionId, "regionId");
        this.name = name;
        this.notifications = notifications;
        this.organizationId = organizationId;
        this.regionId = regionId;
    }
    
    public WorkspaceCreateRequest(
            String name) {
        this(name, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Name of the workspace
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Configures workspace notifications.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NotificationsConfig> notifications() {
        return (Optional<NotificationsConfig>) notifications;
    }

    /**
     * ID of organization to add workspace to.
     */
    @JsonIgnore
    public Optional<String> organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public Optional<String> regionId() {
        return regionId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Name of the workspace
     */
    public WorkspaceCreateRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Configures workspace notifications.
     */
    public WorkspaceCreateRequest withNotifications(NotificationsConfig notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = Optional.ofNullable(notifications);
        return this;
    }

    /**
     * Configures workspace notifications.
     */
    public WorkspaceCreateRequest withNotifications(Optional<? extends NotificationsConfig> notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = notifications;
        return this;
    }

    /**
     * ID of organization to add workspace to.
     */
    public WorkspaceCreateRequest withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }

    /**
     * ID of organization to add workspace to.
     */
    public WorkspaceCreateRequest withOrganizationId(Optional<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public WorkspaceCreateRequest withRegionId(String regionId) {
        Utils.checkNotNull(regionId, "regionId");
        this.regionId = Optional.ofNullable(regionId);
        return this;
    }

    public WorkspaceCreateRequest withRegionId(Optional<String> regionId) {
        Utils.checkNotNull(regionId, "regionId");
        this.regionId = regionId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceCreateRequest other = (WorkspaceCreateRequest) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.notifications, other.notifications) &&
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.regionId, other.regionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            notifications,
            organizationId,
            regionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceCreateRequest.class,
                "name", name,
                "notifications", notifications,
                "organizationId", organizationId,
                "regionId", regionId);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<? extends NotificationsConfig> notifications = Optional.empty();
 
        private Optional<String> organizationId = Optional.empty();
 
        private Optional<String> regionId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the workspace
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Configures workspace notifications.
         */
        public Builder notifications(NotificationsConfig notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = Optional.ofNullable(notifications);
            return this;
        }

        /**
         * Configures workspace notifications.
         */
        public Builder notifications(Optional<? extends NotificationsConfig> notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = notifications;
            return this;
        }

        /**
         * ID of organization to add workspace to.
         */
        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * ID of organization to add workspace to.
         */
        public Builder organizationId(Optional<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder regionId(String regionId) {
            Utils.checkNotNull(regionId, "regionId");
            this.regionId = Optional.ofNullable(regionId);
            return this;
        }

        public Builder regionId(Optional<String> regionId) {
            Utils.checkNotNull(regionId, "regionId");
            this.regionId = regionId;
            return this;
        }
        
        public WorkspaceCreateRequest build() {
            return new WorkspaceCreateRequest(
                name,
                notifications,
                organizationId,
                regionId);
        }
    }
}
