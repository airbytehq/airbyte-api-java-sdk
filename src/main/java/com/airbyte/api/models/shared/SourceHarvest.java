/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class SourceHarvest {

    /**
     * Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
     */
    @JsonProperty("account_id")
    private String accountId;

    /**
     * Choose how to authenticate to Harvest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends java.lang.Object> credentials;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replication_end_date")
    private Optional<? extends OffsetDateTime> replicationEndDate;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonProperty("replication_start_date")
    private OffsetDateTime replicationStartDate;

    @JsonProperty("sourceType")
    private SourceHarvestHarvest sourceType;

    public SourceHarvest(
            @JsonProperty("account_id") String accountId,
            @JsonProperty("credentials") Optional<? extends java.lang.Object> credentials,
            @JsonProperty("replication_end_date") Optional<? extends OffsetDateTime> replicationEndDate,
            @JsonProperty("replication_start_date") OffsetDateTime replicationStartDate) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(replicationEndDate, "replicationEndDate");
        Utils.checkNotNull(replicationStartDate, "replicationStartDate");
        this.accountId = accountId;
        this.credentials = credentials;
        this.replicationEndDate = replicationEndDate;
        this.replicationStartDate = replicationStartDate;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
     */
    public String accountId() {
        return accountId;
    }

    /**
     * Choose how to authenticate to Harvest.
     */
    public Optional<? extends java.lang.Object> credentials() {
        return credentials;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
     */
    public Optional<? extends OffsetDateTime> replicationEndDate() {
        return replicationEndDate;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public OffsetDateTime replicationStartDate() {
        return replicationStartDate;
    }

    public SourceHarvestHarvest sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
     */
    public SourceHarvest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * Choose how to authenticate to Harvest.
     */
    public SourceHarvest withCredentials(java.lang.Object credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * Choose how to authenticate to Harvest.
     */
    public SourceHarvest withCredentials(Optional<? extends java.lang.Object> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
     */
    public SourceHarvest withReplicationEndDate(OffsetDateTime replicationEndDate) {
        Utils.checkNotNull(replicationEndDate, "replicationEndDate");
        this.replicationEndDate = Optional.ofNullable(replicationEndDate);
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
     */
    public SourceHarvest withReplicationEndDate(Optional<? extends OffsetDateTime> replicationEndDate) {
        Utils.checkNotNull(replicationEndDate, "replicationEndDate");
        this.replicationEndDate = replicationEndDate;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourceHarvest withReplicationStartDate(OffsetDateTime replicationStartDate) {
        Utils.checkNotNull(replicationStartDate, "replicationStartDate");
        this.replicationStartDate = replicationStartDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceHarvest other = (SourceHarvest) o;
        return 
            java.util.Objects.deepEquals(this.accountId, other.accountId) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.replicationEndDate, other.replicationEndDate) &&
            java.util.Objects.deepEquals(this.replicationStartDate, other.replicationStartDate) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountId,
            credentials,
            replicationEndDate,
            replicationStartDate,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceHarvest.class,
                "accountId", accountId,
                "credentials", credentials,
                "replicationEndDate", replicationEndDate,
                "replicationStartDate", replicationStartDate,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String accountId;
 
        private Optional<? extends java.lang.Object> credentials = Optional.empty();
 
        private Optional<? extends OffsetDateTime> replicationEndDate = Optional.empty();
 
        private OffsetDateTime replicationStartDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * Choose how to authenticate to Harvest.
         */
        public Builder credentials(java.lang.Object credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * Choose how to authenticate to Harvest.
         */
        public Builder credentials(Optional<? extends java.lang.Object> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
         */
        public Builder replicationEndDate(OffsetDateTime replicationEndDate) {
            Utils.checkNotNull(replicationEndDate, "replicationEndDate");
            this.replicationEndDate = Optional.ofNullable(replicationEndDate);
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
         */
        public Builder replicationEndDate(Optional<? extends OffsetDateTime> replicationEndDate) {
            Utils.checkNotNull(replicationEndDate, "replicationEndDate");
            this.replicationEndDate = replicationEndDate;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder replicationStartDate(OffsetDateTime replicationStartDate) {
            Utils.checkNotNull(replicationStartDate, "replicationStartDate");
            this.replicationStartDate = replicationStartDate;
            return this;
        }
        
        public SourceHarvest build() {
            return new SourceHarvest(
                accountId,
                credentials,
                replicationEndDate,
                replicationStartDate);
        }

        private static final LazySingletonValue<SourceHarvestHarvest> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"harvest\"",
                        new TypeReference<SourceHarvestHarvest>() {});
    }
}

