/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceEbayFinance {

    /**
     * https://apiz.sandbox.ebay.com for sandbox &amp; https://apiz.ebay.com for production
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_host")
    private Optional<? extends APIHost> apiHost;

    /**
     * Ebay Client Secret
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<String> password;

    @JsonProperty("redirect_uri")
    private String redirectUri;

    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private EbayFinance sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_refresh_endpoint")
    private Optional<? extends RefreshTokenEndpoint> tokenRefreshEndpoint;

    /**
     * Ebay Developer Client ID
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourceEbayFinance(
            @JsonProperty("api_host") Optional<? extends APIHost> apiHost,
            @JsonProperty("password") Optional<String> password,
            @JsonProperty("redirect_uri") String redirectUri,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("token_refresh_endpoint") Optional<? extends RefreshTokenEndpoint> tokenRefreshEndpoint,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(apiHost, "apiHost");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(redirectUri, "redirectUri");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
        Utils.checkNotNull(username, "username");
        this.apiHost = apiHost;
        this.password = password;
        this.redirectUri = redirectUri;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.tokenRefreshEndpoint = tokenRefreshEndpoint;
        this.username = username;
    }
    
    public SourceEbayFinance(
            String redirectUri,
            String refreshToken,
            OffsetDateTime startDate,
            String username) {
        this(Optional.empty(), Optional.empty(), redirectUri, refreshToken, startDate, Optional.empty(), username);
    }

    /**
     * https://apiz.sandbox.ebay.com for sandbox &amp; https://apiz.ebay.com for production
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<APIHost> apiHost() {
        return (Optional<APIHost>) apiHost;
    }

    /**
     * Ebay Client Secret
     */
    @JsonIgnore
    public Optional<String> password() {
        return password;
    }

    @JsonIgnore
    public String redirectUri() {
        return redirectUri;
    }

    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    @JsonIgnore
    public EbayFinance sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RefreshTokenEndpoint> tokenRefreshEndpoint() {
        return (Optional<RefreshTokenEndpoint>) tokenRefreshEndpoint;
    }

    /**
     * Ebay Developer Client ID
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * https://apiz.sandbox.ebay.com for sandbox &amp; https://apiz.ebay.com for production
     */
    public SourceEbayFinance withApiHost(APIHost apiHost) {
        Utils.checkNotNull(apiHost, "apiHost");
        this.apiHost = Optional.ofNullable(apiHost);
        return this;
    }

    /**
     * https://apiz.sandbox.ebay.com for sandbox &amp; https://apiz.ebay.com for production
     */
    public SourceEbayFinance withApiHost(Optional<? extends APIHost> apiHost) {
        Utils.checkNotNull(apiHost, "apiHost");
        this.apiHost = apiHost;
        return this;
    }

    /**
     * Ebay Client Secret
     */
    public SourceEbayFinance withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    /**
     * Ebay Client Secret
     */
    public SourceEbayFinance withPassword(Optional<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public SourceEbayFinance withRedirectUri(String redirectUri) {
        Utils.checkNotNull(redirectUri, "redirectUri");
        this.redirectUri = redirectUri;
        return this;
    }

    public SourceEbayFinance withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    public SourceEbayFinance withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    public SourceEbayFinance withTokenRefreshEndpoint(RefreshTokenEndpoint tokenRefreshEndpoint) {
        Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
        this.tokenRefreshEndpoint = Optional.ofNullable(tokenRefreshEndpoint);
        return this;
    }

    public SourceEbayFinance withTokenRefreshEndpoint(Optional<? extends RefreshTokenEndpoint> tokenRefreshEndpoint) {
        Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
        this.tokenRefreshEndpoint = tokenRefreshEndpoint;
        return this;
    }

    /**
     * Ebay Developer Client ID
     */
    public SourceEbayFinance withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceEbayFinance other = (SourceEbayFinance) o;
        return 
            Objects.deepEquals(this.apiHost, other.apiHost) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.redirectUri, other.redirectUri) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.tokenRefreshEndpoint, other.tokenRefreshEndpoint) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiHost,
            password,
            redirectUri,
            refreshToken,
            sourceType,
            startDate,
            tokenRefreshEndpoint,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceEbayFinance.class,
                "apiHost", apiHost,
                "password", password,
                "redirectUri", redirectUri,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "startDate", startDate,
                "tokenRefreshEndpoint", tokenRefreshEndpoint,
                "username", username);
    }
    
    public final static class Builder {
 
        private Optional<? extends APIHost> apiHost;
 
        private Optional<String> password = Optional.empty();
 
        private String redirectUri;
 
        private String refreshToken;
 
        private OffsetDateTime startDate;
 
        private Optional<? extends RefreshTokenEndpoint> tokenRefreshEndpoint;
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * https://apiz.sandbox.ebay.com for sandbox &amp; https://apiz.ebay.com for production
         */
        public Builder apiHost(APIHost apiHost) {
            Utils.checkNotNull(apiHost, "apiHost");
            this.apiHost = Optional.ofNullable(apiHost);
            return this;
        }

        /**
         * https://apiz.sandbox.ebay.com for sandbox &amp; https://apiz.ebay.com for production
         */
        public Builder apiHost(Optional<? extends APIHost> apiHost) {
            Utils.checkNotNull(apiHost, "apiHost");
            this.apiHost = apiHost;
            return this;
        }

        /**
         * Ebay Client Secret
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        /**
         * Ebay Client Secret
         */
        public Builder password(Optional<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder redirectUri(String redirectUri) {
            Utils.checkNotNull(redirectUri, "redirectUri");
            this.redirectUri = redirectUri;
            return this;
        }

        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        public Builder tokenRefreshEndpoint(RefreshTokenEndpoint tokenRefreshEndpoint) {
            Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
            this.tokenRefreshEndpoint = Optional.ofNullable(tokenRefreshEndpoint);
            return this;
        }

        public Builder tokenRefreshEndpoint(Optional<? extends RefreshTokenEndpoint> tokenRefreshEndpoint) {
            Utils.checkNotNull(tokenRefreshEndpoint, "tokenRefreshEndpoint");
            this.tokenRefreshEndpoint = tokenRefreshEndpoint;
            return this;
        }

        /**
         * Ebay Developer Client ID
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourceEbayFinance build() {
            if (apiHost == null) {
                apiHost = _SINGLETON_VALUE_ApiHost.value();
            }
            if (tokenRefreshEndpoint == null) {
                tokenRefreshEndpoint = _SINGLETON_VALUE_TokenRefreshEndpoint.value();
            }
            return new SourceEbayFinance(
                apiHost,
                password,
                redirectUri,
                refreshToken,
                startDate,
                tokenRefreshEndpoint,
                username);
        }

        private static final LazySingletonValue<Optional<? extends APIHost>> _SINGLETON_VALUE_ApiHost =
                new LazySingletonValue<>(
                        "api_host",
                        "\"https://apiz.ebay.com\"",
                        new TypeReference<Optional<? extends APIHost>>() {});

        private static final LazySingletonValue<EbayFinance> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"ebay-finance\"",
                        new TypeReference<EbayFinance>() {});

        private static final LazySingletonValue<Optional<? extends RefreshTokenEndpoint>> _SINGLETON_VALUE_TokenRefreshEndpoint =
                new LazySingletonValue<>(
                        "token_refresh_endpoint",
                        "\"https://api.ebay.com/identity/v1/oauth2/token\"",
                        new TypeReference<Optional<? extends RefreshTokenEndpoint>>() {});
    }
}
