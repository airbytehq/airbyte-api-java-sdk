/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceMixpanel {

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribution_window")
    private Optional<Long> attributionWindow;

    /**
     * Choose how to authenticate to Mixpanel
     */
    @JsonProperty("credentials")
    private AuthenticationWildcard credentials;

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_window_size")
    private Optional<Long> dateWindowSize;

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<OffsetDateTime> endDate;

    /**
     * The number of seconds to look back from the last synced timestamp during incremental syncs of the Export stream. This ensures no data is missed due to delays in event recording. Default is 0 seconds. Must be a non-negative integer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("export_lookback_window")
    private Optional<Long> exportLookbackWindow;

    /**
     * The number of records to fetch per request for the engage stream. Default is 1000. If you are experiencing long sync times with this stream, try increasing this value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    private Optional<Long> pageSize;

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_timezone")
    private Optional<String> projectTimezone;

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<? extends SourceMixpanelRegion> region;

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("select_properties_by_default")
    private Optional<Boolean> selectPropertiesByDefault;

    @JsonProperty("sourceType")
    private Mixpanel sourceType;

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    @JsonCreator
    public SourceMixpanel(
            @JsonProperty("attribution_window") Optional<Long> attributionWindow,
            @JsonProperty("credentials") AuthenticationWildcard credentials,
            @JsonProperty("date_window_size") Optional<Long> dateWindowSize,
            @JsonProperty("end_date") Optional<OffsetDateTime> endDate,
            @JsonProperty("export_lookback_window") Optional<Long> exportLookbackWindow,
            @JsonProperty("page_size") Optional<Long> pageSize,
            @JsonProperty("project_timezone") Optional<String> projectTimezone,
            @JsonProperty("region") Optional<? extends SourceMixpanelRegion> region,
            @JsonProperty("select_properties_by_default") Optional<Boolean> selectPropertiesByDefault,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(attributionWindow, "attributionWindow");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(dateWindowSize, "dateWindowSize");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(exportLookbackWindow, "exportLookbackWindow");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(projectTimezone, "projectTimezone");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
        Utils.checkNotNull(startDate, "startDate");
        this.attributionWindow = attributionWindow;
        this.credentials = credentials;
        this.dateWindowSize = dateWindowSize;
        this.endDate = endDate;
        this.exportLookbackWindow = exportLookbackWindow;
        this.pageSize = pageSize;
        this.projectTimezone = projectTimezone;
        this.region = region;
        this.selectPropertiesByDefault = selectPropertiesByDefault;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceMixpanel(
            AuthenticationWildcard credentials) {
        this(Optional.empty(), credentials, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    @JsonIgnore
    public Optional<Long> attributionWindow() {
        return attributionWindow;
    }

    /**
     * Choose how to authenticate to Mixpanel
     */
    @JsonIgnore
    public AuthenticationWildcard credentials() {
        return credentials;
    }

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    @JsonIgnore
    public Optional<Long> dateWindowSize() {
        return dateWindowSize;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    @JsonIgnore
    public Optional<OffsetDateTime> endDate() {
        return endDate;
    }

    /**
     * The number of seconds to look back from the last synced timestamp during incremental syncs of the Export stream. This ensures no data is missed due to delays in event recording. Default is 0 seconds. Must be a non-negative integer.
     */
    @JsonIgnore
    public Optional<Long> exportLookbackWindow() {
        return exportLookbackWindow;
    }

    /**
     * The number of records to fetch per request for the engage stream. Default is 1000. If you are experiencing long sync times with this stream, try increasing this value.
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<String> projectTimezone() {
        return projectTimezone;
    }

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceMixpanelRegion> region() {
        return (Optional<SourceMixpanelRegion>) region;
    }

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    @JsonIgnore
    public Optional<Boolean> selectPropertiesByDefault() {
        return selectPropertiesByDefault;
    }

    @JsonIgnore
    public Mixpanel sourceType() {
        return sourceType;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    public SourceMixpanel withAttributionWindow(long attributionWindow) {
        Utils.checkNotNull(attributionWindow, "attributionWindow");
        this.attributionWindow = Optional.ofNullable(attributionWindow);
        return this;
    }

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    public SourceMixpanel withAttributionWindow(Optional<Long> attributionWindow) {
        Utils.checkNotNull(attributionWindow, "attributionWindow");
        this.attributionWindow = attributionWindow;
        return this;
    }

    /**
     * Choose how to authenticate to Mixpanel
     */
    public SourceMixpanel withCredentials(AuthenticationWildcard credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    public SourceMixpanel withDateWindowSize(long dateWindowSize) {
        Utils.checkNotNull(dateWindowSize, "dateWindowSize");
        this.dateWindowSize = Optional.ofNullable(dateWindowSize);
        return this;
    }

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    public SourceMixpanel withDateWindowSize(Optional<Long> dateWindowSize) {
        Utils.checkNotNull(dateWindowSize, "dateWindowSize");
        this.dateWindowSize = dateWindowSize;
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    public SourceMixpanel withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    public SourceMixpanel withEndDate(Optional<OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The number of seconds to look back from the last synced timestamp during incremental syncs of the Export stream. This ensures no data is missed due to delays in event recording. Default is 0 seconds. Must be a non-negative integer.
     */
    public SourceMixpanel withExportLookbackWindow(long exportLookbackWindow) {
        Utils.checkNotNull(exportLookbackWindow, "exportLookbackWindow");
        this.exportLookbackWindow = Optional.ofNullable(exportLookbackWindow);
        return this;
    }

    /**
     * The number of seconds to look back from the last synced timestamp during incremental syncs of the Export stream. This ensures no data is missed due to delays in event recording. Default is 0 seconds. Must be a non-negative integer.
     */
    public SourceMixpanel withExportLookbackWindow(Optional<Long> exportLookbackWindow) {
        Utils.checkNotNull(exportLookbackWindow, "exportLookbackWindow");
        this.exportLookbackWindow = exportLookbackWindow;
        return this;
    }

    /**
     * The number of records to fetch per request for the engage stream. Default is 1000. If you are experiencing long sync times with this stream, try increasing this value.
     */
    public SourceMixpanel withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * The number of records to fetch per request for the engage stream. Default is 1000. If you are experiencing long sync times with this stream, try increasing this value.
     */
    public SourceMixpanel withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    public SourceMixpanel withProjectTimezone(String projectTimezone) {
        Utils.checkNotNull(projectTimezone, "projectTimezone");
        this.projectTimezone = Optional.ofNullable(projectTimezone);
        return this;
    }

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    public SourceMixpanel withProjectTimezone(Optional<String> projectTimezone) {
        Utils.checkNotNull(projectTimezone, "projectTimezone");
        this.projectTimezone = projectTimezone;
        return this;
    }

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    public SourceMixpanel withRegion(SourceMixpanelRegion region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    public SourceMixpanel withRegion(Optional<? extends SourceMixpanelRegion> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    public SourceMixpanel withSelectPropertiesByDefault(boolean selectPropertiesByDefault) {
        Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
        this.selectPropertiesByDefault = Optional.ofNullable(selectPropertiesByDefault);
        return this;
    }

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    public SourceMixpanel withSelectPropertiesByDefault(Optional<Boolean> selectPropertiesByDefault) {
        Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
        this.selectPropertiesByDefault = selectPropertiesByDefault;
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    public SourceMixpanel withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    public SourceMixpanel withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMixpanel other = (SourceMixpanel) o;
        return 
            Objects.deepEquals(this.attributionWindow, other.attributionWindow) &&
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.dateWindowSize, other.dateWindowSize) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.exportLookbackWindow, other.exportLookbackWindow) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.projectTimezone, other.projectTimezone) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.selectPropertiesByDefault, other.selectPropertiesByDefault) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            attributionWindow,
            credentials,
            dateWindowSize,
            endDate,
            exportLookbackWindow,
            pageSize,
            projectTimezone,
            region,
            selectPropertiesByDefault,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMixpanel.class,
                "attributionWindow", attributionWindow,
                "credentials", credentials,
                "dateWindowSize", dateWindowSize,
                "endDate", endDate,
                "exportLookbackWindow", exportLookbackWindow,
                "pageSize", pageSize,
                "projectTimezone", projectTimezone,
                "region", region,
                "selectPropertiesByDefault", selectPropertiesByDefault,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<Long> attributionWindow;
 
        private AuthenticationWildcard credentials;
 
        private Optional<Long> dateWindowSize;
 
        private Optional<OffsetDateTime> endDate = Optional.empty();
 
        private Optional<Long> exportLookbackWindow;
 
        private Optional<Long> pageSize;
 
        private Optional<String> projectTimezone;
 
        private Optional<? extends SourceMixpanelRegion> region;
 
        private Optional<Boolean> selectPropertiesByDefault;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
         */
        public Builder attributionWindow(long attributionWindow) {
            Utils.checkNotNull(attributionWindow, "attributionWindow");
            this.attributionWindow = Optional.ofNullable(attributionWindow);
            return this;
        }

        /**
         * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
         */
        public Builder attributionWindow(Optional<Long> attributionWindow) {
            Utils.checkNotNull(attributionWindow, "attributionWindow");
            this.attributionWindow = attributionWindow;
            return this;
        }

        /**
         * Choose how to authenticate to Mixpanel
         */
        public Builder credentials(AuthenticationWildcard credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
         */
        public Builder dateWindowSize(long dateWindowSize) {
            Utils.checkNotNull(dateWindowSize, "dateWindowSize");
            this.dateWindowSize = Optional.ofNullable(dateWindowSize);
            return this;
        }

        /**
         * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
         */
        public Builder dateWindowSize(Optional<Long> dateWindowSize) {
            Utils.checkNotNull(dateWindowSize, "dateWindowSize");
            this.dateWindowSize = dateWindowSize;
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
         */
        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
         */
        public Builder endDate(Optional<OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * The number of seconds to look back from the last synced timestamp during incremental syncs of the Export stream. This ensures no data is missed due to delays in event recording. Default is 0 seconds. Must be a non-negative integer.
         */
        public Builder exportLookbackWindow(long exportLookbackWindow) {
            Utils.checkNotNull(exportLookbackWindow, "exportLookbackWindow");
            this.exportLookbackWindow = Optional.ofNullable(exportLookbackWindow);
            return this;
        }

        /**
         * The number of seconds to look back from the last synced timestamp during incremental syncs of the Export stream. This ensures no data is missed due to delays in event recording. Default is 0 seconds. Must be a non-negative integer.
         */
        public Builder exportLookbackWindow(Optional<Long> exportLookbackWindow) {
            Utils.checkNotNull(exportLookbackWindow, "exportLookbackWindow");
            this.exportLookbackWindow = exportLookbackWindow;
            return this;
        }

        /**
         * The number of records to fetch per request for the engage stream. Default is 1000. If you are experiencing long sync times with this stream, try increasing this value.
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * The number of records to fetch per request for the engage stream. Default is 1000. If you are experiencing long sync times with this stream, try increasing this value.
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
         */
        public Builder projectTimezone(String projectTimezone) {
            Utils.checkNotNull(projectTimezone, "projectTimezone");
            this.projectTimezone = Optional.ofNullable(projectTimezone);
            return this;
        }

        /**
         * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
         */
        public Builder projectTimezone(Optional<String> projectTimezone) {
            Utils.checkNotNull(projectTimezone, "projectTimezone");
            this.projectTimezone = projectTimezone;
            return this;
        }

        /**
         * The region of mixpanel domain instance either US or EU.
         */
        public Builder region(SourceMixpanelRegion region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * The region of mixpanel domain instance either US or EU.
         */
        public Builder region(Optional<? extends SourceMixpanelRegion> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
         */
        public Builder selectPropertiesByDefault(boolean selectPropertiesByDefault) {
            Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
            this.selectPropertiesByDefault = Optional.ofNullable(selectPropertiesByDefault);
            return this;
        }

        /**
         * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
         */
        public Builder selectPropertiesByDefault(Optional<Boolean> selectPropertiesByDefault) {
            Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
            this.selectPropertiesByDefault = selectPropertiesByDefault;
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceMixpanel build() {
            if (attributionWindow == null) {
                attributionWindow = _SINGLETON_VALUE_AttributionWindow.value();
            }
            if (dateWindowSize == null) {
                dateWindowSize = _SINGLETON_VALUE_DateWindowSize.value();
            }
            if (exportLookbackWindow == null) {
                exportLookbackWindow = _SINGLETON_VALUE_ExportLookbackWindow.value();
            }
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            if (projectTimezone == null) {
                projectTimezone = _SINGLETON_VALUE_ProjectTimezone.value();
            }
            if (region == null) {
                region = _SINGLETON_VALUE_Region.value();
            }
            if (selectPropertiesByDefault == null) {
                selectPropertiesByDefault = _SINGLETON_VALUE_SelectPropertiesByDefault.value();
            }
            return new SourceMixpanel(
                attributionWindow,
                credentials,
                dateWindowSize,
                endDate,
                exportLookbackWindow,
                pageSize,
                projectTimezone,
                region,
                selectPropertiesByDefault,
                startDate);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_AttributionWindow =
                new LazySingletonValue<>(
                        "attribution_window",
                        "5",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_DateWindowSize =
                new LazySingletonValue<>(
                        "date_window_size",
                        "30",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_ExportLookbackWindow =
                new LazySingletonValue<>(
                        "export_lookback_window",
                        "0",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "page_size",
                        "1000",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_ProjectTimezone =
                new LazySingletonValue<>(
                        "project_timezone",
                        "\"US/Pacific\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<? extends SourceMixpanelRegion>> _SINGLETON_VALUE_Region =
                new LazySingletonValue<>(
                        "region",
                        "\"US\"",
                        new TypeReference<Optional<? extends SourceMixpanelRegion>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_SelectPropertiesByDefault =
                new LazySingletonValue<>(
                        "select_properties_by_default",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Mixpanel> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"mixpanel\"",
                        new TypeReference<Mixpanel>() {});
    }
}
