/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class SourceMixpanel {

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribution_window")
    private Optional<? extends Long> attributionWindow;

    /**
     * Choose how to authenticate to Mixpanel
     */
    @JsonProperty("credentials")
    private AuthenticationWildcard credentials;

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_window_size")
    private Optional<? extends Long> dateWindowSize;

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<? extends OffsetDateTime> endDate;

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_timezone")
    private Optional<? extends String> projectTimezone;

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<? extends SourceMixpanelRegion> region;

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("select_properties_by_default")
    private Optional<? extends Boolean> selectPropertiesByDefault;

    @JsonProperty("sourceType")
    private Mixpanel sourceType;

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    @JsonCreator
    public SourceMixpanel(
            @JsonProperty("attribution_window") Optional<? extends Long> attributionWindow,
            @JsonProperty("credentials") AuthenticationWildcard credentials,
            @JsonProperty("date_window_size") Optional<? extends Long> dateWindowSize,
            @JsonProperty("end_date") Optional<? extends OffsetDateTime> endDate,
            @JsonProperty("project_timezone") Optional<? extends String> projectTimezone,
            @JsonProperty("region") Optional<? extends SourceMixpanelRegion> region,
            @JsonProperty("select_properties_by_default") Optional<? extends Boolean> selectPropertiesByDefault,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(attributionWindow, "attributionWindow");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(dateWindowSize, "dateWindowSize");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(projectTimezone, "projectTimezone");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
        Utils.checkNotNull(startDate, "startDate");
        this.attributionWindow = attributionWindow;
        this.credentials = credentials;
        this.dateWindowSize = dateWindowSize;
        this.endDate = endDate;
        this.projectTimezone = projectTimezone;
        this.region = region;
        this.selectPropertiesByDefault = selectPropertiesByDefault;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceMixpanel(
            AuthenticationWildcard credentials) {
        this(Optional.empty(), credentials, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> attributionWindow() {
        return (Optional<Long>) attributionWindow;
    }

    /**
     * Choose how to authenticate to Mixpanel
     */
    @JsonIgnore
    public AuthenticationWildcard credentials() {
        return credentials;
    }

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> dateWindowSize() {
        return (Optional<Long>) dateWindowSize;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> endDate() {
        return (Optional<OffsetDateTime>) endDate;
    }

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> projectTimezone() {
        return (Optional<String>) projectTimezone;
    }

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceMixpanelRegion> region() {
        return (Optional<SourceMixpanelRegion>) region;
    }

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> selectPropertiesByDefault() {
        return (Optional<Boolean>) selectPropertiesByDefault;
    }

    @JsonIgnore
    public Mixpanel sourceType() {
        return sourceType;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return (Optional<OffsetDateTime>) startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    public SourceMixpanel withAttributionWindow(long attributionWindow) {
        Utils.checkNotNull(attributionWindow, "attributionWindow");
        this.attributionWindow = Optional.ofNullable(attributionWindow);
        return this;
    }

    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
     */
    public SourceMixpanel withAttributionWindow(Optional<? extends Long> attributionWindow) {
        Utils.checkNotNull(attributionWindow, "attributionWindow");
        this.attributionWindow = attributionWindow;
        return this;
    }

    /**
     * Choose how to authenticate to Mixpanel
     */
    public SourceMixpanel withCredentials(AuthenticationWildcard credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    public SourceMixpanel withDateWindowSize(long dateWindowSize) {
        Utils.checkNotNull(dateWindowSize, "dateWindowSize");
        this.dateWindowSize = Optional.ofNullable(dateWindowSize);
        return this;
    }

    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
     */
    public SourceMixpanel withDateWindowSize(Optional<? extends Long> dateWindowSize) {
        Utils.checkNotNull(dateWindowSize, "dateWindowSize");
        this.dateWindowSize = dateWindowSize;
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    public SourceMixpanel withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    public SourceMixpanel withEndDate(Optional<? extends OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    public SourceMixpanel withProjectTimezone(String projectTimezone) {
        Utils.checkNotNull(projectTimezone, "projectTimezone");
        this.projectTimezone = Optional.ofNullable(projectTimezone);
        return this;
    }

    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
     */
    public SourceMixpanel withProjectTimezone(Optional<? extends String> projectTimezone) {
        Utils.checkNotNull(projectTimezone, "projectTimezone");
        this.projectTimezone = projectTimezone;
        return this;
    }

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    public SourceMixpanel withRegion(SourceMixpanelRegion region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * The region of mixpanel domain instance either US or EU.
     */
    public SourceMixpanel withRegion(Optional<? extends SourceMixpanelRegion> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    public SourceMixpanel withSelectPropertiesByDefault(boolean selectPropertiesByDefault) {
        Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
        this.selectPropertiesByDefault = Optional.ofNullable(selectPropertiesByDefault);
        return this;
    }

    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
     */
    public SourceMixpanel withSelectPropertiesByDefault(Optional<? extends Boolean> selectPropertiesByDefault) {
        Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
        this.selectPropertiesByDefault = selectPropertiesByDefault;
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    public SourceMixpanel withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    public SourceMixpanel withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMixpanel other = (SourceMixpanel) o;
        return 
            java.util.Objects.deepEquals(this.attributionWindow, other.attributionWindow) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.dateWindowSize, other.dateWindowSize) &&
            java.util.Objects.deepEquals(this.endDate, other.endDate) &&
            java.util.Objects.deepEquals(this.projectTimezone, other.projectTimezone) &&
            java.util.Objects.deepEquals(this.region, other.region) &&
            java.util.Objects.deepEquals(this.selectPropertiesByDefault, other.selectPropertiesByDefault) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            attributionWindow,
            credentials,
            dateWindowSize,
            endDate,
            projectTimezone,
            region,
            selectPropertiesByDefault,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMixpanel.class,
                "attributionWindow", attributionWindow,
                "credentials", credentials,
                "dateWindowSize", dateWindowSize,
                "endDate", endDate,
                "projectTimezone", projectTimezone,
                "region", region,
                "selectPropertiesByDefault", selectPropertiesByDefault,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> attributionWindow;
 
        private AuthenticationWildcard credentials;
 
        private Optional<? extends Long> dateWindowSize;
 
        private Optional<? extends OffsetDateTime> endDate = Optional.empty();
 
        private Optional<? extends String> projectTimezone;
 
        private Optional<? extends SourceMixpanelRegion> region;
 
        private Optional<? extends Boolean> selectPropertiesByDefault;
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
         */
        public Builder attributionWindow(long attributionWindow) {
            Utils.checkNotNull(attributionWindow, "attributionWindow");
            this.attributionWindow = Optional.ofNullable(attributionWindow);
            return this;
        }

        /**
         * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer)
         */
        public Builder attributionWindow(Optional<? extends Long> attributionWindow) {
            Utils.checkNotNull(attributionWindow, "attributionWindow");
            this.attributionWindow = attributionWindow;
            return this;
        }

        /**
         * Choose how to authenticate to Mixpanel
         */
        public Builder credentials(AuthenticationWildcard credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
         */
        public Builder dateWindowSize(long dateWindowSize) {
            Utils.checkNotNull(dateWindowSize, "dateWindowSize");
            this.dateWindowSize = Optional.ofNullable(dateWindowSize);
            return this;
        }

        /**
         * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer)
         */
        public Builder dateWindowSize(Optional<? extends Long> dateWindowSize) {
            Utils.checkNotNull(dateWindowSize, "dateWindowSize");
            this.dateWindowSize = dateWindowSize;
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
         */
        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
         */
        public Builder endDate(Optional<? extends OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
         */
        public Builder projectTimezone(String projectTimezone) {
            Utils.checkNotNull(projectTimezone, "projectTimezone");
            this.projectTimezone = Optional.ofNullable(projectTimezone);
            return this;
        }

        /**
         * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the &lt;a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel"&gt;Mixpanel console&lt;/a&gt;.
         */
        public Builder projectTimezone(Optional<? extends String> projectTimezone) {
            Utils.checkNotNull(projectTimezone, "projectTimezone");
            this.projectTimezone = projectTimezone;
            return this;
        }

        /**
         * The region of mixpanel domain instance either US or EU.
         */
        public Builder region(SourceMixpanelRegion region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * The region of mixpanel domain instance either US or EU.
         */
        public Builder region(Optional<? extends SourceMixpanelRegion> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
         */
        public Builder selectPropertiesByDefault(boolean selectPropertiesByDefault) {
            Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
            this.selectPropertiesByDefault = Optional.ofNullable(selectPropertiesByDefault);
            return this;
        }

        /**
         * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
         */
        public Builder selectPropertiesByDefault(Optional<? extends Boolean> selectPropertiesByDefault) {
            Utils.checkNotNull(selectPropertiesByDefault, "selectPropertiesByDefault");
            this.selectPropertiesByDefault = selectPropertiesByDefault;
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceMixpanel build() {
            if (attributionWindow == null) {
                attributionWindow = _SINGLETON_VALUE_AttributionWindow.value();
            }
            if (dateWindowSize == null) {
                dateWindowSize = _SINGLETON_VALUE_DateWindowSize.value();
            }
            if (projectTimezone == null) {
                projectTimezone = _SINGLETON_VALUE_ProjectTimezone.value();
            }
            if (region == null) {
                region = _SINGLETON_VALUE_Region.value();
            }
            if (selectPropertiesByDefault == null) {
                selectPropertiesByDefault = _SINGLETON_VALUE_SelectPropertiesByDefault.value();
            }
            return new SourceMixpanel(
                attributionWindow,
                credentials,
                dateWindowSize,
                endDate,
                projectTimezone,
                region,
                selectPropertiesByDefault,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_AttributionWindow =
                new LazySingletonValue<>(
                        "attribution_window",
                        "5",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_DateWindowSize =
                new LazySingletonValue<>(
                        "date_window_size",
                        "30",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_ProjectTimezone =
                new LazySingletonValue<>(
                        "project_timezone",
                        "\"US/Pacific\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends SourceMixpanelRegion>> _SINGLETON_VALUE_Region =
                new LazySingletonValue<>(
                        "region",
                        "\"US\"",
                        new TypeReference<Optional<? extends SourceMixpanelRegion>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_SelectPropertiesByDefault =
                new LazySingletonValue<>(
                        "select_properties_by_default",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Mixpanel> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"mixpanel\"",
                        new TypeReference<Mixpanel>() {});
    }
}

