/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * WorkspaceResponse
 * 
 * <p>Provides details of a single workspace.
 */
public class WorkspaceResponse {

    @JsonProperty("dataResidency")
    private String dataResidency;

    @JsonProperty("name")
    private String name;

    /**
     * Configures workspace notifications.
     */
    @JsonProperty("notifications")
    private NotificationsConfig notifications;

    @JsonProperty("workspaceId")
    private String workspaceId;

    @JsonCreator
    public WorkspaceResponse(
            @JsonProperty("dataResidency") String dataResidency,
            @JsonProperty("name") String name,
            @JsonProperty("notifications") NotificationsConfig notifications,
            @JsonProperty("workspaceId") String workspaceId) {
        Utils.checkNotNull(dataResidency, "dataResidency");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(notifications, "notifications");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.dataResidency = dataResidency;
        this.name = name;
        this.notifications = notifications;
        this.workspaceId = workspaceId;
    }

    @JsonIgnore
    public String dataResidency() {
        return dataResidency;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Configures workspace notifications.
     */
    @JsonIgnore
    public NotificationsConfig notifications() {
        return notifications;
    }

    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public WorkspaceResponse withDataResidency(String dataResidency) {
        Utils.checkNotNull(dataResidency, "dataResidency");
        this.dataResidency = dataResidency;
        return this;
    }

    public WorkspaceResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Configures workspace notifications.
     */
    public WorkspaceResponse withNotifications(NotificationsConfig notifications) {
        Utils.checkNotNull(notifications, "notifications");
        this.notifications = notifications;
        return this;
    }

    public WorkspaceResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceResponse other = (WorkspaceResponse) o;
        return 
            Objects.deepEquals(this.dataResidency, other.dataResidency) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.notifications, other.notifications) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataResidency,
            name,
            notifications,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceResponse.class,
                "dataResidency", dataResidency,
                "name", name,
                "notifications", notifications,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private String dataResidency;
 
        private String name;
 
        private NotificationsConfig notifications;
 
        private String workspaceId;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dataResidency(String dataResidency) {
            Utils.checkNotNull(dataResidency, "dataResidency");
            this.dataResidency = dataResidency;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Configures workspace notifications.
         */
        public Builder notifications(NotificationsConfig notifications) {
            Utils.checkNotNull(notifications, "notifications");
            this.notifications = notifications;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public WorkspaceResponse build() {
            return new WorkspaceResponse(
                dataResidency,
                name,
                notifications,
                workspaceId);
        }
    }
}
