/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SourceGoogleAnalyticsDataApi {

    /**
     * Enables conversion of `conversions:*` event metrics from integers to floats. This is beneficial for preventing data rounding when the API returns float values for any `conversions:*` fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convert_conversions_event")
    private Optional<Boolean> convertConversionsEvent;

    /**
     * Credentials for the service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceGoogleAnalyticsDataApiCredentials> credentials;

    /**
     * You can add your Custom Analytics report by creating one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_reports_array")
    private Optional<? extends List<SourceGoogleAnalyticsDataApiCustomReportConfig>> customReportsArray;

    /**
     * The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_ranges_start_date")
    private Optional<LocalDate> dateRangesStartDate;

    /**
     * If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. More information is available in &lt;a href="https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport#request-body"&gt;the documentation&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keep_empty_rows")
    private Optional<Boolean> keepEmptyRows;

    /**
     * Since attribution changes after the event date, and Google Analytics has a data processing latency, we should specify how many days in the past we should refresh the data in every run. So if you set it at 5 days, in every sync it will fetch the last bookmark date minus 5 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookback_window")
    private Optional<Long> lookbackWindow;

    /**
     * A list of your Property IDs. The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the &lt;a href='https://developers.google.com/analytics/devguides/reporting/data/v1/property-id#what_is_my_property_id'&gt;Google Analytics documentation&lt;/a&gt; to locate your property ID.
     */
    @JsonProperty("property_ids")
    private List<String> propertyIds;

    @JsonProperty("sourceType")
    private SourceGoogleAnalyticsDataApiGoogleAnalyticsDataApi sourceType;

    /**
     * The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in &lt;a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api"&gt;the documentation&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("window_in_days")
    private Optional<Long> windowInDays;

    @JsonCreator
    public SourceGoogleAnalyticsDataApi(
            @JsonProperty("convert_conversions_event") Optional<Boolean> convertConversionsEvent,
            @JsonProperty("credentials") Optional<? extends SourceGoogleAnalyticsDataApiCredentials> credentials,
            @JsonProperty("custom_reports_array") Optional<? extends List<SourceGoogleAnalyticsDataApiCustomReportConfig>> customReportsArray,
            @JsonProperty("date_ranges_start_date") Optional<LocalDate> dateRangesStartDate,
            @JsonProperty("keep_empty_rows") Optional<Boolean> keepEmptyRows,
            @JsonProperty("lookback_window") Optional<Long> lookbackWindow,
            @JsonProperty("property_ids") List<String> propertyIds,
            @JsonProperty("window_in_days") Optional<Long> windowInDays) {
        Utils.checkNotNull(convertConversionsEvent, "convertConversionsEvent");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(customReportsArray, "customReportsArray");
        Utils.checkNotNull(dateRangesStartDate, "dateRangesStartDate");
        Utils.checkNotNull(keepEmptyRows, "keepEmptyRows");
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        Utils.checkNotNull(propertyIds, "propertyIds");
        Utils.checkNotNull(windowInDays, "windowInDays");
        this.convertConversionsEvent = convertConversionsEvent;
        this.credentials = credentials;
        this.customReportsArray = customReportsArray;
        this.dateRangesStartDate = dateRangesStartDate;
        this.keepEmptyRows = keepEmptyRows;
        this.lookbackWindow = lookbackWindow;
        this.propertyIds = propertyIds;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.windowInDays = windowInDays;
    }
    
    public SourceGoogleAnalyticsDataApi(
            List<String> propertyIds) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), propertyIds, Optional.empty());
    }

    /**
     * Enables conversion of `conversions:*` event metrics from integers to floats. This is beneficial for preventing data rounding when the API returns float values for any `conversions:*` fields.
     */
    @JsonIgnore
    public Optional<Boolean> convertConversionsEvent() {
        return convertConversionsEvent;
    }

    /**
     * Credentials for the service
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceGoogleAnalyticsDataApiCredentials> credentials() {
        return (Optional<SourceGoogleAnalyticsDataApiCredentials>) credentials;
    }

    /**
     * You can add your Custom Analytics report by creating one.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SourceGoogleAnalyticsDataApiCustomReportConfig>> customReportsArray() {
        return (Optional<List<SourceGoogleAnalyticsDataApiCustomReportConfig>>) customReportsArray;
    }

    /**
     * The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
     */
    @JsonIgnore
    public Optional<LocalDate> dateRangesStartDate() {
        return dateRangesStartDate;
    }

    /**
     * If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. More information is available in &lt;a href="https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport#request-body"&gt;the documentation&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<Boolean> keepEmptyRows() {
        return keepEmptyRows;
    }

    /**
     * Since attribution changes after the event date, and Google Analytics has a data processing latency, we should specify how many days in the past we should refresh the data in every run. So if you set it at 5 days, in every sync it will fetch the last bookmark date minus 5 days.
     */
    @JsonIgnore
    public Optional<Long> lookbackWindow() {
        return lookbackWindow;
    }

    /**
     * A list of your Property IDs. The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the &lt;a href='https://developers.google.com/analytics/devguides/reporting/data/v1/property-id#what_is_my_property_id'&gt;Google Analytics documentation&lt;/a&gt; to locate your property ID.
     */
    @JsonIgnore
    public List<String> propertyIds() {
        return propertyIds;
    }

    @JsonIgnore
    public SourceGoogleAnalyticsDataApiGoogleAnalyticsDataApi sourceType() {
        return sourceType;
    }

    /**
     * The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in &lt;a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api"&gt;the documentation&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<Long> windowInDays() {
        return windowInDays;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Enables conversion of `conversions:*` event metrics from integers to floats. This is beneficial for preventing data rounding when the API returns float values for any `conversions:*` fields.
     */
    public SourceGoogleAnalyticsDataApi withConvertConversionsEvent(boolean convertConversionsEvent) {
        Utils.checkNotNull(convertConversionsEvent, "convertConversionsEvent");
        this.convertConversionsEvent = Optional.ofNullable(convertConversionsEvent);
        return this;
    }

    /**
     * Enables conversion of `conversions:*` event metrics from integers to floats. This is beneficial for preventing data rounding when the API returns float values for any `conversions:*` fields.
     */
    public SourceGoogleAnalyticsDataApi withConvertConversionsEvent(Optional<Boolean> convertConversionsEvent) {
        Utils.checkNotNull(convertConversionsEvent, "convertConversionsEvent");
        this.convertConversionsEvent = convertConversionsEvent;
        return this;
    }

    /**
     * Credentials for the service
     */
    public SourceGoogleAnalyticsDataApi withCredentials(SourceGoogleAnalyticsDataApiCredentials credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * Credentials for the service
     */
    public SourceGoogleAnalyticsDataApi withCredentials(Optional<? extends SourceGoogleAnalyticsDataApiCredentials> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * You can add your Custom Analytics report by creating one.
     */
    public SourceGoogleAnalyticsDataApi withCustomReportsArray(List<SourceGoogleAnalyticsDataApiCustomReportConfig> customReportsArray) {
        Utils.checkNotNull(customReportsArray, "customReportsArray");
        this.customReportsArray = Optional.ofNullable(customReportsArray);
        return this;
    }

    /**
     * You can add your Custom Analytics report by creating one.
     */
    public SourceGoogleAnalyticsDataApi withCustomReportsArray(Optional<? extends List<SourceGoogleAnalyticsDataApiCustomReportConfig>> customReportsArray) {
        Utils.checkNotNull(customReportsArray, "customReportsArray");
        this.customReportsArray = customReportsArray;
        return this;
    }

    /**
     * The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
     */
    public SourceGoogleAnalyticsDataApi withDateRangesStartDate(LocalDate dateRangesStartDate) {
        Utils.checkNotNull(dateRangesStartDate, "dateRangesStartDate");
        this.dateRangesStartDate = Optional.ofNullable(dateRangesStartDate);
        return this;
    }

    /**
     * The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
     */
    public SourceGoogleAnalyticsDataApi withDateRangesStartDate(Optional<LocalDate> dateRangesStartDate) {
        Utils.checkNotNull(dateRangesStartDate, "dateRangesStartDate");
        this.dateRangesStartDate = dateRangesStartDate;
        return this;
    }

    /**
     * If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. More information is available in &lt;a href="https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport#request-body"&gt;the documentation&lt;/a&gt;.
     */
    public SourceGoogleAnalyticsDataApi withKeepEmptyRows(boolean keepEmptyRows) {
        Utils.checkNotNull(keepEmptyRows, "keepEmptyRows");
        this.keepEmptyRows = Optional.ofNullable(keepEmptyRows);
        return this;
    }

    /**
     * If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. More information is available in &lt;a href="https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport#request-body"&gt;the documentation&lt;/a&gt;.
     */
    public SourceGoogleAnalyticsDataApi withKeepEmptyRows(Optional<Boolean> keepEmptyRows) {
        Utils.checkNotNull(keepEmptyRows, "keepEmptyRows");
        this.keepEmptyRows = keepEmptyRows;
        return this;
    }

    /**
     * Since attribution changes after the event date, and Google Analytics has a data processing latency, we should specify how many days in the past we should refresh the data in every run. So if you set it at 5 days, in every sync it will fetch the last bookmark date minus 5 days.
     */
    public SourceGoogleAnalyticsDataApi withLookbackWindow(long lookbackWindow) {
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        this.lookbackWindow = Optional.ofNullable(lookbackWindow);
        return this;
    }

    /**
     * Since attribution changes after the event date, and Google Analytics has a data processing latency, we should specify how many days in the past we should refresh the data in every run. So if you set it at 5 days, in every sync it will fetch the last bookmark date minus 5 days.
     */
    public SourceGoogleAnalyticsDataApi withLookbackWindow(Optional<Long> lookbackWindow) {
        Utils.checkNotNull(lookbackWindow, "lookbackWindow");
        this.lookbackWindow = lookbackWindow;
        return this;
    }

    /**
     * A list of your Property IDs. The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the &lt;a href='https://developers.google.com/analytics/devguides/reporting/data/v1/property-id#what_is_my_property_id'&gt;Google Analytics documentation&lt;/a&gt; to locate your property ID.
     */
    public SourceGoogleAnalyticsDataApi withPropertyIds(List<String> propertyIds) {
        Utils.checkNotNull(propertyIds, "propertyIds");
        this.propertyIds = propertyIds;
        return this;
    }

    /**
     * The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in &lt;a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api"&gt;the documentation&lt;/a&gt;.
     */
    public SourceGoogleAnalyticsDataApi withWindowInDays(long windowInDays) {
        Utils.checkNotNull(windowInDays, "windowInDays");
        this.windowInDays = Optional.ofNullable(windowInDays);
        return this;
    }

    /**
     * The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in &lt;a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api"&gt;the documentation&lt;/a&gt;.
     */
    public SourceGoogleAnalyticsDataApi withWindowInDays(Optional<Long> windowInDays) {
        Utils.checkNotNull(windowInDays, "windowInDays");
        this.windowInDays = windowInDays;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGoogleAnalyticsDataApi other = (SourceGoogleAnalyticsDataApi) o;
        return 
            Objects.deepEquals(this.convertConversionsEvent, other.convertConversionsEvent) &&
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.customReportsArray, other.customReportsArray) &&
            Objects.deepEquals(this.dateRangesStartDate, other.dateRangesStartDate) &&
            Objects.deepEquals(this.keepEmptyRows, other.keepEmptyRows) &&
            Objects.deepEquals(this.lookbackWindow, other.lookbackWindow) &&
            Objects.deepEquals(this.propertyIds, other.propertyIds) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.windowInDays, other.windowInDays);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            convertConversionsEvent,
            credentials,
            customReportsArray,
            dateRangesStartDate,
            keepEmptyRows,
            lookbackWindow,
            propertyIds,
            sourceType,
            windowInDays);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGoogleAnalyticsDataApi.class,
                "convertConversionsEvent", convertConversionsEvent,
                "credentials", credentials,
                "customReportsArray", customReportsArray,
                "dateRangesStartDate", dateRangesStartDate,
                "keepEmptyRows", keepEmptyRows,
                "lookbackWindow", lookbackWindow,
                "propertyIds", propertyIds,
                "sourceType", sourceType,
                "windowInDays", windowInDays);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> convertConversionsEvent;
 
        private Optional<? extends SourceGoogleAnalyticsDataApiCredentials> credentials = Optional.empty();
 
        private Optional<? extends List<SourceGoogleAnalyticsDataApiCustomReportConfig>> customReportsArray = Optional.empty();
 
        private Optional<LocalDate> dateRangesStartDate = Optional.empty();
 
        private Optional<Boolean> keepEmptyRows;
 
        private Optional<Long> lookbackWindow;
 
        private List<String> propertyIds;
 
        private Optional<Long> windowInDays;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Enables conversion of `conversions:*` event metrics from integers to floats. This is beneficial for preventing data rounding when the API returns float values for any `conversions:*` fields.
         */
        public Builder convertConversionsEvent(boolean convertConversionsEvent) {
            Utils.checkNotNull(convertConversionsEvent, "convertConversionsEvent");
            this.convertConversionsEvent = Optional.ofNullable(convertConversionsEvent);
            return this;
        }

        /**
         * Enables conversion of `conversions:*` event metrics from integers to floats. This is beneficial for preventing data rounding when the API returns float values for any `conversions:*` fields.
         */
        public Builder convertConversionsEvent(Optional<Boolean> convertConversionsEvent) {
            Utils.checkNotNull(convertConversionsEvent, "convertConversionsEvent");
            this.convertConversionsEvent = convertConversionsEvent;
            return this;
        }

        /**
         * Credentials for the service
         */
        public Builder credentials(SourceGoogleAnalyticsDataApiCredentials credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * Credentials for the service
         */
        public Builder credentials(Optional<? extends SourceGoogleAnalyticsDataApiCredentials> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * You can add your Custom Analytics report by creating one.
         */
        public Builder customReportsArray(List<SourceGoogleAnalyticsDataApiCustomReportConfig> customReportsArray) {
            Utils.checkNotNull(customReportsArray, "customReportsArray");
            this.customReportsArray = Optional.ofNullable(customReportsArray);
            return this;
        }

        /**
         * You can add your Custom Analytics report by creating one.
         */
        public Builder customReportsArray(Optional<? extends List<SourceGoogleAnalyticsDataApiCustomReportConfig>> customReportsArray) {
            Utils.checkNotNull(customReportsArray, "customReportsArray");
            this.customReportsArray = customReportsArray;
            return this;
        }

        /**
         * The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
         */
        public Builder dateRangesStartDate(LocalDate dateRangesStartDate) {
            Utils.checkNotNull(dateRangesStartDate, "dateRangesStartDate");
            this.dateRangesStartDate = Optional.ofNullable(dateRangesStartDate);
            return this;
        }

        /**
         * The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
         */
        public Builder dateRangesStartDate(Optional<LocalDate> dateRangesStartDate) {
            Utils.checkNotNull(dateRangesStartDate, "dateRangesStartDate");
            this.dateRangesStartDate = dateRangesStartDate;
            return this;
        }

        /**
         * If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. More information is available in &lt;a href="https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport#request-body"&gt;the documentation&lt;/a&gt;.
         */
        public Builder keepEmptyRows(boolean keepEmptyRows) {
            Utils.checkNotNull(keepEmptyRows, "keepEmptyRows");
            this.keepEmptyRows = Optional.ofNullable(keepEmptyRows);
            return this;
        }

        /**
         * If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. More information is available in &lt;a href="https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport#request-body"&gt;the documentation&lt;/a&gt;.
         */
        public Builder keepEmptyRows(Optional<Boolean> keepEmptyRows) {
            Utils.checkNotNull(keepEmptyRows, "keepEmptyRows");
            this.keepEmptyRows = keepEmptyRows;
            return this;
        }

        /**
         * Since attribution changes after the event date, and Google Analytics has a data processing latency, we should specify how many days in the past we should refresh the data in every run. So if you set it at 5 days, in every sync it will fetch the last bookmark date minus 5 days.
         */
        public Builder lookbackWindow(long lookbackWindow) {
            Utils.checkNotNull(lookbackWindow, "lookbackWindow");
            this.lookbackWindow = Optional.ofNullable(lookbackWindow);
            return this;
        }

        /**
         * Since attribution changes after the event date, and Google Analytics has a data processing latency, we should specify how many days in the past we should refresh the data in every run. So if you set it at 5 days, in every sync it will fetch the last bookmark date minus 5 days.
         */
        public Builder lookbackWindow(Optional<Long> lookbackWindow) {
            Utils.checkNotNull(lookbackWindow, "lookbackWindow");
            this.lookbackWindow = lookbackWindow;
            return this;
        }

        /**
         * A list of your Property IDs. The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the &lt;a href='https://developers.google.com/analytics/devguides/reporting/data/v1/property-id#what_is_my_property_id'&gt;Google Analytics documentation&lt;/a&gt; to locate your property ID.
         */
        public Builder propertyIds(List<String> propertyIds) {
            Utils.checkNotNull(propertyIds, "propertyIds");
            this.propertyIds = propertyIds;
            return this;
        }

        /**
         * The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in &lt;a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api"&gt;the documentation&lt;/a&gt;.
         */
        public Builder windowInDays(long windowInDays) {
            Utils.checkNotNull(windowInDays, "windowInDays");
            this.windowInDays = Optional.ofNullable(windowInDays);
            return this;
        }

        /**
         * The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in &lt;a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api"&gt;the documentation&lt;/a&gt;.
         */
        public Builder windowInDays(Optional<Long> windowInDays) {
            Utils.checkNotNull(windowInDays, "windowInDays");
            this.windowInDays = windowInDays;
            return this;
        }
        
        public SourceGoogleAnalyticsDataApi build() {
            if (convertConversionsEvent == null) {
                convertConversionsEvent = _SINGLETON_VALUE_ConvertConversionsEvent.value();
            }
            if (keepEmptyRows == null) {
                keepEmptyRows = _SINGLETON_VALUE_KeepEmptyRows.value();
            }
            if (lookbackWindow == null) {
                lookbackWindow = _SINGLETON_VALUE_LookbackWindow.value();
            }
            if (windowInDays == null) {
                windowInDays = _SINGLETON_VALUE_WindowInDays.value();
            }            return new SourceGoogleAnalyticsDataApi(
                convertConversionsEvent,
                credentials,
                customReportsArray,
                dateRangesStartDate,
                keepEmptyRows,
                lookbackWindow,
                propertyIds,
                windowInDays);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ConvertConversionsEvent =
                new LazySingletonValue<>(
                        "convert_conversions_event",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_KeepEmptyRows =
                new LazySingletonValue<>(
                        "keep_empty_rows",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_LookbackWindow =
                new LazySingletonValue<>(
                        "lookback_window",
                        "2",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<SourceGoogleAnalyticsDataApiGoogleAnalyticsDataApi> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"google-analytics-data-api\"",
                        new TypeReference<SourceGoogleAnalyticsDataApiGoogleAnalyticsDataApi>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_WindowInDays =
                new LazySingletonValue<>(
                        "window_in_days",
                        "1",
                        new TypeReference<Optional<Long>>() {});
    }
}

