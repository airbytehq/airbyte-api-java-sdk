/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceOracleEnterpriseSystemIDSID
 * 
 * <p>Use Oracle System Identifier.
 */
public class SourceOracleEnterpriseSystemIDSID {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_type")
    private Optional<? extends SourceOracleEnterpriseSchemasConnectionType> connectionType;

    @JsonProperty("sid")
    private String sid;

    @JsonCreator
    public SourceOracleEnterpriseSystemIDSID(
            @JsonProperty("connection_type") Optional<? extends SourceOracleEnterpriseSchemasConnectionType> connectionType,
            @JsonProperty("sid") String sid) {
        Utils.checkNotNull(connectionType, "connectionType");
        Utils.checkNotNull(sid, "sid");
        this.additionalProperties = new HashMap<>();
        this.connectionType = connectionType;
        this.sid = sid;
    }
    
    public SourceOracleEnterpriseSystemIDSID(
            String sid) {
        this(Optional.empty(), sid);
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceOracleEnterpriseSchemasConnectionType> connectionType() {
        return (Optional<SourceOracleEnterpriseSchemasConnectionType>) connectionType;
    }

    @JsonIgnore
    public String sid() {
        return sid;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public SourceOracleEnterpriseSystemIDSID withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public SourceOracleEnterpriseSystemIDSID withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public SourceOracleEnterpriseSystemIDSID withConnectionType(SourceOracleEnterpriseSchemasConnectionType connectionType) {
        Utils.checkNotNull(connectionType, "connectionType");
        this.connectionType = Optional.ofNullable(connectionType);
        return this;
    }

    public SourceOracleEnterpriseSystemIDSID withConnectionType(Optional<? extends SourceOracleEnterpriseSchemasConnectionType> connectionType) {
        Utils.checkNotNull(connectionType, "connectionType");
        this.connectionType = connectionType;
        return this;
    }

    public SourceOracleEnterpriseSystemIDSID withSid(String sid) {
        Utils.checkNotNull(sid, "sid");
        this.sid = sid;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOracleEnterpriseSystemIDSID other = (SourceOracleEnterpriseSystemIDSID) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.connectionType, other.connectionType) &&
            Objects.deepEquals(this.sid, other.sid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            connectionType,
            sid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOracleEnterpriseSystemIDSID.class,
                "additionalProperties", additionalProperties,
                "connectionType", connectionType,
                "sid", sid);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends SourceOracleEnterpriseSchemasConnectionType> connectionType;
 
        private String sid;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder connectionType(SourceOracleEnterpriseSchemasConnectionType connectionType) {
            Utils.checkNotNull(connectionType, "connectionType");
            this.connectionType = Optional.ofNullable(connectionType);
            return this;
        }

        public Builder connectionType(Optional<? extends SourceOracleEnterpriseSchemasConnectionType> connectionType) {
            Utils.checkNotNull(connectionType, "connectionType");
            this.connectionType = connectionType;
            return this;
        }

        public Builder sid(String sid) {
            Utils.checkNotNull(sid, "sid");
            this.sid = sid;
            return this;
        }
        
        public SourceOracleEnterpriseSystemIDSID build() {
            if (connectionType == null) {
                connectionType = _SINGLETON_VALUE_ConnectionType.value();
            }
            return new SourceOracleEnterpriseSystemIDSID(
                connectionType,
                sid)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceOracleEnterpriseSchemasConnectionType>> _SINGLETON_VALUE_ConnectionType =
                new LazySingletonValue<>(
                        "connection_type",
                        "\"sid\"",
                        new TypeReference<Optional<? extends SourceOracleEnterpriseSchemasConnectionType>>() {});
    }
}
