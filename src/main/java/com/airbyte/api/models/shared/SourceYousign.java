/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceYousign {

    /**
     * API key or access token
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Limit for each response objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Optional<String> limit;

    @JsonProperty("sourceType")
    private Yousign sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * The subdomain for the Yousign API environment, such as 'sandbox' or 'api'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subdomain")
    private Optional<? extends SourceYousignSubdomain> subdomain;

    @JsonCreator
    public SourceYousign(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("limit") Optional<String> limit,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("subdomain") Optional<? extends SourceYousignSubdomain> subdomain) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(subdomain, "subdomain");
        this.apiKey = apiKey;
        this.limit = limit;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.subdomain = subdomain;
    }
    
    public SourceYousign(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), startDate, Optional.empty());
    }

    /**
     * API key or access token
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Limit for each response objects
     */
    @JsonIgnore
    public Optional<String> limit() {
        return limit;
    }

    @JsonIgnore
    public Yousign sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * The subdomain for the Yousign API environment, such as 'sandbox' or 'api'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceYousignSubdomain> subdomain() {
        return (Optional<SourceYousignSubdomain>) subdomain;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * API key or access token
     */
    public SourceYousign withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Limit for each response objects
     */
    public SourceYousign withLimit(String limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Limit for each response objects
     */
    public SourceYousign withLimit(Optional<String> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public SourceYousign withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The subdomain for the Yousign API environment, such as 'sandbox' or 'api'.
     */
    public SourceYousign withSubdomain(SourceYousignSubdomain subdomain) {
        Utils.checkNotNull(subdomain, "subdomain");
        this.subdomain = Optional.ofNullable(subdomain);
        return this;
    }

    /**
     * The subdomain for the Yousign API environment, such as 'sandbox' or 'api'.
     */
    public SourceYousign withSubdomain(Optional<? extends SourceYousignSubdomain> subdomain) {
        Utils.checkNotNull(subdomain, "subdomain");
        this.subdomain = subdomain;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceYousign other = (SourceYousign) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.subdomain, other.subdomain);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            limit,
            sourceType,
            startDate,
            subdomain);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceYousign.class,
                "apiKey", apiKey,
                "limit", limit,
                "sourceType", sourceType,
                "startDate", startDate,
                "subdomain", subdomain);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> limit;
 
        private OffsetDateTime startDate;
 
        private Optional<? extends SourceYousignSubdomain> subdomain;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API key or access token
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Limit for each response objects
         */
        public Builder limit(String limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Limit for each response objects
         */
        public Builder limit(Optional<String> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The subdomain for the Yousign API environment, such as 'sandbox' or 'api'.
         */
        public Builder subdomain(SourceYousignSubdomain subdomain) {
            Utils.checkNotNull(subdomain, "subdomain");
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        /**
         * The subdomain for the Yousign API environment, such as 'sandbox' or 'api'.
         */
        public Builder subdomain(Optional<? extends SourceYousignSubdomain> subdomain) {
            Utils.checkNotNull(subdomain, "subdomain");
            this.subdomain = subdomain;
            return this;
        }
        
        public SourceYousign build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (subdomain == null) {
                subdomain = _SINGLETON_VALUE_Subdomain.value();
            }
            return new SourceYousign(
                apiKey,
                limit,
                startDate,
                subdomain);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "\"10\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Yousign> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"yousign\"",
                        new TypeReference<Yousign>() {});

        private static final LazySingletonValue<Optional<? extends SourceYousignSubdomain>> _SINGLETON_VALUE_Subdomain =
                new LazySingletonValue<>(
                        "subdomain",
                        "\"api\"",
                        new TypeReference<Optional<? extends SourceYousignSubdomain>>() {});
    }
}
