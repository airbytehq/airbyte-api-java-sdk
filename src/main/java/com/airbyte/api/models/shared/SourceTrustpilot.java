/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class SourceTrustpilot {

    /**
     * The names of business units which shall be synchronized. Some streams e.g. configured_business_units or private_reviews use this configuration.
     */
    @JsonProperty("business_units")
    private List<String> businessUnits;

    @JsonProperty("credentials")
    private SourceTrustpilotAuthorizationMethod credentials;

    @JsonProperty("sourceType")
    private Trustpilot sourceType;

    /**
     * For streams with sync. method incremental the start date time to be used
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceTrustpilot(
            @JsonProperty("business_units") List<String> businessUnits,
            @JsonProperty("credentials") SourceTrustpilotAuthorizationMethod credentials,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(businessUnits, "businessUnits");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(startDate, "startDate");
        this.businessUnits = businessUnits;
        this.credentials = credentials;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * The names of business units which shall be synchronized. Some streams e.g. configured_business_units or private_reviews use this configuration.
     */
    @JsonIgnore
    public List<String> businessUnits() {
        return businessUnits;
    }

    @JsonIgnore
    public SourceTrustpilotAuthorizationMethod credentials() {
        return credentials;
    }

    @JsonIgnore
    public Trustpilot sourceType() {
        return sourceType;
    }

    /**
     * For streams with sync. method incremental the start date time to be used
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The names of business units which shall be synchronized. Some streams e.g. configured_business_units or private_reviews use this configuration.
     */
    public SourceTrustpilot withBusinessUnits(List<String> businessUnits) {
        Utils.checkNotNull(businessUnits, "businessUnits");
        this.businessUnits = businessUnits;
        return this;
    }

    public SourceTrustpilot withCredentials(SourceTrustpilotAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * For streams with sync. method incremental the start date time to be used
     */
    public SourceTrustpilot withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceTrustpilot other = (SourceTrustpilot) o;
        return 
            Objects.deepEquals(this.businessUnits, other.businessUnits) &&
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            businessUnits,
            credentials,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceTrustpilot.class,
                "businessUnits", businessUnits,
                "credentials", credentials,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private List<String> businessUnits;
 
        private SourceTrustpilotAuthorizationMethod credentials;
 
        private String startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The names of business units which shall be synchronized. Some streams e.g. configured_business_units or private_reviews use this configuration.
         */
        public Builder businessUnits(List<String> businessUnits) {
            Utils.checkNotNull(businessUnits, "businessUnits");
            this.businessUnits = businessUnits;
            return this;
        }

        public Builder credentials(SourceTrustpilotAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * For streams with sync. method incremental the start date time to be used
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceTrustpilot build() {
            return new SourceTrustpilot(
                businessUnits,
                credentials,
                startDate);
        }

        private static final LazySingletonValue<Trustpilot> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"trustpilot\"",
                        new TypeReference<Trustpilot>() {});
    }
}

