/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourceBunnyInc {

    @JsonProperty("apikey")
    private String apikey;

    @JsonProperty("sourceType")
    private BunnyInc sourceType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * The subdomain specific to your Bunny account or service.
     */
    @JsonProperty("subdomain")
    private String subdomain;

    @JsonCreator
    public SourceBunnyInc(
            @JsonProperty("apikey") String apikey,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("subdomain") String subdomain) {
        Utils.checkNotNull(apikey, "apikey");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(subdomain, "subdomain");
        this.apikey = apikey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.subdomain = subdomain;
    }
    
    public SourceBunnyInc(
            String apikey,
            String subdomain) {
        this(apikey, Optional.empty(), subdomain);
    }

    @JsonIgnore
    public String apikey() {
        return apikey;
    }

    @JsonIgnore
    public BunnyInc sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * The subdomain specific to your Bunny account or service.
     */
    @JsonIgnore
    public String subdomain() {
        return subdomain;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceBunnyInc withApikey(String apikey) {
        Utils.checkNotNull(apikey, "apikey");
        this.apikey = apikey;
        return this;
    }

    public SourceBunnyInc withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    public SourceBunnyInc withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The subdomain specific to your Bunny account or service.
     */
    public SourceBunnyInc withSubdomain(String subdomain) {
        Utils.checkNotNull(subdomain, "subdomain");
        this.subdomain = subdomain;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceBunnyInc other = (SourceBunnyInc) o;
        return 
            Objects.deepEquals(this.apikey, other.apikey) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.subdomain, other.subdomain);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apikey,
            sourceType,
            startDate,
            subdomain);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceBunnyInc.class,
                "apikey", apikey,
                "sourceType", sourceType,
                "startDate", startDate,
                "subdomain", subdomain);
    }
    
    public final static class Builder {
 
        private String apikey;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
 
        private String subdomain;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apikey(String apikey) {
            Utils.checkNotNull(apikey, "apikey");
            this.apikey = apikey;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The subdomain specific to your Bunny account or service.
         */
        public Builder subdomain(String subdomain) {
            Utils.checkNotNull(subdomain, "subdomain");
            this.subdomain = subdomain;
            return this;
        }
        
        public SourceBunnyInc build() {
            return new SourceBunnyInc(
                apikey,
                startDate,
                subdomain);
        }

        private static final LazySingletonValue<BunnyInc> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"bunny-inc\"",
                        new TypeReference<BunnyInc>() {});
    }
}

