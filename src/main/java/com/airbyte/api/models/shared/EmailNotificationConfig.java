/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * EmailNotificationConfig
 * 
 * <p>Configures an email notification.
 */
public class EmailNotificationConfig {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    @JsonCreator
    public EmailNotificationConfig(
            @JsonProperty("enabled") Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
    }
    
    public EmailNotificationConfig() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public EmailNotificationConfig withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    public EmailNotificationConfig withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmailNotificationConfig other = (EmailNotificationConfig) o;
        return 
            Objects.deepEquals(this.enabled, other.enabled);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            enabled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmailNotificationConfig.class,
                "enabled", enabled);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> enabled = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }
        
        public EmailNotificationConfig build() {
            return new EmailNotificationConfig(
                enabled);
        }
    }
}
