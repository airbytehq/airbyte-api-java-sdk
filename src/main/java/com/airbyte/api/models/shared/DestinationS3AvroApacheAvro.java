/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class DestinationS3AvroApacheAvro {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * The compression algorithm used to compress data. Default to no compression.
     */
    @JsonProperty("compression_codec")
    private DestinationS3CompressionCodec compressionCodec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format_type")
    private Optional<? extends DestinationS3SchemasFormatFormatType> formatType;

    @JsonCreator
    public DestinationS3AvroApacheAvro(
            @JsonProperty("compression_codec") DestinationS3CompressionCodec compressionCodec,
            @JsonProperty("format_type") Optional<? extends DestinationS3SchemasFormatFormatType> formatType) {
        Utils.checkNotNull(compressionCodec, "compressionCodec");
        Utils.checkNotNull(formatType, "formatType");
        this.additionalProperties = new HashMap<>();
        this.compressionCodec = compressionCodec;
        this.formatType = formatType;
    }
    
    public DestinationS3AvroApacheAvro(
            DestinationS3CompressionCodec compressionCodec) {
        this(compressionCodec, Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * The compression algorithm used to compress data. Default to no compression.
     */
    @JsonIgnore
    public DestinationS3CompressionCodec compressionCodec() {
        return compressionCodec;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationS3SchemasFormatFormatType> formatType() {
        return (Optional<DestinationS3SchemasFormatFormatType>) formatType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public DestinationS3AvroApacheAvro withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public DestinationS3AvroApacheAvro withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * The compression algorithm used to compress data. Default to no compression.
     */
    public DestinationS3AvroApacheAvro withCompressionCodec(DestinationS3CompressionCodec compressionCodec) {
        Utils.checkNotNull(compressionCodec, "compressionCodec");
        this.compressionCodec = compressionCodec;
        return this;
    }

    public DestinationS3AvroApacheAvro withFormatType(DestinationS3SchemasFormatFormatType formatType) {
        Utils.checkNotNull(formatType, "formatType");
        this.formatType = Optional.ofNullable(formatType);
        return this;
    }

    public DestinationS3AvroApacheAvro withFormatType(Optional<? extends DestinationS3SchemasFormatFormatType> formatType) {
        Utils.checkNotNull(formatType, "formatType");
        this.formatType = formatType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationS3AvroApacheAvro other = (DestinationS3AvroApacheAvro) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.compressionCodec, other.compressionCodec) &&
            Objects.deepEquals(this.formatType, other.formatType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            compressionCodec,
            formatType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationS3AvroApacheAvro.class,
                "additionalProperties", additionalProperties,
                "compressionCodec", compressionCodec,
                "formatType", formatType);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private DestinationS3CompressionCodec compressionCodec;
 
        private Optional<? extends DestinationS3SchemasFormatFormatType> formatType;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * The compression algorithm used to compress data. Default to no compression.
         */
        public Builder compressionCodec(DestinationS3CompressionCodec compressionCodec) {
            Utils.checkNotNull(compressionCodec, "compressionCodec");
            this.compressionCodec = compressionCodec;
            return this;
        }

        public Builder formatType(DestinationS3SchemasFormatFormatType formatType) {
            Utils.checkNotNull(formatType, "formatType");
            this.formatType = Optional.ofNullable(formatType);
            return this;
        }

        public Builder formatType(Optional<? extends DestinationS3SchemasFormatFormatType> formatType) {
            Utils.checkNotNull(formatType, "formatType");
            this.formatType = formatType;
            return this;
        }
        
        public DestinationS3AvroApacheAvro build() {
            if (formatType == null) {
                formatType = _SINGLETON_VALUE_FormatType.value();
            }
            return new DestinationS3AvroApacheAvro(
                compressionCodec,
                formatType)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends DestinationS3SchemasFormatFormatType>> _SINGLETON_VALUE_FormatType =
                new LazySingletonValue<>(
                        "format_type",
                        "\"Avro\"",
                        new TypeReference<Optional<? extends DestinationS3SchemasFormatFormatType>>() {});
    }
}
