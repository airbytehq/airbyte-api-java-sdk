/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ConfiguredStreamMapper {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The values required to configure the mapper.
     */
    @JsonProperty("mapperConfiguration")
    private MapperConfiguration mapperConfiguration;

    @JsonProperty("type")
    private StreamMapperType type;

    @JsonCreator
    public ConfiguredStreamMapper(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mapperConfiguration") MapperConfiguration mapperConfiguration,
            @JsonProperty("type") StreamMapperType type) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mapperConfiguration, "mapperConfiguration");
        Utils.checkNotNull(type, "type");
        this.id = id;
        this.mapperConfiguration = mapperConfiguration;
        this.type = type;
    }
    
    public ConfiguredStreamMapper(
            MapperConfiguration mapperConfiguration,
            StreamMapperType type) {
        this(Optional.empty(), mapperConfiguration, type);
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The values required to configure the mapper.
     */
    @JsonIgnore
    public MapperConfiguration mapperConfiguration() {
        return mapperConfiguration;
    }

    @JsonIgnore
    public StreamMapperType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ConfiguredStreamMapper withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ConfiguredStreamMapper withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The values required to configure the mapper.
     */
    public ConfiguredStreamMapper withMapperConfiguration(MapperConfiguration mapperConfiguration) {
        Utils.checkNotNull(mapperConfiguration, "mapperConfiguration");
        this.mapperConfiguration = mapperConfiguration;
        return this;
    }

    public ConfiguredStreamMapper withType(StreamMapperType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfiguredStreamMapper other = (ConfiguredStreamMapper) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mapperConfiguration, other.mapperConfiguration) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            mapperConfiguration,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConfiguredStreamMapper.class,
                "id", id,
                "mapperConfiguration", mapperConfiguration,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private MapperConfiguration mapperConfiguration;
 
        private StreamMapperType type;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The values required to configure the mapper.
         */
        public Builder mapperConfiguration(MapperConfiguration mapperConfiguration) {
            Utils.checkNotNull(mapperConfiguration, "mapperConfiguration");
            this.mapperConfiguration = mapperConfiguration;
            return this;
        }

        public Builder type(StreamMapperType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public ConfiguredStreamMapper build() {
            return new ConfiguredStreamMapper(
                id,
                mapperConfiguration,
                type);
        }
    }
}
