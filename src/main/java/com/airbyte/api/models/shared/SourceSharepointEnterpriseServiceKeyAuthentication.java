/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceSharepointEnterpriseServiceKeyAuthentication
 * 
 * <p>ServiceCredentials class for service key authentication.
 * This class is structured similarly to OAuthCredentials but for a different authentication method.
 */
public class SourceSharepointEnterpriseServiceKeyAuthentication {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private Optional<? extends SourceSharepointEnterpriseSchemasAuthType> authType;

    /**
     * Client ID of your Microsoft developer application
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * Client Secret of your Microsoft developer application
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Tenant ID of the Microsoft SharePoint user
     */
    @JsonProperty("tenant_id")
    private String tenantId;

    /**
     * Special characters such as a period, comma, space, and the at sign (@) are converted to underscores (_). More details: https://learn.microsoft.com/en-us/sharepoint/list-onedrive-urls
     */
    @JsonProperty("user_principal_name")
    private String userPrincipalName;

    @JsonCreator
    public SourceSharepointEnterpriseServiceKeyAuthentication(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("tenant_id") String tenantId,
            @JsonProperty("user_principal_name") String userPrincipalName) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(tenantId, "tenantId");
        Utils.checkNotNull(userPrincipalName, "userPrincipalName");
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.tenantId = tenantId;
        this.userPrincipalName = userPrincipalName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSharepointEnterpriseSchemasAuthType> authType() {
        return (Optional<SourceSharepointEnterpriseSchemasAuthType>) authType;
    }

    /**
     * Client ID of your Microsoft developer application
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * Client Secret of your Microsoft developer application
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Tenant ID of the Microsoft SharePoint user
     */
    @JsonIgnore
    public String tenantId() {
        return tenantId;
    }

    /**
     * Special characters such as a period, comma, space, and the at sign (@) are converted to underscores (_). More details: https://learn.microsoft.com/en-us/sharepoint/list-onedrive-urls
     */
    @JsonIgnore
    public String userPrincipalName() {
        return userPrincipalName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Client ID of your Microsoft developer application
     */
    public SourceSharepointEnterpriseServiceKeyAuthentication withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Client Secret of your Microsoft developer application
     */
    public SourceSharepointEnterpriseServiceKeyAuthentication withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Tenant ID of the Microsoft SharePoint user
     */
    public SourceSharepointEnterpriseServiceKeyAuthentication withTenantId(String tenantId) {
        Utils.checkNotNull(tenantId, "tenantId");
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Special characters such as a period, comma, space, and the at sign (@) are converted to underscores (_). More details: https://learn.microsoft.com/en-us/sharepoint/list-onedrive-urls
     */
    public SourceSharepointEnterpriseServiceKeyAuthentication withUserPrincipalName(String userPrincipalName) {
        Utils.checkNotNull(userPrincipalName, "userPrincipalName");
        this.userPrincipalName = userPrincipalName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSharepointEnterpriseServiceKeyAuthentication other = (SourceSharepointEnterpriseServiceKeyAuthentication) o;
        return 
            Objects.deepEquals(this.authType, other.authType) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.tenantId, other.tenantId) &&
            Objects.deepEquals(this.userPrincipalName, other.userPrincipalName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authType,
            clientId,
            clientSecret,
            tenantId,
            userPrincipalName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSharepointEnterpriseServiceKeyAuthentication.class,
                "authType", authType,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "tenantId", tenantId,
                "userPrincipalName", userPrincipalName);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private String tenantId;
 
        private String userPrincipalName;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Client ID of your Microsoft developer application
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Client Secret of your Microsoft developer application
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Tenant ID of the Microsoft SharePoint user
         */
        public Builder tenantId(String tenantId) {
            Utils.checkNotNull(tenantId, "tenantId");
            this.tenantId = tenantId;
            return this;
        }

        /**
         * Special characters such as a period, comma, space, and the at sign (@) are converted to underscores (_). More details: https://learn.microsoft.com/en-us/sharepoint/list-onedrive-urls
         */
        public Builder userPrincipalName(String userPrincipalName) {
            Utils.checkNotNull(userPrincipalName, "userPrincipalName");
            this.userPrincipalName = userPrincipalName;
            return this;
        }
        
        public SourceSharepointEnterpriseServiceKeyAuthentication build() {
            return new SourceSharepointEnterpriseServiceKeyAuthentication(
                clientId,
                clientSecret,
                tenantId,
                userPrincipalName);
        }

        private static final LazySingletonValue<Optional<? extends SourceSharepointEnterpriseSchemasAuthType>> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"Service\"",
                        new TypeReference<Optional<? extends SourceSharepointEnterpriseSchemasAuthType>>() {});
    }
}
