/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceSapHanaEnterpriseNativeNetworkEncryptionNNE
 * 
 * <p>The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports.
 */
public class SourceSapHanaEnterpriseNativeNetworkEncryptionNNE {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * This parameter defines what encryption algorithm is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption_algorithm")
    private Optional<? extends SourceSapHanaEnterpriseEncryptionAlgorithm> encryptionAlgorithm;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption_method")
    private Optional<? extends SourceSapHanaEnterpriseSchemasEncryptionMethod> encryptionMethod;

    @JsonCreator
    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE(
            @JsonProperty("encryption_algorithm") Optional<? extends SourceSapHanaEnterpriseEncryptionAlgorithm> encryptionAlgorithm,
            @JsonProperty("encryption_method") Optional<? extends SourceSapHanaEnterpriseSchemasEncryptionMethod> encryptionMethod) {
        Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
        Utils.checkNotNull(encryptionMethod, "encryptionMethod");
        this.additionalProperties = new HashMap<>();
        this.encryptionAlgorithm = encryptionAlgorithm;
        this.encryptionMethod = encryptionMethod;
    }
    
    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * This parameter defines what encryption algorithm is used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSapHanaEnterpriseEncryptionAlgorithm> encryptionAlgorithm() {
        return (Optional<SourceSapHanaEnterpriseEncryptionAlgorithm>) encryptionAlgorithm;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSapHanaEnterpriseSchemasEncryptionMethod> encryptionMethod() {
        return (Optional<SourceSapHanaEnterpriseSchemasEncryptionMethod>) encryptionMethod;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * This parameter defines what encryption algorithm is used.
     */
    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE withEncryptionAlgorithm(SourceSapHanaEnterpriseEncryptionAlgorithm encryptionAlgorithm) {
        Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
        this.encryptionAlgorithm = Optional.ofNullable(encryptionAlgorithm);
        return this;
    }

    /**
     * This parameter defines what encryption algorithm is used.
     */
    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE withEncryptionAlgorithm(Optional<? extends SourceSapHanaEnterpriseEncryptionAlgorithm> encryptionAlgorithm) {
        Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
        this.encryptionAlgorithm = encryptionAlgorithm;
        return this;
    }

    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE withEncryptionMethod(SourceSapHanaEnterpriseSchemasEncryptionMethod encryptionMethod) {
        Utils.checkNotNull(encryptionMethod, "encryptionMethod");
        this.encryptionMethod = Optional.ofNullable(encryptionMethod);
        return this;
    }

    public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE withEncryptionMethod(Optional<? extends SourceSapHanaEnterpriseSchemasEncryptionMethod> encryptionMethod) {
        Utils.checkNotNull(encryptionMethod, "encryptionMethod");
        this.encryptionMethod = encryptionMethod;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSapHanaEnterpriseNativeNetworkEncryptionNNE other = (SourceSapHanaEnterpriseNativeNetworkEncryptionNNE) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.encryptionAlgorithm, other.encryptionAlgorithm) &&
            Objects.deepEquals(this.encryptionMethod, other.encryptionMethod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            encryptionAlgorithm,
            encryptionMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSapHanaEnterpriseNativeNetworkEncryptionNNE.class,
                "additionalProperties", additionalProperties,
                "encryptionAlgorithm", encryptionAlgorithm,
                "encryptionMethod", encryptionMethod);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends SourceSapHanaEnterpriseEncryptionAlgorithm> encryptionAlgorithm;
 
        private Optional<? extends SourceSapHanaEnterpriseSchemasEncryptionMethod> encryptionMethod;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * This parameter defines what encryption algorithm is used.
         */
        public Builder encryptionAlgorithm(SourceSapHanaEnterpriseEncryptionAlgorithm encryptionAlgorithm) {
            Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
            this.encryptionAlgorithm = Optional.ofNullable(encryptionAlgorithm);
            return this;
        }

        /**
         * This parameter defines what encryption algorithm is used.
         */
        public Builder encryptionAlgorithm(Optional<? extends SourceSapHanaEnterpriseEncryptionAlgorithm> encryptionAlgorithm) {
            Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
            this.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        public Builder encryptionMethod(SourceSapHanaEnterpriseSchemasEncryptionMethod encryptionMethod) {
            Utils.checkNotNull(encryptionMethod, "encryptionMethod");
            this.encryptionMethod = Optional.ofNullable(encryptionMethod);
            return this;
        }

        public Builder encryptionMethod(Optional<? extends SourceSapHanaEnterpriseSchemasEncryptionMethod> encryptionMethod) {
            Utils.checkNotNull(encryptionMethod, "encryptionMethod");
            this.encryptionMethod = encryptionMethod;
            return this;
        }
        
        public SourceSapHanaEnterpriseNativeNetworkEncryptionNNE build() {
            if (encryptionAlgorithm == null) {
                encryptionAlgorithm = _SINGLETON_VALUE_EncryptionAlgorithm.value();
            }
            if (encryptionMethod == null) {
                encryptionMethod = _SINGLETON_VALUE_EncryptionMethod.value();
            }
            return new SourceSapHanaEnterpriseNativeNetworkEncryptionNNE(
                encryptionAlgorithm,
                encryptionMethod)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceSapHanaEnterpriseEncryptionAlgorithm>> _SINGLETON_VALUE_EncryptionAlgorithm =
                new LazySingletonValue<>(
                        "encryption_algorithm",
                        "\"AES256\"",
                        new TypeReference<Optional<? extends SourceSapHanaEnterpriseEncryptionAlgorithm>>() {});

        private static final LazySingletonValue<Optional<? extends SourceSapHanaEnterpriseSchemasEncryptionMethod>> _SINGLETON_VALUE_EncryptionMethod =
                new LazySingletonValue<>(
                        "encryption_method",
                        "\"client_nne\"",
                        new TypeReference<Optional<? extends SourceSapHanaEnterpriseSchemasEncryptionMethod>>() {});
    }
}
