/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DestinationBigquery {

    /**
     * Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more &lt;a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html"&gt;here&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("big_query_client_buffer_size_mb")
    private Optional<? extends Long> bigQueryClientBufferSizeMb;

    /**
     * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key"&gt;docs&lt;/a&gt; if you need help generating this key. Default credentials will be used if this field is left empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials_json")
    private Optional<? extends String> credentialsJson;

    /**
     * The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more &lt;a href="https://cloud.google.com/bigquery/docs/datasets#create-dataset"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("dataset_id")
    private String datasetId;

    /**
     * The location of the dataset. Warning: Changes made after creation will not be applied. Read more &lt;a href="https://cloud.google.com/bigquery/docs/locations"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("dataset_location")
    private DatasetLocation datasetLocation;

    @JsonProperty("destinationType")
    private Bigquery destinationType;

    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_type_dedupe")
    private Optional<? extends Boolean> disableTypeDedupe;

    /**
     * The way data will be uploaded to BigQuery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loading_method")
    private Optional<? extends LoadingMethod> loadingMethod;

    /**
     * The GCP project ID for the project containing the target BigQuery dataset. Read more &lt;a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("project_id")
    private String projectId;

    /**
     * The dataset to write raw tables into (default: airbyte_internal)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_data_dataset")
    private Optional<? extends String> rawDataDataset;

    /**
     * Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#queries"&gt;here&lt;/a&gt;. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#batch"&gt;here&lt;/a&gt;. The default "interactive" value is used if not set explicitly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transformation_priority")
    private Optional<? extends TransformationQueryRunType> transformationPriority;

    public DestinationBigquery(
            @JsonProperty("big_query_client_buffer_size_mb") Optional<? extends Long> bigQueryClientBufferSizeMb,
            @JsonProperty("credentials_json") Optional<? extends String> credentialsJson,
            @JsonProperty("dataset_id") String datasetId,
            @JsonProperty("dataset_location") DatasetLocation datasetLocation,
            @JsonProperty("disable_type_dedupe") Optional<? extends Boolean> disableTypeDedupe,
            @JsonProperty("loading_method") Optional<? extends LoadingMethod> loadingMethod,
            @JsonProperty("project_id") String projectId,
            @JsonProperty("raw_data_dataset") Optional<? extends String> rawDataDataset,
            @JsonProperty("transformation_priority") Optional<? extends TransformationQueryRunType> transformationPriority) {
        Utils.checkNotNull(bigQueryClientBufferSizeMb, "bigQueryClientBufferSizeMb");
        Utils.checkNotNull(credentialsJson, "credentialsJson");
        Utils.checkNotNull(datasetId, "datasetId");
        Utils.checkNotNull(datasetLocation, "datasetLocation");
        Utils.checkNotNull(disableTypeDedupe, "disableTypeDedupe");
        Utils.checkNotNull(loadingMethod, "loadingMethod");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(rawDataDataset, "rawDataDataset");
        Utils.checkNotNull(transformationPriority, "transformationPriority");
        this.bigQueryClientBufferSizeMb = bigQueryClientBufferSizeMb;
        this.credentialsJson = credentialsJson;
        this.datasetId = datasetId;
        this.datasetLocation = datasetLocation;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.disableTypeDedupe = disableTypeDedupe;
        this.loadingMethod = loadingMethod;
        this.projectId = projectId;
        this.rawDataDataset = rawDataDataset;
        this.transformationPriority = transformationPriority;
    }

    /**
     * Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more &lt;a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html"&gt;here&lt;/a&gt;.
     */
    public Optional<? extends Long> bigQueryClientBufferSizeMb() {
        return bigQueryClientBufferSizeMb;
    }

    /**
     * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key"&gt;docs&lt;/a&gt; if you need help generating this key. Default credentials will be used if this field is left empty.
     */
    public Optional<? extends String> credentialsJson() {
        return credentialsJson;
    }

    /**
     * The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more &lt;a href="https://cloud.google.com/bigquery/docs/datasets#create-dataset"&gt;here&lt;/a&gt;.
     */
    public String datasetId() {
        return datasetId;
    }

    /**
     * The location of the dataset. Warning: Changes made after creation will not be applied. Read more &lt;a href="https://cloud.google.com/bigquery/docs/locations"&gt;here&lt;/a&gt;.
     */
    public DatasetLocation datasetLocation() {
        return datasetLocation;
    }

    public Bigquery destinationType() {
        return destinationType;
    }

    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions
     */
    public Optional<? extends Boolean> disableTypeDedupe() {
        return disableTypeDedupe;
    }

    /**
     * The way data will be uploaded to BigQuery.
     */
    public Optional<? extends LoadingMethod> loadingMethod() {
        return loadingMethod;
    }

    /**
     * The GCP project ID for the project containing the target BigQuery dataset. Read more &lt;a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects"&gt;here&lt;/a&gt;.
     */
    public String projectId() {
        return projectId;
    }

    /**
     * The dataset to write raw tables into (default: airbyte_internal)
     */
    public Optional<? extends String> rawDataDataset() {
        return rawDataDataset;
    }

    /**
     * Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#queries"&gt;here&lt;/a&gt;. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#batch"&gt;here&lt;/a&gt;. The default "interactive" value is used if not set explicitly.
     */
    public Optional<? extends TransformationQueryRunType> transformationPriority() {
        return transformationPriority;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more &lt;a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html"&gt;here&lt;/a&gt;.
     */
    public DestinationBigquery withBigQueryClientBufferSizeMb(long bigQueryClientBufferSizeMb) {
        Utils.checkNotNull(bigQueryClientBufferSizeMb, "bigQueryClientBufferSizeMb");
        this.bigQueryClientBufferSizeMb = Optional.ofNullable(bigQueryClientBufferSizeMb);
        return this;
    }

    /**
     * Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more &lt;a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html"&gt;here&lt;/a&gt;.
     */
    public DestinationBigquery withBigQueryClientBufferSizeMb(Optional<? extends Long> bigQueryClientBufferSizeMb) {
        Utils.checkNotNull(bigQueryClientBufferSizeMb, "bigQueryClientBufferSizeMb");
        this.bigQueryClientBufferSizeMb = bigQueryClientBufferSizeMb;
        return this;
    }

    /**
     * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key"&gt;docs&lt;/a&gt; if you need help generating this key. Default credentials will be used if this field is left empty.
     */
    public DestinationBigquery withCredentialsJson(String credentialsJson) {
        Utils.checkNotNull(credentialsJson, "credentialsJson");
        this.credentialsJson = Optional.ofNullable(credentialsJson);
        return this;
    }

    /**
     * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key"&gt;docs&lt;/a&gt; if you need help generating this key. Default credentials will be used if this field is left empty.
     */
    public DestinationBigquery withCredentialsJson(Optional<? extends String> credentialsJson) {
        Utils.checkNotNull(credentialsJson, "credentialsJson");
        this.credentialsJson = credentialsJson;
        return this;
    }

    /**
     * The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more &lt;a href="https://cloud.google.com/bigquery/docs/datasets#create-dataset"&gt;here&lt;/a&gt;.
     */
    public DestinationBigquery withDatasetId(String datasetId) {
        Utils.checkNotNull(datasetId, "datasetId");
        this.datasetId = datasetId;
        return this;
    }

    /**
     * The location of the dataset. Warning: Changes made after creation will not be applied. Read more &lt;a href="https://cloud.google.com/bigquery/docs/locations"&gt;here&lt;/a&gt;.
     */
    public DestinationBigquery withDatasetLocation(DatasetLocation datasetLocation) {
        Utils.checkNotNull(datasetLocation, "datasetLocation");
        this.datasetLocation = datasetLocation;
        return this;
    }

    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions
     */
    public DestinationBigquery withDisableTypeDedupe(boolean disableTypeDedupe) {
        Utils.checkNotNull(disableTypeDedupe, "disableTypeDedupe");
        this.disableTypeDedupe = Optional.ofNullable(disableTypeDedupe);
        return this;
    }

    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions
     */
    public DestinationBigquery withDisableTypeDedupe(Optional<? extends Boolean> disableTypeDedupe) {
        Utils.checkNotNull(disableTypeDedupe, "disableTypeDedupe");
        this.disableTypeDedupe = disableTypeDedupe;
        return this;
    }

    /**
     * The way data will be uploaded to BigQuery.
     */
    public DestinationBigquery withLoadingMethod(LoadingMethod loadingMethod) {
        Utils.checkNotNull(loadingMethod, "loadingMethod");
        this.loadingMethod = Optional.ofNullable(loadingMethod);
        return this;
    }

    /**
     * The way data will be uploaded to BigQuery.
     */
    public DestinationBigquery withLoadingMethod(Optional<? extends LoadingMethod> loadingMethod) {
        Utils.checkNotNull(loadingMethod, "loadingMethod");
        this.loadingMethod = loadingMethod;
        return this;
    }

    /**
     * The GCP project ID for the project containing the target BigQuery dataset. Read more &lt;a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects"&gt;here&lt;/a&gt;.
     */
    public DestinationBigquery withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * The dataset to write raw tables into (default: airbyte_internal)
     */
    public DestinationBigquery withRawDataDataset(String rawDataDataset) {
        Utils.checkNotNull(rawDataDataset, "rawDataDataset");
        this.rawDataDataset = Optional.ofNullable(rawDataDataset);
        return this;
    }

    /**
     * The dataset to write raw tables into (default: airbyte_internal)
     */
    public DestinationBigquery withRawDataDataset(Optional<? extends String> rawDataDataset) {
        Utils.checkNotNull(rawDataDataset, "rawDataDataset");
        this.rawDataDataset = rawDataDataset;
        return this;
    }

    /**
     * Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#queries"&gt;here&lt;/a&gt;. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#batch"&gt;here&lt;/a&gt;. The default "interactive" value is used if not set explicitly.
     */
    public DestinationBigquery withTransformationPriority(TransformationQueryRunType transformationPriority) {
        Utils.checkNotNull(transformationPriority, "transformationPriority");
        this.transformationPriority = Optional.ofNullable(transformationPriority);
        return this;
    }

    /**
     * Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#queries"&gt;here&lt;/a&gt;. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#batch"&gt;here&lt;/a&gt;. The default "interactive" value is used if not set explicitly.
     */
    public DestinationBigquery withTransformationPriority(Optional<? extends TransformationQueryRunType> transformationPriority) {
        Utils.checkNotNull(transformationPriority, "transformationPriority");
        this.transformationPriority = transformationPriority;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationBigquery other = (DestinationBigquery) o;
        return 
            java.util.Objects.deepEquals(this.bigQueryClientBufferSizeMb, other.bigQueryClientBufferSizeMb) &&
            java.util.Objects.deepEquals(this.credentialsJson, other.credentialsJson) &&
            java.util.Objects.deepEquals(this.datasetId, other.datasetId) &&
            java.util.Objects.deepEquals(this.datasetLocation, other.datasetLocation) &&
            java.util.Objects.deepEquals(this.destinationType, other.destinationType) &&
            java.util.Objects.deepEquals(this.disableTypeDedupe, other.disableTypeDedupe) &&
            java.util.Objects.deepEquals(this.loadingMethod, other.loadingMethod) &&
            java.util.Objects.deepEquals(this.projectId, other.projectId) &&
            java.util.Objects.deepEquals(this.rawDataDataset, other.rawDataDataset) &&
            java.util.Objects.deepEquals(this.transformationPriority, other.transformationPriority);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bigQueryClientBufferSizeMb,
            credentialsJson,
            datasetId,
            datasetLocation,
            destinationType,
            disableTypeDedupe,
            loadingMethod,
            projectId,
            rawDataDataset,
            transformationPriority);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationBigquery.class,
                "bigQueryClientBufferSizeMb", bigQueryClientBufferSizeMb,
                "credentialsJson", credentialsJson,
                "datasetId", datasetId,
                "datasetLocation", datasetLocation,
                "destinationType", destinationType,
                "disableTypeDedupe", disableTypeDedupe,
                "loadingMethod", loadingMethod,
                "projectId", projectId,
                "rawDataDataset", rawDataDataset,
                "transformationPriority", transformationPriority);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> bigQueryClientBufferSizeMb;
 
        private Optional<? extends String> credentialsJson = Optional.empty();
 
        private String datasetId;
 
        private DatasetLocation datasetLocation;
 
        private Optional<? extends Boolean> disableTypeDedupe;
 
        private Optional<? extends LoadingMethod> loadingMethod = Optional.empty();
 
        private String projectId;
 
        private Optional<? extends String> rawDataDataset = Optional.empty();
 
        private Optional<? extends TransformationQueryRunType> transformationPriority;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more &lt;a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html"&gt;here&lt;/a&gt;.
         */
        public Builder bigQueryClientBufferSizeMb(long bigQueryClientBufferSizeMb) {
            Utils.checkNotNull(bigQueryClientBufferSizeMb, "bigQueryClientBufferSizeMb");
            this.bigQueryClientBufferSizeMb = Optional.ofNullable(bigQueryClientBufferSizeMb);
            return this;
        }

        /**
         * Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more &lt;a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html"&gt;here&lt;/a&gt;.
         */
        public Builder bigQueryClientBufferSizeMb(Optional<? extends Long> bigQueryClientBufferSizeMb) {
            Utils.checkNotNull(bigQueryClientBufferSizeMb, "bigQueryClientBufferSizeMb");
            this.bigQueryClientBufferSizeMb = bigQueryClientBufferSizeMb;
            return this;
        }

        /**
         * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key"&gt;docs&lt;/a&gt; if you need help generating this key. Default credentials will be used if this field is left empty.
         */
        public Builder credentialsJson(String credentialsJson) {
            Utils.checkNotNull(credentialsJson, "credentialsJson");
            this.credentialsJson = Optional.ofNullable(credentialsJson);
            return this;
        }

        /**
         * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key"&gt;docs&lt;/a&gt; if you need help generating this key. Default credentials will be used if this field is left empty.
         */
        public Builder credentialsJson(Optional<? extends String> credentialsJson) {
            Utils.checkNotNull(credentialsJson, "credentialsJson");
            this.credentialsJson = credentialsJson;
            return this;
        }

        /**
         * The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more &lt;a href="https://cloud.google.com/bigquery/docs/datasets#create-dataset"&gt;here&lt;/a&gt;.
         */
        public Builder datasetId(String datasetId) {
            Utils.checkNotNull(datasetId, "datasetId");
            this.datasetId = datasetId;
            return this;
        }

        /**
         * The location of the dataset. Warning: Changes made after creation will not be applied. Read more &lt;a href="https://cloud.google.com/bigquery/docs/locations"&gt;here&lt;/a&gt;.
         */
        public Builder datasetLocation(DatasetLocation datasetLocation) {
            Utils.checkNotNull(datasetLocation, "datasetLocation");
            this.datasetLocation = datasetLocation;
            return this;
        }

        /**
         * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions
         */
        public Builder disableTypeDedupe(boolean disableTypeDedupe) {
            Utils.checkNotNull(disableTypeDedupe, "disableTypeDedupe");
            this.disableTypeDedupe = Optional.ofNullable(disableTypeDedupe);
            return this;
        }

        /**
         * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions
         */
        public Builder disableTypeDedupe(Optional<? extends Boolean> disableTypeDedupe) {
            Utils.checkNotNull(disableTypeDedupe, "disableTypeDedupe");
            this.disableTypeDedupe = disableTypeDedupe;
            return this;
        }

        /**
         * The way data will be uploaded to BigQuery.
         */
        public Builder loadingMethod(LoadingMethod loadingMethod) {
            Utils.checkNotNull(loadingMethod, "loadingMethod");
            this.loadingMethod = Optional.ofNullable(loadingMethod);
            return this;
        }

        /**
         * The way data will be uploaded to BigQuery.
         */
        public Builder loadingMethod(Optional<? extends LoadingMethod> loadingMethod) {
            Utils.checkNotNull(loadingMethod, "loadingMethod");
            this.loadingMethod = loadingMethod;
            return this;
        }

        /**
         * The GCP project ID for the project containing the target BigQuery dataset. Read more &lt;a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects"&gt;here&lt;/a&gt;.
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }

        /**
         * The dataset to write raw tables into (default: airbyte_internal)
         */
        public Builder rawDataDataset(String rawDataDataset) {
            Utils.checkNotNull(rawDataDataset, "rawDataDataset");
            this.rawDataDataset = Optional.ofNullable(rawDataDataset);
            return this;
        }

        /**
         * The dataset to write raw tables into (default: airbyte_internal)
         */
        public Builder rawDataDataset(Optional<? extends String> rawDataDataset) {
            Utils.checkNotNull(rawDataDataset, "rawDataDataset");
            this.rawDataDataset = rawDataDataset;
            return this;
        }

        /**
         * Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#queries"&gt;here&lt;/a&gt;. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#batch"&gt;here&lt;/a&gt;. The default "interactive" value is used if not set explicitly.
         */
        public Builder transformationPriority(TransformationQueryRunType transformationPriority) {
            Utils.checkNotNull(transformationPriority, "transformationPriority");
            this.transformationPriority = Optional.ofNullable(transformationPriority);
            return this;
        }

        /**
         * Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#queries"&gt;here&lt;/a&gt;. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries &lt;a href="https://cloud.google.com/bigquery/docs/running-queries#batch"&gt;here&lt;/a&gt;. The default "interactive" value is used if not set explicitly.
         */
        public Builder transformationPriority(Optional<? extends TransformationQueryRunType> transformationPriority) {
            Utils.checkNotNull(transformationPriority, "transformationPriority");
            this.transformationPriority = transformationPriority;
            return this;
        }
        
        public DestinationBigquery build() {
            if (bigQueryClientBufferSizeMb == null) {
                bigQueryClientBufferSizeMb = _SINGLETON_VALUE_BigQueryClientBufferSizeMb.value();
            }
            if (disableTypeDedupe == null) {
                disableTypeDedupe = _SINGLETON_VALUE_DisableTypeDedupe.value();
            }
            if (transformationPriority == null) {
                transformationPriority = _SINGLETON_VALUE_TransformationPriority.value();
            }
            return new DestinationBigquery(
                bigQueryClientBufferSizeMb,
                credentialsJson,
                datasetId,
                datasetLocation,
                disableTypeDedupe,
                loadingMethod,
                projectId,
                rawDataDataset,
                transformationPriority);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_BigQueryClientBufferSizeMb =
                new LazySingletonValue<>(
                        "big_query_client_buffer_size_mb",
                        "15",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Bigquery> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"bigquery\"",
                        new TypeReference<Bigquery>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_DisableTypeDedupe =
                new LazySingletonValue<>(
                        "disable_type_dedupe",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends TransformationQueryRunType>> _SINGLETON_VALUE_TransformationPriority =
                new LazySingletonValue<>(
                        "transformation_priority",
                        "\"interactive\"",
                        new TypeReference<Optional<? extends TransformationQueryRunType>>() {});
    }
}

