/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourcePagerduty {

    /**
     * Fetch pipelines updated in the last number of days
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cutoff_days")
    private Optional<Long> cutoffDays;

    /**
     * A default severity category if not present
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_severity")
    private Optional<String> defaultSeverity;

    /**
     * List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_services")
    private Optional<? extends List<String>> excludeServices;

    /**
     * If true, will return a subset of log entries that show only the most important changes to the incident.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incident_log_entries_overview")
    private Optional<Boolean> incidentLogEntriesOverview;

    /**
     * Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_retries")
    private Optional<Long> maxRetries;

    /**
     * page size to use when querying PagerDuty API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    private Optional<Long> pageSize;

    /**
     * List of PagerDuty service additional details to include.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_details")
    private Optional<? extends List<ServiceDetails>> serviceDetails;

    @JsonProperty("sourceType")
    private Pagerduty sourceType;

    /**
     * API key for PagerDuty API authentication
     */
    @JsonProperty("token")
    private String token;

    @JsonCreator
    public SourcePagerduty(
            @JsonProperty("cutoff_days") Optional<Long> cutoffDays,
            @JsonProperty("default_severity") Optional<String> defaultSeverity,
            @JsonProperty("exclude_services") Optional<? extends List<String>> excludeServices,
            @JsonProperty("incident_log_entries_overview") Optional<Boolean> incidentLogEntriesOverview,
            @JsonProperty("max_retries") Optional<Long> maxRetries,
            @JsonProperty("page_size") Optional<Long> pageSize,
            @JsonProperty("service_details") Optional<? extends List<ServiceDetails>> serviceDetails,
            @JsonProperty("token") String token) {
        Utils.checkNotNull(cutoffDays, "cutoffDays");
        Utils.checkNotNull(defaultSeverity, "defaultSeverity");
        Utils.checkNotNull(excludeServices, "excludeServices");
        Utils.checkNotNull(incidentLogEntriesOverview, "incidentLogEntriesOverview");
        Utils.checkNotNull(maxRetries, "maxRetries");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(serviceDetails, "serviceDetails");
        Utils.checkNotNull(token, "token");
        this.cutoffDays = cutoffDays;
        this.defaultSeverity = defaultSeverity;
        this.excludeServices = excludeServices;
        this.incidentLogEntriesOverview = incidentLogEntriesOverview;
        this.maxRetries = maxRetries;
        this.pageSize = pageSize;
        this.serviceDetails = serviceDetails;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.token = token;
    }
    
    public SourcePagerduty(
            String token) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), token);
    }

    /**
     * Fetch pipelines updated in the last number of days
     */
    @JsonIgnore
    public Optional<Long> cutoffDays() {
        return cutoffDays;
    }

    /**
     * A default severity category if not present
     */
    @JsonIgnore
    public Optional<String> defaultSeverity() {
        return defaultSeverity;
    }

    /**
     * List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> excludeServices() {
        return (Optional<List<String>>) excludeServices;
    }

    /**
     * If true, will return a subset of log entries that show only the most important changes to the incident.
     */
    @JsonIgnore
    public Optional<Boolean> incidentLogEntriesOverview() {
        return incidentLogEntriesOverview;
    }

    /**
     * Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying.
     */
    @JsonIgnore
    public Optional<Long> maxRetries() {
        return maxRetries;
    }

    /**
     * page size to use when querying PagerDuty API
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * List of PagerDuty service additional details to include.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ServiceDetails>> serviceDetails() {
        return (Optional<List<ServiceDetails>>) serviceDetails;
    }

    @JsonIgnore
    public Pagerduty sourceType() {
        return sourceType;
    }

    /**
     * API key for PagerDuty API authentication
     */
    @JsonIgnore
    public String token() {
        return token;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Fetch pipelines updated in the last number of days
     */
    public SourcePagerduty withCutoffDays(long cutoffDays) {
        Utils.checkNotNull(cutoffDays, "cutoffDays");
        this.cutoffDays = Optional.ofNullable(cutoffDays);
        return this;
    }

    /**
     * Fetch pipelines updated in the last number of days
     */
    public SourcePagerduty withCutoffDays(Optional<Long> cutoffDays) {
        Utils.checkNotNull(cutoffDays, "cutoffDays");
        this.cutoffDays = cutoffDays;
        return this;
    }

    /**
     * A default severity category if not present
     */
    public SourcePagerduty withDefaultSeverity(String defaultSeverity) {
        Utils.checkNotNull(defaultSeverity, "defaultSeverity");
        this.defaultSeverity = Optional.ofNullable(defaultSeverity);
        return this;
    }

    /**
     * A default severity category if not present
     */
    public SourcePagerduty withDefaultSeverity(Optional<String> defaultSeverity) {
        Utils.checkNotNull(defaultSeverity, "defaultSeverity");
        this.defaultSeverity = defaultSeverity;
        return this;
    }

    /**
     * List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled.
     */
    public SourcePagerduty withExcludeServices(List<String> excludeServices) {
        Utils.checkNotNull(excludeServices, "excludeServices");
        this.excludeServices = Optional.ofNullable(excludeServices);
        return this;
    }

    /**
     * List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled.
     */
    public SourcePagerduty withExcludeServices(Optional<? extends List<String>> excludeServices) {
        Utils.checkNotNull(excludeServices, "excludeServices");
        this.excludeServices = excludeServices;
        return this;
    }

    /**
     * If true, will return a subset of log entries that show only the most important changes to the incident.
     */
    public SourcePagerduty withIncidentLogEntriesOverview(boolean incidentLogEntriesOverview) {
        Utils.checkNotNull(incidentLogEntriesOverview, "incidentLogEntriesOverview");
        this.incidentLogEntriesOverview = Optional.ofNullable(incidentLogEntriesOverview);
        return this;
    }

    /**
     * If true, will return a subset of log entries that show only the most important changes to the incident.
     */
    public SourcePagerduty withIncidentLogEntriesOverview(Optional<Boolean> incidentLogEntriesOverview) {
        Utils.checkNotNull(incidentLogEntriesOverview, "incidentLogEntriesOverview");
        this.incidentLogEntriesOverview = incidentLogEntriesOverview;
        return this;
    }

    /**
     * Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying.
     */
    public SourcePagerduty withMaxRetries(long maxRetries) {
        Utils.checkNotNull(maxRetries, "maxRetries");
        this.maxRetries = Optional.ofNullable(maxRetries);
        return this;
    }

    /**
     * Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying.
     */
    public SourcePagerduty withMaxRetries(Optional<Long> maxRetries) {
        Utils.checkNotNull(maxRetries, "maxRetries");
        this.maxRetries = maxRetries;
        return this;
    }

    /**
     * page size to use when querying PagerDuty API
     */
    public SourcePagerduty withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * page size to use when querying PagerDuty API
     */
    public SourcePagerduty withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * List of PagerDuty service additional details to include.
     */
    public SourcePagerduty withServiceDetails(List<ServiceDetails> serviceDetails) {
        Utils.checkNotNull(serviceDetails, "serviceDetails");
        this.serviceDetails = Optional.ofNullable(serviceDetails);
        return this;
    }

    /**
     * List of PagerDuty service additional details to include.
     */
    public SourcePagerduty withServiceDetails(Optional<? extends List<ServiceDetails>> serviceDetails) {
        Utils.checkNotNull(serviceDetails, "serviceDetails");
        this.serviceDetails = serviceDetails;
        return this;
    }

    /**
     * API key for PagerDuty API authentication
     */
    public SourcePagerduty withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePagerduty other = (SourcePagerduty) o;
        return 
            Objects.deepEquals(this.cutoffDays, other.cutoffDays) &&
            Objects.deepEquals(this.defaultSeverity, other.defaultSeverity) &&
            Objects.deepEquals(this.excludeServices, other.excludeServices) &&
            Objects.deepEquals(this.incidentLogEntriesOverview, other.incidentLogEntriesOverview) &&
            Objects.deepEquals(this.maxRetries, other.maxRetries) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.serviceDetails, other.serviceDetails) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.token, other.token);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cutoffDays,
            defaultSeverity,
            excludeServices,
            incidentLogEntriesOverview,
            maxRetries,
            pageSize,
            serviceDetails,
            sourceType,
            token);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePagerduty.class,
                "cutoffDays", cutoffDays,
                "defaultSeverity", defaultSeverity,
                "excludeServices", excludeServices,
                "incidentLogEntriesOverview", incidentLogEntriesOverview,
                "maxRetries", maxRetries,
                "pageSize", pageSize,
                "serviceDetails", serviceDetails,
                "sourceType", sourceType,
                "token", token);
    }
    
    public final static class Builder {
 
        private Optional<Long> cutoffDays;
 
        private Optional<String> defaultSeverity = Optional.empty();
 
        private Optional<? extends List<String>> excludeServices = Optional.empty();
 
        private Optional<Boolean> incidentLogEntriesOverview;
 
        private Optional<Long> maxRetries;
 
        private Optional<Long> pageSize;
 
        private Optional<? extends List<ServiceDetails>> serviceDetails = Optional.empty();
 
        private String token;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Fetch pipelines updated in the last number of days
         */
        public Builder cutoffDays(long cutoffDays) {
            Utils.checkNotNull(cutoffDays, "cutoffDays");
            this.cutoffDays = Optional.ofNullable(cutoffDays);
            return this;
        }

        /**
         * Fetch pipelines updated in the last number of days
         */
        public Builder cutoffDays(Optional<Long> cutoffDays) {
            Utils.checkNotNull(cutoffDays, "cutoffDays");
            this.cutoffDays = cutoffDays;
            return this;
        }

        /**
         * A default severity category if not present
         */
        public Builder defaultSeverity(String defaultSeverity) {
            Utils.checkNotNull(defaultSeverity, "defaultSeverity");
            this.defaultSeverity = Optional.ofNullable(defaultSeverity);
            return this;
        }

        /**
         * A default severity category if not present
         */
        public Builder defaultSeverity(Optional<String> defaultSeverity) {
            Utils.checkNotNull(defaultSeverity, "defaultSeverity");
            this.defaultSeverity = defaultSeverity;
            return this;
        }

        /**
         * List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled.
         */
        public Builder excludeServices(List<String> excludeServices) {
            Utils.checkNotNull(excludeServices, "excludeServices");
            this.excludeServices = Optional.ofNullable(excludeServices);
            return this;
        }

        /**
         * List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled.
         */
        public Builder excludeServices(Optional<? extends List<String>> excludeServices) {
            Utils.checkNotNull(excludeServices, "excludeServices");
            this.excludeServices = excludeServices;
            return this;
        }

        /**
         * If true, will return a subset of log entries that show only the most important changes to the incident.
         */
        public Builder incidentLogEntriesOverview(boolean incidentLogEntriesOverview) {
            Utils.checkNotNull(incidentLogEntriesOverview, "incidentLogEntriesOverview");
            this.incidentLogEntriesOverview = Optional.ofNullable(incidentLogEntriesOverview);
            return this;
        }

        /**
         * If true, will return a subset of log entries that show only the most important changes to the incident.
         */
        public Builder incidentLogEntriesOverview(Optional<Boolean> incidentLogEntriesOverview) {
            Utils.checkNotNull(incidentLogEntriesOverview, "incidentLogEntriesOverview");
            this.incidentLogEntriesOverview = incidentLogEntriesOverview;
            return this;
        }

        /**
         * Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying.
         */
        public Builder maxRetries(long maxRetries) {
            Utils.checkNotNull(maxRetries, "maxRetries");
            this.maxRetries = Optional.ofNullable(maxRetries);
            return this;
        }

        /**
         * Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying.
         */
        public Builder maxRetries(Optional<Long> maxRetries) {
            Utils.checkNotNull(maxRetries, "maxRetries");
            this.maxRetries = maxRetries;
            return this;
        }

        /**
         * page size to use when querying PagerDuty API
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * page size to use when querying PagerDuty API
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * List of PagerDuty service additional details to include.
         */
        public Builder serviceDetails(List<ServiceDetails> serviceDetails) {
            Utils.checkNotNull(serviceDetails, "serviceDetails");
            this.serviceDetails = Optional.ofNullable(serviceDetails);
            return this;
        }

        /**
         * List of PagerDuty service additional details to include.
         */
        public Builder serviceDetails(Optional<? extends List<ServiceDetails>> serviceDetails) {
            Utils.checkNotNull(serviceDetails, "serviceDetails");
            this.serviceDetails = serviceDetails;
            return this;
        }

        /**
         * API key for PagerDuty API authentication
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }
        
        public SourcePagerduty build() {
            if (cutoffDays == null) {
                cutoffDays = _SINGLETON_VALUE_CutoffDays.value();
            }
            if (incidentLogEntriesOverview == null) {
                incidentLogEntriesOverview = _SINGLETON_VALUE_IncidentLogEntriesOverview.value();
            }
            if (maxRetries == null) {
                maxRetries = _SINGLETON_VALUE_MaxRetries.value();
            }
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            return new SourcePagerduty(
                cutoffDays,
                defaultSeverity,
                excludeServices,
                incidentLogEntriesOverview,
                maxRetries,
                pageSize,
                serviceDetails,
                token);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_CutoffDays =
                new LazySingletonValue<>(
                        "cutoff_days",
                        "90",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncidentLogEntriesOverview =
                new LazySingletonValue<>(
                        "incident_log_entries_overview",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_MaxRetries =
                new LazySingletonValue<>(
                        "max_retries",
                        "5",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "page_size",
                        "25",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Pagerduty> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"pagerduty\"",
                        new TypeReference<Pagerduty>() {});
    }
}
