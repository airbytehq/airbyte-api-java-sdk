/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class EncryptionRSA implements Encryption {

    @JsonProperty("algorithm")
    private EncryptionMapperAlgorithm algorithm;

    @JsonProperty("fieldNameSuffix")
    private String fieldNameSuffix;

    @JsonProperty("publicKey")
    private String publicKey;

    @JsonProperty("targetField")
    private String targetField;

    @JsonCreator
    public EncryptionRSA(
            @JsonProperty("algorithm") EncryptionMapperAlgorithm algorithm,
            @JsonProperty("fieldNameSuffix") String fieldNameSuffix,
            @JsonProperty("publicKey") String publicKey,
            @JsonProperty("targetField") String targetField) {
        Utils.checkNotNull(algorithm, "algorithm");
        Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
        Utils.checkNotNull(publicKey, "publicKey");
        Utils.checkNotNull(targetField, "targetField");
        this.algorithm = algorithm;
        this.fieldNameSuffix = fieldNameSuffix;
        this.publicKey = publicKey;
        this.targetField = targetField;
    }

    @JsonIgnore
    @Override
    public String algorithm() {
        return Utils.discriminatorToString(algorithm);
    }

    @JsonIgnore
    public String fieldNameSuffix() {
        return fieldNameSuffix;
    }

    @JsonIgnore
    public String publicKey() {
        return publicKey;
    }

    @JsonIgnore
    public String targetField() {
        return targetField;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public EncryptionRSA withAlgorithm(EncryptionMapperAlgorithm algorithm) {
        Utils.checkNotNull(algorithm, "algorithm");
        this.algorithm = algorithm;
        return this;
    }

    public EncryptionRSA withFieldNameSuffix(String fieldNameSuffix) {
        Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
        this.fieldNameSuffix = fieldNameSuffix;
        return this;
    }

    public EncryptionRSA withPublicKey(String publicKey) {
        Utils.checkNotNull(publicKey, "publicKey");
        this.publicKey = publicKey;
        return this;
    }

    public EncryptionRSA withTargetField(String targetField) {
        Utils.checkNotNull(targetField, "targetField");
        this.targetField = targetField;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EncryptionRSA other = (EncryptionRSA) o;
        return 
            Objects.deepEquals(this.algorithm, other.algorithm) &&
            Objects.deepEquals(this.fieldNameSuffix, other.fieldNameSuffix) &&
            Objects.deepEquals(this.publicKey, other.publicKey) &&
            Objects.deepEquals(this.targetField, other.targetField);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            algorithm,
            fieldNameSuffix,
            publicKey,
            targetField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EncryptionRSA.class,
                "algorithm", algorithm,
                "fieldNameSuffix", fieldNameSuffix,
                "publicKey", publicKey,
                "targetField", targetField);
    }
    
    public final static class Builder {
 
        private EncryptionMapperAlgorithm algorithm;
 
        private String fieldNameSuffix;
 
        private String publicKey;
 
        private String targetField;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder algorithm(EncryptionMapperAlgorithm algorithm) {
            Utils.checkNotNull(algorithm, "algorithm");
            this.algorithm = algorithm;
            return this;
        }

        public Builder fieldNameSuffix(String fieldNameSuffix) {
            Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
            this.fieldNameSuffix = fieldNameSuffix;
            return this;
        }

        public Builder publicKey(String publicKey) {
            Utils.checkNotNull(publicKey, "publicKey");
            this.publicKey = publicKey;
            return this;
        }

        public Builder targetField(String targetField) {
            Utils.checkNotNull(targetField, "targetField");
            this.targetField = targetField;
            return this;
        }
        
        public EncryptionRSA build() {
            return new EncryptionRSA(
                algorithm,
                fieldNameSuffix,
                publicKey,
                targetField);
        }
    }
}
