/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceAmazonSqs {

    /**
     * The Access Key ID of the AWS IAM Role to use for pulling messages
     */
    @JsonProperty("access_key")
    private String accessKey;

    /**
     * Comma separated list of Mesage Attribute names to return
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes_to_return")
    private Optional<String> attributesToReturn;

    /**
     * Max amount of messages to get in one batch (10 max)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_batch_size")
    private Optional<Long> maxBatchSize;

    /**
     * Max amount of time in seconds to wait for messages in a single poll (20 max)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_wait_time")
    private Optional<Long> maxWaitTime;

    /**
     * URL of the SQS Queue
     */
    @JsonProperty("queue_url")
    private String queueUrl;

    /**
     * AWS Region of the SQS Queue
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<? extends SourceAmazonSqsAWSRegion> region;

    /**
     * The Secret Key of the AWS IAM Role to use for pulling messages
     */
    @JsonProperty("secret_key")
    private String secretKey;

    @JsonProperty("sourceType")
    private AmazonSqs sourceType;

    /**
     * Note - Different targets have different attribute enum requirements, please refer actions sections in https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    private Optional<? extends TheTargetedActionResourceForTheFetch> target;

    /**
     * Modify the Visibility Timeout of the individual message from the Queue's default (seconds).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility_timeout")
    private Optional<Long> visibilityTimeout;

    @JsonCreator
    public SourceAmazonSqs(
            @JsonProperty("access_key") String accessKey,
            @JsonProperty("attributes_to_return") Optional<String> attributesToReturn,
            @JsonProperty("max_batch_size") Optional<Long> maxBatchSize,
            @JsonProperty("max_wait_time") Optional<Long> maxWaitTime,
            @JsonProperty("queue_url") String queueUrl,
            @JsonProperty("region") Optional<? extends SourceAmazonSqsAWSRegion> region,
            @JsonProperty("secret_key") String secretKey,
            @JsonProperty("target") Optional<? extends TheTargetedActionResourceForTheFetch> target,
            @JsonProperty("visibility_timeout") Optional<Long> visibilityTimeout) {
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(attributesToReturn, "attributesToReturn");
        Utils.checkNotNull(maxBatchSize, "maxBatchSize");
        Utils.checkNotNull(maxWaitTime, "maxWaitTime");
        Utils.checkNotNull(queueUrl, "queueUrl");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(secretKey, "secretKey");
        Utils.checkNotNull(target, "target");
        Utils.checkNotNull(visibilityTimeout, "visibilityTimeout");
        this.accessKey = accessKey;
        this.attributesToReturn = attributesToReturn;
        this.maxBatchSize = maxBatchSize;
        this.maxWaitTime = maxWaitTime;
        this.queueUrl = queueUrl;
        this.region = region;
        this.secretKey = secretKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.target = target;
        this.visibilityTimeout = visibilityTimeout;
    }
    
    public SourceAmazonSqs(
            String accessKey,
            String queueUrl,
            String secretKey) {
        this(accessKey, Optional.empty(), Optional.empty(), Optional.empty(), queueUrl, Optional.empty(), secretKey, Optional.empty(), Optional.empty());
    }

    /**
     * The Access Key ID of the AWS IAM Role to use for pulling messages
     */
    @JsonIgnore
    public String accessKey() {
        return accessKey;
    }

    /**
     * Comma separated list of Mesage Attribute names to return
     */
    @JsonIgnore
    public Optional<String> attributesToReturn() {
        return attributesToReturn;
    }

    /**
     * Max amount of messages to get in one batch (10 max)
     */
    @JsonIgnore
    public Optional<Long> maxBatchSize() {
        return maxBatchSize;
    }

    /**
     * Max amount of time in seconds to wait for messages in a single poll (20 max)
     */
    @JsonIgnore
    public Optional<Long> maxWaitTime() {
        return maxWaitTime;
    }

    /**
     * URL of the SQS Queue
     */
    @JsonIgnore
    public String queueUrl() {
        return queueUrl;
    }

    /**
     * AWS Region of the SQS Queue
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceAmazonSqsAWSRegion> region() {
        return (Optional<SourceAmazonSqsAWSRegion>) region;
    }

    /**
     * The Secret Key of the AWS IAM Role to use for pulling messages
     */
    @JsonIgnore
    public String secretKey() {
        return secretKey;
    }

    @JsonIgnore
    public AmazonSqs sourceType() {
        return sourceType;
    }

    /**
     * Note - Different targets have different attribute enum requirements, please refer actions sections in https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TheTargetedActionResourceForTheFetch> target() {
        return (Optional<TheTargetedActionResourceForTheFetch>) target;
    }

    /**
     * Modify the Visibility Timeout of the individual message from the Queue's default (seconds).
     */
    @JsonIgnore
    public Optional<Long> visibilityTimeout() {
        return visibilityTimeout;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The Access Key ID of the AWS IAM Role to use for pulling messages
     */
    public SourceAmazonSqs withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    /**
     * Comma separated list of Mesage Attribute names to return
     */
    public SourceAmazonSqs withAttributesToReturn(String attributesToReturn) {
        Utils.checkNotNull(attributesToReturn, "attributesToReturn");
        this.attributesToReturn = Optional.ofNullable(attributesToReturn);
        return this;
    }

    /**
     * Comma separated list of Mesage Attribute names to return
     */
    public SourceAmazonSqs withAttributesToReturn(Optional<String> attributesToReturn) {
        Utils.checkNotNull(attributesToReturn, "attributesToReturn");
        this.attributesToReturn = attributesToReturn;
        return this;
    }

    /**
     * Max amount of messages to get in one batch (10 max)
     */
    public SourceAmazonSqs withMaxBatchSize(long maxBatchSize) {
        Utils.checkNotNull(maxBatchSize, "maxBatchSize");
        this.maxBatchSize = Optional.ofNullable(maxBatchSize);
        return this;
    }

    /**
     * Max amount of messages to get in one batch (10 max)
     */
    public SourceAmazonSqs withMaxBatchSize(Optional<Long> maxBatchSize) {
        Utils.checkNotNull(maxBatchSize, "maxBatchSize");
        this.maxBatchSize = maxBatchSize;
        return this;
    }

    /**
     * Max amount of time in seconds to wait for messages in a single poll (20 max)
     */
    public SourceAmazonSqs withMaxWaitTime(long maxWaitTime) {
        Utils.checkNotNull(maxWaitTime, "maxWaitTime");
        this.maxWaitTime = Optional.ofNullable(maxWaitTime);
        return this;
    }

    /**
     * Max amount of time in seconds to wait for messages in a single poll (20 max)
     */
    public SourceAmazonSqs withMaxWaitTime(Optional<Long> maxWaitTime) {
        Utils.checkNotNull(maxWaitTime, "maxWaitTime");
        this.maxWaitTime = maxWaitTime;
        return this;
    }

    /**
     * URL of the SQS Queue
     */
    public SourceAmazonSqs withQueueUrl(String queueUrl) {
        Utils.checkNotNull(queueUrl, "queueUrl");
        this.queueUrl = queueUrl;
        return this;
    }

    /**
     * AWS Region of the SQS Queue
     */
    public SourceAmazonSqs withRegion(SourceAmazonSqsAWSRegion region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * AWS Region of the SQS Queue
     */
    public SourceAmazonSqs withRegion(Optional<? extends SourceAmazonSqsAWSRegion> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * The Secret Key of the AWS IAM Role to use for pulling messages
     */
    public SourceAmazonSqs withSecretKey(String secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = secretKey;
        return this;
    }

    /**
     * Note - Different targets have different attribute enum requirements, please refer actions sections in https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html
     */
    public SourceAmazonSqs withTarget(TheTargetedActionResourceForTheFetch target) {
        Utils.checkNotNull(target, "target");
        this.target = Optional.ofNullable(target);
        return this;
    }

    /**
     * Note - Different targets have different attribute enum requirements, please refer actions sections in https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html
     */
    public SourceAmazonSqs withTarget(Optional<? extends TheTargetedActionResourceForTheFetch> target) {
        Utils.checkNotNull(target, "target");
        this.target = target;
        return this;
    }

    /**
     * Modify the Visibility Timeout of the individual message from the Queue's default (seconds).
     */
    public SourceAmazonSqs withVisibilityTimeout(long visibilityTimeout) {
        Utils.checkNotNull(visibilityTimeout, "visibilityTimeout");
        this.visibilityTimeout = Optional.ofNullable(visibilityTimeout);
        return this;
    }

    /**
     * Modify the Visibility Timeout of the individual message from the Queue's default (seconds).
     */
    public SourceAmazonSqs withVisibilityTimeout(Optional<Long> visibilityTimeout) {
        Utils.checkNotNull(visibilityTimeout, "visibilityTimeout");
        this.visibilityTimeout = visibilityTimeout;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAmazonSqs other = (SourceAmazonSqs) o;
        return 
            Objects.deepEquals(this.accessKey, other.accessKey) &&
            Objects.deepEquals(this.attributesToReturn, other.attributesToReturn) &&
            Objects.deepEquals(this.maxBatchSize, other.maxBatchSize) &&
            Objects.deepEquals(this.maxWaitTime, other.maxWaitTime) &&
            Objects.deepEquals(this.queueUrl, other.queueUrl) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.secretKey, other.secretKey) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.target, other.target) &&
            Objects.deepEquals(this.visibilityTimeout, other.visibilityTimeout);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessKey,
            attributesToReturn,
            maxBatchSize,
            maxWaitTime,
            queueUrl,
            region,
            secretKey,
            sourceType,
            target,
            visibilityTimeout);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAmazonSqs.class,
                "accessKey", accessKey,
                "attributesToReturn", attributesToReturn,
                "maxBatchSize", maxBatchSize,
                "maxWaitTime", maxWaitTime,
                "queueUrl", queueUrl,
                "region", region,
                "secretKey", secretKey,
                "sourceType", sourceType,
                "target", target,
                "visibilityTimeout", visibilityTimeout);
    }
    
    public final static class Builder {
 
        private String accessKey;
 
        private Optional<String> attributesToReturn;
 
        private Optional<Long> maxBatchSize;
 
        private Optional<Long> maxWaitTime;
 
        private String queueUrl;
 
        private Optional<? extends SourceAmazonSqsAWSRegion> region;
 
        private String secretKey;
 
        private Optional<? extends TheTargetedActionResourceForTheFetch> target;
 
        private Optional<Long> visibilityTimeout;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Access Key ID of the AWS IAM Role to use for pulling messages
         */
        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }

        /**
         * Comma separated list of Mesage Attribute names to return
         */
        public Builder attributesToReturn(String attributesToReturn) {
            Utils.checkNotNull(attributesToReturn, "attributesToReturn");
            this.attributesToReturn = Optional.ofNullable(attributesToReturn);
            return this;
        }

        /**
         * Comma separated list of Mesage Attribute names to return
         */
        public Builder attributesToReturn(Optional<String> attributesToReturn) {
            Utils.checkNotNull(attributesToReturn, "attributesToReturn");
            this.attributesToReturn = attributesToReturn;
            return this;
        }

        /**
         * Max amount of messages to get in one batch (10 max)
         */
        public Builder maxBatchSize(long maxBatchSize) {
            Utils.checkNotNull(maxBatchSize, "maxBatchSize");
            this.maxBatchSize = Optional.ofNullable(maxBatchSize);
            return this;
        }

        /**
         * Max amount of messages to get in one batch (10 max)
         */
        public Builder maxBatchSize(Optional<Long> maxBatchSize) {
            Utils.checkNotNull(maxBatchSize, "maxBatchSize");
            this.maxBatchSize = maxBatchSize;
            return this;
        }

        /**
         * Max amount of time in seconds to wait for messages in a single poll (20 max)
         */
        public Builder maxWaitTime(long maxWaitTime) {
            Utils.checkNotNull(maxWaitTime, "maxWaitTime");
            this.maxWaitTime = Optional.ofNullable(maxWaitTime);
            return this;
        }

        /**
         * Max amount of time in seconds to wait for messages in a single poll (20 max)
         */
        public Builder maxWaitTime(Optional<Long> maxWaitTime) {
            Utils.checkNotNull(maxWaitTime, "maxWaitTime");
            this.maxWaitTime = maxWaitTime;
            return this;
        }

        /**
         * URL of the SQS Queue
         */
        public Builder queueUrl(String queueUrl) {
            Utils.checkNotNull(queueUrl, "queueUrl");
            this.queueUrl = queueUrl;
            return this;
        }

        /**
         * AWS Region of the SQS Queue
         */
        public Builder region(SourceAmazonSqsAWSRegion region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * AWS Region of the SQS Queue
         */
        public Builder region(Optional<? extends SourceAmazonSqsAWSRegion> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * The Secret Key of the AWS IAM Role to use for pulling messages
         */
        public Builder secretKey(String secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = secretKey;
            return this;
        }

        /**
         * Note - Different targets have different attribute enum requirements, please refer actions sections in https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html
         */
        public Builder target(TheTargetedActionResourceForTheFetch target) {
            Utils.checkNotNull(target, "target");
            this.target = Optional.ofNullable(target);
            return this;
        }

        /**
         * Note - Different targets have different attribute enum requirements, please refer actions sections in https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html
         */
        public Builder target(Optional<? extends TheTargetedActionResourceForTheFetch> target) {
            Utils.checkNotNull(target, "target");
            this.target = target;
            return this;
        }

        /**
         * Modify the Visibility Timeout of the individual message from the Queue's default (seconds).
         */
        public Builder visibilityTimeout(long visibilityTimeout) {
            Utils.checkNotNull(visibilityTimeout, "visibilityTimeout");
            this.visibilityTimeout = Optional.ofNullable(visibilityTimeout);
            return this;
        }

        /**
         * Modify the Visibility Timeout of the individual message from the Queue's default (seconds).
         */
        public Builder visibilityTimeout(Optional<Long> visibilityTimeout) {
            Utils.checkNotNull(visibilityTimeout, "visibilityTimeout");
            this.visibilityTimeout = visibilityTimeout;
            return this;
        }
        
        public SourceAmazonSqs build() {
            if (attributesToReturn == null) {
                attributesToReturn = _SINGLETON_VALUE_AttributesToReturn.value();
            }
            if (maxBatchSize == null) {
                maxBatchSize = _SINGLETON_VALUE_MaxBatchSize.value();
            }
            if (maxWaitTime == null) {
                maxWaitTime = _SINGLETON_VALUE_MaxWaitTime.value();
            }
            if (region == null) {
                region = _SINGLETON_VALUE_Region.value();
            }
            if (target == null) {
                target = _SINGLETON_VALUE_Target.value();
            }
            if (visibilityTimeout == null) {
                visibilityTimeout = _SINGLETON_VALUE_VisibilityTimeout.value();
            }
            return new SourceAmazonSqs(
                accessKey,
                attributesToReturn,
                maxBatchSize,
                maxWaitTime,
                queueUrl,
                region,
                secretKey,
                target,
                visibilityTimeout);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AttributesToReturn =
                new LazySingletonValue<>(
                        "attributes_to_return",
                        "\"All\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_MaxBatchSize =
                new LazySingletonValue<>(
                        "max_batch_size",
                        "10",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_MaxWaitTime =
                new LazySingletonValue<>(
                        "max_wait_time",
                        "20",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<? extends SourceAmazonSqsAWSRegion>> _SINGLETON_VALUE_Region =
                new LazySingletonValue<>(
                        "region",
                        "\"us-east-1\"",
                        new TypeReference<Optional<? extends SourceAmazonSqsAWSRegion>>() {});

        private static final LazySingletonValue<AmazonSqs> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"amazon-sqs\"",
                        new TypeReference<AmazonSqs>() {});

        private static final LazySingletonValue<Optional<? extends TheTargetedActionResourceForTheFetch>> _SINGLETON_VALUE_Target =
                new LazySingletonValue<>(
                        "target",
                        "\"ReceiveMessage\"",
                        new TypeReference<Optional<? extends TheTargetedActionResourceForTheFetch>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_VisibilityTimeout =
                new LazySingletonValue<>(
                        "visibility_timeout",
                        "20",
                        new TypeReference<Optional<Long>>() {});
    }
}
