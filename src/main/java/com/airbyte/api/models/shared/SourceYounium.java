/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SourceYounium {

    /**
     * Legal Entity that data should be pulled from
     */
    @JsonProperty("legal_entity")
    private String legalEntity;

    /**
     * Account password for younium account API key
     */
    @JsonProperty("password")
    private String password;

    /**
     * Property defining if connector is used against playground or production environment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playground")
    private Optional<Boolean> playground;

    @JsonProperty("sourceType")
    private Younium sourceType;

    /**
     * Username for Younium account
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourceYounium(
            @JsonProperty("legal_entity") String legalEntity,
            @JsonProperty("password") String password,
            @JsonProperty("playground") Optional<Boolean> playground,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(legalEntity, "legalEntity");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(playground, "playground");
        Utils.checkNotNull(username, "username");
        this.legalEntity = legalEntity;
        this.password = password;
        this.playground = playground;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.username = username;
    }
    
    public SourceYounium(
            String legalEntity,
            String password,
            String username) {
        this(legalEntity, password, Optional.empty(), username);
    }

    /**
     * Legal Entity that data should be pulled from
     */
    @JsonIgnore
    public String legalEntity() {
        return legalEntity;
    }

    /**
     * Account password for younium account API key
     */
    @JsonIgnore
    public String password() {
        return password;
    }

    /**
     * Property defining if connector is used against playground or production environment
     */
    @JsonIgnore
    public Optional<Boolean> playground() {
        return playground;
    }

    @JsonIgnore
    public Younium sourceType() {
        return sourceType;
    }

    /**
     * Username for Younium account
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Legal Entity that data should be pulled from
     */
    public SourceYounium withLegalEntity(String legalEntity) {
        Utils.checkNotNull(legalEntity, "legalEntity");
        this.legalEntity = legalEntity;
        return this;
    }

    /**
     * Account password for younium account API key
     */
    public SourceYounium withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Property defining if connector is used against playground or production environment
     */
    public SourceYounium withPlayground(boolean playground) {
        Utils.checkNotNull(playground, "playground");
        this.playground = Optional.ofNullable(playground);
        return this;
    }

    /**
     * Property defining if connector is used against playground or production environment
     */
    public SourceYounium withPlayground(Optional<Boolean> playground) {
        Utils.checkNotNull(playground, "playground");
        this.playground = playground;
        return this;
    }

    /**
     * Username for Younium account
     */
    public SourceYounium withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceYounium other = (SourceYounium) o;
        return 
            Objects.deepEquals(this.legalEntity, other.legalEntity) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.playground, other.playground) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            legalEntity,
            password,
            playground,
            sourceType,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceYounium.class,
                "legalEntity", legalEntity,
                "password", password,
                "playground", playground,
                "sourceType", sourceType,
                "username", username);
    }
    
    public final static class Builder {
 
        private String legalEntity;
 
        private String password;
 
        private Optional<Boolean> playground;
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Legal Entity that data should be pulled from
         */
        public Builder legalEntity(String legalEntity) {
            Utils.checkNotNull(legalEntity, "legalEntity");
            this.legalEntity = legalEntity;
            return this;
        }

        /**
         * Account password for younium account API key
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Property defining if connector is used against playground or production environment
         */
        public Builder playground(boolean playground) {
            Utils.checkNotNull(playground, "playground");
            this.playground = Optional.ofNullable(playground);
            return this;
        }

        /**
         * Property defining if connector is used against playground or production environment
         */
        public Builder playground(Optional<Boolean> playground) {
            Utils.checkNotNull(playground, "playground");
            this.playground = playground;
            return this;
        }

        /**
         * Username for Younium account
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourceYounium build() {
            if (playground == null) {
                playground = _SINGLETON_VALUE_Playground.value();
            }
            return new SourceYounium(
                legalEntity,
                password,
                playground,
                username);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Playground =
                new LazySingletonValue<>(
                        "playground",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Younium> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"younium\"",
                        new TypeReference<Younium>() {});
    }
}
