/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class Hashing {

    /**
     * The suffix to append to the field name after hashing.
     */
    @JsonProperty("fieldNameSuffix")
    private String fieldNameSuffix;

    /**
     * The hashing algorithm to use.
     */
    @JsonProperty("method")
    private HashingMethod method;

    /**
     * The name of the field to be hashed.
     */
    @JsonProperty("targetField")
    private String targetField;

    @JsonCreator
    public Hashing(
            @JsonProperty("fieldNameSuffix") String fieldNameSuffix,
            @JsonProperty("method") HashingMethod method,
            @JsonProperty("targetField") String targetField) {
        Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(targetField, "targetField");
        this.fieldNameSuffix = fieldNameSuffix;
        this.method = method;
        this.targetField = targetField;
    }

    /**
     * The suffix to append to the field name after hashing.
     */
    @JsonIgnore
    public String fieldNameSuffix() {
        return fieldNameSuffix;
    }

    /**
     * The hashing algorithm to use.
     */
    @JsonIgnore
    public HashingMethod method() {
        return method;
    }

    /**
     * The name of the field to be hashed.
     */
    @JsonIgnore
    public String targetField() {
        return targetField;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The suffix to append to the field name after hashing.
     */
    public Hashing withFieldNameSuffix(String fieldNameSuffix) {
        Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
        this.fieldNameSuffix = fieldNameSuffix;
        return this;
    }

    /**
     * The hashing algorithm to use.
     */
    public Hashing withMethod(HashingMethod method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The name of the field to be hashed.
     */
    public Hashing withTargetField(String targetField) {
        Utils.checkNotNull(targetField, "targetField");
        this.targetField = targetField;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Hashing other = (Hashing) o;
        return 
            Objects.deepEquals(this.fieldNameSuffix, other.fieldNameSuffix) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.targetField, other.targetField);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fieldNameSuffix,
            method,
            targetField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Hashing.class,
                "fieldNameSuffix", fieldNameSuffix,
                "method", method,
                "targetField", targetField);
    }
    
    public final static class Builder {
 
        private String fieldNameSuffix;
 
        private HashingMethod method;
 
        private String targetField;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The suffix to append to the field name after hashing.
         */
        public Builder fieldNameSuffix(String fieldNameSuffix) {
            Utils.checkNotNull(fieldNameSuffix, "fieldNameSuffix");
            this.fieldNameSuffix = fieldNameSuffix;
            return this;
        }

        /**
         * The hashing algorithm to use.
         */
        public Builder method(HashingMethod method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The name of the field to be hashed.
         */
        public Builder targetField(String targetField) {
            Utils.checkNotNull(targetField, "targetField");
            this.targetField = targetField;
            return this;
        }
        
        public Hashing build() {
            return new Hashing(
                fieldNameSuffix,
                method,
                targetField);
        }
    }
}
