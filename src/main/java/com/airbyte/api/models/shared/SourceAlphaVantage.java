/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceAlphaVantage {

    /**
     * Whether to return adjusted data. Only applicable to intraday endpoints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adjusted")
    private Optional<Boolean> adjusted;

    /**
     * API Key
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Time-series data point interval. Required for intraday endpoints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private Optional<? extends Interval> interval;

    /**
     * Whether to return full or compact data (the last 100 data points).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outputsize")
    private Optional<? extends OutputSize> outputsize;

    @JsonProperty("sourceType")
    private AlphaVantage sourceType;

    /**
     * Stock symbol (with exchange code)
     */
    @JsonProperty("symbol")
    private String symbol;

    @JsonCreator
    public SourceAlphaVantage(
            @JsonProperty("adjusted") Optional<Boolean> adjusted,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("interval") Optional<? extends Interval> interval,
            @JsonProperty("outputsize") Optional<? extends OutputSize> outputsize,
            @JsonProperty("symbol") String symbol) {
        Utils.checkNotNull(adjusted, "adjusted");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(outputsize, "outputsize");
        Utils.checkNotNull(symbol, "symbol");
        this.adjusted = adjusted;
        this.apiKey = apiKey;
        this.interval = interval;
        this.outputsize = outputsize;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.symbol = symbol;
    }
    
    public SourceAlphaVantage(
            String apiKey,
            String symbol) {
        this(Optional.empty(), apiKey, Optional.empty(), Optional.empty(), symbol);
    }

    /**
     * Whether to return adjusted data. Only applicable to intraday endpoints.
     */
    @JsonIgnore
    public Optional<Boolean> adjusted() {
        return adjusted;
    }

    /**
     * API Key
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Time-series data point interval. Required for intraday endpoints.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Interval> interval() {
        return (Optional<Interval>) interval;
    }

    /**
     * Whether to return full or compact data (the last 100 data points).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OutputSize> outputsize() {
        return (Optional<OutputSize>) outputsize;
    }

    @JsonIgnore
    public AlphaVantage sourceType() {
        return sourceType;
    }

    /**
     * Stock symbol (with exchange code)
     */
    @JsonIgnore
    public String symbol() {
        return symbol;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Whether to return adjusted data. Only applicable to intraday endpoints.
     */
    public SourceAlphaVantage withAdjusted(boolean adjusted) {
        Utils.checkNotNull(adjusted, "adjusted");
        this.adjusted = Optional.ofNullable(adjusted);
        return this;
    }

    /**
     * Whether to return adjusted data. Only applicable to intraday endpoints.
     */
    public SourceAlphaVantage withAdjusted(Optional<Boolean> adjusted) {
        Utils.checkNotNull(adjusted, "adjusted");
        this.adjusted = adjusted;
        return this;
    }

    /**
     * API Key
     */
    public SourceAlphaVantage withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Time-series data point interval. Required for intraday endpoints.
     */
    public SourceAlphaVantage withInterval(Interval interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = Optional.ofNullable(interval);
        return this;
    }

    /**
     * Time-series data point interval. Required for intraday endpoints.
     */
    public SourceAlphaVantage withInterval(Optional<? extends Interval> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * Whether to return full or compact data (the last 100 data points).
     */
    public SourceAlphaVantage withOutputsize(OutputSize outputsize) {
        Utils.checkNotNull(outputsize, "outputsize");
        this.outputsize = Optional.ofNullable(outputsize);
        return this;
    }

    /**
     * Whether to return full or compact data (the last 100 data points).
     */
    public SourceAlphaVantage withOutputsize(Optional<? extends OutputSize> outputsize) {
        Utils.checkNotNull(outputsize, "outputsize");
        this.outputsize = outputsize;
        return this;
    }

    /**
     * Stock symbol (with exchange code)
     */
    public SourceAlphaVantage withSymbol(String symbol) {
        Utils.checkNotNull(symbol, "symbol");
        this.symbol = symbol;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAlphaVantage other = (SourceAlphaVantage) o;
        return 
            Objects.deepEquals(this.adjusted, other.adjusted) &&
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.interval, other.interval) &&
            Objects.deepEquals(this.outputsize, other.outputsize) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.symbol, other.symbol);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            adjusted,
            apiKey,
            interval,
            outputsize,
            sourceType,
            symbol);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAlphaVantage.class,
                "adjusted", adjusted,
                "apiKey", apiKey,
                "interval", interval,
                "outputsize", outputsize,
                "sourceType", sourceType,
                "symbol", symbol);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> adjusted;
 
        private String apiKey;
 
        private Optional<? extends Interval> interval;
 
        private Optional<? extends OutputSize> outputsize;
 
        private String symbol;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether to return adjusted data. Only applicable to intraday endpoints.
         */
        public Builder adjusted(boolean adjusted) {
            Utils.checkNotNull(adjusted, "adjusted");
            this.adjusted = Optional.ofNullable(adjusted);
            return this;
        }

        /**
         * Whether to return adjusted data. Only applicable to intraday endpoints.
         */
        public Builder adjusted(Optional<Boolean> adjusted) {
            Utils.checkNotNull(adjusted, "adjusted");
            this.adjusted = adjusted;
            return this;
        }

        /**
         * API Key
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Time-series data point interval. Required for intraday endpoints.
         */
        public Builder interval(Interval interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = Optional.ofNullable(interval);
            return this;
        }

        /**
         * Time-series data point interval. Required for intraday endpoints.
         */
        public Builder interval(Optional<? extends Interval> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        /**
         * Whether to return full or compact data (the last 100 data points).
         */
        public Builder outputsize(OutputSize outputsize) {
            Utils.checkNotNull(outputsize, "outputsize");
            this.outputsize = Optional.ofNullable(outputsize);
            return this;
        }

        /**
         * Whether to return full or compact data (the last 100 data points).
         */
        public Builder outputsize(Optional<? extends OutputSize> outputsize) {
            Utils.checkNotNull(outputsize, "outputsize");
            this.outputsize = outputsize;
            return this;
        }

        /**
         * Stock symbol (with exchange code)
         */
        public Builder symbol(String symbol) {
            Utils.checkNotNull(symbol, "symbol");
            this.symbol = symbol;
            return this;
        }
        
        public SourceAlphaVantage build() {
            if (adjusted == null) {
                adjusted = _SINGLETON_VALUE_Adjusted.value();
            }
            if (interval == null) {
                interval = _SINGLETON_VALUE_Interval.value();
            }
            if (outputsize == null) {
                outputsize = _SINGLETON_VALUE_Outputsize.value();
            }
            return new SourceAlphaVantage(
                adjusted,
                apiKey,
                interval,
                outputsize,
                symbol);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Adjusted =
                new LazySingletonValue<>(
                        "adjusted",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Interval>> _SINGLETON_VALUE_Interval =
                new LazySingletonValue<>(
                        "interval",
                        "\"1min\"",
                        new TypeReference<Optional<? extends Interval>>() {});

        private static final LazySingletonValue<Optional<? extends OutputSize>> _SINGLETON_VALUE_Outputsize =
                new LazySingletonValue<>(
                        "outputsize",
                        "\"compact\"",
                        new TypeReference<Optional<? extends OutputSize>>() {});

        private static final LazySingletonValue<AlphaVantage> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"alpha-vantage\"",
                        new TypeReference<AlphaVantage>() {});
    }
}
