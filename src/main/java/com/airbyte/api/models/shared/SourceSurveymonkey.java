/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceSurveymonkey {

    /**
     * The authorization method to use to retrieve data from SurveyMonkey
     */
    @JsonProperty("credentials")
    private SurveyMonkeyAuthorizationMethod credentials;

    /**
     * Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    private Optional<? extends OriginDatacenterOfTheSurveyMonkeyAccount> origin;

    @JsonProperty("sourceType")
    private SourceSurveymonkeySurveymonkey sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("survey_ids")
    private Optional<? extends List<String>> surveyIds;

    @JsonCreator
    public SourceSurveymonkey(
            @JsonProperty("credentials") SurveyMonkeyAuthorizationMethod credentials,
            @JsonProperty("origin") Optional<? extends OriginDatacenterOfTheSurveyMonkeyAccount> origin,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("survey_ids") Optional<? extends List<String>> surveyIds) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(origin, "origin");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(surveyIds, "surveyIds");
        this.credentials = credentials;
        this.origin = origin;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.surveyIds = surveyIds;
    }
    
    public SourceSurveymonkey(
            SurveyMonkeyAuthorizationMethod credentials,
            OffsetDateTime startDate) {
        this(credentials, Optional.empty(), startDate, Optional.empty());
    }

    /**
     * The authorization method to use to retrieve data from SurveyMonkey
     */
    @JsonIgnore
    public SurveyMonkeyAuthorizationMethod credentials() {
        return credentials;
    }

    /**
     * Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OriginDatacenterOfTheSurveyMonkeyAccount> origin() {
        return (Optional<OriginDatacenterOfTheSurveyMonkeyAccount>) origin;
    }

    @JsonIgnore
    public SourceSurveymonkeySurveymonkey sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> surveyIds() {
        return (Optional<List<String>>) surveyIds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The authorization method to use to retrieve data from SurveyMonkey
     */
    public SourceSurveymonkey withCredentials(SurveyMonkeyAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
     */
    public SourceSurveymonkey withOrigin(OriginDatacenterOfTheSurveyMonkeyAccount origin) {
        Utils.checkNotNull(origin, "origin");
        this.origin = Optional.ofNullable(origin);
        return this;
    }

    /**
     * Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
     */
    public SourceSurveymonkey withOrigin(Optional<? extends OriginDatacenterOfTheSurveyMonkeyAccount> origin) {
        Utils.checkNotNull(origin, "origin");
        this.origin = origin;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourceSurveymonkey withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
     */
    public SourceSurveymonkey withSurveyIds(List<String> surveyIds) {
        Utils.checkNotNull(surveyIds, "surveyIds");
        this.surveyIds = Optional.ofNullable(surveyIds);
        return this;
    }

    /**
     * IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
     */
    public SourceSurveymonkey withSurveyIds(Optional<? extends List<String>> surveyIds) {
        Utils.checkNotNull(surveyIds, "surveyIds");
        this.surveyIds = surveyIds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSurveymonkey other = (SourceSurveymonkey) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.origin, other.origin) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.surveyIds, other.surveyIds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            origin,
            sourceType,
            startDate,
            surveyIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSurveymonkey.class,
                "credentials", credentials,
                "origin", origin,
                "sourceType", sourceType,
                "startDate", startDate,
                "surveyIds", surveyIds);
    }
    
    public final static class Builder {
 
        private SurveyMonkeyAuthorizationMethod credentials;
 
        private Optional<? extends OriginDatacenterOfTheSurveyMonkeyAccount> origin;
 
        private OffsetDateTime startDate;
 
        private Optional<? extends List<String>> surveyIds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The authorization method to use to retrieve data from SurveyMonkey
         */
        public Builder credentials(SurveyMonkeyAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
         */
        public Builder origin(OriginDatacenterOfTheSurveyMonkeyAccount origin) {
            Utils.checkNotNull(origin, "origin");
            this.origin = Optional.ofNullable(origin);
            return this;
        }

        /**
         * Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
         */
        public Builder origin(Optional<? extends OriginDatacenterOfTheSurveyMonkeyAccount> origin) {
            Utils.checkNotNull(origin, "origin");
            this.origin = origin;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
         */
        public Builder surveyIds(List<String> surveyIds) {
            Utils.checkNotNull(surveyIds, "surveyIds");
            this.surveyIds = Optional.ofNullable(surveyIds);
            return this;
        }

        /**
         * IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
         */
        public Builder surveyIds(Optional<? extends List<String>> surveyIds) {
            Utils.checkNotNull(surveyIds, "surveyIds");
            this.surveyIds = surveyIds;
            return this;
        }
        
        public SourceSurveymonkey build() {
            if (origin == null) {
                origin = _SINGLETON_VALUE_Origin.value();
            }
            return new SourceSurveymonkey(
                credentials,
                origin,
                startDate,
                surveyIds);
        }

        private static final LazySingletonValue<Optional<? extends OriginDatacenterOfTheSurveyMonkeyAccount>> _SINGLETON_VALUE_Origin =
                new LazySingletonValue<>(
                        "origin",
                        "\"USA\"",
                        new TypeReference<Optional<? extends OriginDatacenterOfTheSurveyMonkeyAccount>>() {});

        private static final LazySingletonValue<SourceSurveymonkeySurveymonkey> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"surveymonkey\"",
                        new TypeReference<SourceSurveymonkeySurveymonkey>() {});
    }
}
