/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceSmartsheets {

    @JsonProperty("credentials")
    private SourceSmartsheetsAuthorizationMethod credentials;

    /**
     * A List of available columns which metadata can be pulled from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata_fields")
    private Optional<? extends java.util.List<Validenums>> metadataFields;

    @JsonProperty("sourceType")
    private SourceSmartsheetsSmartsheets sourceType;

    /**
     * The spreadsheet ID. Find it by opening the spreadsheet then navigating to File &gt; Properties
     */
    @JsonProperty("spreadsheet_id")
    private String spreadsheetId;

    @JsonCreator
    public SourceSmartsheets(
            @JsonProperty("credentials") SourceSmartsheetsAuthorizationMethod credentials,
            @JsonProperty("metadata_fields") Optional<? extends java.util.List<Validenums>> metadataFields,
            @JsonProperty("spreadsheet_id") String spreadsheetId) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(metadataFields, "metadataFields");
        Utils.checkNotNull(spreadsheetId, "spreadsheetId");
        this.credentials = credentials;
        this.metadataFields = metadataFields;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.spreadsheetId = spreadsheetId;
    }
    
    public SourceSmartsheets(
            SourceSmartsheetsAuthorizationMethod credentials,
            String spreadsheetId) {
        this(credentials, Optional.empty(), spreadsheetId);
    }

    @JsonIgnore
    public SourceSmartsheetsAuthorizationMethod credentials() {
        return credentials;
    }

    /**
     * A List of available columns which metadata can be pulled from.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Validenums>> metadataFields() {
        return (Optional<java.util.List<Validenums>>) metadataFields;
    }

    @JsonIgnore
    public SourceSmartsheetsSmartsheets sourceType() {
        return sourceType;
    }

    /**
     * The spreadsheet ID. Find it by opening the spreadsheet then navigating to File &gt; Properties
     */
    @JsonIgnore
    public String spreadsheetId() {
        return spreadsheetId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceSmartsheets withCredentials(SourceSmartsheetsAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * A List of available columns which metadata can be pulled from.
     */
    public SourceSmartsheets withMetadataFields(java.util.List<Validenums> metadataFields) {
        Utils.checkNotNull(metadataFields, "metadataFields");
        this.metadataFields = Optional.ofNullable(metadataFields);
        return this;
    }

    /**
     * A List of available columns which metadata can be pulled from.
     */
    public SourceSmartsheets withMetadataFields(Optional<? extends java.util.List<Validenums>> metadataFields) {
        Utils.checkNotNull(metadataFields, "metadataFields");
        this.metadataFields = metadataFields;
        return this;
    }

    /**
     * The spreadsheet ID. Find it by opening the spreadsheet then navigating to File &gt; Properties
     */
    public SourceSmartsheets withSpreadsheetId(String spreadsheetId) {
        Utils.checkNotNull(spreadsheetId, "spreadsheetId");
        this.spreadsheetId = spreadsheetId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSmartsheets other = (SourceSmartsheets) o;
        return 
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.metadataFields, other.metadataFields) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.spreadsheetId, other.spreadsheetId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentials,
            metadataFields,
            sourceType,
            spreadsheetId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSmartsheets.class,
                "credentials", credentials,
                "metadataFields", metadataFields,
                "sourceType", sourceType,
                "spreadsheetId", spreadsheetId);
    }
    
    public final static class Builder {
 
        private SourceSmartsheetsAuthorizationMethod credentials;
 
        private Optional<? extends java.util.List<Validenums>> metadataFields = Optional.empty();
 
        private String spreadsheetId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(SourceSmartsheetsAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * A List of available columns which metadata can be pulled from.
         */
        public Builder metadataFields(java.util.List<Validenums> metadataFields) {
            Utils.checkNotNull(metadataFields, "metadataFields");
            this.metadataFields = Optional.ofNullable(metadataFields);
            return this;
        }

        /**
         * A List of available columns which metadata can be pulled from.
         */
        public Builder metadataFields(Optional<? extends java.util.List<Validenums>> metadataFields) {
            Utils.checkNotNull(metadataFields, "metadataFields");
            this.metadataFields = metadataFields;
            return this;
        }

        /**
         * The spreadsheet ID. Find it by opening the spreadsheet then navigating to File &gt; Properties
         */
        public Builder spreadsheetId(String spreadsheetId) {
            Utils.checkNotNull(spreadsheetId, "spreadsheetId");
            this.spreadsheetId = spreadsheetId;
            return this;
        }
        
        public SourceSmartsheets build() {
            return new SourceSmartsheets(
                credentials,
                metadataFields,
                spreadsheetId);
        }

        private static final LazySingletonValue<SourceSmartsheetsSmartsheets> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"smartsheets\"",
                        new TypeReference<SourceSmartsheetsSmartsheets>() {});
    }
}

