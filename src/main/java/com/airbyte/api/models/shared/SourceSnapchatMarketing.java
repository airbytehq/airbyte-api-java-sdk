/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;


public class SourceSnapchatMarketing {

    /**
     * The Client ID of your Snapchat developer application.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * The Client Secret of your Snapchat developer application.
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<? extends LocalDate> endDate;

    /**
     * Refresh Token to renew the expired Access Token.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private SourceSnapchatMarketingSnapchatMarketing sourceType;

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends LocalDate> startDate;

    public SourceSnapchatMarketing(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("end_date") Optional<? extends LocalDate> endDate,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("start_date") Optional<? extends LocalDate> startDate) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(startDate, "startDate");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.endDate = endDate;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * The Client ID of your Snapchat developer application.
     */
    public String clientId() {
        return clientId;
    }

    /**
     * The Client Secret of your Snapchat developer application.
     */
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    public Optional<? extends LocalDate> endDate() {
        return endDate;
    }

    /**
     * Refresh Token to renew the expired Access Token.
     */
    public String refreshToken() {
        return refreshToken;
    }

    public SourceSnapchatMarketingSnapchatMarketing sourceType() {
        return sourceType;
    }

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    public Optional<? extends LocalDate> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Client ID of your Snapchat developer application.
     */
    public SourceSnapchatMarketing withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The Client Secret of your Snapchat developer application.
     */
    public SourceSnapchatMarketing withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    public SourceSnapchatMarketing withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    public SourceSnapchatMarketing withEndDate(Optional<? extends LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Refresh Token to renew the expired Access Token.
     */
    public SourceSnapchatMarketing withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    public SourceSnapchatMarketing withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    public SourceSnapchatMarketing withStartDate(Optional<? extends LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSnapchatMarketing other = (SourceSnapchatMarketing) o;
        return 
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.endDate, other.endDate) &&
            java.util.Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            clientId,
            clientSecret,
            endDate,
            refreshToken,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSnapchatMarketing.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "endDate", endDate,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<? extends LocalDate> endDate = Optional.empty();
 
        private String refreshToken;
 
        private Optional<? extends LocalDate> startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Client ID of your Snapchat developer application.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The Client Secret of your Snapchat developer application.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Date in the format 2017-01-25. Any data after this date will not be replicated.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Date in the format 2017-01-25. Any data after this date will not be replicated.
         */
        public Builder endDate(Optional<? extends LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Refresh Token to renew the expired Access Token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Date in the format 2022-01-01. Any data before this date will not be replicated.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Date in the format 2022-01-01. Any data before this date will not be replicated.
         */
        public Builder startDate(Optional<? extends LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceSnapchatMarketing build() {
            if (startDate == null) {
                startDate = _SINGLETON_VALUE_StartDate.value();
            }
            return new SourceSnapchatMarketing(
                clientId,
                clientSecret,
                endDate,
                refreshToken,
                startDate);
        }

        private static final LazySingletonValue<SourceSnapchatMarketingSnapchatMarketing> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"snapchat-marketing\"",
                        new TypeReference<SourceSnapchatMarketingSnapchatMarketing>() {});

        private static final LazySingletonValue<Optional<? extends LocalDate>> _SINGLETON_VALUE_StartDate =
                new LazySingletonValue<>(
                        "start_date",
                        "\"2022-01-01\"",
                        new TypeReference<Optional<? extends LocalDate>>() {});
    }
}

