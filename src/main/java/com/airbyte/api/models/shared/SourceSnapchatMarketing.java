/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;

public class SourceSnapchatMarketing {

    /**
     * Specifies the principle for conversion reporting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action_report_time")
    private Optional<? extends ActionReportTime> actionReportTime;

    /**
     * The Client ID of your Snapchat developer application.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * The Client Secret of your Snapchat developer application.
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<? extends LocalDate> endDate;

    /**
     * Refresh Token to renew the expired Access Token.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private SnapchatMarketing sourceType;

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends LocalDate> startDate;

    /**
     * Attribution window for swipe ups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("swipe_up_attribution_window")
    private Optional<? extends SwipeUpAttributionWindow> swipeUpAttributionWindow;

    /**
     * Attribution window for views.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view_attribution_window")
    private Optional<? extends ViewAttributionWindow> viewAttributionWindow;

    @JsonCreator
    public SourceSnapchatMarketing(
            @JsonProperty("action_report_time") Optional<? extends ActionReportTime> actionReportTime,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("end_date") Optional<? extends LocalDate> endDate,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("start_date") Optional<? extends LocalDate> startDate,
            @JsonProperty("swipe_up_attribution_window") Optional<? extends SwipeUpAttributionWindow> swipeUpAttributionWindow,
            @JsonProperty("view_attribution_window") Optional<? extends ViewAttributionWindow> viewAttributionWindow) {
        Utils.checkNotNull(actionReportTime, "actionReportTime");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(swipeUpAttributionWindow, "swipeUpAttributionWindow");
        Utils.checkNotNull(viewAttributionWindow, "viewAttributionWindow");
        this.actionReportTime = actionReportTime;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.endDate = endDate;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.swipeUpAttributionWindow = swipeUpAttributionWindow;
        this.viewAttributionWindow = viewAttributionWindow;
    }
    
    public SourceSnapchatMarketing(
            String clientId,
            String clientSecret,
            String refreshToken) {
        this(Optional.empty(), clientId, clientSecret, Optional.empty(), refreshToken, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Specifies the principle for conversion reporting.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActionReportTime> actionReportTime() {
        return (Optional<ActionReportTime>) actionReportTime;
    }

    /**
     * The Client ID of your Snapchat developer application.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * The Client Secret of your Snapchat developer application.
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LocalDate> endDate() {
        return (Optional<LocalDate>) endDate;
    }

    /**
     * Refresh Token to renew the expired Access Token.
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    @JsonIgnore
    public SnapchatMarketing sourceType() {
        return sourceType;
    }

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return (Optional<LocalDate>) startDate;
    }

    /**
     * Attribution window for swipe ups.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SwipeUpAttributionWindow> swipeUpAttributionWindow() {
        return (Optional<SwipeUpAttributionWindow>) swipeUpAttributionWindow;
    }

    /**
     * Attribution window for views.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ViewAttributionWindow> viewAttributionWindow() {
        return (Optional<ViewAttributionWindow>) viewAttributionWindow;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Specifies the principle for conversion reporting.
     */
    public SourceSnapchatMarketing withActionReportTime(ActionReportTime actionReportTime) {
        Utils.checkNotNull(actionReportTime, "actionReportTime");
        this.actionReportTime = Optional.ofNullable(actionReportTime);
        return this;
    }

    /**
     * Specifies the principle for conversion reporting.
     */
    public SourceSnapchatMarketing withActionReportTime(Optional<? extends ActionReportTime> actionReportTime) {
        Utils.checkNotNull(actionReportTime, "actionReportTime");
        this.actionReportTime = actionReportTime;
        return this;
    }

    /**
     * The Client ID of your Snapchat developer application.
     */
    public SourceSnapchatMarketing withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The Client Secret of your Snapchat developer application.
     */
    public SourceSnapchatMarketing withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    public SourceSnapchatMarketing withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    public SourceSnapchatMarketing withEndDate(Optional<? extends LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Refresh Token to renew the expired Access Token.
     */
    public SourceSnapchatMarketing withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    public SourceSnapchatMarketing withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated.
     */
    public SourceSnapchatMarketing withStartDate(Optional<? extends LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Attribution window for swipe ups.
     */
    public SourceSnapchatMarketing withSwipeUpAttributionWindow(SwipeUpAttributionWindow swipeUpAttributionWindow) {
        Utils.checkNotNull(swipeUpAttributionWindow, "swipeUpAttributionWindow");
        this.swipeUpAttributionWindow = Optional.ofNullable(swipeUpAttributionWindow);
        return this;
    }

    /**
     * Attribution window for swipe ups.
     */
    public SourceSnapchatMarketing withSwipeUpAttributionWindow(Optional<? extends SwipeUpAttributionWindow> swipeUpAttributionWindow) {
        Utils.checkNotNull(swipeUpAttributionWindow, "swipeUpAttributionWindow");
        this.swipeUpAttributionWindow = swipeUpAttributionWindow;
        return this;
    }

    /**
     * Attribution window for views.
     */
    public SourceSnapchatMarketing withViewAttributionWindow(ViewAttributionWindow viewAttributionWindow) {
        Utils.checkNotNull(viewAttributionWindow, "viewAttributionWindow");
        this.viewAttributionWindow = Optional.ofNullable(viewAttributionWindow);
        return this;
    }

    /**
     * Attribution window for views.
     */
    public SourceSnapchatMarketing withViewAttributionWindow(Optional<? extends ViewAttributionWindow> viewAttributionWindow) {
        Utils.checkNotNull(viewAttributionWindow, "viewAttributionWindow");
        this.viewAttributionWindow = viewAttributionWindow;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSnapchatMarketing other = (SourceSnapchatMarketing) o;
        return 
            java.util.Objects.deepEquals(this.actionReportTime, other.actionReportTime) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.endDate, other.endDate) &&
            java.util.Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.swipeUpAttributionWindow, other.swipeUpAttributionWindow) &&
            java.util.Objects.deepEquals(this.viewAttributionWindow, other.viewAttributionWindow);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            actionReportTime,
            clientId,
            clientSecret,
            endDate,
            refreshToken,
            sourceType,
            startDate,
            swipeUpAttributionWindow,
            viewAttributionWindow);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSnapchatMarketing.class,
                "actionReportTime", actionReportTime,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "endDate", endDate,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "startDate", startDate,
                "swipeUpAttributionWindow", swipeUpAttributionWindow,
                "viewAttributionWindow", viewAttributionWindow);
    }
    
    public final static class Builder {
 
        private Optional<? extends ActionReportTime> actionReportTime;
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<? extends LocalDate> endDate = Optional.empty();
 
        private String refreshToken;
 
        private Optional<? extends LocalDate> startDate;
 
        private Optional<? extends SwipeUpAttributionWindow> swipeUpAttributionWindow;
 
        private Optional<? extends ViewAttributionWindow> viewAttributionWindow;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Specifies the principle for conversion reporting.
         */
        public Builder actionReportTime(ActionReportTime actionReportTime) {
            Utils.checkNotNull(actionReportTime, "actionReportTime");
            this.actionReportTime = Optional.ofNullable(actionReportTime);
            return this;
        }

        /**
         * Specifies the principle for conversion reporting.
         */
        public Builder actionReportTime(Optional<? extends ActionReportTime> actionReportTime) {
            Utils.checkNotNull(actionReportTime, "actionReportTime");
            this.actionReportTime = actionReportTime;
            return this;
        }

        /**
         * The Client ID of your Snapchat developer application.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The Client Secret of your Snapchat developer application.
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Date in the format 2017-01-25. Any data after this date will not be replicated.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Date in the format 2017-01-25. Any data after this date will not be replicated.
         */
        public Builder endDate(Optional<? extends LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Refresh Token to renew the expired Access Token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Date in the format 2022-01-01. Any data before this date will not be replicated.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Date in the format 2022-01-01. Any data before this date will not be replicated.
         */
        public Builder startDate(Optional<? extends LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Attribution window for swipe ups.
         */
        public Builder swipeUpAttributionWindow(SwipeUpAttributionWindow swipeUpAttributionWindow) {
            Utils.checkNotNull(swipeUpAttributionWindow, "swipeUpAttributionWindow");
            this.swipeUpAttributionWindow = Optional.ofNullable(swipeUpAttributionWindow);
            return this;
        }

        /**
         * Attribution window for swipe ups.
         */
        public Builder swipeUpAttributionWindow(Optional<? extends SwipeUpAttributionWindow> swipeUpAttributionWindow) {
            Utils.checkNotNull(swipeUpAttributionWindow, "swipeUpAttributionWindow");
            this.swipeUpAttributionWindow = swipeUpAttributionWindow;
            return this;
        }

        /**
         * Attribution window for views.
         */
        public Builder viewAttributionWindow(ViewAttributionWindow viewAttributionWindow) {
            Utils.checkNotNull(viewAttributionWindow, "viewAttributionWindow");
            this.viewAttributionWindow = Optional.ofNullable(viewAttributionWindow);
            return this;
        }

        /**
         * Attribution window for views.
         */
        public Builder viewAttributionWindow(Optional<? extends ViewAttributionWindow> viewAttributionWindow) {
            Utils.checkNotNull(viewAttributionWindow, "viewAttributionWindow");
            this.viewAttributionWindow = viewAttributionWindow;
            return this;
        }
        
        public SourceSnapchatMarketing build() {
            if (actionReportTime == null) {
                actionReportTime = _SINGLETON_VALUE_ActionReportTime.value();
            }
            if (startDate == null) {
                startDate = _SINGLETON_VALUE_StartDate.value();
            }
            if (swipeUpAttributionWindow == null) {
                swipeUpAttributionWindow = _SINGLETON_VALUE_SwipeUpAttributionWindow.value();
            }
            if (viewAttributionWindow == null) {
                viewAttributionWindow = _SINGLETON_VALUE_ViewAttributionWindow.value();
            }
            return new SourceSnapchatMarketing(
                actionReportTime,
                clientId,
                clientSecret,
                endDate,
                refreshToken,
                startDate,
                swipeUpAttributionWindow,
                viewAttributionWindow);
        }

        private static final LazySingletonValue<Optional<? extends ActionReportTime>> _SINGLETON_VALUE_ActionReportTime =
                new LazySingletonValue<>(
                        "action_report_time",
                        "\"conversion\"",
                        new TypeReference<Optional<? extends ActionReportTime>>() {});

        private static final LazySingletonValue<SnapchatMarketing> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"snapchat-marketing\"",
                        new TypeReference<SnapchatMarketing>() {});

        private static final LazySingletonValue<Optional<? extends LocalDate>> _SINGLETON_VALUE_StartDate =
                new LazySingletonValue<>(
                        "start_date",
                        "\"2022-01-01\"",
                        new TypeReference<Optional<? extends LocalDate>>() {});

        private static final LazySingletonValue<Optional<? extends SwipeUpAttributionWindow>> _SINGLETON_VALUE_SwipeUpAttributionWindow =
                new LazySingletonValue<>(
                        "swipe_up_attribution_window",
                        "\"28_DAY\"",
                        new TypeReference<Optional<? extends SwipeUpAttributionWindow>>() {});

        private static final LazySingletonValue<Optional<? extends ViewAttributionWindow>> _SINGLETON_VALUE_ViewAttributionWindow =
                new LazySingletonValue<>(
                        "view_attribution_window",
                        "\"1_DAY\"",
                        new TypeReference<Optional<? extends ViewAttributionWindow>>() {});
    }
}

