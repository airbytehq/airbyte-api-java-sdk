/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceAssemblyai {

    /**
     * Your AssemblyAI API key. You can find it in the AssemblyAI dashboard at https://www.assemblyai.com/app/api-keys.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The request ID for LeMur responses
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_id")
    private Optional<String> requestId;

    @JsonProperty("sourceType")
    private Assemblyai sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * The subtitle format for transcript_subtitle stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtitle_format")
    private Optional<? extends SubtitleFormat> subtitleFormat;

    @JsonCreator
    public SourceAssemblyai(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("request_id") Optional<String> requestId,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("subtitle_format") Optional<? extends SubtitleFormat> subtitleFormat) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(requestId, "requestId");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(subtitleFormat, "subtitleFormat");
        this.apiKey = apiKey;
        this.requestId = requestId;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.subtitleFormat = subtitleFormat;
    }
    
    public SourceAssemblyai(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), startDate, Optional.empty());
    }

    /**
     * Your AssemblyAI API key. You can find it in the AssemblyAI dashboard at https://www.assemblyai.com/app/api-keys.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The request ID for LeMur responses
     */
    @JsonIgnore
    public Optional<String> requestId() {
        return requestId;
    }

    @JsonIgnore
    public Assemblyai sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * The subtitle format for transcript_subtitle stream
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SubtitleFormat> subtitleFormat() {
        return (Optional<SubtitleFormat>) subtitleFormat;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Your AssemblyAI API key. You can find it in the AssemblyAI dashboard at https://www.assemblyai.com/app/api-keys.
     */
    public SourceAssemblyai withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The request ID for LeMur responses
     */
    public SourceAssemblyai withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = Optional.ofNullable(requestId);
        return this;
    }

    /**
     * The request ID for LeMur responses
     */
    public SourceAssemblyai withRequestId(Optional<String> requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }

    public SourceAssemblyai withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The subtitle format for transcript_subtitle stream
     */
    public SourceAssemblyai withSubtitleFormat(SubtitleFormat subtitleFormat) {
        Utils.checkNotNull(subtitleFormat, "subtitleFormat");
        this.subtitleFormat = Optional.ofNullable(subtitleFormat);
        return this;
    }

    /**
     * The subtitle format for transcript_subtitle stream
     */
    public SourceAssemblyai withSubtitleFormat(Optional<? extends SubtitleFormat> subtitleFormat) {
        Utils.checkNotNull(subtitleFormat, "subtitleFormat");
        this.subtitleFormat = subtitleFormat;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAssemblyai other = (SourceAssemblyai) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.requestId, other.requestId) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.subtitleFormat, other.subtitleFormat);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            requestId,
            sourceType,
            startDate,
            subtitleFormat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAssemblyai.class,
                "apiKey", apiKey,
                "requestId", requestId,
                "sourceType", sourceType,
                "startDate", startDate,
                "subtitleFormat", subtitleFormat);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> requestId = Optional.empty();
 
        private OffsetDateTime startDate;
 
        private Optional<? extends SubtitleFormat> subtitleFormat;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your AssemblyAI API key. You can find it in the AssemblyAI dashboard at https://www.assemblyai.com/app/api-keys.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The request ID for LeMur responses
         */
        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = Optional.ofNullable(requestId);
            return this;
        }

        /**
         * The request ID for LeMur responses
         */
        public Builder requestId(Optional<String> requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The subtitle format for transcript_subtitle stream
         */
        public Builder subtitleFormat(SubtitleFormat subtitleFormat) {
            Utils.checkNotNull(subtitleFormat, "subtitleFormat");
            this.subtitleFormat = Optional.ofNullable(subtitleFormat);
            return this;
        }

        /**
         * The subtitle format for transcript_subtitle stream
         */
        public Builder subtitleFormat(Optional<? extends SubtitleFormat> subtitleFormat) {
            Utils.checkNotNull(subtitleFormat, "subtitleFormat");
            this.subtitleFormat = subtitleFormat;
            return this;
        }
        
        public SourceAssemblyai build() {
            if (subtitleFormat == null) {
                subtitleFormat = _SINGLETON_VALUE_SubtitleFormat.value();
            }
            return new SourceAssemblyai(
                apiKey,
                requestId,
                startDate,
                subtitleFormat);
        }

        private static final LazySingletonValue<Assemblyai> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"assemblyai\"",
                        new TypeReference<Assemblyai>() {});

        private static final LazySingletonValue<Optional<? extends SubtitleFormat>> _SINGLETON_VALUE_SubtitleFormat =
                new LazySingletonValue<>(
                        "subtitle_format",
                        "\"srt\"",
                        new TypeReference<Optional<? extends SubtitleFormat>>() {});
    }
}
