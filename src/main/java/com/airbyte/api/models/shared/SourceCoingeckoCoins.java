/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;

public class SourceCoingeckoCoins {

    /**
     * API Key (for pro users)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_key")
    private Optional<String> apiKey;

    /**
     * CoinGecko coin ID (e.g. bitcoin). Can be retrieved from the
     * `/coins/list` endpoint.
     */
    @JsonProperty("coin_id")
    private String coinId;

    /**
     * The number of days of data for market chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("days")
    private Optional<? extends Days> days;

    /**
     * The end date for the historical data stream in dd-mm-yyyy format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<LocalDate> endDate;

    @JsonProperty("sourceType")
    private CoingeckoCoins sourceType;

    /**
     * The start date for the historical data stream in dd-mm-yyyy format.
     */
    @JsonProperty("start_date")
    private LocalDate startDate;

    /**
     * The target currency of market data (e.g. usd, eur, jpy, etc.)
     */
    @JsonProperty("vs_currency")
    private String vsCurrency;

    @JsonCreator
    public SourceCoingeckoCoins(
            @JsonProperty("api_key") Optional<String> apiKey,
            @JsonProperty("coin_id") String coinId,
            @JsonProperty("days") Optional<? extends Days> days,
            @JsonProperty("end_date") Optional<LocalDate> endDate,
            @JsonProperty("start_date") LocalDate startDate,
            @JsonProperty("vs_currency") String vsCurrency) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(coinId, "coinId");
        Utils.checkNotNull(days, "days");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(vsCurrency, "vsCurrency");
        this.apiKey = apiKey;
        this.coinId = coinId;
        this.days = days;
        this.endDate = endDate;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.vsCurrency = vsCurrency;
    }
    
    public SourceCoingeckoCoins(
            String coinId,
            LocalDate startDate,
            String vsCurrency) {
        this(Optional.empty(), coinId, Optional.empty(), Optional.empty(), startDate, vsCurrency);
    }

    /**
     * API Key (for pro users)
     */
    @JsonIgnore
    public Optional<String> apiKey() {
        return apiKey;
    }

    /**
     * CoinGecko coin ID (e.g. bitcoin). Can be retrieved from the
     * `/coins/list` endpoint.
     */
    @JsonIgnore
    public String coinId() {
        return coinId;
    }

    /**
     * The number of days of data for market chart.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Days> days() {
        return (Optional<Days>) days;
    }

    /**
     * The end date for the historical data stream in dd-mm-yyyy format.
     */
    @JsonIgnore
    public Optional<LocalDate> endDate() {
        return endDate;
    }

    @JsonIgnore
    public CoingeckoCoins sourceType() {
        return sourceType;
    }

    /**
     * The start date for the historical data stream in dd-mm-yyyy format.
     */
    @JsonIgnore
    public LocalDate startDate() {
        return startDate;
    }

    /**
     * The target currency of market data (e.g. usd, eur, jpy, etc.)
     */
    @JsonIgnore
    public String vsCurrency() {
        return vsCurrency;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * API Key (for pro users)
     */
    public SourceCoingeckoCoins withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = Optional.ofNullable(apiKey);
        return this;
    }

    /**
     * API Key (for pro users)
     */
    public SourceCoingeckoCoins withApiKey(Optional<String> apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * CoinGecko coin ID (e.g. bitcoin). Can be retrieved from the
     * `/coins/list` endpoint.
     */
    public SourceCoingeckoCoins withCoinId(String coinId) {
        Utils.checkNotNull(coinId, "coinId");
        this.coinId = coinId;
        return this;
    }

    /**
     * The number of days of data for market chart.
     */
    public SourceCoingeckoCoins withDays(Days days) {
        Utils.checkNotNull(days, "days");
        this.days = Optional.ofNullable(days);
        return this;
    }

    /**
     * The number of days of data for market chart.
     */
    public SourceCoingeckoCoins withDays(Optional<? extends Days> days) {
        Utils.checkNotNull(days, "days");
        this.days = days;
        return this;
    }

    /**
     * The end date for the historical data stream in dd-mm-yyyy format.
     */
    public SourceCoingeckoCoins withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The end date for the historical data stream in dd-mm-yyyy format.
     */
    public SourceCoingeckoCoins withEndDate(Optional<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The start date for the historical data stream in dd-mm-yyyy format.
     */
    public SourceCoingeckoCoins withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The target currency of market data (e.g. usd, eur, jpy, etc.)
     */
    public SourceCoingeckoCoins withVsCurrency(String vsCurrency) {
        Utils.checkNotNull(vsCurrency, "vsCurrency");
        this.vsCurrency = vsCurrency;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceCoingeckoCoins other = (SourceCoingeckoCoins) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.coinId, other.coinId) &&
            Objects.deepEquals(this.days, other.days) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.vsCurrency, other.vsCurrency);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            coinId,
            days,
            endDate,
            sourceType,
            startDate,
            vsCurrency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceCoingeckoCoins.class,
                "apiKey", apiKey,
                "coinId", coinId,
                "days", days,
                "endDate", endDate,
                "sourceType", sourceType,
                "startDate", startDate,
                "vsCurrency", vsCurrency);
    }
    
    public final static class Builder {
 
        private Optional<String> apiKey = Optional.empty();
 
        private String coinId;
 
        private Optional<? extends Days> days;
 
        private Optional<LocalDate> endDate = Optional.empty();
 
        private LocalDate startDate;
 
        private String vsCurrency;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API Key (for pro users)
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = Optional.ofNullable(apiKey);
            return this;
        }

        /**
         * API Key (for pro users)
         */
        public Builder apiKey(Optional<String> apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * CoinGecko coin ID (e.g. bitcoin). Can be retrieved from the
         * `/coins/list` endpoint.
         */
        public Builder coinId(String coinId) {
            Utils.checkNotNull(coinId, "coinId");
            this.coinId = coinId;
            return this;
        }

        /**
         * The number of days of data for market chart.
         */
        public Builder days(Days days) {
            Utils.checkNotNull(days, "days");
            this.days = Optional.ofNullable(days);
            return this;
        }

        /**
         * The number of days of data for market chart.
         */
        public Builder days(Optional<? extends Days> days) {
            Utils.checkNotNull(days, "days");
            this.days = days;
            return this;
        }

        /**
         * The end date for the historical data stream in dd-mm-yyyy format.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The end date for the historical data stream in dd-mm-yyyy format.
         */
        public Builder endDate(Optional<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * The start date for the historical data stream in dd-mm-yyyy format.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The target currency of market data (e.g. usd, eur, jpy, etc.)
         */
        public Builder vsCurrency(String vsCurrency) {
            Utils.checkNotNull(vsCurrency, "vsCurrency");
            this.vsCurrency = vsCurrency;
            return this;
        }
        
        public SourceCoingeckoCoins build() {
            if (days == null) {
                days = _SINGLETON_VALUE_Days.value();
            }
            return new SourceCoingeckoCoins(
                apiKey,
                coinId,
                days,
                endDate,
                startDate,
                vsCurrency);
        }

        private static final LazySingletonValue<Optional<? extends Days>> _SINGLETON_VALUE_Days =
                new LazySingletonValue<>(
                        "days",
                        "\"30\"",
                        new TypeReference<Optional<? extends Days>>() {});

        private static final LazySingletonValue<CoingeckoCoins> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"coingecko-coins\"",
                        new TypeReference<CoingeckoCoins>() {});
    }
}
