/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * AESCBCEnvelopeEncryption - Staging data will be encrypted using AES-CBC envelope encryption.
 */

public class AESCBCEnvelopeEncryption {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption_type")
    private Optional<? extends DestinationRedshiftEncryptionType> encryptionType;

    /**
     * The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key_encrypting_key")
    private Optional<? extends String> keyEncryptingKey;

    @JsonCreator
    public AESCBCEnvelopeEncryption(
            @JsonProperty("key_encrypting_key") Optional<? extends String> keyEncryptingKey) {
        Utils.checkNotNull(keyEncryptingKey, "keyEncryptingKey");
        this.encryptionType = Builder._SINGLETON_VALUE_EncryptionType.value();
        this.keyEncryptingKey = keyEncryptingKey;
    }
    
    public AESCBCEnvelopeEncryption() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationRedshiftEncryptionType> encryptionType() {
        return (Optional<DestinationRedshiftEncryptionType>) encryptionType;
    }

    /**
     * The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> keyEncryptingKey() {
        return (Optional<String>) keyEncryptingKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
     */
    public AESCBCEnvelopeEncryption withKeyEncryptingKey(String keyEncryptingKey) {
        Utils.checkNotNull(keyEncryptingKey, "keyEncryptingKey");
        this.keyEncryptingKey = Optional.ofNullable(keyEncryptingKey);
        return this;
    }

    /**
     * The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
     */
    public AESCBCEnvelopeEncryption withKeyEncryptingKey(Optional<? extends String> keyEncryptingKey) {
        Utils.checkNotNull(keyEncryptingKey, "keyEncryptingKey");
        this.keyEncryptingKey = keyEncryptingKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AESCBCEnvelopeEncryption other = (AESCBCEnvelopeEncryption) o;
        return 
            java.util.Objects.deepEquals(this.encryptionType, other.encryptionType) &&
            java.util.Objects.deepEquals(this.keyEncryptingKey, other.keyEncryptingKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            encryptionType,
            keyEncryptingKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AESCBCEnvelopeEncryption.class,
                "encryptionType", encryptionType,
                "keyEncryptingKey", keyEncryptingKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> keyEncryptingKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
         */
        public Builder keyEncryptingKey(String keyEncryptingKey) {
            Utils.checkNotNull(keyEncryptingKey, "keyEncryptingKey");
            this.keyEncryptingKey = Optional.ofNullable(keyEncryptingKey);
            return this;
        }

        /**
         * The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
         */
        public Builder keyEncryptingKey(Optional<? extends String> keyEncryptingKey) {
            Utils.checkNotNull(keyEncryptingKey, "keyEncryptingKey");
            this.keyEncryptingKey = keyEncryptingKey;
            return this;
        }
        
        public AESCBCEnvelopeEncryption build() {
            return new AESCBCEnvelopeEncryption(
                keyEncryptingKey);
        }

        private static final LazySingletonValue<Optional<? extends DestinationRedshiftEncryptionType>> _SINGLETON_VALUE_EncryptionType =
                new LazySingletonValue<>(
                        "encryption_type",
                        "\"aes_cbc_envelope\"",
                        new TypeReference<Optional<? extends DestinationRedshiftEncryptionType>>() {});
    }
}

