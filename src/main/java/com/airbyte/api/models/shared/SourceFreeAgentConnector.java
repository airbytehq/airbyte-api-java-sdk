/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourceFreeAgentConnector {

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_refresh_token_2")
    private String clientRefreshToken2;

    @JsonProperty("client_secret")
    private String clientSecret;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_year")
    private Optional<Double> payrollYear;

    @JsonProperty("sourceType")
    private FreeAgentConnector sourceType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_since")
    private Optional<OffsetDateTime> updatedSince;

    @JsonCreator
    public SourceFreeAgentConnector(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_refresh_token_2") String clientRefreshToken2,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("payroll_year") Optional<Double> payrollYear,
            @JsonProperty("updated_since") Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientRefreshToken2, "clientRefreshToken2");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(payrollYear, "payrollYear");
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.clientId = clientId;
        this.clientRefreshToken2 = clientRefreshToken2;
        this.clientSecret = clientSecret;
        this.payrollYear = payrollYear;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.updatedSince = updatedSince;
    }
    
    public SourceFreeAgentConnector(
            String clientId,
            String clientRefreshToken2,
            String clientSecret) {
        this(clientId, clientRefreshToken2, clientSecret, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String clientRefreshToken2() {
        return clientRefreshToken2;
    }

    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    @JsonIgnore
    public Optional<Double> payrollYear() {
        return payrollYear;
    }

    @JsonIgnore
    public FreeAgentConnector sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedSince() {
        return updatedSince;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceFreeAgentConnector withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public SourceFreeAgentConnector withClientRefreshToken2(String clientRefreshToken2) {
        Utils.checkNotNull(clientRefreshToken2, "clientRefreshToken2");
        this.clientRefreshToken2 = clientRefreshToken2;
        return this;
    }

    public SourceFreeAgentConnector withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    public SourceFreeAgentConnector withPayrollYear(double payrollYear) {
        Utils.checkNotNull(payrollYear, "payrollYear");
        this.payrollYear = Optional.ofNullable(payrollYear);
        return this;
    }

    public SourceFreeAgentConnector withPayrollYear(Optional<Double> payrollYear) {
        Utils.checkNotNull(payrollYear, "payrollYear");
        this.payrollYear = payrollYear;
        return this;
    }

    public SourceFreeAgentConnector withUpdatedSince(OffsetDateTime updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = Optional.ofNullable(updatedSince);
        return this;
    }

    public SourceFreeAgentConnector withUpdatedSince(Optional<OffsetDateTime> updatedSince) {
        Utils.checkNotNull(updatedSince, "updatedSince");
        this.updatedSince = updatedSince;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFreeAgentConnector other = (SourceFreeAgentConnector) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientRefreshToken2, other.clientRefreshToken2) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.payrollYear, other.payrollYear) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.updatedSince, other.updatedSince);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientRefreshToken2,
            clientSecret,
            payrollYear,
            sourceType,
            updatedSince);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFreeAgentConnector.class,
                "clientId", clientId,
                "clientRefreshToken2", clientRefreshToken2,
                "clientSecret", clientSecret,
                "payrollYear", payrollYear,
                "sourceType", sourceType,
                "updatedSince", updatedSince);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientRefreshToken2;
 
        private String clientSecret;
 
        private Optional<Double> payrollYear = Optional.empty();
 
        private Optional<OffsetDateTime> updatedSince = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientRefreshToken2(String clientRefreshToken2) {
            Utils.checkNotNull(clientRefreshToken2, "clientRefreshToken2");
            this.clientRefreshToken2 = clientRefreshToken2;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder payrollYear(double payrollYear) {
            Utils.checkNotNull(payrollYear, "payrollYear");
            this.payrollYear = Optional.ofNullable(payrollYear);
            return this;
        }

        public Builder payrollYear(Optional<Double> payrollYear) {
            Utils.checkNotNull(payrollYear, "payrollYear");
            this.payrollYear = payrollYear;
            return this;
        }

        public Builder updatedSince(OffsetDateTime updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = Optional.ofNullable(updatedSince);
            return this;
        }

        public Builder updatedSince(Optional<OffsetDateTime> updatedSince) {
            Utils.checkNotNull(updatedSince, "updatedSince");
            this.updatedSince = updatedSince;
            return this;
        }
        
        public SourceFreeAgentConnector build() {
            return new SourceFreeAgentConnector(
                clientId,
                clientRefreshToken2,
                clientSecret,
                payrollYear,
                updatedSince);
        }

        private static final LazySingletonValue<FreeAgentConnector> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"free-agent-connector\"",
                        new TypeReference<FreeAgentConnector>() {});
    }
}

