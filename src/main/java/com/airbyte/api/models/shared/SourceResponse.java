/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceResponse
 * 
 * <p>Provides details of a single source.
 */
public class SourceResponse {

    /**
     * The values required to configure the source.
     */
    @JsonProperty("configuration")
    private SourceConfiguration configuration;

    @JsonProperty("createdAt")
    private long createdAt;

    @JsonProperty("definitionId")
    private String definitionId;

    @JsonProperty("name")
    private String name;

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceAllocation")
    private Optional<? extends ScopedResourceRequirements> resourceAllocation;

    @JsonProperty("sourceId")
    private String sourceId;

    @JsonProperty("sourceType")
    private String sourceType;

    @JsonProperty("workspaceId")
    private String workspaceId;

    @JsonCreator
    public SourceResponse(
            @JsonProperty("configuration") SourceConfiguration configuration,
            @JsonProperty("createdAt") long createdAt,
            @JsonProperty("definitionId") String definitionId,
            @JsonProperty("name") String name,
            @JsonProperty("resourceAllocation") Optional<? extends ScopedResourceRequirements> resourceAllocation,
            @JsonProperty("sourceId") String sourceId,
            @JsonProperty("sourceType") String sourceType,
            @JsonProperty("workspaceId") String workspaceId) {
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(definitionId, "definitionId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(resourceAllocation, "resourceAllocation");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(sourceType, "sourceType");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.configuration = configuration;
        this.createdAt = createdAt;
        this.definitionId = definitionId;
        this.name = name;
        this.resourceAllocation = resourceAllocation;
        this.sourceId = sourceId;
        this.sourceType = sourceType;
        this.workspaceId = workspaceId;
    }
    
    public SourceResponse(
            SourceConfiguration configuration,
            long createdAt,
            String definitionId,
            String name,
            String sourceId,
            String sourceType,
            String workspaceId) {
        this(configuration, createdAt, definitionId, name, Optional.empty(), sourceId, sourceType, workspaceId);
    }

    /**
     * The values required to configure the source.
     */
    @JsonIgnore
    public SourceConfiguration configuration() {
        return configuration;
    }

    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String definitionId() {
        return definitionId;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ScopedResourceRequirements> resourceAllocation() {
        return (Optional<ScopedResourceRequirements>) resourceAllocation;
    }

    @JsonIgnore
    public String sourceId() {
        return sourceId;
    }

    @JsonIgnore
    public String sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The values required to configure the source.
     */
    public SourceResponse withConfiguration(SourceConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    public SourceResponse withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public SourceResponse withDefinitionId(String definitionId) {
        Utils.checkNotNull(definitionId, "definitionId");
        this.definitionId = definitionId;
        return this;
    }

    public SourceResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    public SourceResponse withResourceAllocation(ScopedResourceRequirements resourceAllocation) {
        Utils.checkNotNull(resourceAllocation, "resourceAllocation");
        this.resourceAllocation = Optional.ofNullable(resourceAllocation);
        return this;
    }

    /**
     * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
     */
    public SourceResponse withResourceAllocation(Optional<? extends ScopedResourceRequirements> resourceAllocation) {
        Utils.checkNotNull(resourceAllocation, "resourceAllocation");
        this.resourceAllocation = resourceAllocation;
        return this;
    }

    public SourceResponse withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    public SourceResponse withSourceType(String sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    public SourceResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceResponse other = (SourceResponse) o;
        return 
            Objects.deepEquals(this.configuration, other.configuration) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.definitionId, other.definitionId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.resourceAllocation, other.resourceAllocation) &&
            Objects.deepEquals(this.sourceId, other.sourceId) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            configuration,
            createdAt,
            definitionId,
            name,
            resourceAllocation,
            sourceId,
            sourceType,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceResponse.class,
                "configuration", configuration,
                "createdAt", createdAt,
                "definitionId", definitionId,
                "name", name,
                "resourceAllocation", resourceAllocation,
                "sourceId", sourceId,
                "sourceType", sourceType,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private SourceConfiguration configuration;
 
        private Long createdAt;
 
        private String definitionId;
 
        private String name;
 
        private Optional<? extends ScopedResourceRequirements> resourceAllocation = Optional.empty();
 
        private String sourceId;
 
        private String sourceType;
 
        private String workspaceId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The values required to configure the source.
         */
        public Builder configuration(SourceConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder definitionId(String definitionId) {
            Utils.checkNotNull(definitionId, "definitionId");
            this.definitionId = definitionId;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
         */
        public Builder resourceAllocation(ScopedResourceRequirements resourceAllocation) {
            Utils.checkNotNull(resourceAllocation, "resourceAllocation");
            this.resourceAllocation = Optional.ofNullable(resourceAllocation);
            return this;
        }

        /**
         * actor or actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.
         */
        public Builder resourceAllocation(Optional<? extends ScopedResourceRequirements> resourceAllocation) {
            Utils.checkNotNull(resourceAllocation, "resourceAllocation");
            this.resourceAllocation = resourceAllocation;
            return this;
        }

        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        public Builder sourceType(String sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public SourceResponse build() {
            return new SourceResponse(
                configuration,
                createdAt,
                definitionId,
                name,
                resourceAllocation,
                sourceId,
                sourceType,
                workspaceId);
        }
    }
}
