/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * SourceResponse - Provides details of a single source.
 */

public class SourceResponse {

    /**
     * The values required to configure the source.
     */
    @JsonProperty("configuration")
    private SourceConfiguration configuration;

    @JsonProperty("createdAt")
    private long createdAt;

    @JsonProperty("definitionId")
    private String definitionId;

    @JsonProperty("name")
    private String name;

    @JsonProperty("sourceId")
    private String sourceId;

    @JsonProperty("sourceType")
    private String sourceType;

    @JsonProperty("workspaceId")
    private String workspaceId;

    @JsonCreator
    public SourceResponse(
            @JsonProperty("configuration") SourceConfiguration configuration,
            @JsonProperty("createdAt") long createdAt,
            @JsonProperty("definitionId") String definitionId,
            @JsonProperty("name") String name,
            @JsonProperty("sourceId") String sourceId,
            @JsonProperty("sourceType") String sourceType,
            @JsonProperty("workspaceId") String workspaceId) {
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(definitionId, "definitionId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(sourceType, "sourceType");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.configuration = configuration;
        this.createdAt = createdAt;
        this.definitionId = definitionId;
        this.name = name;
        this.sourceId = sourceId;
        this.sourceType = sourceType;
        this.workspaceId = workspaceId;
    }

    /**
     * The values required to configure the source.
     */
    @JsonIgnore
    public SourceConfiguration configuration() {
        return configuration;
    }

    @JsonIgnore
    public long createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String definitionId() {
        return definitionId;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String sourceId() {
        return sourceId;
    }

    @JsonIgnore
    public String sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The values required to configure the source.
     */
    public SourceResponse withConfiguration(SourceConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    public SourceResponse withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public SourceResponse withDefinitionId(String definitionId) {
        Utils.checkNotNull(definitionId, "definitionId");
        this.definitionId = definitionId;
        return this;
    }

    public SourceResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public SourceResponse withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    public SourceResponse withSourceType(String sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    public SourceResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceResponse other = (SourceResponse) o;
        return 
            Objects.deepEquals(this.configuration, other.configuration) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.definitionId, other.definitionId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.sourceId, other.sourceId) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            configuration,
            createdAt,
            definitionId,
            name,
            sourceId,
            sourceType,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceResponse.class,
                "configuration", configuration,
                "createdAt", createdAt,
                "definitionId", definitionId,
                "name", name,
                "sourceId", sourceId,
                "sourceType", sourceType,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private SourceConfiguration configuration;
 
        private Long createdAt;
 
        private String definitionId;
 
        private String name;
 
        private String sourceId;
 
        private String sourceType;
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The values required to configure the source.
         */
        public Builder configuration(SourceConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder definitionId(String definitionId) {
            Utils.checkNotNull(definitionId, "definitionId");
            this.definitionId = definitionId;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        public Builder sourceType(String sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public SourceResponse build() {
            return new SourceResponse(
                configuration,
                createdAt,
                definitionId,
                name,
                sourceId,
                sourceType,
                workspaceId);
        }
    }
}

