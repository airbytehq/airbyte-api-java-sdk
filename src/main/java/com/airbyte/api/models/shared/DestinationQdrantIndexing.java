/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DestinationQdrantIndexing - Indexing configuration
 */

public class DestinationQdrantIndexing {

    /**
     * Method to authenticate with the Qdrant Instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_method")
    private Optional<? extends DestinationQdrantAuthenticationMethod> authMethod;

    /**
     * The collection to load data into
     */
    @JsonProperty("collection")
    private String collection;

    /**
     * The Distance metric used to measure similarities among vectors. This field is only used if the collection defined in the does not exist yet and is created automatically by the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distance_metric")
    private Optional<? extends DistanceMetric> distanceMetric;

    /**
     * Whether to prefer gRPC over HTTP. Set to true for Qdrant cloud clusters
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefer_grpc")
    private Optional<? extends Boolean> preferGrpc;

    /**
     * The field in the payload that contains the embedded text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_field")
    private Optional<? extends String> textField;

    /**
     * Public Endpoint of the Qdrant cluser
     */
    @JsonProperty("url")
    private String url;

    public DestinationQdrantIndexing(
            @JsonProperty("auth_method") Optional<? extends DestinationQdrantAuthenticationMethod> authMethod,
            @JsonProperty("collection") String collection,
            @JsonProperty("distance_metric") Optional<? extends DistanceMetric> distanceMetric,
            @JsonProperty("prefer_grpc") Optional<? extends Boolean> preferGrpc,
            @JsonProperty("text_field") Optional<? extends String> textField,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(authMethod, "authMethod");
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(distanceMetric, "distanceMetric");
        Utils.checkNotNull(preferGrpc, "preferGrpc");
        Utils.checkNotNull(textField, "textField");
        Utils.checkNotNull(url, "url");
        this.authMethod = authMethod;
        this.collection = collection;
        this.distanceMetric = distanceMetric;
        this.preferGrpc = preferGrpc;
        this.textField = textField;
        this.url = url;
    }

    /**
     * Method to authenticate with the Qdrant Instance
     */
    public Optional<? extends DestinationQdrantAuthenticationMethod> authMethod() {
        return authMethod;
    }

    /**
     * The collection to load data into
     */
    public String collection() {
        return collection;
    }

    /**
     * The Distance metric used to measure similarities among vectors. This field is only used if the collection defined in the does not exist yet and is created automatically by the connector.
     */
    public Optional<? extends DistanceMetric> distanceMetric() {
        return distanceMetric;
    }

    /**
     * Whether to prefer gRPC over HTTP. Set to true for Qdrant cloud clusters
     */
    public Optional<? extends Boolean> preferGrpc() {
        return preferGrpc;
    }

    /**
     * The field in the payload that contains the embedded text
     */
    public Optional<? extends String> textField() {
        return textField;
    }

    /**
     * Public Endpoint of the Qdrant cluser
     */
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Method to authenticate with the Qdrant Instance
     */
    public DestinationQdrantIndexing withAuthMethod(DestinationQdrantAuthenticationMethod authMethod) {
        Utils.checkNotNull(authMethod, "authMethod");
        this.authMethod = Optional.ofNullable(authMethod);
        return this;
    }

    /**
     * Method to authenticate with the Qdrant Instance
     */
    public DestinationQdrantIndexing withAuthMethod(Optional<? extends DestinationQdrantAuthenticationMethod> authMethod) {
        Utils.checkNotNull(authMethod, "authMethod");
        this.authMethod = authMethod;
        return this;
    }

    /**
     * The collection to load data into
     */
    public DestinationQdrantIndexing withCollection(String collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    /**
     * The Distance metric used to measure similarities among vectors. This field is only used if the collection defined in the does not exist yet and is created automatically by the connector.
     */
    public DestinationQdrantIndexing withDistanceMetric(DistanceMetric distanceMetric) {
        Utils.checkNotNull(distanceMetric, "distanceMetric");
        this.distanceMetric = Optional.ofNullable(distanceMetric);
        return this;
    }

    /**
     * The Distance metric used to measure similarities among vectors. This field is only used if the collection defined in the does not exist yet and is created automatically by the connector.
     */
    public DestinationQdrantIndexing withDistanceMetric(Optional<? extends DistanceMetric> distanceMetric) {
        Utils.checkNotNull(distanceMetric, "distanceMetric");
        this.distanceMetric = distanceMetric;
        return this;
    }

    /**
     * Whether to prefer gRPC over HTTP. Set to true for Qdrant cloud clusters
     */
    public DestinationQdrantIndexing withPreferGrpc(boolean preferGrpc) {
        Utils.checkNotNull(preferGrpc, "preferGrpc");
        this.preferGrpc = Optional.ofNullable(preferGrpc);
        return this;
    }

    /**
     * Whether to prefer gRPC over HTTP. Set to true for Qdrant cloud clusters
     */
    public DestinationQdrantIndexing withPreferGrpc(Optional<? extends Boolean> preferGrpc) {
        Utils.checkNotNull(preferGrpc, "preferGrpc");
        this.preferGrpc = preferGrpc;
        return this;
    }

    /**
     * The field in the payload that contains the embedded text
     */
    public DestinationQdrantIndexing withTextField(String textField) {
        Utils.checkNotNull(textField, "textField");
        this.textField = Optional.ofNullable(textField);
        return this;
    }

    /**
     * The field in the payload that contains the embedded text
     */
    public DestinationQdrantIndexing withTextField(Optional<? extends String> textField) {
        Utils.checkNotNull(textField, "textField");
        this.textField = textField;
        return this;
    }

    /**
     * Public Endpoint of the Qdrant cluser
     */
    public DestinationQdrantIndexing withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationQdrantIndexing other = (DestinationQdrantIndexing) o;
        return 
            java.util.Objects.deepEquals(this.authMethod, other.authMethod) &&
            java.util.Objects.deepEquals(this.collection, other.collection) &&
            java.util.Objects.deepEquals(this.distanceMetric, other.distanceMetric) &&
            java.util.Objects.deepEquals(this.preferGrpc, other.preferGrpc) &&
            java.util.Objects.deepEquals(this.textField, other.textField) &&
            java.util.Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authMethod,
            collection,
            distanceMetric,
            preferGrpc,
            textField,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationQdrantIndexing.class,
                "authMethod", authMethod,
                "collection", collection,
                "distanceMetric", distanceMetric,
                "preferGrpc", preferGrpc,
                "textField", textField,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<? extends DestinationQdrantAuthenticationMethod> authMethod = Optional.empty();
 
        private String collection;
 
        private Optional<? extends DistanceMetric> distanceMetric;
 
        private Optional<? extends Boolean> preferGrpc;
 
        private Optional<? extends String> textField;
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Method to authenticate with the Qdrant Instance
         */
        public Builder authMethod(DestinationQdrantAuthenticationMethod authMethod) {
            Utils.checkNotNull(authMethod, "authMethod");
            this.authMethod = Optional.ofNullable(authMethod);
            return this;
        }

        /**
         * Method to authenticate with the Qdrant Instance
         */
        public Builder authMethod(Optional<? extends DestinationQdrantAuthenticationMethod> authMethod) {
            Utils.checkNotNull(authMethod, "authMethod");
            this.authMethod = authMethod;
            return this;
        }

        /**
         * The collection to load data into
         */
        public Builder collection(String collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        /**
         * The Distance metric used to measure similarities among vectors. This field is only used if the collection defined in the does not exist yet and is created automatically by the connector.
         */
        public Builder distanceMetric(DistanceMetric distanceMetric) {
            Utils.checkNotNull(distanceMetric, "distanceMetric");
            this.distanceMetric = Optional.ofNullable(distanceMetric);
            return this;
        }

        /**
         * The Distance metric used to measure similarities among vectors. This field is only used if the collection defined in the does not exist yet and is created automatically by the connector.
         */
        public Builder distanceMetric(Optional<? extends DistanceMetric> distanceMetric) {
            Utils.checkNotNull(distanceMetric, "distanceMetric");
            this.distanceMetric = distanceMetric;
            return this;
        }

        /**
         * Whether to prefer gRPC over HTTP. Set to true for Qdrant cloud clusters
         */
        public Builder preferGrpc(boolean preferGrpc) {
            Utils.checkNotNull(preferGrpc, "preferGrpc");
            this.preferGrpc = Optional.ofNullable(preferGrpc);
            return this;
        }

        /**
         * Whether to prefer gRPC over HTTP. Set to true for Qdrant cloud clusters
         */
        public Builder preferGrpc(Optional<? extends Boolean> preferGrpc) {
            Utils.checkNotNull(preferGrpc, "preferGrpc");
            this.preferGrpc = preferGrpc;
            return this;
        }

        /**
         * The field in the payload that contains the embedded text
         */
        public Builder textField(String textField) {
            Utils.checkNotNull(textField, "textField");
            this.textField = Optional.ofNullable(textField);
            return this;
        }

        /**
         * The field in the payload that contains the embedded text
         */
        public Builder textField(Optional<? extends String> textField) {
            Utils.checkNotNull(textField, "textField");
            this.textField = textField;
            return this;
        }

        /**
         * Public Endpoint of the Qdrant cluser
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public DestinationQdrantIndexing build() {
            if (distanceMetric == null) {
                distanceMetric = _SINGLETON_VALUE_DistanceMetric.value();
            }
            if (preferGrpc == null) {
                preferGrpc = _SINGLETON_VALUE_PreferGrpc.value();
            }
            if (textField == null) {
                textField = _SINGLETON_VALUE_TextField.value();
            }
            return new DestinationQdrantIndexing(
                authMethod,
                collection,
                distanceMetric,
                preferGrpc,
                textField,
                url);
        }

        private static final LazySingletonValue<Optional<? extends DistanceMetric>> _SINGLETON_VALUE_DistanceMetric =
                new LazySingletonValue<>(
                        "distance_metric",
                        "\"cos\"",
                        new TypeReference<Optional<? extends DistanceMetric>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_PreferGrpc =
                new LazySingletonValue<>(
                        "prefer_grpc",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_TextField =
                new LazySingletonValue<>(
                        "text_field",
                        "\"text\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

