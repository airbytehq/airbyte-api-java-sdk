/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;

public class SourceNasa {

    /**
     * API access key used to retrieve data from the NASA APOD API.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Indicates whether concept tags should be returned with the rest of the response.  The concept tags are not necessarily included in the explanation, but rather derived from common search tags that are associated with the description text. (Better than just pure text search.) Defaults to False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concept_tags")
    private Optional<Boolean> conceptTags;

    /**
     * A positive integer, no greater than 100. If this is specified then `count` randomly  chosen images will be returned in a JSON array. Cannot be used in conjunction with  `date` or `start_date` and `end_date`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    /**
     * Indicates that end of a date range. If `start_date` is specified without an `end_date` then `end_date` defaults to the current date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<LocalDate> endDate;

    @JsonProperty("sourceType")
    private Nasa sourceType;

    /**
     * Indicates the start of a date range. All images in the range from `start_date` to  `end_date` will be returned in a JSON array. Must be after 1995-06-16, the first day an APOD picture was posted. There are no images for tomorrow available through this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<LocalDate> startDate;

    /**
     * Indicates whether the API should return a thumbnail image URL for video files. If set to True, the API returns URL of video thumbnail. If an APOD is not a video, this parameter is ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbs")
    private Optional<Boolean> thumbs;

    @JsonCreator
    public SourceNasa(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("concept_tags") Optional<Boolean> conceptTags,
            @JsonProperty("count") Optional<Long> count,
            @JsonProperty("end_date") Optional<LocalDate> endDate,
            @JsonProperty("start_date") Optional<LocalDate> startDate,
            @JsonProperty("thumbs") Optional<Boolean> thumbs) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(conceptTags, "conceptTags");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(thumbs, "thumbs");
        this.apiKey = apiKey;
        this.conceptTags = conceptTags;
        this.count = count;
        this.endDate = endDate;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.thumbs = thumbs;
    }
    
    public SourceNasa(
            String apiKey) {
        this(apiKey, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * API access key used to retrieve data from the NASA APOD API.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Indicates whether concept tags should be returned with the rest of the response.  The concept tags are not necessarily included in the explanation, but rather derived from common search tags that are associated with the description text. (Better than just pure text search.) Defaults to False.
     */
    @JsonIgnore
    public Optional<Boolean> conceptTags() {
        return conceptTags;
    }

    /**
     * A positive integer, no greater than 100. If this is specified then `count` randomly  chosen images will be returned in a JSON array. Cannot be used in conjunction with  `date` or `start_date` and `end_date`.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    /**
     * Indicates that end of a date range. If `start_date` is specified without an `end_date` then `end_date` defaults to the current date.
     */
    @JsonIgnore
    public Optional<LocalDate> endDate() {
        return endDate;
    }

    @JsonIgnore
    public Nasa sourceType() {
        return sourceType;
    }

    /**
     * Indicates the start of a date range. All images in the range from `start_date` to  `end_date` will be returned in a JSON array. Must be after 1995-06-16, the first day an APOD picture was posted. There are no images for tomorrow available through this API.
     */
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return startDate;
    }

    /**
     * Indicates whether the API should return a thumbnail image URL for video files. If set to True, the API returns URL of video thumbnail. If an APOD is not a video, this parameter is ignored.
     */
    @JsonIgnore
    public Optional<Boolean> thumbs() {
        return thumbs;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * API access key used to retrieve data from the NASA APOD API.
     */
    public SourceNasa withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Indicates whether concept tags should be returned with the rest of the response.  The concept tags are not necessarily included in the explanation, but rather derived from common search tags that are associated with the description text. (Better than just pure text search.) Defaults to False.
     */
    public SourceNasa withConceptTags(boolean conceptTags) {
        Utils.checkNotNull(conceptTags, "conceptTags");
        this.conceptTags = Optional.ofNullable(conceptTags);
        return this;
    }

    /**
     * Indicates whether concept tags should be returned with the rest of the response.  The concept tags are not necessarily included in the explanation, but rather derived from common search tags that are associated with the description text. (Better than just pure text search.) Defaults to False.
     */
    public SourceNasa withConceptTags(Optional<Boolean> conceptTags) {
        Utils.checkNotNull(conceptTags, "conceptTags");
        this.conceptTags = conceptTags;
        return this;
    }

    /**
     * A positive integer, no greater than 100. If this is specified then `count` randomly  chosen images will be returned in a JSON array. Cannot be used in conjunction with  `date` or `start_date` and `end_date`.
     */
    public SourceNasa withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * A positive integer, no greater than 100. If this is specified then `count` randomly  chosen images will be returned in a JSON array. Cannot be used in conjunction with  `date` or `start_date` and `end_date`.
     */
    public SourceNasa withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * Indicates that end of a date range. If `start_date` is specified without an `end_date` then `end_date` defaults to the current date.
     */
    public SourceNasa withEndDate(LocalDate endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Indicates that end of a date range. If `start_date` is specified without an `end_date` then `end_date` defaults to the current date.
     */
    public SourceNasa withEndDate(Optional<LocalDate> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Indicates the start of a date range. All images in the range from `start_date` to  `end_date` will be returned in a JSON array. Must be after 1995-06-16, the first day an APOD picture was posted. There are no images for tomorrow available through this API.
     */
    public SourceNasa withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Indicates the start of a date range. All images in the range from `start_date` to  `end_date` will be returned in a JSON array. Must be after 1995-06-16, the first day an APOD picture was posted. There are no images for tomorrow available through this API.
     */
    public SourceNasa withStartDate(Optional<LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Indicates whether the API should return a thumbnail image URL for video files. If set to True, the API returns URL of video thumbnail. If an APOD is not a video, this parameter is ignored.
     */
    public SourceNasa withThumbs(boolean thumbs) {
        Utils.checkNotNull(thumbs, "thumbs");
        this.thumbs = Optional.ofNullable(thumbs);
        return this;
    }

    /**
     * Indicates whether the API should return a thumbnail image URL for video files. If set to True, the API returns URL of video thumbnail. If an APOD is not a video, this parameter is ignored.
     */
    public SourceNasa withThumbs(Optional<Boolean> thumbs) {
        Utils.checkNotNull(thumbs, "thumbs");
        this.thumbs = thumbs;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceNasa other = (SourceNasa) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.conceptTags, other.conceptTags) &&
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.thumbs, other.thumbs);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            conceptTags,
            count,
            endDate,
            sourceType,
            startDate,
            thumbs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceNasa.class,
                "apiKey", apiKey,
                "conceptTags", conceptTags,
                "count", count,
                "endDate", endDate,
                "sourceType", sourceType,
                "startDate", startDate,
                "thumbs", thumbs);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<Boolean> conceptTags;
 
        private Optional<Long> count = Optional.empty();
 
        private Optional<LocalDate> endDate = Optional.empty();
 
        private Optional<LocalDate> startDate = Optional.empty();
 
        private Optional<Boolean> thumbs;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API access key used to retrieve data from the NASA APOD API.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Indicates whether concept tags should be returned with the rest of the response.  The concept tags are not necessarily included in the explanation, but rather derived from common search tags that are associated with the description text. (Better than just pure text search.) Defaults to False.
         */
        public Builder conceptTags(boolean conceptTags) {
            Utils.checkNotNull(conceptTags, "conceptTags");
            this.conceptTags = Optional.ofNullable(conceptTags);
            return this;
        }

        /**
         * Indicates whether concept tags should be returned with the rest of the response.  The concept tags are not necessarily included in the explanation, but rather derived from common search tags that are associated with the description text. (Better than just pure text search.) Defaults to False.
         */
        public Builder conceptTags(Optional<Boolean> conceptTags) {
            Utils.checkNotNull(conceptTags, "conceptTags");
            this.conceptTags = conceptTags;
            return this;
        }

        /**
         * A positive integer, no greater than 100. If this is specified then `count` randomly  chosen images will be returned in a JSON array. Cannot be used in conjunction with  `date` or `start_date` and `end_date`.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * A positive integer, no greater than 100. If this is specified then `count` randomly  chosen images will be returned in a JSON array. Cannot be used in conjunction with  `date` or `start_date` and `end_date`.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        /**
         * Indicates that end of a date range. If `start_date` is specified without an `end_date` then `end_date` defaults to the current date.
         */
        public Builder endDate(LocalDate endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Indicates that end of a date range. If `start_date` is specified without an `end_date` then `end_date` defaults to the current date.
         */
        public Builder endDate(Optional<LocalDate> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Indicates the start of a date range. All images in the range from `start_date` to  `end_date` will be returned in a JSON array. Must be after 1995-06-16, the first day an APOD picture was posted. There are no images for tomorrow available through this API.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Indicates the start of a date range. All images in the range from `start_date` to  `end_date` will be returned in a JSON array. Must be after 1995-06-16, the first day an APOD picture was posted. There are no images for tomorrow available through this API.
         */
        public Builder startDate(Optional<LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Indicates whether the API should return a thumbnail image URL for video files. If set to True, the API returns URL of video thumbnail. If an APOD is not a video, this parameter is ignored.
         */
        public Builder thumbs(boolean thumbs) {
            Utils.checkNotNull(thumbs, "thumbs");
            this.thumbs = Optional.ofNullable(thumbs);
            return this;
        }

        /**
         * Indicates whether the API should return a thumbnail image URL for video files. If set to True, the API returns URL of video thumbnail. If an APOD is not a video, this parameter is ignored.
         */
        public Builder thumbs(Optional<Boolean> thumbs) {
            Utils.checkNotNull(thumbs, "thumbs");
            this.thumbs = thumbs;
            return this;
        }
        
        public SourceNasa build() {
            if (conceptTags == null) {
                conceptTags = _SINGLETON_VALUE_ConceptTags.value();
            }
            if (thumbs == null) {
                thumbs = _SINGLETON_VALUE_Thumbs.value();
            }
            return new SourceNasa(
                apiKey,
                conceptTags,
                count,
                endDate,
                startDate,
                thumbs);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ConceptTags =
                new LazySingletonValue<>(
                        "concept_tags",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Nasa> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"nasa\"",
                        new TypeReference<Nasa>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Thumbs =
                new LazySingletonValue<>(
                        "thumbs",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
