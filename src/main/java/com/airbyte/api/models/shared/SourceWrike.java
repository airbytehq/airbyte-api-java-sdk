/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceWrike {

    /**
     * Permanent access token. You can find documentation on how to acquire a permanent access token  &lt;a href="https://developers.wrike.com/oauth-20-authorization/"&gt;here&lt;/a&gt;
     */
    @JsonProperty("access_token")
    private String accessToken;

    @JsonProperty("sourceType")
    private Wrike sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Only comments after this date will be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * Wrike's instance such as `app-us2.wrike.com`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wrike_instance")
    private Optional<String> wrikeInstance;

    @JsonCreator
    public SourceWrike(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("wrike_instance") Optional<String> wrikeInstance) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(wrikeInstance, "wrikeInstance");
        this.accessToken = accessToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.wrikeInstance = wrikeInstance;
    }
    
    public SourceWrike(
            String accessToken) {
        this(accessToken, Optional.empty(), Optional.empty());
    }

    /**
     * Permanent access token. You can find documentation on how to acquire a permanent access token  &lt;a href="https://developers.wrike.com/oauth-20-authorization/"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    @JsonIgnore
    public Wrike sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Only comments after this date will be replicated.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * Wrike's instance such as `app-us2.wrike.com`
     */
    @JsonIgnore
    public Optional<String> wrikeInstance() {
        return wrikeInstance;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Permanent access token. You can find documentation on how to acquire a permanent access token  &lt;a href="https://developers.wrike.com/oauth-20-authorization/"&gt;here&lt;/a&gt;
     */
    public SourceWrike withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Only comments after this date will be replicated.
     */
    public SourceWrike withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Only comments after this date will be replicated.
     */
    public SourceWrike withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Wrike's instance such as `app-us2.wrike.com`
     */
    public SourceWrike withWrikeInstance(String wrikeInstance) {
        Utils.checkNotNull(wrikeInstance, "wrikeInstance");
        this.wrikeInstance = Optional.ofNullable(wrikeInstance);
        return this;
    }

    /**
     * Wrike's instance such as `app-us2.wrike.com`
     */
    public SourceWrike withWrikeInstance(Optional<String> wrikeInstance) {
        Utils.checkNotNull(wrikeInstance, "wrikeInstance");
        this.wrikeInstance = wrikeInstance;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceWrike other = (SourceWrike) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.wrikeInstance, other.wrikeInstance);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            sourceType,
            startDate,
            wrikeInstance);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceWrike.class,
                "accessToken", accessToken,
                "sourceType", sourceType,
                "startDate", startDate,
                "wrikeInstance", wrikeInstance);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> wrikeInstance;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Permanent access token. You can find documentation on how to acquire a permanent access token  &lt;a href="https://developers.wrike.com/oauth-20-authorization/"&gt;here&lt;/a&gt;
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Only comments after this date will be replicated.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Only comments after this date will be replicated.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Wrike's instance such as `app-us2.wrike.com`
         */
        public Builder wrikeInstance(String wrikeInstance) {
            Utils.checkNotNull(wrikeInstance, "wrikeInstance");
            this.wrikeInstance = Optional.ofNullable(wrikeInstance);
            return this;
        }

        /**
         * Wrike's instance such as `app-us2.wrike.com`
         */
        public Builder wrikeInstance(Optional<String> wrikeInstance) {
            Utils.checkNotNull(wrikeInstance, "wrikeInstance");
            this.wrikeInstance = wrikeInstance;
            return this;
        }
        
        public SourceWrike build() {
            if (wrikeInstance == null) {
                wrikeInstance = _SINGLETON_VALUE_WrikeInstance.value();
            }            return new SourceWrike(
                accessToken,
                startDate,
                wrikeInstance);
        }

        private static final LazySingletonValue<Wrike> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"wrike\"",
                        new TypeReference<Wrike>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_WrikeInstance =
                new LazySingletonValue<>(
                        "wrike_instance",
                        "\"app-us2.wrike.com\"",
                        new TypeReference<Optional<String>>() {});
    }
}

