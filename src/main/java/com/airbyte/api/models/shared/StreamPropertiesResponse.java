/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * StreamPropertiesResponse - A list of stream properties.
 */

public class StreamPropertiesResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streams")
    private Optional<? extends java.util.List<StreamProperties>> streams;

    public StreamPropertiesResponse(
            @JsonProperty("streams") Optional<? extends java.util.List<StreamProperties>> streams) {
        Utils.checkNotNull(streams, "streams");
        this.streams = streams;
    }

    public Optional<? extends java.util.List<StreamProperties>> streams() {
        return streams;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StreamPropertiesResponse withStreams(java.util.List<StreamProperties> streams) {
        Utils.checkNotNull(streams, "streams");
        this.streams = Optional.ofNullable(streams);
        return this;
    }

    public StreamPropertiesResponse withStreams(Optional<? extends java.util.List<StreamProperties>> streams) {
        Utils.checkNotNull(streams, "streams");
        this.streams = streams;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamPropertiesResponse other = (StreamPropertiesResponse) o;
        return 
            java.util.Objects.deepEquals(this.streams, other.streams);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            streams);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreamPropertiesResponse.class,
                "streams", streams);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<StreamProperties>> streams = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder streams(java.util.List<StreamProperties> streams) {
            Utils.checkNotNull(streams, "streams");
            this.streams = Optional.ofNullable(streams);
            return this;
        }

        public Builder streams(Optional<? extends java.util.List<StreamProperties>> streams) {
            Utils.checkNotNull(streams, "streams");
            this.streams = streams;
            return this;
        }
        
        public StreamPropertiesResponse build() {
            return new StreamPropertiesResponse(
                streams);
        }
    }
}

