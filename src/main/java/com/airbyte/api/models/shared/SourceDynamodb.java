/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SourceDynamodb {

    /**
     * The access key id to access Dynamodb. Airbyte requires read permissions to the database
     */
    @JsonProperty("access_key_id")
    private String accessKeyId;

    /**
     * the URL of the Dynamodb database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoint")
    private Optional<? extends String> endpoint;

    /**
     * The region of the Dynamodb database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<? extends SourceDynamodbDynamodbRegion> region;

    /**
     * Comma separated reserved attribute names present in your tables
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reserved_attribute_names")
    private Optional<? extends String> reservedAttributeNames;

    /**
     * The corresponding secret to the access key id.
     */
    @JsonProperty("secret_access_key")
    private String secretAccessKey;

    @JsonProperty("sourceType")
    private SourceDynamodbDynamodb sourceType;

    public SourceDynamodb(
            @JsonProperty("access_key_id") String accessKeyId,
            @JsonProperty("endpoint") Optional<? extends String> endpoint,
            @JsonProperty("region") Optional<? extends SourceDynamodbDynamodbRegion> region,
            @JsonProperty("reserved_attribute_names") Optional<? extends String> reservedAttributeNames,
            @JsonProperty("secret_access_key") String secretAccessKey) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(endpoint, "endpoint");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.accessKeyId = accessKeyId;
        this.endpoint = endpoint;
        this.region = region;
        this.reservedAttributeNames = reservedAttributeNames;
        this.secretAccessKey = secretAccessKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    /**
     * The access key id to access Dynamodb. Airbyte requires read permissions to the database
     */
    public String accessKeyId() {
        return accessKeyId;
    }

    /**
     * the URL of the Dynamodb database
     */
    public Optional<? extends String> endpoint() {
        return endpoint;
    }

    /**
     * The region of the Dynamodb database
     */
    public Optional<? extends SourceDynamodbDynamodbRegion> region() {
        return region;
    }

    /**
     * Comma separated reserved attribute names present in your tables
     */
    public Optional<? extends String> reservedAttributeNames() {
        return reservedAttributeNames;
    }

    /**
     * The corresponding secret to the access key id.
     */
    public String secretAccessKey() {
        return secretAccessKey;
    }

    public SourceDynamodbDynamodb sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The access key id to access Dynamodb. Airbyte requires read permissions to the database
     */
    public SourceDynamodb withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * the URL of the Dynamodb database
     */
    public SourceDynamodb withEndpoint(String endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = Optional.ofNullable(endpoint);
        return this;
    }

    /**
     * the URL of the Dynamodb database
     */
    public SourceDynamodb withEndpoint(Optional<? extends String> endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = endpoint;
        return this;
    }

    /**
     * The region of the Dynamodb database
     */
    public SourceDynamodb withRegion(SourceDynamodbDynamodbRegion region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * The region of the Dynamodb database
     */
    public SourceDynamodb withRegion(Optional<? extends SourceDynamodbDynamodbRegion> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Comma separated reserved attribute names present in your tables
     */
    public SourceDynamodb withReservedAttributeNames(String reservedAttributeNames) {
        Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
        this.reservedAttributeNames = Optional.ofNullable(reservedAttributeNames);
        return this;
    }

    /**
     * Comma separated reserved attribute names present in your tables
     */
    public SourceDynamodb withReservedAttributeNames(Optional<? extends String> reservedAttributeNames) {
        Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
        this.reservedAttributeNames = reservedAttributeNames;
        return this;
    }

    /**
     * The corresponding secret to the access key id.
     */
    public SourceDynamodb withSecretAccessKey(String secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = secretAccessKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceDynamodb other = (SourceDynamodb) o;
        return 
            java.util.Objects.deepEquals(this.accessKeyId, other.accessKeyId) &&
            java.util.Objects.deepEquals(this.endpoint, other.endpoint) &&
            java.util.Objects.deepEquals(this.region, other.region) &&
            java.util.Objects.deepEquals(this.reservedAttributeNames, other.reservedAttributeNames) &&
            java.util.Objects.deepEquals(this.secretAccessKey, other.secretAccessKey) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKeyId,
            endpoint,
            region,
            reservedAttributeNames,
            secretAccessKey,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceDynamodb.class,
                "accessKeyId", accessKeyId,
                "endpoint", endpoint,
                "region", region,
                "reservedAttributeNames", reservedAttributeNames,
                "secretAccessKey", secretAccessKey,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String accessKeyId;
 
        private Optional<? extends String> endpoint;
 
        private Optional<? extends SourceDynamodbDynamodbRegion> region;
 
        private Optional<? extends String> reservedAttributeNames = Optional.empty();
 
        private String secretAccessKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The access key id to access Dynamodb. Airbyte requires read permissions to the database
         */
        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * the URL of the Dynamodb database
         */
        public Builder endpoint(String endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = Optional.ofNullable(endpoint);
            return this;
        }

        /**
         * the URL of the Dynamodb database
         */
        public Builder endpoint(Optional<? extends String> endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = endpoint;
            return this;
        }

        /**
         * The region of the Dynamodb database
         */
        public Builder region(SourceDynamodbDynamodbRegion region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * The region of the Dynamodb database
         */
        public Builder region(Optional<? extends SourceDynamodbDynamodbRegion> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Comma separated reserved attribute names present in your tables
         */
        public Builder reservedAttributeNames(String reservedAttributeNames) {
            Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
            this.reservedAttributeNames = Optional.ofNullable(reservedAttributeNames);
            return this;
        }

        /**
         * Comma separated reserved attribute names present in your tables
         */
        public Builder reservedAttributeNames(Optional<? extends String> reservedAttributeNames) {
            Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
            this.reservedAttributeNames = reservedAttributeNames;
            return this;
        }

        /**
         * The corresponding secret to the access key id.
         */
        public Builder secretAccessKey(String secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = secretAccessKey;
            return this;
        }
        
        public SourceDynamodb build() {
            if (endpoint == null) {
                endpoint = _SINGLETON_VALUE_Endpoint.value();
            }
            if (region == null) {
                region = _SINGLETON_VALUE_Region.value();
            }
            return new SourceDynamodb(
                accessKeyId,
                endpoint,
                region,
                reservedAttributeNames,
                secretAccessKey);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_Endpoint =
                new LazySingletonValue<>(
                        "endpoint",
                        "\"\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends SourceDynamodbDynamodbRegion>> _SINGLETON_VALUE_Region =
                new LazySingletonValue<>(
                        "region",
                        "\"\"",
                        new TypeReference<Optional<? extends SourceDynamodbDynamodbRegion>>() {});

        private static final LazySingletonValue<SourceDynamodbDynamodb> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"dynamodb\"",
                        new TypeReference<SourceDynamodbDynamodb>() {});
    }
}

