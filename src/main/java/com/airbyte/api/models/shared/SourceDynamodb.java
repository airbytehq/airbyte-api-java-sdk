/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class SourceDynamodb {

    /**
     * Credentials for the service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private JsonNullable<? extends java.lang.Object> credentials;

    /**
     * the URL of the Dynamodb database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoint")
    private Optional<? extends String> endpoint;

    /**
     * Ignore tables with missing scan/read permissions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore_missing_read_permissions_tables")
    private Optional<? extends Boolean> ignoreMissingReadPermissionsTables;

    /**
     * The region of the Dynamodb database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<? extends SourceDynamodbDynamodbRegion> region;

    /**
     * Comma separated reserved attribute names present in your tables
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reserved_attribute_names")
    private Optional<? extends String> reservedAttributeNames;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    private Optional<? extends SourceDynamodbDynamodb> sourceType;

    @JsonCreator
    public SourceDynamodb(
            @JsonProperty("credentials") JsonNullable<? extends java.lang.Object> credentials,
            @JsonProperty("endpoint") Optional<? extends String> endpoint,
            @JsonProperty("ignore_missing_read_permissions_tables") Optional<? extends Boolean> ignoreMissingReadPermissionsTables,
            @JsonProperty("region") Optional<? extends SourceDynamodbDynamodbRegion> region,
            @JsonProperty("reserved_attribute_names") Optional<? extends String> reservedAttributeNames) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(endpoint, "endpoint");
        Utils.checkNotNull(ignoreMissingReadPermissionsTables, "ignoreMissingReadPermissionsTables");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
        this.credentials = credentials;
        this.endpoint = endpoint;
        this.ignoreMissingReadPermissionsTables = ignoreMissingReadPermissionsTables;
        this.region = region;
        this.reservedAttributeNames = reservedAttributeNames;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceDynamodb() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Credentials for the service
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<java.lang.Object> credentials() {
        return (JsonNullable<java.lang.Object>) credentials;
    }

    /**
     * the URL of the Dynamodb database
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> endpoint() {
        return (Optional<String>) endpoint;
    }

    /**
     * Ignore tables with missing scan/read permissions
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> ignoreMissingReadPermissionsTables() {
        return (Optional<Boolean>) ignoreMissingReadPermissionsTables;
    }

    /**
     * The region of the Dynamodb database
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceDynamodbDynamodbRegion> region() {
        return (Optional<SourceDynamodbDynamodbRegion>) region;
    }

    /**
     * Comma separated reserved attribute names present in your tables
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> reservedAttributeNames() {
        return (Optional<String>) reservedAttributeNames;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceDynamodbDynamodb> sourceType() {
        return (Optional<SourceDynamodbDynamodb>) sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Credentials for the service
     */
    public SourceDynamodb withCredentials(java.lang.Object credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = JsonNullable.of(credentials);
        return this;
    }

    /**
     * Credentials for the service
     */
    public SourceDynamodb withCredentials(JsonNullable<? extends java.lang.Object> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * the URL of the Dynamodb database
     */
    public SourceDynamodb withEndpoint(String endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = Optional.ofNullable(endpoint);
        return this;
    }

    /**
     * the URL of the Dynamodb database
     */
    public SourceDynamodb withEndpoint(Optional<? extends String> endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Ignore tables with missing scan/read permissions
     */
    public SourceDynamodb withIgnoreMissingReadPermissionsTables(boolean ignoreMissingReadPermissionsTables) {
        Utils.checkNotNull(ignoreMissingReadPermissionsTables, "ignoreMissingReadPermissionsTables");
        this.ignoreMissingReadPermissionsTables = Optional.ofNullable(ignoreMissingReadPermissionsTables);
        return this;
    }

    /**
     * Ignore tables with missing scan/read permissions
     */
    public SourceDynamodb withIgnoreMissingReadPermissionsTables(Optional<? extends Boolean> ignoreMissingReadPermissionsTables) {
        Utils.checkNotNull(ignoreMissingReadPermissionsTables, "ignoreMissingReadPermissionsTables");
        this.ignoreMissingReadPermissionsTables = ignoreMissingReadPermissionsTables;
        return this;
    }

    /**
     * The region of the Dynamodb database
     */
    public SourceDynamodb withRegion(SourceDynamodbDynamodbRegion region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * The region of the Dynamodb database
     */
    public SourceDynamodb withRegion(Optional<? extends SourceDynamodbDynamodbRegion> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Comma separated reserved attribute names present in your tables
     */
    public SourceDynamodb withReservedAttributeNames(String reservedAttributeNames) {
        Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
        this.reservedAttributeNames = Optional.ofNullable(reservedAttributeNames);
        return this;
    }

    /**
     * Comma separated reserved attribute names present in your tables
     */
    public SourceDynamodb withReservedAttributeNames(Optional<? extends String> reservedAttributeNames) {
        Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
        this.reservedAttributeNames = reservedAttributeNames;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceDynamodb other = (SourceDynamodb) o;
        return 
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.endpoint, other.endpoint) &&
            java.util.Objects.deepEquals(this.ignoreMissingReadPermissionsTables, other.ignoreMissingReadPermissionsTables) &&
            java.util.Objects.deepEquals(this.region, other.region) &&
            java.util.Objects.deepEquals(this.reservedAttributeNames, other.reservedAttributeNames) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentials,
            endpoint,
            ignoreMissingReadPermissionsTables,
            region,
            reservedAttributeNames,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceDynamodb.class,
                "credentials", credentials,
                "endpoint", endpoint,
                "ignoreMissingReadPermissionsTables", ignoreMissingReadPermissionsTables,
                "region", region,
                "reservedAttributeNames", reservedAttributeNames,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.lang.Object> credentials = JsonNullable.undefined();
 
        private Optional<? extends String> endpoint;
 
        private Optional<? extends Boolean> ignoreMissingReadPermissionsTables;
 
        private Optional<? extends SourceDynamodbDynamodbRegion> region;
 
        private Optional<? extends String> reservedAttributeNames = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Credentials for the service
         */
        public Builder credentials(java.lang.Object credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = JsonNullable.of(credentials);
            return this;
        }

        /**
         * Credentials for the service
         */
        public Builder credentials(JsonNullable<? extends java.lang.Object> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * the URL of the Dynamodb database
         */
        public Builder endpoint(String endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = Optional.ofNullable(endpoint);
            return this;
        }

        /**
         * the URL of the Dynamodb database
         */
        public Builder endpoint(Optional<? extends String> endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = endpoint;
            return this;
        }

        /**
         * Ignore tables with missing scan/read permissions
         */
        public Builder ignoreMissingReadPermissionsTables(boolean ignoreMissingReadPermissionsTables) {
            Utils.checkNotNull(ignoreMissingReadPermissionsTables, "ignoreMissingReadPermissionsTables");
            this.ignoreMissingReadPermissionsTables = Optional.ofNullable(ignoreMissingReadPermissionsTables);
            return this;
        }

        /**
         * Ignore tables with missing scan/read permissions
         */
        public Builder ignoreMissingReadPermissionsTables(Optional<? extends Boolean> ignoreMissingReadPermissionsTables) {
            Utils.checkNotNull(ignoreMissingReadPermissionsTables, "ignoreMissingReadPermissionsTables");
            this.ignoreMissingReadPermissionsTables = ignoreMissingReadPermissionsTables;
            return this;
        }

        /**
         * The region of the Dynamodb database
         */
        public Builder region(SourceDynamodbDynamodbRegion region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * The region of the Dynamodb database
         */
        public Builder region(Optional<? extends SourceDynamodbDynamodbRegion> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Comma separated reserved attribute names present in your tables
         */
        public Builder reservedAttributeNames(String reservedAttributeNames) {
            Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
            this.reservedAttributeNames = Optional.ofNullable(reservedAttributeNames);
            return this;
        }

        /**
         * Comma separated reserved attribute names present in your tables
         */
        public Builder reservedAttributeNames(Optional<? extends String> reservedAttributeNames) {
            Utils.checkNotNull(reservedAttributeNames, "reservedAttributeNames");
            this.reservedAttributeNames = reservedAttributeNames;
            return this;
        }
        
        public SourceDynamodb build() {
            if (endpoint == null) {
                endpoint = _SINGLETON_VALUE_Endpoint.value();
            }
            if (ignoreMissingReadPermissionsTables == null) {
                ignoreMissingReadPermissionsTables = _SINGLETON_VALUE_IgnoreMissingReadPermissionsTables.value();
            }
            if (region == null) {
                region = _SINGLETON_VALUE_Region.value();
            }
            return new SourceDynamodb(
                credentials,
                endpoint,
                ignoreMissingReadPermissionsTables,
                region,
                reservedAttributeNames);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_Endpoint =
                new LazySingletonValue<>(
                        "endpoint",
                        "\"\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_IgnoreMissingReadPermissionsTables =
                new LazySingletonValue<>(
                        "ignore_missing_read_permissions_tables",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends SourceDynamodbDynamodbRegion>> _SINGLETON_VALUE_Region =
                new LazySingletonValue<>(
                        "region",
                        "\"\"",
                        new TypeReference<Optional<? extends SourceDynamodbDynamodbRegion>>() {});

        private static final LazySingletonValue<Optional<? extends SourceDynamodbDynamodb>> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"dynamodb\"",
                        new TypeReference<Optional<? extends SourceDynamodbDynamodb>>() {});
    }
}

