/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class SourceKlausApi {

    /**
     * getting data by account
     */
    @JsonProperty("account")
    private long account;

    /**
     * API access key used to retrieve data from the KLAUS API.
     */
    @JsonProperty("api_key")
    private String apiKey;

    @JsonProperty("sourceType")
    private KlausApi sourceType;

    /**
     * Start getting data from that date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    /**
     * getting data by workspace
     */
    @JsonProperty("workspace")
    private long workspace;

    @JsonCreator
    public SourceKlausApi(
            @JsonProperty("account") long account,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate,
            @JsonProperty("workspace") long workspace) {
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(workspace, "workspace");
        this.account = account;
        this.apiKey = apiKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.workspace = workspace;
    }
    
    public SourceKlausApi(
            long account,
            String apiKey,
            long workspace) {
        this(account, apiKey, Optional.empty(), workspace);
    }

    /**
     * getting data by account
     */
    @JsonIgnore
    public long account() {
        return account;
    }

    /**
     * API access key used to retrieve data from the KLAUS API.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    @JsonIgnore
    public KlausApi sourceType() {
        return sourceType;
    }

    /**
     * Start getting data from that date.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return (Optional<OffsetDateTime>) startDate;
    }

    /**
     * getting data by workspace
     */
    @JsonIgnore
    public long workspace() {
        return workspace;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * getting data by account
     */
    public SourceKlausApi withAccount(long account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    /**
     * API access key used to retrieve data from the KLAUS API.
     */
    public SourceKlausApi withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Start getting data from that date.
     */
    public SourceKlausApi withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Start getting data from that date.
     */
    public SourceKlausApi withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * getting data by workspace
     */
    public SourceKlausApi withWorkspace(long workspace) {
        Utils.checkNotNull(workspace, "workspace");
        this.workspace = workspace;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceKlausApi other = (SourceKlausApi) o;
        return 
            java.util.Objects.deepEquals(this.account, other.account) &&
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.workspace, other.workspace);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            account,
            apiKey,
            sourceType,
            startDate,
            workspace);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceKlausApi.class,
                "account", account,
                "apiKey", apiKey,
                "sourceType", sourceType,
                "startDate", startDate,
                "workspace", workspace);
    }
    
    public final static class Builder {
 
        private Long account;
 
        private String apiKey;
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();
 
        private Long workspace;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * getting data by account
         */
        public Builder account(long account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        /**
         * API access key used to retrieve data from the KLAUS API.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Start getting data from that date.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Start getting data from that date.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * getting data by workspace
         */
        public Builder workspace(long workspace) {
            Utils.checkNotNull(workspace, "workspace");
            this.workspace = workspace;
            return this;
        }
        
        public SourceKlausApi build() {
            return new SourceKlausApi(
                account,
                apiKey,
                startDate,
                workspace);
        }

        private static final LazySingletonValue<KlausApi> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"klaus-api\"",
                        new TypeReference<KlausApi>() {});
    }
}

