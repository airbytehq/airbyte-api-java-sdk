/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class SourceGoogleTasks {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The maximum number of records to be returned per request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("records_limit")
    private Optional<? extends String> recordsLimit;

    @JsonProperty("sourceType")
    private GoogleTasks sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceGoogleTasks(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("records_limit") Optional<? extends String> recordsLimit,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(recordsLimit, "recordsLimit");
        Utils.checkNotNull(startDate, "startDate");
        this.apiKey = apiKey;
        this.recordsLimit = recordsLimit;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceGoogleTasks(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), startDate);
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The maximum number of records to be returned per request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> recordsLimit() {
        return (Optional<String>) recordsLimit;
    }

    @JsonIgnore
    public GoogleTasks sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceGoogleTasks withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The maximum number of records to be returned per request
     */
    public SourceGoogleTasks withRecordsLimit(String recordsLimit) {
        Utils.checkNotNull(recordsLimit, "recordsLimit");
        this.recordsLimit = Optional.ofNullable(recordsLimit);
        return this;
    }

    /**
     * The maximum number of records to be returned per request
     */
    public SourceGoogleTasks withRecordsLimit(Optional<? extends String> recordsLimit) {
        Utils.checkNotNull(recordsLimit, "recordsLimit");
        this.recordsLimit = recordsLimit;
        return this;
    }

    public SourceGoogleTasks withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGoogleTasks other = (SourceGoogleTasks) o;
        return 
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.recordsLimit, other.recordsLimit) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKey,
            recordsLimit,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGoogleTasks.class,
                "apiKey", apiKey,
                "recordsLimit", recordsLimit,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<? extends String> recordsLimit;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The maximum number of records to be returned per request
         */
        public Builder recordsLimit(String recordsLimit) {
            Utils.checkNotNull(recordsLimit, "recordsLimit");
            this.recordsLimit = Optional.ofNullable(recordsLimit);
            return this;
        }

        /**
         * The maximum number of records to be returned per request
         */
        public Builder recordsLimit(Optional<? extends String> recordsLimit) {
            Utils.checkNotNull(recordsLimit, "recordsLimit");
            this.recordsLimit = recordsLimit;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceGoogleTasks build() {
            if (recordsLimit == null) {
                recordsLimit = _SINGLETON_VALUE_RecordsLimit.value();
            }
            return new SourceGoogleTasks(
                apiKey,
                recordsLimit,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_RecordsLimit =
                new LazySingletonValue<>(
                        "records_limit",
                        "\"50\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<GoogleTasks> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"google-tasks\"",
                        new TypeReference<GoogleTasks>() {});
    }
}

