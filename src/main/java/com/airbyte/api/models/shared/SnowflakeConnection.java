/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * SnowflakeConnection
 * 
 * <p>Snowflake can be used to store vector data and retrieve embeddings.
 */
public class SnowflakeConnection {

    @JsonProperty("credentials")
    private DestinationSnowflakeCortexCredentials credentials;

    /**
     * Enter the name of the database that you want to sync data into
     */
    @JsonProperty("database")
    private String database;

    /**
     * Enter the name of the default schema
     */
    @JsonProperty("default_schema")
    private String defaultSchema;

    /**
     * Enter the account name you want to use to access the database. This is usually the identifier before .snowflakecomputing.com
     */
    @JsonProperty("host")
    private String host;

    /**
     * Enter the role that you want to use to access Snowflake
     */
    @JsonProperty("role")
    private String role;

    /**
     * Enter the name of the user you want to use to access the database
     */
    @JsonProperty("username")
    private String username;

    /**
     * Enter the name of the warehouse that you want to use as a compute cluster
     */
    @JsonProperty("warehouse")
    private String warehouse;

    @JsonCreator
    public SnowflakeConnection(
            @JsonProperty("credentials") DestinationSnowflakeCortexCredentials credentials,
            @JsonProperty("database") String database,
            @JsonProperty("default_schema") String defaultSchema,
            @JsonProperty("host") String host,
            @JsonProperty("role") String role,
            @JsonProperty("username") String username,
            @JsonProperty("warehouse") String warehouse) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(defaultSchema, "defaultSchema");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(warehouse, "warehouse");
        this.credentials = credentials;
        this.database = database;
        this.defaultSchema = defaultSchema;
        this.host = host;
        this.role = role;
        this.username = username;
        this.warehouse = warehouse;
    }

    @JsonIgnore
    public DestinationSnowflakeCortexCredentials credentials() {
        return credentials;
    }

    /**
     * Enter the name of the database that you want to sync data into
     */
    @JsonIgnore
    public String database() {
        return database;
    }

    /**
     * Enter the name of the default schema
     */
    @JsonIgnore
    public String defaultSchema() {
        return defaultSchema;
    }

    /**
     * Enter the account name you want to use to access the database. This is usually the identifier before .snowflakecomputing.com
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Enter the role that you want to use to access Snowflake
     */
    @JsonIgnore
    public String role() {
        return role;
    }

    /**
     * Enter the name of the user you want to use to access the database
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    /**
     * Enter the name of the warehouse that you want to use as a compute cluster
     */
    @JsonIgnore
    public String warehouse() {
        return warehouse;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SnowflakeConnection withCredentials(DestinationSnowflakeCortexCredentials credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Enter the name of the database that you want to sync data into
     */
    public SnowflakeConnection withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    /**
     * Enter the name of the default schema
     */
    public SnowflakeConnection withDefaultSchema(String defaultSchema) {
        Utils.checkNotNull(defaultSchema, "defaultSchema");
        this.defaultSchema = defaultSchema;
        return this;
    }

    /**
     * Enter the account name you want to use to access the database. This is usually the identifier before .snowflakecomputing.com
     */
    public SnowflakeConnection withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Enter the role that you want to use to access Snowflake
     */
    public SnowflakeConnection withRole(String role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    /**
     * Enter the name of the user you want to use to access the database
     */
    public SnowflakeConnection withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Enter the name of the warehouse that you want to use as a compute cluster
     */
    public SnowflakeConnection withWarehouse(String warehouse) {
        Utils.checkNotNull(warehouse, "warehouse");
        this.warehouse = warehouse;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SnowflakeConnection other = (SnowflakeConnection) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.database, other.database) &&
            Objects.deepEquals(this.defaultSchema, other.defaultSchema) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.role, other.role) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.warehouse, other.warehouse);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            database,
            defaultSchema,
            host,
            role,
            username,
            warehouse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SnowflakeConnection.class,
                "credentials", credentials,
                "database", database,
                "defaultSchema", defaultSchema,
                "host", host,
                "role", role,
                "username", username,
                "warehouse", warehouse);
    }
    
    public final static class Builder {
 
        private DestinationSnowflakeCortexCredentials credentials;
 
        private String database;
 
        private String defaultSchema;
 
        private String host;
 
        private String role;
 
        private String username;
 
        private String warehouse;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(DestinationSnowflakeCortexCredentials credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Enter the name of the database that you want to sync data into
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        /**
         * Enter the name of the default schema
         */
        public Builder defaultSchema(String defaultSchema) {
            Utils.checkNotNull(defaultSchema, "defaultSchema");
            this.defaultSchema = defaultSchema;
            return this;
        }

        /**
         * Enter the account name you want to use to access the database. This is usually the identifier before .snowflakecomputing.com
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Enter the role that you want to use to access Snowflake
         */
        public Builder role(String role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        /**
         * Enter the name of the user you want to use to access the database
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        /**
         * Enter the name of the warehouse that you want to use as a compute cluster
         */
        public Builder warehouse(String warehouse) {
            Utils.checkNotNull(warehouse, "warehouse");
            this.warehouse = warehouse;
            return this;
        }
        
        public SnowflakeConnection build() {
            return new SnowflakeConnection(
                credentials,
                database,
                defaultSchema,
                host,
                role,
                username,
                warehouse);
        }
    }
}
