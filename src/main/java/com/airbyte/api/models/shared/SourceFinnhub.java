/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceFinnhub {

    /**
     * The API key to use for authentication
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * More info: https://finnhub.io/docs/api/stock-symbols
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exchange")
    private Optional<String> exchange;

    /**
     * This parameter can be 1 of the following values general, forex, crypto, merger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("market_news_category")
    private Optional<? extends MarketNewsCategory> marketNewsCategory;

    @JsonProperty("sourceType")
    private Finnhub sourceType;

    @JsonProperty("start_date_2")
    private OffsetDateTime startDate2;

    @JsonProperty("symbols")
    private List<Object> symbols;

    @JsonCreator
    public SourceFinnhub(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("exchange") Optional<String> exchange,
            @JsonProperty("market_news_category") Optional<? extends MarketNewsCategory> marketNewsCategory,
            @JsonProperty("start_date_2") OffsetDateTime startDate2,
            @JsonProperty("symbols") List<Object> symbols) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(exchange, "exchange");
        Utils.checkNotNull(marketNewsCategory, "marketNewsCategory");
        Utils.checkNotNull(startDate2, "startDate2");
        Utils.checkNotNull(symbols, "symbols");
        this.apiKey = apiKey;
        this.exchange = exchange;
        this.marketNewsCategory = marketNewsCategory;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate2 = startDate2;
        this.symbols = symbols;
    }
    
    public SourceFinnhub(
            String apiKey,
            OffsetDateTime startDate2,
            List<Object> symbols) {
        this(apiKey, Optional.empty(), Optional.empty(), startDate2, symbols);
    }

    /**
     * The API key to use for authentication
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * More info: https://finnhub.io/docs/api/stock-symbols
     */
    @JsonIgnore
    public Optional<String> exchange() {
        return exchange;
    }

    /**
     * This parameter can be 1 of the following values general, forex, crypto, merger.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MarketNewsCategory> marketNewsCategory() {
        return (Optional<MarketNewsCategory>) marketNewsCategory;
    }

    @JsonIgnore
    public Finnhub sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate2() {
        return startDate2;
    }

    @JsonIgnore
    public List<Object> symbols() {
        return symbols;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The API key to use for authentication
     */
    public SourceFinnhub withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * More info: https://finnhub.io/docs/api/stock-symbols
     */
    public SourceFinnhub withExchange(String exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = Optional.ofNullable(exchange);
        return this;
    }

    /**
     * More info: https://finnhub.io/docs/api/stock-symbols
     */
    public SourceFinnhub withExchange(Optional<String> exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = exchange;
        return this;
    }

    /**
     * This parameter can be 1 of the following values general, forex, crypto, merger.
     */
    public SourceFinnhub withMarketNewsCategory(MarketNewsCategory marketNewsCategory) {
        Utils.checkNotNull(marketNewsCategory, "marketNewsCategory");
        this.marketNewsCategory = Optional.ofNullable(marketNewsCategory);
        return this;
    }

    /**
     * This parameter can be 1 of the following values general, forex, crypto, merger.
     */
    public SourceFinnhub withMarketNewsCategory(Optional<? extends MarketNewsCategory> marketNewsCategory) {
        Utils.checkNotNull(marketNewsCategory, "marketNewsCategory");
        this.marketNewsCategory = marketNewsCategory;
        return this;
    }

    public SourceFinnhub withStartDate2(OffsetDateTime startDate2) {
        Utils.checkNotNull(startDate2, "startDate2");
        this.startDate2 = startDate2;
        return this;
    }

    public SourceFinnhub withSymbols(List<Object> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFinnhub other = (SourceFinnhub) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.exchange, other.exchange) &&
            Objects.deepEquals(this.marketNewsCategory, other.marketNewsCategory) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate2, other.startDate2) &&
            Objects.deepEquals(this.symbols, other.symbols);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            exchange,
            marketNewsCategory,
            sourceType,
            startDate2,
            symbols);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFinnhub.class,
                "apiKey", apiKey,
                "exchange", exchange,
                "marketNewsCategory", marketNewsCategory,
                "sourceType", sourceType,
                "startDate2", startDate2,
                "symbols", symbols);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<String> exchange;
 
        private Optional<? extends MarketNewsCategory> marketNewsCategory;
 
        private OffsetDateTime startDate2;
 
        private List<Object> symbols;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The API key to use for authentication
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * More info: https://finnhub.io/docs/api/stock-symbols
         */
        public Builder exchange(String exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = Optional.ofNullable(exchange);
            return this;
        }

        /**
         * More info: https://finnhub.io/docs/api/stock-symbols
         */
        public Builder exchange(Optional<String> exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = exchange;
            return this;
        }

        /**
         * This parameter can be 1 of the following values general, forex, crypto, merger.
         */
        public Builder marketNewsCategory(MarketNewsCategory marketNewsCategory) {
            Utils.checkNotNull(marketNewsCategory, "marketNewsCategory");
            this.marketNewsCategory = Optional.ofNullable(marketNewsCategory);
            return this;
        }

        /**
         * This parameter can be 1 of the following values general, forex, crypto, merger.
         */
        public Builder marketNewsCategory(Optional<? extends MarketNewsCategory> marketNewsCategory) {
            Utils.checkNotNull(marketNewsCategory, "marketNewsCategory");
            this.marketNewsCategory = marketNewsCategory;
            return this;
        }

        public Builder startDate2(OffsetDateTime startDate2) {
            Utils.checkNotNull(startDate2, "startDate2");
            this.startDate2 = startDate2;
            return this;
        }

        public Builder symbols(List<Object> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }
        
        public SourceFinnhub build() {
            if (exchange == null) {
                exchange = _SINGLETON_VALUE_Exchange.value();
            }
            if (marketNewsCategory == null) {
                marketNewsCategory = _SINGLETON_VALUE_MarketNewsCategory.value();
            }
            return new SourceFinnhub(
                apiKey,
                exchange,
                marketNewsCategory,
                startDate2,
                symbols);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Exchange =
                new LazySingletonValue<>(
                        "exchange",
                        "\"US\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<? extends MarketNewsCategory>> _SINGLETON_VALUE_MarketNewsCategory =
                new LazySingletonValue<>(
                        "market_news_category",
                        "\"general\"",
                        new TypeReference<Optional<? extends MarketNewsCategory>>() {});

        private static final LazySingletonValue<Finnhub> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"finnhub\"",
                        new TypeReference<Finnhub>() {});
    }
}
