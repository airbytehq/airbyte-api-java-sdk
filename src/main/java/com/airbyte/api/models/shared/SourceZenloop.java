/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceZenloop {

    /**
     * Zenloop API Token. You can get the API token in settings page &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt; 
     */
    @JsonProperty("api_token")
    private String apiToken;

    /**
     * Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_from")
    private Optional<String> dateFrom;

    @JsonProperty("sourceType")
    private Zenloop sourceType;

    /**
     * Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("survey_group_id")
    private Optional<String> surveyGroupId;

    /**
     * Zenloop Survey ID. Can be found &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt;. Leave empty to pull answers from all surveys
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("survey_id")
    private Optional<String> surveyId;

    @JsonCreator
    public SourceZenloop(
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("date_from") Optional<String> dateFrom,
            @JsonProperty("survey_group_id") Optional<String> surveyGroupId,
            @JsonProperty("survey_id") Optional<String> surveyId) {
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(dateFrom, "dateFrom");
        Utils.checkNotNull(surveyGroupId, "surveyGroupId");
        Utils.checkNotNull(surveyId, "surveyId");
        this.apiToken = apiToken;
        this.dateFrom = dateFrom;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.surveyGroupId = surveyGroupId;
        this.surveyId = surveyId;
    }
    
    public SourceZenloop(
            String apiToken) {
        this(apiToken, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Zenloop API Token. You can get the API token in settings page &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt; 
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    /**
     * Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced
     */
    @JsonIgnore
    public Optional<String> dateFrom() {
        return dateFrom;
    }

    @JsonIgnore
    public Zenloop sourceType() {
        return sourceType;
    }

    /**
     * Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups
     */
    @JsonIgnore
    public Optional<String> surveyGroupId() {
        return surveyGroupId;
    }

    /**
     * Zenloop Survey ID. Can be found &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt;. Leave empty to pull answers from all surveys
     */
    @JsonIgnore
    public Optional<String> surveyId() {
        return surveyId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Zenloop API Token. You can get the API token in settings page &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt; 
     */
    public SourceZenloop withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced
     */
    public SourceZenloop withDateFrom(String dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = Optional.ofNullable(dateFrom);
        return this;
    }

    /**
     * Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced
     */
    public SourceZenloop withDateFrom(Optional<String> dateFrom) {
        Utils.checkNotNull(dateFrom, "dateFrom");
        this.dateFrom = dateFrom;
        return this;
    }

    /**
     * Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups
     */
    public SourceZenloop withSurveyGroupId(String surveyGroupId) {
        Utils.checkNotNull(surveyGroupId, "surveyGroupId");
        this.surveyGroupId = Optional.ofNullable(surveyGroupId);
        return this;
    }

    /**
     * Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups
     */
    public SourceZenloop withSurveyGroupId(Optional<String> surveyGroupId) {
        Utils.checkNotNull(surveyGroupId, "surveyGroupId");
        this.surveyGroupId = surveyGroupId;
        return this;
    }

    /**
     * Zenloop Survey ID. Can be found &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt;. Leave empty to pull answers from all surveys
     */
    public SourceZenloop withSurveyId(String surveyId) {
        Utils.checkNotNull(surveyId, "surveyId");
        this.surveyId = Optional.ofNullable(surveyId);
        return this;
    }

    /**
     * Zenloop Survey ID. Can be found &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt;. Leave empty to pull answers from all surveys
     */
    public SourceZenloop withSurveyId(Optional<String> surveyId) {
        Utils.checkNotNull(surveyId, "surveyId");
        this.surveyId = surveyId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZenloop other = (SourceZenloop) o;
        return 
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.dateFrom, other.dateFrom) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.surveyGroupId, other.surveyGroupId) &&
            Objects.deepEquals(this.surveyId, other.surveyId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiToken,
            dateFrom,
            sourceType,
            surveyGroupId,
            surveyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZenloop.class,
                "apiToken", apiToken,
                "dateFrom", dateFrom,
                "sourceType", sourceType,
                "surveyGroupId", surveyGroupId,
                "surveyId", surveyId);
    }
    
    public final static class Builder {
 
        private String apiToken;
 
        private Optional<String> dateFrom = Optional.empty();
 
        private Optional<String> surveyGroupId = Optional.empty();
 
        private Optional<String> surveyId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Zenloop API Token. You can get the API token in settings page &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt; 
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced
         */
        public Builder dateFrom(String dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = Optional.ofNullable(dateFrom);
            return this;
        }

        /**
         * Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced
         */
        public Builder dateFrom(Optional<String> dateFrom) {
            Utils.checkNotNull(dateFrom, "dateFrom");
            this.dateFrom = dateFrom;
            return this;
        }

        /**
         * Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups
         */
        public Builder surveyGroupId(String surveyGroupId) {
            Utils.checkNotNull(surveyGroupId, "surveyGroupId");
            this.surveyGroupId = Optional.ofNullable(surveyGroupId);
            return this;
        }

        /**
         * Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups
         */
        public Builder surveyGroupId(Optional<String> surveyGroupId) {
            Utils.checkNotNull(surveyGroupId, "surveyGroupId");
            this.surveyGroupId = surveyGroupId;
            return this;
        }

        /**
         * Zenloop Survey ID. Can be found &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt;. Leave empty to pull answers from all surveys
         */
        public Builder surveyId(String surveyId) {
            Utils.checkNotNull(surveyId, "surveyId");
            this.surveyId = Optional.ofNullable(surveyId);
            return this;
        }

        /**
         * Zenloop Survey ID. Can be found &lt;a href="https://app.zenloop.com/settings/api"&gt;here&lt;/a&gt;. Leave empty to pull answers from all surveys
         */
        public Builder surveyId(Optional<String> surveyId) {
            Utils.checkNotNull(surveyId, "surveyId");
            this.surveyId = surveyId;
            return this;
        }
        
        public SourceZenloop build() {
            return new SourceZenloop(
                apiToken,
                dateFrom,
                surveyGroupId,
                surveyId);
        }

        private static final LazySingletonValue<Zenloop> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"zenloop\"",
                        new TypeReference<Zenloop>() {});
    }
}

