/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceFauna {

    /**
     * Settings for the Fauna Collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends Collection> collection;

    /**
     * Domain of Fauna to query. Defaults db.fauna.com. See &lt;a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups&gt;the docs&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    private Optional<String> domain;

    /**
     * Endpoint port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    private Optional<Long> port;

    /**
     * URL scheme.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme")
    private Optional<String> scheme;

    /**
     * Fauna secret, used when authenticating with the database.
     */
    @JsonProperty("secret")
    private String secret;

    @JsonProperty("sourceType")
    private Fauna sourceType;

    @JsonCreator
    public SourceFauna(
            @JsonProperty("collection") Optional<? extends Collection> collection,
            @JsonProperty("domain") Optional<String> domain,
            @JsonProperty("port") Optional<Long> port,
            @JsonProperty("scheme") Optional<String> scheme,
            @JsonProperty("secret") String secret) {
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(scheme, "scheme");
        Utils.checkNotNull(secret, "secret");
        this.collection = collection;
        this.domain = domain;
        this.port = port;
        this.scheme = scheme;
        this.secret = secret;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceFauna(
            String secret) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), secret);
    }

    /**
     * Settings for the Fauna Collection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Collection> collection() {
        return (Optional<Collection>) collection;
    }

    /**
     * Domain of Fauna to query. Defaults db.fauna.com. See &lt;a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups&gt;the docs&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<String> domain() {
        return domain;
    }

    /**
     * Endpoint port.
     */
    @JsonIgnore
    public Optional<Long> port() {
        return port;
    }

    /**
     * URL scheme.
     */
    @JsonIgnore
    public Optional<String> scheme() {
        return scheme;
    }

    /**
     * Fauna secret, used when authenticating with the database.
     */
    @JsonIgnore
    public String secret() {
        return secret;
    }

    @JsonIgnore
    public Fauna sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Settings for the Fauna Collection.
     */
    public SourceFauna withCollection(Collection collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    /**
     * Settings for the Fauna Collection.
     */
    public SourceFauna withCollection(Optional<? extends Collection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    /**
     * Domain of Fauna to query. Defaults db.fauna.com. See &lt;a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups&gt;the docs&lt;/a&gt;.
     */
    public SourceFauna withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = Optional.ofNullable(domain);
        return this;
    }

    /**
     * Domain of Fauna to query. Defaults db.fauna.com. See &lt;a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups&gt;the docs&lt;/a&gt;.
     */
    public SourceFauna withDomain(Optional<String> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * Endpoint port.
     */
    public SourceFauna withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = Optional.ofNullable(port);
        return this;
    }

    /**
     * Endpoint port.
     */
    public SourceFauna withPort(Optional<Long> port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * URL scheme.
     */
    public SourceFauna withScheme(String scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = Optional.ofNullable(scheme);
        return this;
    }

    /**
     * URL scheme.
     */
    public SourceFauna withScheme(Optional<String> scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = scheme;
        return this;
    }

    /**
     * Fauna secret, used when authenticating with the database.
     */
    public SourceFauna withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceFauna other = (SourceFauna) o;
        return 
            Objects.deepEquals(this.collection, other.collection) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.port, other.port) &&
            Objects.deepEquals(this.scheme, other.scheme) &&
            Objects.deepEquals(this.secret, other.secret) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            collection,
            domain,
            port,
            scheme,
            secret,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceFauna.class,
                "collection", collection,
                "domain", domain,
                "port", port,
                "scheme", scheme,
                "secret", secret,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<? extends Collection> collection = Optional.empty();
 
        private Optional<String> domain;
 
        private Optional<Long> port;
 
        private Optional<String> scheme;
 
        private String secret;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Settings for the Fauna Collection.
         */
        public Builder collection(Collection collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        /**
         * Settings for the Fauna Collection.
         */
        public Builder collection(Optional<? extends Collection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        /**
         * Domain of Fauna to query. Defaults db.fauna.com. See &lt;a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups&gt;the docs&lt;/a&gt;.
         */
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        /**
         * Domain of Fauna to query. Defaults db.fauna.com. See &lt;a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups&gt;the docs&lt;/a&gt;.
         */
        public Builder domain(Optional<String> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        /**
         * Endpoint port.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * Endpoint port.
         */
        public Builder port(Optional<Long> port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * URL scheme.
         */
        public Builder scheme(String scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = Optional.ofNullable(scheme);
            return this;
        }

        /**
         * URL scheme.
         */
        public Builder scheme(Optional<String> scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = scheme;
            return this;
        }

        /**
         * Fauna secret, used when authenticating with the database.
         */
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }
        
        public SourceFauna build() {
            if (domain == null) {
                domain = _SINGLETON_VALUE_Domain.value();
            }
            if (port == null) {
                port = _SINGLETON_VALUE_Port.value();
            }
            if (scheme == null) {
                scheme = _SINGLETON_VALUE_Scheme.value();
            }
            return new SourceFauna(
                collection,
                domain,
                port,
                scheme,
                secret);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Domain =
                new LazySingletonValue<>(
                        "domain",
                        "\"db.fauna.com\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Port =
                new LazySingletonValue<>(
                        "port",
                        "443",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Scheme =
                new LazySingletonValue<>(
                        "scheme",
                        "\"https\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Fauna> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"fauna\"",
                        new TypeReference<Fauna>() {});
    }
}
