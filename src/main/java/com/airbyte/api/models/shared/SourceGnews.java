/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class SourceGnews {

    /**
     * API Key
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<? extends SourceGnewsCountry> country;

    /**
     * This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("in")
    private Optional<? extends List<In>> in;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private Optional<? extends SourceGnewsLanguage> language;

    /**
     * This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nullable")
    private Optional<? extends List<Nullable>> nullable;

    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    @JsonProperty("query")
    private String query;

    /**
     * This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
     *   - publishedAt = sort by publication date, the articles with the most recent
     * publication date are returned first
     *   - relevance = sort by best match to keywords, the articles with the best
     * match are returned first
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortby")
    private Optional<? extends SourceGnewsSortBy> sortby;

    @JsonProperty("sourceType")
    private Gnews sourceType;

    /**
     * This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("top_headlines_query")
    private Optional<String> topHeadlinesQuery;

    /**
     * This parameter allows you to change the category for the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("top_headlines_topic")
    private Optional<? extends TopHeadlinesTopic> topHeadlinesTopic;

    @JsonCreator
    public SourceGnews(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("country") Optional<? extends SourceGnewsCountry> country,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("in") Optional<? extends List<In>> in,
            @JsonProperty("language") Optional<? extends SourceGnewsLanguage> language,
            @JsonProperty("nullable") Optional<? extends List<Nullable>> nullable,
            @JsonProperty("query") String query,
            @JsonProperty("sortby") Optional<? extends SourceGnewsSortBy> sortby,
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("top_headlines_query") Optional<String> topHeadlinesQuery,
            @JsonProperty("top_headlines_topic") Optional<? extends TopHeadlinesTopic> topHeadlinesTopic) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(in, "in");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(nullable, "nullable");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(sortby, "sortby");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(topHeadlinesQuery, "topHeadlinesQuery");
        Utils.checkNotNull(topHeadlinesTopic, "topHeadlinesTopic");
        this.apiKey = apiKey;
        this.country = country;
        this.endDate = endDate;
        this.in = in;
        this.language = language;
        this.nullable = nullable;
        this.query = query;
        this.sortby = sortby;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.topHeadlinesQuery = topHeadlinesQuery;
        this.topHeadlinesTopic = topHeadlinesTopic;
    }
    
    public SourceGnews(
            String apiKey,
            String query) {
        this(apiKey, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), query, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * API Key
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceGnewsCountry> country() {
        return (Optional<SourceGnewsCountry>) country;
    }

    /**
     * This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<In>> in() {
        return (Optional<List<In>>) in;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceGnewsLanguage> language() {
        return (Optional<SourceGnewsLanguage>) language;
    }

    /**
     * This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Nullable>> nullable() {
        return (Optional<List<Nullable>>) nullable;
    }

    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    /**
     * This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
     *   - publishedAt = sort by publication date, the articles with the most recent
     * publication date are returned first
     *   - relevance = sort by best match to keywords, the articles with the best
     * match are returned first
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceGnewsSortBy> sortby() {
        return (Optional<SourceGnewsSortBy>) sortby;
    }

    @JsonIgnore
    public Gnews sourceType() {
        return sourceType;
    }

    /**
     * This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    @JsonIgnore
    public Optional<String> topHeadlinesQuery() {
        return topHeadlinesQuery;
    }

    /**
     * This parameter allows you to change the category for the request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TopHeadlinesTopic> topHeadlinesTopic() {
        return (Optional<TopHeadlinesTopic>) topHeadlinesTopic;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * API Key
     */
    public SourceGnews withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
     */
    public SourceGnews withCountry(SourceGnewsCountry country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
     */
    public SourceGnews withCountry(Optional<? extends SourceGnewsCountry> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    public SourceGnews withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    public SourceGnews withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
     */
    public SourceGnews withIn(List<In> in) {
        Utils.checkNotNull(in, "in");
        this.in = Optional.ofNullable(in);
        return this;
    }

    /**
     * This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
     */
    public SourceGnews withIn(Optional<? extends List<In>> in) {
        Utils.checkNotNull(in, "in");
        this.in = in;
        return this;
    }

    public SourceGnews withLanguage(SourceGnewsLanguage language) {
        Utils.checkNotNull(language, "language");
        this.language = Optional.ofNullable(language);
        return this;
    }

    public SourceGnews withLanguage(Optional<? extends SourceGnewsLanguage> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    /**
     * This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
     */
    public SourceGnews withNullable(List<Nullable> nullable) {
        Utils.checkNotNull(nullable, "nullable");
        this.nullable = Optional.ofNullable(nullable);
        return this;
    }

    /**
     * This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
     */
    public SourceGnews withNullable(Optional<? extends List<Nullable>> nullable) {
        Utils.checkNotNull(nullable, "nullable");
        this.nullable = nullable;
        return this;
    }

    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    public SourceGnews withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
     *   - publishedAt = sort by publication date, the articles with the most recent
     * publication date are returned first
     *   - relevance = sort by best match to keywords, the articles with the best
     * match are returned first
     */
    public SourceGnews withSortby(SourceGnewsSortBy sortby) {
        Utils.checkNotNull(sortby, "sortby");
        this.sortby = Optional.ofNullable(sortby);
        return this;
    }

    /**
     * This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
     *   - publishedAt = sort by publication date, the articles with the most recent
     * publication date are returned first
     *   - relevance = sort by best match to keywords, the articles with the best
     * match are returned first
     */
    public SourceGnews withSortby(Optional<? extends SourceGnewsSortBy> sortby) {
        Utils.checkNotNull(sortby, "sortby");
        this.sortby = sortby;
        return this;
    }

    /**
     * This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    public SourceGnews withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    public SourceGnews withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    public SourceGnews withTopHeadlinesQuery(String topHeadlinesQuery) {
        Utils.checkNotNull(topHeadlinesQuery, "topHeadlinesQuery");
        this.topHeadlinesQuery = Optional.ofNullable(topHeadlinesQuery);
        return this;
    }

    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    public SourceGnews withTopHeadlinesQuery(Optional<String> topHeadlinesQuery) {
        Utils.checkNotNull(topHeadlinesQuery, "topHeadlinesQuery");
        this.topHeadlinesQuery = topHeadlinesQuery;
        return this;
    }

    /**
     * This parameter allows you to change the category for the request.
     */
    public SourceGnews withTopHeadlinesTopic(TopHeadlinesTopic topHeadlinesTopic) {
        Utils.checkNotNull(topHeadlinesTopic, "topHeadlinesTopic");
        this.topHeadlinesTopic = Optional.ofNullable(topHeadlinesTopic);
        return this;
    }

    /**
     * This parameter allows you to change the category for the request.
     */
    public SourceGnews withTopHeadlinesTopic(Optional<? extends TopHeadlinesTopic> topHeadlinesTopic) {
        Utils.checkNotNull(topHeadlinesTopic, "topHeadlinesTopic");
        this.topHeadlinesTopic = topHeadlinesTopic;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGnews other = (SourceGnews) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.in, other.in) &&
            Objects.deepEquals(this.language, other.language) &&
            Objects.deepEquals(this.nullable, other.nullable) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.sortby, other.sortby) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.topHeadlinesQuery, other.topHeadlinesQuery) &&
            Objects.deepEquals(this.topHeadlinesTopic, other.topHeadlinesTopic);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            country,
            endDate,
            in,
            language,
            nullable,
            query,
            sortby,
            sourceType,
            startDate,
            topHeadlinesQuery,
            topHeadlinesTopic);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGnews.class,
                "apiKey", apiKey,
                "country", country,
                "endDate", endDate,
                "in", in,
                "language", language,
                "nullable", nullable,
                "query", query,
                "sortby", sortby,
                "sourceType", sourceType,
                "startDate", startDate,
                "topHeadlinesQuery", topHeadlinesQuery,
                "topHeadlinesTopic", topHeadlinesTopic);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<? extends SourceGnewsCountry> country = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<? extends List<In>> in = Optional.empty();
 
        private Optional<? extends SourceGnewsLanguage> language = Optional.empty();
 
        private Optional<? extends List<Nullable>> nullable = Optional.empty();
 
        private String query;
 
        private Optional<? extends SourceGnewsSortBy> sortby = Optional.empty();
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> topHeadlinesQuery = Optional.empty();
 
        private Optional<? extends TopHeadlinesTopic> topHeadlinesTopic = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API Key
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
         */
        public Builder country(SourceGnewsCountry country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
         */
        public Builder country(Optional<? extends SourceGnewsCountry> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
         */
        public Builder in(List<In> in) {
            Utils.checkNotNull(in, "in");
            this.in = Optional.ofNullable(in);
            return this;
        }

        /**
         * This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
         */
        public Builder in(Optional<? extends List<In>> in) {
            Utils.checkNotNull(in, "in");
            this.in = in;
            return this;
        }

        public Builder language(SourceGnewsLanguage language) {
            Utils.checkNotNull(language, "language");
            this.language = Optional.ofNullable(language);
            return this;
        }

        public Builder language(Optional<? extends SourceGnewsLanguage> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        /**
         * This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
         */
        public Builder nullable(List<Nullable> nullable) {
            Utils.checkNotNull(nullable, "nullable");
            this.nullable = Optional.ofNullable(nullable);
            return this;
        }

        /**
         * This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
         */
        public Builder nullable(Optional<? extends List<Nullable>> nullable) {
            Utils.checkNotNull(nullable, "nullable");
            this.nullable = nullable;
            return this;
        }

        /**
         * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
         *   quotation marks are used to search for articles with the exact same keyword
         * sequence. 
         *   For example the query: "Apple iPhone" will return articles matching at
         * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
         *   search. By default the space character acts as an AND operator, it is
         * possible to replace the space character 
         *   by AND to obtain the same result. For example the query: Apple Microsoft
         * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
         *   It is important to note that this operator has a higher precedence than
         * the AND operator. For example the 
         *   query: Apple OR Microsoft will return all articles matching the keyword
         * Apple as well as all articles matching 
         *   the keyword Microsoft
         * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
         *   specified keywords. To use it, you need to add NOT in front of each word
         * or phrase surrounded by quotes.
         *   For example the query: Apple NOT iPhone will return all articles matching
         * the keyword Apple but not the keyword
         *   iPhone
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
         *   - publishedAt = sort by publication date, the articles with the most recent
         * publication date are returned first
         *   - relevance = sort by best match to keywords, the articles with the best
         * match are returned first
         */
        public Builder sortby(SourceGnewsSortBy sortby) {
            Utils.checkNotNull(sortby, "sortby");
            this.sortby = Optional.ofNullable(sortby);
            return this;
        }

        /**
         * This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
         *   - publishedAt = sort by publication date, the articles with the most recent
         * publication date are returned first
         *   - relevance = sort by best match to keywords, the articles with the best
         * match are returned first
         */
        public Builder sortby(Optional<? extends SourceGnewsSortBy> sortby) {
            Utils.checkNotNull(sortby, "sortby");
            this.sortby = sortby;
            return this;
        }

        /**
         * This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
         *   quotation marks are used to search for articles with the exact same keyword
         * sequence. 
         *   For example the query: "Apple iPhone" will return articles matching at
         * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
         *   search. By default the space character acts as an AND operator, it is
         * possible to replace the space character 
         *   by AND to obtain the same result. For example the query: Apple Microsoft
         * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
         *   It is important to note that this operator has a higher precedence than
         * the AND operator. For example the 
         *   query: Apple OR Microsoft will return all articles matching the keyword
         * Apple as well as all articles matching 
         *   the keyword Microsoft
         * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
         *   specified keywords. To use it, you need to add NOT in front of each word
         * or phrase surrounded by quotes.
         *   For example the query: Apple NOT iPhone will return all articles matching
         * the keyword Apple but not the keyword
         *   iPhone
         */
        public Builder topHeadlinesQuery(String topHeadlinesQuery) {
            Utils.checkNotNull(topHeadlinesQuery, "topHeadlinesQuery");
            this.topHeadlinesQuery = Optional.ofNullable(topHeadlinesQuery);
            return this;
        }

        /**
         * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
         *   quotation marks are used to search for articles with the exact same keyword
         * sequence. 
         *   For example the query: "Apple iPhone" will return articles matching at
         * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
         *   search. By default the space character acts as an AND operator, it is
         * possible to replace the space character 
         *   by AND to obtain the same result. For example the query: Apple Microsoft
         * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
         *   It is important to note that this operator has a higher precedence than
         * the AND operator. For example the 
         *   query: Apple OR Microsoft will return all articles matching the keyword
         * Apple as well as all articles matching 
         *   the keyword Microsoft
         * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
         *   specified keywords. To use it, you need to add NOT in front of each word
         * or phrase surrounded by quotes.
         *   For example the query: Apple NOT iPhone will return all articles matching
         * the keyword Apple but not the keyword
         *   iPhone
         */
        public Builder topHeadlinesQuery(Optional<String> topHeadlinesQuery) {
            Utils.checkNotNull(topHeadlinesQuery, "topHeadlinesQuery");
            this.topHeadlinesQuery = topHeadlinesQuery;
            return this;
        }

        /**
         * This parameter allows you to change the category for the request.
         */
        public Builder topHeadlinesTopic(TopHeadlinesTopic topHeadlinesTopic) {
            Utils.checkNotNull(topHeadlinesTopic, "topHeadlinesTopic");
            this.topHeadlinesTopic = Optional.ofNullable(topHeadlinesTopic);
            return this;
        }

        /**
         * This parameter allows you to change the category for the request.
         */
        public Builder topHeadlinesTopic(Optional<? extends TopHeadlinesTopic> topHeadlinesTopic) {
            Utils.checkNotNull(topHeadlinesTopic, "topHeadlinesTopic");
            this.topHeadlinesTopic = topHeadlinesTopic;
            return this;
        }
        
        public SourceGnews build() {
            return new SourceGnews(
                apiKey,
                country,
                endDate,
                in,
                language,
                nullable,
                query,
                sortby,
                startDate,
                topHeadlinesQuery,
                topHeadlinesTopic);
        }

        private static final LazySingletonValue<Gnews> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"gnews\"",
                        new TypeReference<Gnews>() {});
    }
}
