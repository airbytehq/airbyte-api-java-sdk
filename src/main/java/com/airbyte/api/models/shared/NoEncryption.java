/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * NoEncryption - Staging data will be stored in plaintext.
 */

public class NoEncryption {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption_type")
    private Optional<? extends EncryptionType> encryptionType;

    @JsonCreator
    public NoEncryption() {
        
        this.encryptionType = Builder._SINGLETON_VALUE_EncryptionType.value();
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EncryptionType> encryptionType() {
        return (Optional<EncryptionType>) encryptionType;
    }

    public final static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NoEncryption other = (NoEncryption) o;
        return 
            java.util.Objects.deepEquals(this.encryptionType, other.encryptionType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            encryptionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NoEncryption.class,
                "encryptionType", encryptionType);
    }
    
    public final static class Builder {  
        
        private Builder() {
          // force use of static builder() method
        }
        
        public NoEncryption build() {
            return new NoEncryption(
                );
        }

        private static final LazySingletonValue<Optional<? extends EncryptionType>> _SINGLETON_VALUE_EncryptionType =
                new LazySingletonValue<>(
                        "encryption_type",
                        "\"none\"",
                        new TypeReference<Optional<? extends EncryptionType>>() {});
    }
}

