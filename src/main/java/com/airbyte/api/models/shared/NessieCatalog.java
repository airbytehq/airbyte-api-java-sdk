/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * NessieCatalog
 * 
 * <p>Configuration details for connecting to a Nessie-based Iceberg catalog.
 */
public class NessieCatalog {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * Optional token for authentication with the Nessie server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    private Optional<String> accessToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_type")
    private Optional<? extends DestinationS3DataLakeSchemasCatalogTypeCatalogType> catalogType;

    /**
     * The Nessie namespace to be used in the Table identifier. 
     *            This will ONLY be used if the `Destination Namespace` setting for the connection is set to
     *            `Destination-defined` or `Source-defined`
     */
    @JsonProperty("namespace")
    private String namespace;

    /**
     * The base URL of the Nessie server used to connect to the Nessie catalog.
     */
    @JsonProperty("server_uri")
    private String serverUri;

    @JsonCreator
    public NessieCatalog(
            @JsonProperty("access_token") Optional<String> accessToken,
            @JsonProperty("catalog_type") Optional<? extends DestinationS3DataLakeSchemasCatalogTypeCatalogType> catalogType,
            @JsonProperty("namespace") String namespace,
            @JsonProperty("server_uri") String serverUri) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(catalogType, "catalogType");
        Utils.checkNotNull(namespace, "namespace");
        Utils.checkNotNull(serverUri, "serverUri");
        this.additionalProperties = new HashMap<>();
        this.accessToken = accessToken;
        this.catalogType = catalogType;
        this.namespace = namespace;
        this.serverUri = serverUri;
    }
    
    public NessieCatalog(
            String namespace,
            String serverUri) {
        this(Optional.empty(), Optional.empty(), namespace, serverUri);
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * Optional token for authentication with the Nessie server.
     */
    @JsonIgnore
    public Optional<String> accessToken() {
        return accessToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationS3DataLakeSchemasCatalogTypeCatalogType> catalogType() {
        return (Optional<DestinationS3DataLakeSchemasCatalogTypeCatalogType>) catalogType;
    }

    /**
     * The Nessie namespace to be used in the Table identifier. 
     *            This will ONLY be used if the `Destination Namespace` setting for the connection is set to
     *            `Destination-defined` or `Source-defined`
     */
    @JsonIgnore
    public String namespace() {
        return namespace;
    }

    /**
     * The base URL of the Nessie server used to connect to the Nessie catalog.
     */
    @JsonIgnore
    public String serverUri() {
        return serverUri;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public NessieCatalog withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public NessieCatalog withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Optional token for authentication with the Nessie server.
     */
    public NessieCatalog withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = Optional.ofNullable(accessToken);
        return this;
    }

    /**
     * Optional token for authentication with the Nessie server.
     */
    public NessieCatalog withAccessToken(Optional<String> accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    public NessieCatalog withCatalogType(DestinationS3DataLakeSchemasCatalogTypeCatalogType catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = Optional.ofNullable(catalogType);
        return this;
    }

    public NessieCatalog withCatalogType(Optional<? extends DestinationS3DataLakeSchemasCatalogTypeCatalogType> catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = catalogType;
        return this;
    }

    /**
     * The Nessie namespace to be used in the Table identifier. 
     *            This will ONLY be used if the `Destination Namespace` setting for the connection is set to
     *            `Destination-defined` or `Source-defined`
     */
    public NessieCatalog withNamespace(String namespace) {
        Utils.checkNotNull(namespace, "namespace");
        this.namespace = namespace;
        return this;
    }

    /**
     * The base URL of the Nessie server used to connect to the Nessie catalog.
     */
    public NessieCatalog withServerUri(String serverUri) {
        Utils.checkNotNull(serverUri, "serverUri");
        this.serverUri = serverUri;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NessieCatalog other = (NessieCatalog) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.catalogType, other.catalogType) &&
            Objects.deepEquals(this.namespace, other.namespace) &&
            Objects.deepEquals(this.serverUri, other.serverUri);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            accessToken,
            catalogType,
            namespace,
            serverUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NessieCatalog.class,
                "additionalProperties", additionalProperties,
                "accessToken", accessToken,
                "catalogType", catalogType,
                "namespace", namespace,
                "serverUri", serverUri);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<String> accessToken = Optional.empty();
 
        private Optional<? extends DestinationS3DataLakeSchemasCatalogTypeCatalogType> catalogType;
 
        private String namespace;
 
        private String serverUri;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * Optional token for authentication with the Nessie server.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        /**
         * Optional token for authentication with the Nessie server.
         */
        public Builder accessToken(Optional<String> accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        public Builder catalogType(DestinationS3DataLakeSchemasCatalogTypeCatalogType catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = Optional.ofNullable(catalogType);
            return this;
        }

        public Builder catalogType(Optional<? extends DestinationS3DataLakeSchemasCatalogTypeCatalogType> catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = catalogType;
            return this;
        }

        /**
         * The Nessie namespace to be used in the Table identifier. 
         *            This will ONLY be used if the `Destination Namespace` setting for the connection is set to
         *            `Destination-defined` or `Source-defined`
         */
        public Builder namespace(String namespace) {
            Utils.checkNotNull(namespace, "namespace");
            this.namespace = namespace;
            return this;
        }

        /**
         * The base URL of the Nessie server used to connect to the Nessie catalog.
         */
        public Builder serverUri(String serverUri) {
            Utils.checkNotNull(serverUri, "serverUri");
            this.serverUri = serverUri;
            return this;
        }
        
        public NessieCatalog build() {
            if (catalogType == null) {
                catalogType = _SINGLETON_VALUE_CatalogType.value();
            }
            return new NessieCatalog(
                accessToken,
                catalogType,
                namespace,
                serverUri)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends DestinationS3DataLakeSchemasCatalogTypeCatalogType>> _SINGLETON_VALUE_CatalogType =
                new LazySingletonValue<>(
                        "catalog_type",
                        "\"NESSIE\"",
                        new TypeReference<Optional<? extends DestinationS3DataLakeSchemasCatalogTypeCatalogType>>() {});
    }
}
