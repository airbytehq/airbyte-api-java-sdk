/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class DestinationMssqlV2 {

    /**
     * The name of the MSSQL database.
     */
    @JsonProperty("database")
    private String database;

    @JsonProperty("destinationType")
    private MssqlV2 destinationType;

    /**
     * The host name of the MSSQL database.
     */
    @JsonProperty("host")
    private String host;

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jdbc_url_params")
    private Optional<String> jdbcUrlParams;

    /**
     * Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
     */
    @JsonProperty("load_type")
    private DestinationMssqlV2LoadType loadType;

    /**
     * The password associated with this username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<String> password;

    /**
     * The port of the MSSQL database.
     */
    @JsonProperty("port")
    private long port;

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    private Optional<String> schema;

    /**
     * The encryption method which is used to communicate with the database.
     */
    @JsonProperty("ssl_method")
    private DestinationMssqlV2SSLMethod sslMethod;

    /**
     * The username which is used to access the database.
     */
    @JsonProperty("user")
    private String user;

    @JsonCreator
    public DestinationMssqlV2(
            @JsonProperty("database") String database,
            @JsonProperty("host") String host,
            @JsonProperty("jdbc_url_params") Optional<String> jdbcUrlParams,
            @JsonProperty("load_type") DestinationMssqlV2LoadType loadType,
            @JsonProperty("password") Optional<String> password,
            @JsonProperty("port") long port,
            @JsonProperty("schema") Optional<String> schema,
            @JsonProperty("ssl_method") DestinationMssqlV2SSLMethod sslMethod,
            @JsonProperty("user") String user) {
        Utils.checkNotNull(database, "database");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        Utils.checkNotNull(loadType, "loadType");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(port, "port");
        Utils.checkNotNull(schema, "schema");
        Utils.checkNotNull(sslMethod, "sslMethod");
        Utils.checkNotNull(user, "user");
        this.database = database;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.host = host;
        this.jdbcUrlParams = jdbcUrlParams;
        this.loadType = loadType;
        this.password = password;
        this.port = port;
        this.schema = schema;
        this.sslMethod = sslMethod;
        this.user = user;
    }
    
    public DestinationMssqlV2(
            String database,
            String host,
            DestinationMssqlV2LoadType loadType,
            long port,
            DestinationMssqlV2SSLMethod sslMethod,
            String user) {
        this(database, host, Optional.empty(), loadType, Optional.empty(), port, Optional.empty(), sslMethod, user);
    }

    /**
     * The name of the MSSQL database.
     */
    @JsonIgnore
    public String database() {
        return database;
    }

    @JsonIgnore
    public MssqlV2 destinationType() {
        return destinationType;
    }

    /**
     * The host name of the MSSQL database.
     */
    @JsonIgnore
    public String host() {
        return host;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    @JsonIgnore
    public Optional<String> jdbcUrlParams() {
        return jdbcUrlParams;
    }

    /**
     * Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
     */
    @JsonIgnore
    public DestinationMssqlV2LoadType loadType() {
        return loadType;
    }

    /**
     * The password associated with this username.
     */
    @JsonIgnore
    public Optional<String> password() {
        return password;
    }

    /**
     * The port of the MSSQL database.
     */
    @JsonIgnore
    public long port() {
        return port;
    }

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    @JsonIgnore
    public Optional<String> schema() {
        return schema;
    }

    /**
     * The encryption method which is used to communicate with the database.
     */
    @JsonIgnore
    public DestinationMssqlV2SSLMethod sslMethod() {
        return sslMethod;
    }

    /**
     * The username which is used to access the database.
     */
    @JsonIgnore
    public String user() {
        return user;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the MSSQL database.
     */
    public DestinationMssqlV2 withDatabase(String database) {
        Utils.checkNotNull(database, "database");
        this.database = database;
        return this;
    }

    /**
     * The host name of the MSSQL database.
     */
    public DestinationMssqlV2 withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public DestinationMssqlV2 withJdbcUrlParams(String jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
        return this;
    }

    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
     */
    public DestinationMssqlV2 withJdbcUrlParams(Optional<String> jdbcUrlParams) {
        Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
        this.jdbcUrlParams = jdbcUrlParams;
        return this;
    }

    /**
     * Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
     */
    public DestinationMssqlV2 withLoadType(DestinationMssqlV2LoadType loadType) {
        Utils.checkNotNull(loadType, "loadType");
        this.loadType = loadType;
        return this;
    }

    /**
     * The password associated with this username.
     */
    public DestinationMssqlV2 withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    /**
     * The password associated with this username.
     */
    public DestinationMssqlV2 withPassword(Optional<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * The port of the MSSQL database.
     */
    public DestinationMssqlV2 withPort(long port) {
        Utils.checkNotNull(port, "port");
        this.port = port;
        return this;
    }

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    public DestinationMssqlV2 withSchema(String schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = Optional.ofNullable(schema);
        return this;
    }

    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
     */
    public DestinationMssqlV2 withSchema(Optional<String> schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = schema;
        return this;
    }

    /**
     * The encryption method which is used to communicate with the database.
     */
    public DestinationMssqlV2 withSslMethod(DestinationMssqlV2SSLMethod sslMethod) {
        Utils.checkNotNull(sslMethod, "sslMethod");
        this.sslMethod = sslMethod;
        return this;
    }

    /**
     * The username which is used to access the database.
     */
    public DestinationMssqlV2 withUser(String user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationMssqlV2 other = (DestinationMssqlV2) o;
        return 
            Objects.deepEquals(this.database, other.database) &&
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.jdbcUrlParams, other.jdbcUrlParams) &&
            Objects.deepEquals(this.loadType, other.loadType) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.port, other.port) &&
            Objects.deepEquals(this.schema, other.schema) &&
            Objects.deepEquals(this.sslMethod, other.sslMethod) &&
            Objects.deepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            database,
            destinationType,
            host,
            jdbcUrlParams,
            loadType,
            password,
            port,
            schema,
            sslMethod,
            user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationMssqlV2.class,
                "database", database,
                "destinationType", destinationType,
                "host", host,
                "jdbcUrlParams", jdbcUrlParams,
                "loadType", loadType,
                "password", password,
                "port", port,
                "schema", schema,
                "sslMethod", sslMethod,
                "user", user);
    }
    
    public final static class Builder {
 
        private String database;
 
        private String host;
 
        private Optional<String> jdbcUrlParams = Optional.empty();
 
        private DestinationMssqlV2LoadType loadType;
 
        private Optional<String> password = Optional.empty();
 
        private Long port;
 
        private Optional<String> schema;
 
        private DestinationMssqlV2SSLMethod sslMethod;
 
        private String user;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the MSSQL database.
         */
        public Builder database(String database) {
            Utils.checkNotNull(database, "database");
            this.database = database;
            return this;
        }

        /**
         * The host name of the MSSQL database.
         */
        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(String jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = Optional.ofNullable(jdbcUrlParams);
            return this;
        }

        /**
         * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&amp;'. (example: key1=value1&amp;key2=value2&amp;key3=value3).
         */
        public Builder jdbcUrlParams(Optional<String> jdbcUrlParams) {
            Utils.checkNotNull(jdbcUrlParams, "jdbcUrlParams");
            this.jdbcUrlParams = jdbcUrlParams;
            return this;
        }

        /**
         * Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
         */
        public Builder loadType(DestinationMssqlV2LoadType loadType) {
            Utils.checkNotNull(loadType, "loadType");
            this.loadType = loadType;
            return this;
        }

        /**
         * The password associated with this username.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        /**
         * The password associated with this username.
         */
        public Builder password(Optional<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * The port of the MSSQL database.
         */
        public Builder port(long port) {
            Utils.checkNotNull(port, "port");
            this.port = port;
            return this;
        }

        /**
         * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
         */
        public Builder schema(String schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
         */
        public Builder schema(Optional<String> schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = schema;
            return this;
        }

        /**
         * The encryption method which is used to communicate with the database.
         */
        public Builder sslMethod(DestinationMssqlV2SSLMethod sslMethod) {
            Utils.checkNotNull(sslMethod, "sslMethod");
            this.sslMethod = sslMethod;
            return this;
        }

        /**
         * The username which is used to access the database.
         */
        public Builder user(String user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }
        
        public DestinationMssqlV2 build() {
            if (schema == null) {
                schema = _SINGLETON_VALUE_Schema.value();
            }
            return new DestinationMssqlV2(
                database,
                host,
                jdbcUrlParams,
                loadType,
                password,
                port,
                schema,
                sslMethod,
                user);
        }

        private static final LazySingletonValue<MssqlV2> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"mssql-v2\"",
                        new TypeReference<MssqlV2>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Schema =
                new LazySingletonValue<>(
                        "schema",
                        "\"public\"",
                        new TypeReference<Optional<String>>() {});
    }
}
