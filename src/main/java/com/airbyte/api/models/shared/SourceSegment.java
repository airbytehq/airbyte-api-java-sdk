/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceSegment {

    /**
     * API token to use. Generate it in Segment's Workspace settings.
     */
    @JsonProperty("api_token")
    private String apiToken;

    /**
     * The region for the API, e.g., 'api' for US or 'eu1' for EU
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<String> region;

    @JsonProperty("sourceType")
    private Segment sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceSegment(
            @JsonProperty("api_token") String apiToken,
            @JsonProperty("region") Optional<String> region,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiToken, "apiToken");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(startDate, "startDate");
        this.apiToken = apiToken;
        this.region = region;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceSegment(
            String apiToken,
            OffsetDateTime startDate) {
        this(apiToken, Optional.empty(), startDate);
    }

    /**
     * API token to use. Generate it in Segment's Workspace settings.
     */
    @JsonIgnore
    public String apiToken() {
        return apiToken;
    }

    /**
     * The region for the API, e.g., 'api' for US or 'eu1' for EU
     */
    @JsonIgnore
    public Optional<String> region() {
        return region;
    }

    @JsonIgnore
    public Segment sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * API token to use. Generate it in Segment's Workspace settings.
     */
    public SourceSegment withApiToken(String apiToken) {
        Utils.checkNotNull(apiToken, "apiToken");
        this.apiToken = apiToken;
        return this;
    }

    /**
     * The region for the API, e.g., 'api' for US or 'eu1' for EU
     */
    public SourceSegment withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    /**
     * The region for the API, e.g., 'api' for US or 'eu1' for EU
     */
    public SourceSegment withRegion(Optional<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    public SourceSegment withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSegment other = (SourceSegment) o;
        return 
            Objects.deepEquals(this.apiToken, other.apiToken) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiToken,
            region,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSegment.class,
                "apiToken", apiToken,
                "region", region,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiToken;
 
        private Optional<String> region;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API token to use. Generate it in Segment's Workspace settings.
         */
        public Builder apiToken(String apiToken) {
            Utils.checkNotNull(apiToken, "apiToken");
            this.apiToken = apiToken;
            return this;
        }

        /**
         * The region for the API, e.g., 'api' for US or 'eu1' for EU
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * The region for the API, e.g., 'api' for US or 'eu1' for EU
         */
        public Builder region(Optional<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceSegment build() {
            if (region == null) {
                region = _SINGLETON_VALUE_Region.value();
            }
            return new SourceSegment(
                apiToken,
                region,
                startDate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Region =
                new LazySingletonValue<>(
                        "region",
                        "\"api\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Segment> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"segment\"",
                        new TypeReference<Segment>() {});
    }
}
