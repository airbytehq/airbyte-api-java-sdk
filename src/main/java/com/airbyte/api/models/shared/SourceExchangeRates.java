/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;


public class SourceExchangeRates {

    /**
     * Your API Key. See &lt;a href="https://apilayer.com/marketplace/exchangerates_data-api"&gt;here&lt;/a&gt;. The key is case sensitive.
     */
    @JsonProperty("access_key")
    private String accessKey;

    /**
     * ISO reference currency. See &lt;a href="https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"&gt;here&lt;/a&gt;. Free plan doesn't support Source Currency Switching, default base currency is EUR
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base")
    private Optional<? extends String> base;

    /**
     * Ignore weekends? (Exchanges don't run on weekends)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore_weekends")
    private Optional<? extends Boolean> ignoreWeekends;

    @JsonProperty("sourceType")
    private ExchangeRates sourceType;

    /**
     * Start getting data from that date.
     */
    @JsonProperty("start_date")
    private LocalDate startDate;

    public SourceExchangeRates(
            @JsonProperty("access_key") String accessKey,
            @JsonProperty("base") Optional<? extends String> base,
            @JsonProperty("ignore_weekends") Optional<? extends Boolean> ignoreWeekends,
            @JsonProperty("start_date") LocalDate startDate) {
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(base, "base");
        Utils.checkNotNull(ignoreWeekends, "ignoreWeekends");
        Utils.checkNotNull(startDate, "startDate");
        this.accessKey = accessKey;
        this.base = base;
        this.ignoreWeekends = ignoreWeekends;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * Your API Key. See &lt;a href="https://apilayer.com/marketplace/exchangerates_data-api"&gt;here&lt;/a&gt;. The key is case sensitive.
     */
    public String accessKey() {
        return accessKey;
    }

    /**
     * ISO reference currency. See &lt;a href="https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"&gt;here&lt;/a&gt;. Free plan doesn't support Source Currency Switching, default base currency is EUR
     */
    public Optional<? extends String> base() {
        return base;
    }

    /**
     * Ignore weekends? (Exchanges don't run on weekends)
     */
    public Optional<? extends Boolean> ignoreWeekends() {
        return ignoreWeekends;
    }

    public ExchangeRates sourceType() {
        return sourceType;
    }

    /**
     * Start getting data from that date.
     */
    public LocalDate startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Your API Key. See &lt;a href="https://apilayer.com/marketplace/exchangerates_data-api"&gt;here&lt;/a&gt;. The key is case sensitive.
     */
    public SourceExchangeRates withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    /**
     * ISO reference currency. See &lt;a href="https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"&gt;here&lt;/a&gt;. Free plan doesn't support Source Currency Switching, default base currency is EUR
     */
    public SourceExchangeRates withBase(String base) {
        Utils.checkNotNull(base, "base");
        this.base = Optional.ofNullable(base);
        return this;
    }

    /**
     * ISO reference currency. See &lt;a href="https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"&gt;here&lt;/a&gt;. Free plan doesn't support Source Currency Switching, default base currency is EUR
     */
    public SourceExchangeRates withBase(Optional<? extends String> base) {
        Utils.checkNotNull(base, "base");
        this.base = base;
        return this;
    }

    /**
     * Ignore weekends? (Exchanges don't run on weekends)
     */
    public SourceExchangeRates withIgnoreWeekends(boolean ignoreWeekends) {
        Utils.checkNotNull(ignoreWeekends, "ignoreWeekends");
        this.ignoreWeekends = Optional.ofNullable(ignoreWeekends);
        return this;
    }

    /**
     * Ignore weekends? (Exchanges don't run on weekends)
     */
    public SourceExchangeRates withIgnoreWeekends(Optional<? extends Boolean> ignoreWeekends) {
        Utils.checkNotNull(ignoreWeekends, "ignoreWeekends");
        this.ignoreWeekends = ignoreWeekends;
        return this;
    }

    /**
     * Start getting data from that date.
     */
    public SourceExchangeRates withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceExchangeRates other = (SourceExchangeRates) o;
        return 
            java.util.Objects.deepEquals(this.accessKey, other.accessKey) &&
            java.util.Objects.deepEquals(this.base, other.base) &&
            java.util.Objects.deepEquals(this.ignoreWeekends, other.ignoreWeekends) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKey,
            base,
            ignoreWeekends,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceExchangeRates.class,
                "accessKey", accessKey,
                "base", base,
                "ignoreWeekends", ignoreWeekends,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String accessKey;
 
        private Optional<? extends String> base = Optional.empty();
 
        private Optional<? extends Boolean> ignoreWeekends;
 
        private LocalDate startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your API Key. See &lt;a href="https://apilayer.com/marketplace/exchangerates_data-api"&gt;here&lt;/a&gt;. The key is case sensitive.
         */
        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }

        /**
         * ISO reference currency. See &lt;a href="https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"&gt;here&lt;/a&gt;. Free plan doesn't support Source Currency Switching, default base currency is EUR
         */
        public Builder base(String base) {
            Utils.checkNotNull(base, "base");
            this.base = Optional.ofNullable(base);
            return this;
        }

        /**
         * ISO reference currency. See &lt;a href="https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"&gt;here&lt;/a&gt;. Free plan doesn't support Source Currency Switching, default base currency is EUR
         */
        public Builder base(Optional<? extends String> base) {
            Utils.checkNotNull(base, "base");
            this.base = base;
            return this;
        }

        /**
         * Ignore weekends? (Exchanges don't run on weekends)
         */
        public Builder ignoreWeekends(boolean ignoreWeekends) {
            Utils.checkNotNull(ignoreWeekends, "ignoreWeekends");
            this.ignoreWeekends = Optional.ofNullable(ignoreWeekends);
            return this;
        }

        /**
         * Ignore weekends? (Exchanges don't run on weekends)
         */
        public Builder ignoreWeekends(Optional<? extends Boolean> ignoreWeekends) {
            Utils.checkNotNull(ignoreWeekends, "ignoreWeekends");
            this.ignoreWeekends = ignoreWeekends;
            return this;
        }

        /**
         * Start getting data from that date.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceExchangeRates build() {
            if (ignoreWeekends == null) {
                ignoreWeekends = _SINGLETON_VALUE_IgnoreWeekends.value();
            }
            return new SourceExchangeRates(
                accessKey,
                base,
                ignoreWeekends,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_IgnoreWeekends =
                new LazySingletonValue<>(
                        "ignore_weekends",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<ExchangeRates> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"exchange-rates\"",
                        new TypeReference<ExchangeRates>() {});
    }
}

