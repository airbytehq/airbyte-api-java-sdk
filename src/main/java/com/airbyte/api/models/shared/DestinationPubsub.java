/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class DestinationPubsub {

    /**
     * Number of ms before the buffer is flushed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batching_delay_threshold")
    private Optional<Long> batchingDelayThreshold;

    /**
     * Number of messages before the buffer is flushed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batching_element_count_threshold")
    private Optional<Long> batchingElementCountThreshold;

    /**
     * If TRUE messages will be buffered instead of sending them one by one
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batching_enabled")
    private Optional<Boolean> batchingEnabled;

    /**
     * Number of bytes before the buffer is flushed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batching_request_bytes_threshold")
    private Optional<Long> batchingRequestBytesThreshold;

    /**
     * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/pubsub"&gt;docs&lt;/a&gt; if you need help generating this key.
     */
    @JsonProperty("credentials_json")
    private String credentialsJson;

    @JsonProperty("destinationType")
    private Pubsub destinationType;

    /**
     * If TRUE PubSub publisher will have &lt;a href="https://cloud.google.com/pubsub/docs/ordering"&gt;message ordering&lt;/a&gt; enabled. Every message will have an ordering key of stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ordering_enabled")
    private Optional<Boolean> orderingEnabled;

    /**
     * The GCP project ID for the project containing the target PubSub.
     */
    @JsonProperty("project_id")
    private String projectId;

    /**
     * The PubSub topic ID in the given GCP project ID.
     */
    @JsonProperty("topic_id")
    private String topicId;

    @JsonCreator
    public DestinationPubsub(
            @JsonProperty("batching_delay_threshold") Optional<Long> batchingDelayThreshold,
            @JsonProperty("batching_element_count_threshold") Optional<Long> batchingElementCountThreshold,
            @JsonProperty("batching_enabled") Optional<Boolean> batchingEnabled,
            @JsonProperty("batching_request_bytes_threshold") Optional<Long> batchingRequestBytesThreshold,
            @JsonProperty("credentials_json") String credentialsJson,
            @JsonProperty("ordering_enabled") Optional<Boolean> orderingEnabled,
            @JsonProperty("project_id") String projectId,
            @JsonProperty("topic_id") String topicId) {
        Utils.checkNotNull(batchingDelayThreshold, "batchingDelayThreshold");
        Utils.checkNotNull(batchingElementCountThreshold, "batchingElementCountThreshold");
        Utils.checkNotNull(batchingEnabled, "batchingEnabled");
        Utils.checkNotNull(batchingRequestBytesThreshold, "batchingRequestBytesThreshold");
        Utils.checkNotNull(credentialsJson, "credentialsJson");
        Utils.checkNotNull(orderingEnabled, "orderingEnabled");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(topicId, "topicId");
        this.batchingDelayThreshold = batchingDelayThreshold;
        this.batchingElementCountThreshold = batchingElementCountThreshold;
        this.batchingEnabled = batchingEnabled;
        this.batchingRequestBytesThreshold = batchingRequestBytesThreshold;
        this.credentialsJson = credentialsJson;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.orderingEnabled = orderingEnabled;
        this.projectId = projectId;
        this.topicId = topicId;
    }
    
    public DestinationPubsub(
            String credentialsJson,
            String projectId,
            String topicId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), credentialsJson, Optional.empty(), projectId, topicId);
    }

    /**
     * Number of ms before the buffer is flushed
     */
    @JsonIgnore
    public Optional<Long> batchingDelayThreshold() {
        return batchingDelayThreshold;
    }

    /**
     * Number of messages before the buffer is flushed
     */
    @JsonIgnore
    public Optional<Long> batchingElementCountThreshold() {
        return batchingElementCountThreshold;
    }

    /**
     * If TRUE messages will be buffered instead of sending them one by one
     */
    @JsonIgnore
    public Optional<Boolean> batchingEnabled() {
        return batchingEnabled;
    }

    /**
     * Number of bytes before the buffer is flushed
     */
    @JsonIgnore
    public Optional<Long> batchingRequestBytesThreshold() {
        return batchingRequestBytesThreshold;
    }

    /**
     * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/pubsub"&gt;docs&lt;/a&gt; if you need help generating this key.
     */
    @JsonIgnore
    public String credentialsJson() {
        return credentialsJson;
    }

    @JsonIgnore
    public Pubsub destinationType() {
        return destinationType;
    }

    /**
     * If TRUE PubSub publisher will have &lt;a href="https://cloud.google.com/pubsub/docs/ordering"&gt;message ordering&lt;/a&gt; enabled. Every message will have an ordering key of stream
     */
    @JsonIgnore
    public Optional<Boolean> orderingEnabled() {
        return orderingEnabled;
    }

    /**
     * The GCP project ID for the project containing the target PubSub.
     */
    @JsonIgnore
    public String projectId() {
        return projectId;
    }

    /**
     * The PubSub topic ID in the given GCP project ID.
     */
    @JsonIgnore
    public String topicId() {
        return topicId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of ms before the buffer is flushed
     */
    public DestinationPubsub withBatchingDelayThreshold(long batchingDelayThreshold) {
        Utils.checkNotNull(batchingDelayThreshold, "batchingDelayThreshold");
        this.batchingDelayThreshold = Optional.ofNullable(batchingDelayThreshold);
        return this;
    }

    /**
     * Number of ms before the buffer is flushed
     */
    public DestinationPubsub withBatchingDelayThreshold(Optional<Long> batchingDelayThreshold) {
        Utils.checkNotNull(batchingDelayThreshold, "batchingDelayThreshold");
        this.batchingDelayThreshold = batchingDelayThreshold;
        return this;
    }

    /**
     * Number of messages before the buffer is flushed
     */
    public DestinationPubsub withBatchingElementCountThreshold(long batchingElementCountThreshold) {
        Utils.checkNotNull(batchingElementCountThreshold, "batchingElementCountThreshold");
        this.batchingElementCountThreshold = Optional.ofNullable(batchingElementCountThreshold);
        return this;
    }

    /**
     * Number of messages before the buffer is flushed
     */
    public DestinationPubsub withBatchingElementCountThreshold(Optional<Long> batchingElementCountThreshold) {
        Utils.checkNotNull(batchingElementCountThreshold, "batchingElementCountThreshold");
        this.batchingElementCountThreshold = batchingElementCountThreshold;
        return this;
    }

    /**
     * If TRUE messages will be buffered instead of sending them one by one
     */
    public DestinationPubsub withBatchingEnabled(boolean batchingEnabled) {
        Utils.checkNotNull(batchingEnabled, "batchingEnabled");
        this.batchingEnabled = Optional.ofNullable(batchingEnabled);
        return this;
    }

    /**
     * If TRUE messages will be buffered instead of sending them one by one
     */
    public DestinationPubsub withBatchingEnabled(Optional<Boolean> batchingEnabled) {
        Utils.checkNotNull(batchingEnabled, "batchingEnabled");
        this.batchingEnabled = batchingEnabled;
        return this;
    }

    /**
     * Number of bytes before the buffer is flushed
     */
    public DestinationPubsub withBatchingRequestBytesThreshold(long batchingRequestBytesThreshold) {
        Utils.checkNotNull(batchingRequestBytesThreshold, "batchingRequestBytesThreshold");
        this.batchingRequestBytesThreshold = Optional.ofNullable(batchingRequestBytesThreshold);
        return this;
    }

    /**
     * Number of bytes before the buffer is flushed
     */
    public DestinationPubsub withBatchingRequestBytesThreshold(Optional<Long> batchingRequestBytesThreshold) {
        Utils.checkNotNull(batchingRequestBytesThreshold, "batchingRequestBytesThreshold");
        this.batchingRequestBytesThreshold = batchingRequestBytesThreshold;
        return this;
    }

    /**
     * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/pubsub"&gt;docs&lt;/a&gt; if you need help generating this key.
     */
    public DestinationPubsub withCredentialsJson(String credentialsJson) {
        Utils.checkNotNull(credentialsJson, "credentialsJson");
        this.credentialsJson = credentialsJson;
        return this;
    }

    /**
     * If TRUE PubSub publisher will have &lt;a href="https://cloud.google.com/pubsub/docs/ordering"&gt;message ordering&lt;/a&gt; enabled. Every message will have an ordering key of stream
     */
    public DestinationPubsub withOrderingEnabled(boolean orderingEnabled) {
        Utils.checkNotNull(orderingEnabled, "orderingEnabled");
        this.orderingEnabled = Optional.ofNullable(orderingEnabled);
        return this;
    }

    /**
     * If TRUE PubSub publisher will have &lt;a href="https://cloud.google.com/pubsub/docs/ordering"&gt;message ordering&lt;/a&gt; enabled. Every message will have an ordering key of stream
     */
    public DestinationPubsub withOrderingEnabled(Optional<Boolean> orderingEnabled) {
        Utils.checkNotNull(orderingEnabled, "orderingEnabled");
        this.orderingEnabled = orderingEnabled;
        return this;
    }

    /**
     * The GCP project ID for the project containing the target PubSub.
     */
    public DestinationPubsub withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    /**
     * The PubSub topic ID in the given GCP project ID.
     */
    public DestinationPubsub withTopicId(String topicId) {
        Utils.checkNotNull(topicId, "topicId");
        this.topicId = topicId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationPubsub other = (DestinationPubsub) o;
        return 
            Objects.deepEquals(this.batchingDelayThreshold, other.batchingDelayThreshold) &&
            Objects.deepEquals(this.batchingElementCountThreshold, other.batchingElementCountThreshold) &&
            Objects.deepEquals(this.batchingEnabled, other.batchingEnabled) &&
            Objects.deepEquals(this.batchingRequestBytesThreshold, other.batchingRequestBytesThreshold) &&
            Objects.deepEquals(this.credentialsJson, other.credentialsJson) &&
            Objects.deepEquals(this.destinationType, other.destinationType) &&
            Objects.deepEquals(this.orderingEnabled, other.orderingEnabled) &&
            Objects.deepEquals(this.projectId, other.projectId) &&
            Objects.deepEquals(this.topicId, other.topicId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            batchingDelayThreshold,
            batchingElementCountThreshold,
            batchingEnabled,
            batchingRequestBytesThreshold,
            credentialsJson,
            destinationType,
            orderingEnabled,
            projectId,
            topicId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationPubsub.class,
                "batchingDelayThreshold", batchingDelayThreshold,
                "batchingElementCountThreshold", batchingElementCountThreshold,
                "batchingEnabled", batchingEnabled,
                "batchingRequestBytesThreshold", batchingRequestBytesThreshold,
                "credentialsJson", credentialsJson,
                "destinationType", destinationType,
                "orderingEnabled", orderingEnabled,
                "projectId", projectId,
                "topicId", topicId);
    }
    
    public final static class Builder {
 
        private Optional<Long> batchingDelayThreshold;
 
        private Optional<Long> batchingElementCountThreshold;
 
        private Optional<Boolean> batchingEnabled;
 
        private Optional<Long> batchingRequestBytesThreshold;
 
        private String credentialsJson;
 
        private Optional<Boolean> orderingEnabled;
 
        private String projectId;
 
        private String topicId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of ms before the buffer is flushed
         */
        public Builder batchingDelayThreshold(long batchingDelayThreshold) {
            Utils.checkNotNull(batchingDelayThreshold, "batchingDelayThreshold");
            this.batchingDelayThreshold = Optional.ofNullable(batchingDelayThreshold);
            return this;
        }

        /**
         * Number of ms before the buffer is flushed
         */
        public Builder batchingDelayThreshold(Optional<Long> batchingDelayThreshold) {
            Utils.checkNotNull(batchingDelayThreshold, "batchingDelayThreshold");
            this.batchingDelayThreshold = batchingDelayThreshold;
            return this;
        }

        /**
         * Number of messages before the buffer is flushed
         */
        public Builder batchingElementCountThreshold(long batchingElementCountThreshold) {
            Utils.checkNotNull(batchingElementCountThreshold, "batchingElementCountThreshold");
            this.batchingElementCountThreshold = Optional.ofNullable(batchingElementCountThreshold);
            return this;
        }

        /**
         * Number of messages before the buffer is flushed
         */
        public Builder batchingElementCountThreshold(Optional<Long> batchingElementCountThreshold) {
            Utils.checkNotNull(batchingElementCountThreshold, "batchingElementCountThreshold");
            this.batchingElementCountThreshold = batchingElementCountThreshold;
            return this;
        }

        /**
         * If TRUE messages will be buffered instead of sending them one by one
         */
        public Builder batchingEnabled(boolean batchingEnabled) {
            Utils.checkNotNull(batchingEnabled, "batchingEnabled");
            this.batchingEnabled = Optional.ofNullable(batchingEnabled);
            return this;
        }

        /**
         * If TRUE messages will be buffered instead of sending them one by one
         */
        public Builder batchingEnabled(Optional<Boolean> batchingEnabled) {
            Utils.checkNotNull(batchingEnabled, "batchingEnabled");
            this.batchingEnabled = batchingEnabled;
            return this;
        }

        /**
         * Number of bytes before the buffer is flushed
         */
        public Builder batchingRequestBytesThreshold(long batchingRequestBytesThreshold) {
            Utils.checkNotNull(batchingRequestBytesThreshold, "batchingRequestBytesThreshold");
            this.batchingRequestBytesThreshold = Optional.ofNullable(batchingRequestBytesThreshold);
            return this;
        }

        /**
         * Number of bytes before the buffer is flushed
         */
        public Builder batchingRequestBytesThreshold(Optional<Long> batchingRequestBytesThreshold) {
            Utils.checkNotNull(batchingRequestBytesThreshold, "batchingRequestBytesThreshold");
            this.batchingRequestBytesThreshold = batchingRequestBytesThreshold;
            return this;
        }

        /**
         * The contents of the JSON service account key. Check out the &lt;a href="https://docs.airbyte.com/integrations/destinations/pubsub"&gt;docs&lt;/a&gt; if you need help generating this key.
         */
        public Builder credentialsJson(String credentialsJson) {
            Utils.checkNotNull(credentialsJson, "credentialsJson");
            this.credentialsJson = credentialsJson;
            return this;
        }

        /**
         * If TRUE PubSub publisher will have &lt;a href="https://cloud.google.com/pubsub/docs/ordering"&gt;message ordering&lt;/a&gt; enabled. Every message will have an ordering key of stream
         */
        public Builder orderingEnabled(boolean orderingEnabled) {
            Utils.checkNotNull(orderingEnabled, "orderingEnabled");
            this.orderingEnabled = Optional.ofNullable(orderingEnabled);
            return this;
        }

        /**
         * If TRUE PubSub publisher will have &lt;a href="https://cloud.google.com/pubsub/docs/ordering"&gt;message ordering&lt;/a&gt; enabled. Every message will have an ordering key of stream
         */
        public Builder orderingEnabled(Optional<Boolean> orderingEnabled) {
            Utils.checkNotNull(orderingEnabled, "orderingEnabled");
            this.orderingEnabled = orderingEnabled;
            return this;
        }

        /**
         * The GCP project ID for the project containing the target PubSub.
         */
        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }

        /**
         * The PubSub topic ID in the given GCP project ID.
         */
        public Builder topicId(String topicId) {
            Utils.checkNotNull(topicId, "topicId");
            this.topicId = topicId;
            return this;
        }
        
        public DestinationPubsub build() {
            if (batchingDelayThreshold == null) {
                batchingDelayThreshold = _SINGLETON_VALUE_BatchingDelayThreshold.value();
            }
            if (batchingElementCountThreshold == null) {
                batchingElementCountThreshold = _SINGLETON_VALUE_BatchingElementCountThreshold.value();
            }
            if (batchingEnabled == null) {
                batchingEnabled = _SINGLETON_VALUE_BatchingEnabled.value();
            }
            if (batchingRequestBytesThreshold == null) {
                batchingRequestBytesThreshold = _SINGLETON_VALUE_BatchingRequestBytesThreshold.value();
            }
            if (orderingEnabled == null) {
                orderingEnabled = _SINGLETON_VALUE_OrderingEnabled.value();
            }            return new DestinationPubsub(
                batchingDelayThreshold,
                batchingElementCountThreshold,
                batchingEnabled,
                batchingRequestBytesThreshold,
                credentialsJson,
                orderingEnabled,
                projectId,
                topicId);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_BatchingDelayThreshold =
                new LazySingletonValue<>(
                        "batching_delay_threshold",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_BatchingElementCountThreshold =
                new LazySingletonValue<>(
                        "batching_element_count_threshold",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_BatchingEnabled =
                new LazySingletonValue<>(
                        "batching_enabled",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_BatchingRequestBytesThreshold =
                new LazySingletonValue<>(
                        "batching_request_bytes_threshold",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Pubsub> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"pubsub\"",
                        new TypeReference<Pubsub>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_OrderingEnabled =
                new LazySingletonValue<>(
                        "ordering_enabled",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

