/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * ViaAPI - Process files via an API, using the `hi_res` mode. This option is useful for increased performance and accuracy, but requires an API key and a hosted instance of unstructured.
 */

public class ViaAPI {

    /**
     * The API key to use matching the environment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_key")
    private Optional<? extends String> apiKey;

    /**
     * The URL of the unstructured API to use
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_url")
    private Optional<? extends String> apiUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends SourceSftpBulkSchemasMode> mode;

    /**
     * List of parameters send to the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    private Optional<? extends java.util.List<APIParameterConfigModel>> parameters;

    @JsonCreator
    public ViaAPI(
            @JsonProperty("api_key") Optional<? extends String> apiKey,
            @JsonProperty("api_url") Optional<? extends String> apiUrl,
            @JsonProperty("parameters") Optional<? extends java.util.List<APIParameterConfigModel>> parameters) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(apiUrl, "apiUrl");
        Utils.checkNotNull(parameters, "parameters");
        this.apiKey = apiKey;
        this.apiUrl = apiUrl;
        this.mode = Builder._SINGLETON_VALUE_Mode.value();
        this.parameters = parameters;
    }
    
    public ViaAPI() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The API key to use matching the environment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> apiKey() {
        return (Optional<String>) apiKey;
    }

    /**
     * The URL of the unstructured API to use
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> apiUrl() {
        return (Optional<String>) apiUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceSftpBulkSchemasMode> mode() {
        return (Optional<SourceSftpBulkSchemasMode>) mode;
    }

    /**
     * List of parameters send to the API
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<APIParameterConfigModel>> parameters() {
        return (Optional<java.util.List<APIParameterConfigModel>>) parameters;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The API key to use matching the environment
     */
    public ViaAPI withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = Optional.ofNullable(apiKey);
        return this;
    }

    /**
     * The API key to use matching the environment
     */
    public ViaAPI withApiKey(Optional<? extends String> apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The URL of the unstructured API to use
     */
    public ViaAPI withApiUrl(String apiUrl) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        this.apiUrl = Optional.ofNullable(apiUrl);
        return this;
    }

    /**
     * The URL of the unstructured API to use
     */
    public ViaAPI withApiUrl(Optional<? extends String> apiUrl) {
        Utils.checkNotNull(apiUrl, "apiUrl");
        this.apiUrl = apiUrl;
        return this;
    }

    /**
     * List of parameters send to the API
     */
    public ViaAPI withParameters(java.util.List<APIParameterConfigModel> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = Optional.ofNullable(parameters);
        return this;
    }

    /**
     * List of parameters send to the API
     */
    public ViaAPI withParameters(Optional<? extends java.util.List<APIParameterConfigModel>> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ViaAPI other = (ViaAPI) o;
        return 
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.apiUrl, other.apiUrl) &&
            java.util.Objects.deepEquals(this.mode, other.mode) &&
            java.util.Objects.deepEquals(this.parameters, other.parameters);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKey,
            apiUrl,
            mode,
            parameters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ViaAPI.class,
                "apiKey", apiKey,
                "apiUrl", apiUrl,
                "mode", mode,
                "parameters", parameters);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> apiKey;
 
        private Optional<? extends String> apiUrl;
 
        private Optional<? extends java.util.List<APIParameterConfigModel>> parameters = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The API key to use matching the environment
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = Optional.ofNullable(apiKey);
            return this;
        }

        /**
         * The API key to use matching the environment
         */
        public Builder apiKey(Optional<? extends String> apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The URL of the unstructured API to use
         */
        public Builder apiUrl(String apiUrl) {
            Utils.checkNotNull(apiUrl, "apiUrl");
            this.apiUrl = Optional.ofNullable(apiUrl);
            return this;
        }

        /**
         * The URL of the unstructured API to use
         */
        public Builder apiUrl(Optional<? extends String> apiUrl) {
            Utils.checkNotNull(apiUrl, "apiUrl");
            this.apiUrl = apiUrl;
            return this;
        }

        /**
         * List of parameters send to the API
         */
        public Builder parameters(java.util.List<APIParameterConfigModel> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        /**
         * List of parameters send to the API
         */
        public Builder parameters(Optional<? extends java.util.List<APIParameterConfigModel>> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }
        
        public ViaAPI build() {
            if (apiKey == null) {
                apiKey = _SINGLETON_VALUE_ApiKey.value();
            }
            if (apiUrl == null) {
                apiUrl = _SINGLETON_VALUE_ApiUrl.value();
            }
            return new ViaAPI(
                apiKey,
                apiUrl,
                parameters);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_ApiKey =
                new LazySingletonValue<>(
                        "api_key",
                        "\"\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_ApiUrl =
                new LazySingletonValue<>(
                        "api_url",
                        "\"https://api.unstructured.io\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends SourceSftpBulkSchemasMode>> _SINGLETON_VALUE_Mode =
                new LazySingletonValue<>(
                        "mode",
                        "\"api\"",
                        new TypeReference<Optional<? extends SourceSftpBulkSchemasMode>>() {});
    }
}

