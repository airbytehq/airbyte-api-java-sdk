/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * SystemIDSID - Use SID (Oracle System Identifier)
 */

public class SystemIDSID {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_type")
    private Optional<? extends SourceOracleConnectionType> connectionType;

    @JsonProperty("sid")
    private String sid;

    @JsonCreator
    public SystemIDSID(
            @JsonProperty("sid") String sid) {
        Utils.checkNotNull(sid, "sid");
        this.connectionType = Builder._SINGLETON_VALUE_ConnectionType.value();
        this.sid = sid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceOracleConnectionType> connectionType() {
        return (Optional<SourceOracleConnectionType>) connectionType;
    }

    @JsonIgnore
    public String sid() {
        return sid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SystemIDSID withSid(String sid) {
        Utils.checkNotNull(sid, "sid");
        this.sid = sid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SystemIDSID other = (SystemIDSID) o;
        return 
            java.util.Objects.deepEquals(this.connectionType, other.connectionType) &&
            java.util.Objects.deepEquals(this.sid, other.sid);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            connectionType,
            sid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SystemIDSID.class,
                "connectionType", connectionType,
                "sid", sid);
    }
    
    public final static class Builder {
 
        private String sid;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sid(String sid) {
            Utils.checkNotNull(sid, "sid");
            this.sid = sid;
            return this;
        }
        
        public SystemIDSID build() {
            return new SystemIDSID(
                sid);
        }

        private static final LazySingletonValue<Optional<? extends SourceOracleConnectionType>> _SINGLETON_VALUE_ConnectionType =
                new LazySingletonValue<>(
                        "connection_type",
                        "\"sid\"",
                        new TypeReference<Optional<? extends SourceOracleConnectionType>>() {});
    }
}

