/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * SourceElasticsearchApiKeySecret
 * 
 * <p>Use a api key and secret combination to authenticate
 */
public class SourceElasticsearchApiKeySecret {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * The Key ID to used when accessing an enterprise Elasticsearch instance.
     */
    @JsonProperty("apiKeyId")
    private String apiKeyId;

    /**
     * The secret associated with the API Key ID.
     */
    @JsonProperty("apiKeySecret")
    private String apiKeySecret;

    @JsonProperty("method")
    private SourceElasticsearchSchemasMethod method;

    @JsonCreator
    public SourceElasticsearchApiKeySecret(
            @JsonProperty("apiKeyId") String apiKeyId,
            @JsonProperty("apiKeySecret") String apiKeySecret) {
        Utils.checkNotNull(apiKeyId, "apiKeyId");
        Utils.checkNotNull(apiKeySecret, "apiKeySecret");
        this.additionalProperties = new HashMap<>();
        this.apiKeyId = apiKeyId;
        this.apiKeySecret = apiKeySecret;
        this.method = Builder._SINGLETON_VALUE_Method.value();
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * The Key ID to used when accessing an enterprise Elasticsearch instance.
     */
    @JsonIgnore
    public String apiKeyId() {
        return apiKeyId;
    }

    /**
     * The secret associated with the API Key ID.
     */
    @JsonIgnore
    public String apiKeySecret() {
        return apiKeySecret;
    }

    @JsonIgnore
    public SourceElasticsearchSchemasMethod method() {
        return method;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public SourceElasticsearchApiKeySecret withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public SourceElasticsearchApiKeySecret withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * The Key ID to used when accessing an enterprise Elasticsearch instance.
     */
    public SourceElasticsearchApiKeySecret withApiKeyId(String apiKeyId) {
        Utils.checkNotNull(apiKeyId, "apiKeyId");
        this.apiKeyId = apiKeyId;
        return this;
    }

    /**
     * The secret associated with the API Key ID.
     */
    public SourceElasticsearchApiKeySecret withApiKeySecret(String apiKeySecret) {
        Utils.checkNotNull(apiKeySecret, "apiKeySecret");
        this.apiKeySecret = apiKeySecret;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceElasticsearchApiKeySecret other = (SourceElasticsearchApiKeySecret) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.apiKeyId, other.apiKeyId) &&
            Objects.deepEquals(this.apiKeySecret, other.apiKeySecret) &&
            Objects.deepEquals(this.method, other.method);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            apiKeyId,
            apiKeySecret,
            method);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceElasticsearchApiKeySecret.class,
                "additionalProperties", additionalProperties,
                "apiKeyId", apiKeyId,
                "apiKeySecret", apiKeySecret,
                "method", method);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private String apiKeyId;
 
        private String apiKeySecret;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * The Key ID to used when accessing an enterprise Elasticsearch instance.
         */
        public Builder apiKeyId(String apiKeyId) {
            Utils.checkNotNull(apiKeyId, "apiKeyId");
            this.apiKeyId = apiKeyId;
            return this;
        }

        /**
         * The secret associated with the API Key ID.
         */
        public Builder apiKeySecret(String apiKeySecret) {
            Utils.checkNotNull(apiKeySecret, "apiKeySecret");
            this.apiKeySecret = apiKeySecret;
            return this;
        }
        
        public SourceElasticsearchApiKeySecret build() {
            return new SourceElasticsearchApiKeySecret(
                apiKeyId,
                apiKeySecret)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<SourceElasticsearchSchemasMethod> _SINGLETON_VALUE_Method =
                new LazySingletonValue<>(
                        "method",
                        "\"secret\"",
                        new TypeReference<SourceElasticsearchSchemasMethod>() {});
    }
}
