/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * NativeNetworkEncryptionNNE - The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports.
 */

public class NativeNetworkEncryptionNNE {

    /**
     * This parameter defines what encryption algorithm is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryption_algorithm")
    private Optional<? extends EncryptionAlgorithm> encryptionAlgorithm;

    @JsonProperty("encryption_method")
    private EncryptionMethod encryptionMethod;

    @JsonCreator
    public NativeNetworkEncryptionNNE(
            @JsonProperty("encryption_algorithm") Optional<? extends EncryptionAlgorithm> encryptionAlgorithm) {
        Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
        this.encryptionAlgorithm = encryptionAlgorithm;
        this.encryptionMethod = Builder._SINGLETON_VALUE_EncryptionMethod.value();
    }
    
    public NativeNetworkEncryptionNNE() {
        this(Optional.empty());
    }

    /**
     * This parameter defines what encryption algorithm is used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EncryptionAlgorithm> encryptionAlgorithm() {
        return (Optional<EncryptionAlgorithm>) encryptionAlgorithm;
    }

    @JsonIgnore
    public EncryptionMethod encryptionMethod() {
        return encryptionMethod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * This parameter defines what encryption algorithm is used.
     */
    public NativeNetworkEncryptionNNE withEncryptionAlgorithm(EncryptionAlgorithm encryptionAlgorithm) {
        Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
        this.encryptionAlgorithm = Optional.ofNullable(encryptionAlgorithm);
        return this;
    }

    /**
     * This parameter defines what encryption algorithm is used.
     */
    public NativeNetworkEncryptionNNE withEncryptionAlgorithm(Optional<? extends EncryptionAlgorithm> encryptionAlgorithm) {
        Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
        this.encryptionAlgorithm = encryptionAlgorithm;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NativeNetworkEncryptionNNE other = (NativeNetworkEncryptionNNE) o;
        return 
            java.util.Objects.deepEquals(this.encryptionAlgorithm, other.encryptionAlgorithm) &&
            java.util.Objects.deepEquals(this.encryptionMethod, other.encryptionMethod);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            encryptionAlgorithm,
            encryptionMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NativeNetworkEncryptionNNE.class,
                "encryptionAlgorithm", encryptionAlgorithm,
                "encryptionMethod", encryptionMethod);
    }
    
    public final static class Builder {
 
        private Optional<? extends EncryptionAlgorithm> encryptionAlgorithm;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * This parameter defines what encryption algorithm is used.
         */
        public Builder encryptionAlgorithm(EncryptionAlgorithm encryptionAlgorithm) {
            Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
            this.encryptionAlgorithm = Optional.ofNullable(encryptionAlgorithm);
            return this;
        }

        /**
         * This parameter defines what encryption algorithm is used.
         */
        public Builder encryptionAlgorithm(Optional<? extends EncryptionAlgorithm> encryptionAlgorithm) {
            Utils.checkNotNull(encryptionAlgorithm, "encryptionAlgorithm");
            this.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }
        
        public NativeNetworkEncryptionNNE build() {
            if (encryptionAlgorithm == null) {
                encryptionAlgorithm = _SINGLETON_VALUE_EncryptionAlgorithm.value();
            }
            return new NativeNetworkEncryptionNNE(
                encryptionAlgorithm);
        }

        private static final LazySingletonValue<Optional<? extends EncryptionAlgorithm>> _SINGLETON_VALUE_EncryptionAlgorithm =
                new LazySingletonValue<>(
                        "encryption_algorithm",
                        "\"AES256\"",
                        new TypeReference<Optional<? extends EncryptionAlgorithm>>() {});

        private static final LazySingletonValue<EncryptionMethod> _SINGLETON_VALUE_EncryptionMethod =
                new LazySingletonValue<>(
                        "encryption_method",
                        "\"client_nne\"",
                        new TypeReference<EncryptionMethod>() {});
    }
}

