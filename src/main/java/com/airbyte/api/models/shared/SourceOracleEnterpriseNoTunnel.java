/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SourceOracleEnterpriseNoTunnel
 * 
 * <p>No ssh tunnel needed to connect to database
 */
public class SourceOracleEnterpriseNoTunnel {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tunnel_method")
    private Optional<? extends SourceOracleEnterpriseTunnelMethod> tunnelMethod;

    @JsonCreator
    public SourceOracleEnterpriseNoTunnel(
            @JsonProperty("tunnel_method") Optional<? extends SourceOracleEnterpriseTunnelMethod> tunnelMethod) {
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        this.additionalProperties = new HashMap<>();
        this.tunnelMethod = tunnelMethod;
    }
    
    public SourceOracleEnterpriseNoTunnel() {
        this(Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceOracleEnterpriseTunnelMethod> tunnelMethod() {
        return (Optional<SourceOracleEnterpriseTunnelMethod>) tunnelMethod;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public SourceOracleEnterpriseNoTunnel withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public SourceOracleEnterpriseNoTunnel withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public SourceOracleEnterpriseNoTunnel withTunnelMethod(SourceOracleEnterpriseTunnelMethod tunnelMethod) {
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        this.tunnelMethod = Optional.ofNullable(tunnelMethod);
        return this;
    }

    public SourceOracleEnterpriseNoTunnel withTunnelMethod(Optional<? extends SourceOracleEnterpriseTunnelMethod> tunnelMethod) {
        Utils.checkNotNull(tunnelMethod, "tunnelMethod");
        this.tunnelMethod = tunnelMethod;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceOracleEnterpriseNoTunnel other = (SourceOracleEnterpriseNoTunnel) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.tunnelMethod, other.tunnelMethod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            tunnelMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceOracleEnterpriseNoTunnel.class,
                "additionalProperties", additionalProperties,
                "tunnelMethod", tunnelMethod);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends SourceOracleEnterpriseTunnelMethod> tunnelMethod;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder tunnelMethod(SourceOracleEnterpriseTunnelMethod tunnelMethod) {
            Utils.checkNotNull(tunnelMethod, "tunnelMethod");
            this.tunnelMethod = Optional.ofNullable(tunnelMethod);
            return this;
        }

        public Builder tunnelMethod(Optional<? extends SourceOracleEnterpriseTunnelMethod> tunnelMethod) {
            Utils.checkNotNull(tunnelMethod, "tunnelMethod");
            this.tunnelMethod = tunnelMethod;
            return this;
        }
        
        public SourceOracleEnterpriseNoTunnel build() {
            if (tunnelMethod == null) {
                tunnelMethod = _SINGLETON_VALUE_TunnelMethod.value();
            }
            return new SourceOracleEnterpriseNoTunnel(
                tunnelMethod)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends SourceOracleEnterpriseTunnelMethod>> _SINGLETON_VALUE_TunnelMethod =
                new LazySingletonValue<>(
                        "tunnel_method",
                        "\"NO_TUNNEL\"",
                        new TypeReference<Optional<? extends SourceOracleEnterpriseTunnelMethod>>() {});
    }
}
