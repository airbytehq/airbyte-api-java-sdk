/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class HTTPSPublicWeb {

    @JsonProperty("storage")
    private Storage storage;

    /**
     * Add User-Agent to request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_agent")
    private Optional<Boolean> userAgent;

    @JsonCreator
    public HTTPSPublicWeb(
            @JsonProperty("user_agent") Optional<Boolean> userAgent) {
        Utils.checkNotNull(userAgent, "userAgent");
        this.storage = Builder._SINGLETON_VALUE_Storage.value();
        this.userAgent = userAgent;
    }
    
    public HTTPSPublicWeb() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Storage storage() {
        return storage;
    }

    /**
     * Add User-Agent to request
     */
    @JsonIgnore
    public Optional<Boolean> userAgent() {
        return userAgent;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Add User-Agent to request
     */
    public HTTPSPublicWeb withUserAgent(boolean userAgent) {
        Utils.checkNotNull(userAgent, "userAgent");
        this.userAgent = Optional.ofNullable(userAgent);
        return this;
    }

    /**
     * Add User-Agent to request
     */
    public HTTPSPublicWeb withUserAgent(Optional<Boolean> userAgent) {
        Utils.checkNotNull(userAgent, "userAgent");
        this.userAgent = userAgent;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HTTPSPublicWeb other = (HTTPSPublicWeb) o;
        return 
            Objects.deepEquals(this.storage, other.storage) &&
            Objects.deepEquals(this.userAgent, other.userAgent);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            storage,
            userAgent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HTTPSPublicWeb.class,
                "storage", storage,
                "userAgent", userAgent);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> userAgent;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Add User-Agent to request
         */
        public Builder userAgent(boolean userAgent) {
            Utils.checkNotNull(userAgent, "userAgent");
            this.userAgent = Optional.ofNullable(userAgent);
            return this;
        }

        /**
         * Add User-Agent to request
         */
        public Builder userAgent(Optional<Boolean> userAgent) {
            Utils.checkNotNull(userAgent, "userAgent");
            this.userAgent = userAgent;
            return this;
        }
        
        public HTTPSPublicWeb build() {
            if (userAgent == null) {
                userAgent = _SINGLETON_VALUE_UserAgent.value();
            }
            return new HTTPSPublicWeb(
                userAgent);
        }

        private static final LazySingletonValue<Storage> _SINGLETON_VALUE_Storage =
                new LazySingletonValue<>(
                        "storage",
                        "\"HTTPS\"",
                        new TypeReference<Storage>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_UserAgent =
                new LazySingletonValue<>(
                        "user_agent",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}
