/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DestinationKinesis {

    /**
     * Generate the AWS Access Key for current user.
     */
    @JsonProperty("accessKey")
    private String accessKey;

    /**
     * Buffer size for storing kinesis records before being batch streamed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bufferSize")
    private Optional<? extends Long> bufferSize;

    @JsonProperty("destinationType")
    private Kinesis destinationType;

    /**
     * AWS Kinesis endpoint.
     */
    @JsonProperty("endpoint")
    private String endpoint;

    /**
     * The AWS Private Key - a string of numbers and letters that are unique for each account, also known as a "recovery phrase".
     */
    @JsonProperty("privateKey")
    private String privateKey;

    /**
     * AWS region. Your account determines the Regions that are available to you.
     */
    @JsonProperty("region")
    private String region;

    /**
     * Number of shards to which the data should be streamed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shardCount")
    private Optional<? extends Long> shardCount;

    public DestinationKinesis(
            @JsonProperty("accessKey") String accessKey,
            @JsonProperty("bufferSize") Optional<? extends Long> bufferSize,
            @JsonProperty("endpoint") String endpoint,
            @JsonProperty("privateKey") String privateKey,
            @JsonProperty("region") String region,
            @JsonProperty("shardCount") Optional<? extends Long> shardCount) {
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(bufferSize, "bufferSize");
        Utils.checkNotNull(endpoint, "endpoint");
        Utils.checkNotNull(privateKey, "privateKey");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(shardCount, "shardCount");
        this.accessKey = accessKey;
        this.bufferSize = bufferSize;
        this.destinationType = Builder._SINGLETON_VALUE_DestinationType.value();
        this.endpoint = endpoint;
        this.privateKey = privateKey;
        this.region = region;
        this.shardCount = shardCount;
    }

    /**
     * Generate the AWS Access Key for current user.
     */
    public String accessKey() {
        return accessKey;
    }

    /**
     * Buffer size for storing kinesis records before being batch streamed.
     */
    public Optional<? extends Long> bufferSize() {
        return bufferSize;
    }

    public Kinesis destinationType() {
        return destinationType;
    }

    /**
     * AWS Kinesis endpoint.
     */
    public String endpoint() {
        return endpoint;
    }

    /**
     * The AWS Private Key - a string of numbers and letters that are unique for each account, also known as a "recovery phrase".
     */
    public String privateKey() {
        return privateKey;
    }

    /**
     * AWS region. Your account determines the Regions that are available to you.
     */
    public String region() {
        return region;
    }

    /**
     * Number of shards to which the data should be streamed.
     */
    public Optional<? extends Long> shardCount() {
        return shardCount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Generate the AWS Access Key for current user.
     */
    public DestinationKinesis withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    /**
     * Buffer size for storing kinesis records before being batch streamed.
     */
    public DestinationKinesis withBufferSize(long bufferSize) {
        Utils.checkNotNull(bufferSize, "bufferSize");
        this.bufferSize = Optional.ofNullable(bufferSize);
        return this;
    }

    /**
     * Buffer size for storing kinesis records before being batch streamed.
     */
    public DestinationKinesis withBufferSize(Optional<? extends Long> bufferSize) {
        Utils.checkNotNull(bufferSize, "bufferSize");
        this.bufferSize = bufferSize;
        return this;
    }

    /**
     * AWS Kinesis endpoint.
     */
    public DestinationKinesis withEndpoint(String endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = endpoint;
        return this;
    }

    /**
     * The AWS Private Key - a string of numbers and letters that are unique for each account, also known as a "recovery phrase".
     */
    public DestinationKinesis withPrivateKey(String privateKey) {
        Utils.checkNotNull(privateKey, "privateKey");
        this.privateKey = privateKey;
        return this;
    }

    /**
     * AWS region. Your account determines the Regions that are available to you.
     */
    public DestinationKinesis withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Number of shards to which the data should be streamed.
     */
    public DestinationKinesis withShardCount(long shardCount) {
        Utils.checkNotNull(shardCount, "shardCount");
        this.shardCount = Optional.ofNullable(shardCount);
        return this;
    }

    /**
     * Number of shards to which the data should be streamed.
     */
    public DestinationKinesis withShardCount(Optional<? extends Long> shardCount) {
        Utils.checkNotNull(shardCount, "shardCount");
        this.shardCount = shardCount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationKinesis other = (DestinationKinesis) o;
        return 
            java.util.Objects.deepEquals(this.accessKey, other.accessKey) &&
            java.util.Objects.deepEquals(this.bufferSize, other.bufferSize) &&
            java.util.Objects.deepEquals(this.destinationType, other.destinationType) &&
            java.util.Objects.deepEquals(this.endpoint, other.endpoint) &&
            java.util.Objects.deepEquals(this.privateKey, other.privateKey) &&
            java.util.Objects.deepEquals(this.region, other.region) &&
            java.util.Objects.deepEquals(this.shardCount, other.shardCount);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKey,
            bufferSize,
            destinationType,
            endpoint,
            privateKey,
            region,
            shardCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationKinesis.class,
                "accessKey", accessKey,
                "bufferSize", bufferSize,
                "destinationType", destinationType,
                "endpoint", endpoint,
                "privateKey", privateKey,
                "region", region,
                "shardCount", shardCount);
    }
    
    public final static class Builder {
 
        private String accessKey;
 
        private Optional<? extends Long> bufferSize;
 
        private String endpoint;
 
        private String privateKey;
 
        private String region;
 
        private Optional<? extends Long> shardCount;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Generate the AWS Access Key for current user.
         */
        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }

        /**
         * Buffer size for storing kinesis records before being batch streamed.
         */
        public Builder bufferSize(long bufferSize) {
            Utils.checkNotNull(bufferSize, "bufferSize");
            this.bufferSize = Optional.ofNullable(bufferSize);
            return this;
        }

        /**
         * Buffer size for storing kinesis records before being batch streamed.
         */
        public Builder bufferSize(Optional<? extends Long> bufferSize) {
            Utils.checkNotNull(bufferSize, "bufferSize");
            this.bufferSize = bufferSize;
            return this;
        }

        /**
         * AWS Kinesis endpoint.
         */
        public Builder endpoint(String endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = endpoint;
            return this;
        }

        /**
         * The AWS Private Key - a string of numbers and letters that are unique for each account, also known as a "recovery phrase".
         */
        public Builder privateKey(String privateKey) {
            Utils.checkNotNull(privateKey, "privateKey");
            this.privateKey = privateKey;
            return this;
        }

        /**
         * AWS region. Your account determines the Regions that are available to you.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Number of shards to which the data should be streamed.
         */
        public Builder shardCount(long shardCount) {
            Utils.checkNotNull(shardCount, "shardCount");
            this.shardCount = Optional.ofNullable(shardCount);
            return this;
        }

        /**
         * Number of shards to which the data should be streamed.
         */
        public Builder shardCount(Optional<? extends Long> shardCount) {
            Utils.checkNotNull(shardCount, "shardCount");
            this.shardCount = shardCount;
            return this;
        }
        
        public DestinationKinesis build() {
            if (bufferSize == null) {
                bufferSize = _SINGLETON_VALUE_BufferSize.value();
            }
            if (shardCount == null) {
                shardCount = _SINGLETON_VALUE_ShardCount.value();
            }
            return new DestinationKinesis(
                accessKey,
                bufferSize,
                endpoint,
                privateKey,
                region,
                shardCount);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_BufferSize =
                new LazySingletonValue<>(
                        "bufferSize",
                        "100",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Kinesis> _SINGLETON_VALUE_DestinationType =
                new LazySingletonValue<>(
                        "destinationType",
                        "\"kinesis\"",
                        new TypeReference<Kinesis>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_ShardCount =
                new LazySingletonValue<>(
                        "shardCount",
                        "5",
                        new TypeReference<Optional<? extends Long>>() {});
    }
}

