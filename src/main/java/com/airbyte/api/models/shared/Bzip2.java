/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Bzip2 {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codec")
    private Optional<? extends DestinationGcsSchemasCodec> codec;

    @JsonCreator
    public Bzip2(
            @JsonProperty("codec") Optional<? extends DestinationGcsSchemasCodec> codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = codec;
    }
    
    public Bzip2() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationGcsSchemasCodec> codec() {
        return (Optional<DestinationGcsSchemasCodec>) codec;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Bzip2 withCodec(DestinationGcsSchemasCodec codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = Optional.ofNullable(codec);
        return this;
    }

    public Bzip2 withCodec(Optional<? extends DestinationGcsSchemasCodec> codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = codec;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Bzip2 other = (Bzip2) o;
        return 
            java.util.Objects.deepEquals(this.codec, other.codec);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            codec);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Bzip2.class,
                "codec", codec);
    }
    
    public final static class Builder {
 
        private Optional<? extends DestinationGcsSchemasCodec> codec;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder codec(DestinationGcsSchemasCodec codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = Optional.ofNullable(codec);
            return this;
        }

        public Builder codec(Optional<? extends DestinationGcsSchemasCodec> codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = codec;
            return this;
        }
        
        public Bzip2 build() {
            if (codec == null) {
                codec = _SINGLETON_VALUE_Codec.value();
            }
            return new Bzip2(
                codec);
        }

        private static final LazySingletonValue<Optional<? extends DestinationGcsSchemasCodec>> _SINGLETON_VALUE_Codec =
                new LazySingletonValue<>(
                        "codec",
                        "\"bzip2\"",
                        new TypeReference<Optional<? extends DestinationGcsSchemasCodec>>() {});
    }
}

