/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * StreamConfiguration - Configurations for a single stream.
 */

public class StreamConfiguration {

    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursorField")
    private Optional<? extends java.util.List<String>> cursorField;

    @JsonProperty("name")
    private String name;

    /**
     * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryKey")
    private Optional<? extends java.util.List<java.util.List<String>>> primaryKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncMode")
    private Optional<? extends ConnectionSyncModeEnum> syncMode;

    public StreamConfiguration(
            @JsonProperty("cursorField") Optional<? extends java.util.List<String>> cursorField,
            @JsonProperty("name") String name,
            @JsonProperty("primaryKey") Optional<? extends java.util.List<java.util.List<String>>> primaryKey,
            @JsonProperty("syncMode") Optional<? extends ConnectionSyncModeEnum> syncMode) {
        Utils.checkNotNull(cursorField, "cursorField");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(primaryKey, "primaryKey");
        Utils.checkNotNull(syncMode, "syncMode");
        this.cursorField = cursorField;
        this.name = name;
        this.primaryKey = primaryKey;
        this.syncMode = syncMode;
    }

    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
     */
    public Optional<? extends java.util.List<String>> cursorField() {
        return cursorField;
    }

    public String name() {
        return name;
    }

    /**
     * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
     */
    public Optional<? extends java.util.List<java.util.List<String>>> primaryKey() {
        return primaryKey;
    }

    public Optional<? extends ConnectionSyncModeEnum> syncMode() {
        return syncMode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
     */
    public StreamConfiguration withCursorField(java.util.List<String> cursorField) {
        Utils.checkNotNull(cursorField, "cursorField");
        this.cursorField = Optional.ofNullable(cursorField);
        return this;
    }

    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
     */
    public StreamConfiguration withCursorField(Optional<? extends java.util.List<String>> cursorField) {
        Utils.checkNotNull(cursorField, "cursorField");
        this.cursorField = cursorField;
        return this;
    }

    public StreamConfiguration withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
     */
    public StreamConfiguration withPrimaryKey(java.util.List<java.util.List<String>> primaryKey) {
        Utils.checkNotNull(primaryKey, "primaryKey");
        this.primaryKey = Optional.ofNullable(primaryKey);
        return this;
    }

    /**
     * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
     */
    public StreamConfiguration withPrimaryKey(Optional<? extends java.util.List<java.util.List<String>>> primaryKey) {
        Utils.checkNotNull(primaryKey, "primaryKey");
        this.primaryKey = primaryKey;
        return this;
    }

    public StreamConfiguration withSyncMode(ConnectionSyncModeEnum syncMode) {
        Utils.checkNotNull(syncMode, "syncMode");
        this.syncMode = Optional.ofNullable(syncMode);
        return this;
    }

    public StreamConfiguration withSyncMode(Optional<? extends ConnectionSyncModeEnum> syncMode) {
        Utils.checkNotNull(syncMode, "syncMode");
        this.syncMode = syncMode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamConfiguration other = (StreamConfiguration) o;
        return 
            java.util.Objects.deepEquals(this.cursorField, other.cursorField) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.primaryKey, other.primaryKey) &&
            java.util.Objects.deepEquals(this.syncMode, other.syncMode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            cursorField,
            name,
            primaryKey,
            syncMode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreamConfiguration.class,
                "cursorField", cursorField,
                "name", name,
                "primaryKey", primaryKey,
                "syncMode", syncMode);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> cursorField = Optional.empty();
 
        private String name;
 
        private Optional<? extends java.util.List<java.util.List<String>>> primaryKey = Optional.empty();
 
        private Optional<? extends ConnectionSyncModeEnum> syncMode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
         */
        public Builder cursorField(java.util.List<String> cursorField) {
            Utils.checkNotNull(cursorField, "cursorField");
            this.cursorField = Optional.ofNullable(cursorField);
            return this;
        }

        /**
         * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
         */
        public Builder cursorField(Optional<? extends java.util.List<String>> cursorField) {
            Utils.checkNotNull(cursorField, "cursorField");
            this.cursorField = cursorField;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
         */
        public Builder primaryKey(java.util.List<java.util.List<String>> primaryKey) {
            Utils.checkNotNull(primaryKey, "primaryKey");
            this.primaryKey = Optional.ofNullable(primaryKey);
            return this;
        }

        /**
         * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
         */
        public Builder primaryKey(Optional<? extends java.util.List<java.util.List<String>>> primaryKey) {
            Utils.checkNotNull(primaryKey, "primaryKey");
            this.primaryKey = primaryKey;
            return this;
        }

        public Builder syncMode(ConnectionSyncModeEnum syncMode) {
            Utils.checkNotNull(syncMode, "syncMode");
            this.syncMode = Optional.ofNullable(syncMode);
            return this;
        }

        public Builder syncMode(Optional<? extends ConnectionSyncModeEnum> syncMode) {
            Utils.checkNotNull(syncMode, "syncMode");
            this.syncMode = syncMode;
            return this;
        }
        
        public StreamConfiguration build() {
            return new StreamConfiguration(
                cursorField,
                name,
                primaryKey,
                syncMode);
        }
    }
}

