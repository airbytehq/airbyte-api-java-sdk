/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourceYotpo {

    /**
     * Access token recieved as a result of API call to https://api.yotpo.com/oauth/token (Ref- https://apidocs.yotpo.com/reference/yotpo-authentication)
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * App key found at settings (Ref- https://settings.yotpo.com/#/general_settings)
     */
    @JsonProperty("app_key")
    private String appKey;

    /**
     * Email address registered with yotpo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    @JsonProperty("sourceType")
    private Yotpo sourceType;

    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceYotpo(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("app_key") String appKey,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(appKey, "appKey");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(startDate, "startDate");
        this.accessToken = accessToken;
        this.appKey = appKey;
        this.email = email;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceYotpo(
            String accessToken,
            String appKey,
            OffsetDateTime startDate) {
        this(accessToken, appKey, Optional.empty(), startDate);
    }

    /**
     * Access token recieved as a result of API call to https://api.yotpo.com/oauth/token (Ref- https://apidocs.yotpo.com/reference/yotpo-authentication)
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * App key found at settings (Ref- https://settings.yotpo.com/#/general_settings)
     */
    @JsonIgnore
    public String appKey() {
        return appKey;
    }

    /**
     * Email address registered with yotpo.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    @JsonIgnore
    public Yotpo sourceType() {
        return sourceType;
    }

    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Access token recieved as a result of API call to https://api.yotpo.com/oauth/token (Ref- https://apidocs.yotpo.com/reference/yotpo-authentication)
     */
    public SourceYotpo withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * App key found at settings (Ref- https://settings.yotpo.com/#/general_settings)
     */
    public SourceYotpo withAppKey(String appKey) {
        Utils.checkNotNull(appKey, "appKey");
        this.appKey = appKey;
        return this;
    }

    /**
     * Email address registered with yotpo.
     */
    public SourceYotpo withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * Email address registered with yotpo.
     */
    public SourceYotpo withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    public SourceYotpo withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceYotpo other = (SourceYotpo) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.appKey, other.appKey) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            appKey,
            email,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceYotpo.class,
                "accessToken", accessToken,
                "appKey", appKey,
                "email", email,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private String appKey;
 
        private Optional<String> email;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Access token recieved as a result of API call to https://api.yotpo.com/oauth/token (Ref- https://apidocs.yotpo.com/reference/yotpo-authentication)
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * App key found at settings (Ref- https://settings.yotpo.com/#/general_settings)
         */
        public Builder appKey(String appKey) {
            Utils.checkNotNull(appKey, "appKey");
            this.appKey = appKey;
            return this;
        }

        /**
         * Email address registered with yotpo.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * Email address registered with yotpo.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Date time filter for incremental filter, Specify which date to extract from.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceYotpo build() {
            if (email == null) {
                email = _SINGLETON_VALUE_Email.value();
            }            return new SourceYotpo(
                accessToken,
                appKey,
                email,
                startDate);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Email =
                new LazySingletonValue<>(
                        "email",
                        "\"example@gmail.com\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Yotpo> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"yotpo\"",
                        new TypeReference<Yotpo>() {});
    }
}

