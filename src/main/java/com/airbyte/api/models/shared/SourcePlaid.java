/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;

public class SourcePlaid {

    /**
     * The end-user's Link access token.
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * The Plaid API key to use to hit the API.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * The Plaid client id.
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * The Plaid environment.
     */
    @JsonProperty("plaid_env")
    private PlaidEnvironment plaidEnv;

    @JsonProperty("sourceType")
    private Plaid sourceType;

    /**
     * The date from which you'd like to replicate data for Plaid in the format YYYY-MM-DD. All data generated after this date will be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<LocalDate> startDate;

    @JsonCreator
    public SourcePlaid(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("plaid_env") PlaidEnvironment plaidEnv,
            @JsonProperty("start_date") Optional<LocalDate> startDate) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(plaidEnv, "plaidEnv");
        Utils.checkNotNull(startDate, "startDate");
        this.accessToken = accessToken;
        this.apiKey = apiKey;
        this.clientId = clientId;
        this.plaidEnv = plaidEnv;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourcePlaid(
            String accessToken,
            String apiKey,
            String clientId,
            PlaidEnvironment plaidEnv) {
        this(accessToken, apiKey, clientId, plaidEnv, Optional.empty());
    }

    /**
     * The end-user's Link access token.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * The Plaid API key to use to hit the API.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * The Plaid client id.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * The Plaid environment.
     */
    @JsonIgnore
    public PlaidEnvironment plaidEnv() {
        return plaidEnv;
    }

    @JsonIgnore
    public Plaid sourceType() {
        return sourceType;
    }

    /**
     * The date from which you'd like to replicate data for Plaid in the format YYYY-MM-DD. All data generated after this date will be replicated.
     */
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The end-user's Link access token.
     */
    public SourcePlaid withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The Plaid API key to use to hit the API.
     */
    public SourcePlaid withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * The Plaid client id.
     */
    public SourcePlaid withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The Plaid environment.
     */
    public SourcePlaid withPlaidEnv(PlaidEnvironment plaidEnv) {
        Utils.checkNotNull(plaidEnv, "plaidEnv");
        this.plaidEnv = plaidEnv;
        return this;
    }

    /**
     * The date from which you'd like to replicate data for Plaid in the format YYYY-MM-DD. All data generated after this date will be replicated.
     */
    public SourcePlaid withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date from which you'd like to replicate data for Plaid in the format YYYY-MM-DD. All data generated after this date will be replicated.
     */
    public SourcePlaid withStartDate(Optional<LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePlaid other = (SourcePlaid) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.plaidEnv, other.plaidEnv) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            apiKey,
            clientId,
            plaidEnv,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePlaid.class,
                "accessToken", accessToken,
                "apiKey", apiKey,
                "clientId", clientId,
                "plaidEnv", plaidEnv,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private String apiKey;
 
        private String clientId;
 
        private PlaidEnvironment plaidEnv;
 
        private Optional<LocalDate> startDate = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The end-user's Link access token.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The Plaid API key to use to hit the API.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * The Plaid client id.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The Plaid environment.
         */
        public Builder plaidEnv(PlaidEnvironment plaidEnv) {
            Utils.checkNotNull(plaidEnv, "plaidEnv");
            this.plaidEnv = plaidEnv;
            return this;
        }

        /**
         * The date from which you'd like to replicate data for Plaid in the format YYYY-MM-DD. All data generated after this date will be replicated.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date from which you'd like to replicate data for Plaid in the format YYYY-MM-DD. All data generated after this date will be replicated.
         */
        public Builder startDate(Optional<LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourcePlaid build() {
            return new SourcePlaid(
                accessToken,
                apiKey,
                clientId,
                plaidEnv,
                startDate);
        }

        private static final LazySingletonValue<Plaid> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"plaid\"",
                        new TypeReference<Plaid>() {});
    }
}
