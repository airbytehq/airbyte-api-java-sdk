/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class Queries {

    /**
     * A data source that is powered by the platform.
     */
    @JsonProperty("data_source")
    private SourceDatadogDataSource dataSource;

    /**
     * The variable name for use in queries.
     */
    @JsonProperty("name")
    private String name;

    /**
     * A classic query string.
     */
    @JsonProperty("query")
    private String query;

    @JsonCreator
    public Queries(
            @JsonProperty("data_source") SourceDatadogDataSource dataSource,
            @JsonProperty("name") String name,
            @JsonProperty("query") String query) {
        Utils.checkNotNull(dataSource, "dataSource");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(query, "query");
        this.dataSource = dataSource;
        this.name = name;
        this.query = query;
    }

    /**
     * A data source that is powered by the platform.
     */
    @JsonIgnore
    public SourceDatadogDataSource dataSource() {
        return dataSource;
    }

    /**
     * The variable name for use in queries.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * A classic query string.
     */
    @JsonIgnore
    public String query() {
        return query;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A data source that is powered by the platform.
     */
    public Queries withDataSource(SourceDatadogDataSource dataSource) {
        Utils.checkNotNull(dataSource, "dataSource");
        this.dataSource = dataSource;
        return this;
    }

    /**
     * The variable name for use in queries.
     */
    public Queries withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A classic query string.
     */
    public Queries withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Queries other = (Queries) o;
        return 
            java.util.Objects.deepEquals(this.dataSource, other.dataSource) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.query, other.query);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dataSource,
            name,
            query);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Queries.class,
                "dataSource", dataSource,
                "name", name,
                "query", query);
    }
    
    public final static class Builder {
 
        private SourceDatadogDataSource dataSource;
 
        private String name;
 
        private String query;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A data source that is powered by the platform.
         */
        public Builder dataSource(SourceDatadogDataSource dataSource) {
            Utils.checkNotNull(dataSource, "dataSource");
            this.dataSource = dataSource;
            return this;
        }

        /**
         * The variable name for use in queries.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A classic query string.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }
        
        public Queries build() {
            return new Queries(
                dataSource,
                name,
                query);
        }
    }
}

