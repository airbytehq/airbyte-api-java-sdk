/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceAppfigures {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Category term for grouping the search results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_by")
    private Optional<? extends GroupBy> groupBy;

    /**
     * The store which needs to be searched in streams
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_store")
    private Optional<String> searchStore;

    @JsonProperty("sourceType")
    private Appfigures sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceAppfigures(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("group_by") Optional<? extends GroupBy> groupBy,
            @JsonProperty("search_store") Optional<String> searchStore,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(groupBy, "groupBy");
        Utils.checkNotNull(searchStore, "searchStore");
        Utils.checkNotNull(startDate, "startDate");
        this.apiKey = apiKey;
        this.groupBy = groupBy;
        this.searchStore = searchStore;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceAppfigures(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), startDate);
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Category term for grouping the search results
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GroupBy> groupBy() {
        return (Optional<GroupBy>) groupBy;
    }

    /**
     * The store which needs to be searched in streams
     */
    @JsonIgnore
    public Optional<String> searchStore() {
        return searchStore;
    }

    @JsonIgnore
    public Appfigures sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceAppfigures withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Category term for grouping the search results
     */
    public SourceAppfigures withGroupBy(GroupBy groupBy) {
        Utils.checkNotNull(groupBy, "groupBy");
        this.groupBy = Optional.ofNullable(groupBy);
        return this;
    }

    /**
     * Category term for grouping the search results
     */
    public SourceAppfigures withGroupBy(Optional<? extends GroupBy> groupBy) {
        Utils.checkNotNull(groupBy, "groupBy");
        this.groupBy = groupBy;
        return this;
    }

    /**
     * The store which needs to be searched in streams
     */
    public SourceAppfigures withSearchStore(String searchStore) {
        Utils.checkNotNull(searchStore, "searchStore");
        this.searchStore = Optional.ofNullable(searchStore);
        return this;
    }

    /**
     * The store which needs to be searched in streams
     */
    public SourceAppfigures withSearchStore(Optional<String> searchStore) {
        Utils.checkNotNull(searchStore, "searchStore");
        this.searchStore = searchStore;
        return this;
    }

    public SourceAppfigures withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAppfigures other = (SourceAppfigures) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.groupBy, other.groupBy) &&
            Objects.deepEquals(this.searchStore, other.searchStore) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            groupBy,
            searchStore,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAppfigures.class,
                "apiKey", apiKey,
                "groupBy", groupBy,
                "searchStore", searchStore,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<? extends GroupBy> groupBy;
 
        private Optional<String> searchStore;
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Category term for grouping the search results
         */
        public Builder groupBy(GroupBy groupBy) {
            Utils.checkNotNull(groupBy, "groupBy");
            this.groupBy = Optional.ofNullable(groupBy);
            return this;
        }

        /**
         * Category term for grouping the search results
         */
        public Builder groupBy(Optional<? extends GroupBy> groupBy) {
            Utils.checkNotNull(groupBy, "groupBy");
            this.groupBy = groupBy;
            return this;
        }

        /**
         * The store which needs to be searched in streams
         */
        public Builder searchStore(String searchStore) {
            Utils.checkNotNull(searchStore, "searchStore");
            this.searchStore = Optional.ofNullable(searchStore);
            return this;
        }

        /**
         * The store which needs to be searched in streams
         */
        public Builder searchStore(Optional<String> searchStore) {
            Utils.checkNotNull(searchStore, "searchStore");
            this.searchStore = searchStore;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceAppfigures build() {
            if (groupBy == null) {
                groupBy = _SINGLETON_VALUE_GroupBy.value();
            }
            if (searchStore == null) {
                searchStore = _SINGLETON_VALUE_SearchStore.value();
            }
            return new SourceAppfigures(
                apiKey,
                groupBy,
                searchStore,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends GroupBy>> _SINGLETON_VALUE_GroupBy =
                new LazySingletonValue<>(
                        "group_by",
                        "\"product\"",
                        new TypeReference<Optional<? extends GroupBy>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_SearchStore =
                new LazySingletonValue<>(
                        "search_store",
                        "\"apple\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Appfigures> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"appfigures\"",
                        new TypeReference<Appfigures>() {});
    }
}
