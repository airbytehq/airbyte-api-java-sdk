/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class DestinationS3Xz {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codec")
    private Optional<? extends DestinationS3SchemasFormatOutputFormatCodec> codec;

    /**
     * See &lt;a href="https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.html#XZCompressorOutputStream-java.io.OutputStream-int-"&gt;here&lt;/a&gt; for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compression_level")
    private Optional<Long> compressionLevel;

    @JsonCreator
    public DestinationS3Xz(
            @JsonProperty("codec") Optional<? extends DestinationS3SchemasFormatOutputFormatCodec> codec,
            @JsonProperty("compression_level") Optional<Long> compressionLevel) {
        Utils.checkNotNull(codec, "codec");
        Utils.checkNotNull(compressionLevel, "compressionLevel");
        this.codec = codec;
        this.compressionLevel = compressionLevel;
    }
    
    public DestinationS3Xz() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationS3SchemasFormatOutputFormatCodec> codec() {
        return (Optional<DestinationS3SchemasFormatOutputFormatCodec>) codec;
    }

    /**
     * See &lt;a href="https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.html#XZCompressorOutputStream-java.io.OutputStream-int-"&gt;here&lt;/a&gt; for details.
     */
    @JsonIgnore
    public Optional<Long> compressionLevel() {
        return compressionLevel;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DestinationS3Xz withCodec(DestinationS3SchemasFormatOutputFormatCodec codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = Optional.ofNullable(codec);
        return this;
    }

    public DestinationS3Xz withCodec(Optional<? extends DestinationS3SchemasFormatOutputFormatCodec> codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = codec;
        return this;
    }

    /**
     * See &lt;a href="https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.html#XZCompressorOutputStream-java.io.OutputStream-int-"&gt;here&lt;/a&gt; for details.
     */
    public DestinationS3Xz withCompressionLevel(long compressionLevel) {
        Utils.checkNotNull(compressionLevel, "compressionLevel");
        this.compressionLevel = Optional.ofNullable(compressionLevel);
        return this;
    }

    /**
     * See &lt;a href="https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.html#XZCompressorOutputStream-java.io.OutputStream-int-"&gt;here&lt;/a&gt; for details.
     */
    public DestinationS3Xz withCompressionLevel(Optional<Long> compressionLevel) {
        Utils.checkNotNull(compressionLevel, "compressionLevel");
        this.compressionLevel = compressionLevel;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationS3Xz other = (DestinationS3Xz) o;
        return 
            Objects.deepEquals(this.codec, other.codec) &&
            Objects.deepEquals(this.compressionLevel, other.compressionLevel);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            codec,
            compressionLevel);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationS3Xz.class,
                "codec", codec,
                "compressionLevel", compressionLevel);
    }
    
    public final static class Builder {
 
        private Optional<? extends DestinationS3SchemasFormatOutputFormatCodec> codec;
 
        private Optional<Long> compressionLevel;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder codec(DestinationS3SchemasFormatOutputFormatCodec codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = Optional.ofNullable(codec);
            return this;
        }

        public Builder codec(Optional<? extends DestinationS3SchemasFormatOutputFormatCodec> codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = codec;
            return this;
        }

        /**
         * See &lt;a href="https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.html#XZCompressorOutputStream-java.io.OutputStream-int-"&gt;here&lt;/a&gt; for details.
         */
        public Builder compressionLevel(long compressionLevel) {
            Utils.checkNotNull(compressionLevel, "compressionLevel");
            this.compressionLevel = Optional.ofNullable(compressionLevel);
            return this;
        }

        /**
         * See &lt;a href="https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.html#XZCompressorOutputStream-java.io.OutputStream-int-"&gt;here&lt;/a&gt; for details.
         */
        public Builder compressionLevel(Optional<Long> compressionLevel) {
            Utils.checkNotNull(compressionLevel, "compressionLevel");
            this.compressionLevel = compressionLevel;
            return this;
        }
        
        public DestinationS3Xz build() {
            if (codec == null) {
                codec = _SINGLETON_VALUE_Codec.value();
            }
            if (compressionLevel == null) {
                compressionLevel = _SINGLETON_VALUE_CompressionLevel.value();
            }            return new DestinationS3Xz(
                codec,
                compressionLevel);
        }

        private static final LazySingletonValue<Optional<? extends DestinationS3SchemasFormatOutputFormatCodec>> _SINGLETON_VALUE_Codec =
                new LazySingletonValue<>(
                        "codec",
                        "\"xz\"",
                        new TypeReference<Optional<? extends DestinationS3SchemasFormatOutputFormatCodec>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_CompressionLevel =
                new LazySingletonValue<>(
                        "compression_level",
                        "6",
                        new TypeReference<Optional<Long>>() {});
    }
}

