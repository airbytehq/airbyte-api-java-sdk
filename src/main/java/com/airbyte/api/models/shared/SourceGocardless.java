/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceGocardless {

    /**
     * Gocardless API TOKEN
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * Environment you are trying to connect to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gocardless_environment")
    private Optional<? extends GoCardlessAPIEnvironment> gocardlessEnvironment;

    /**
     * GoCardless version. This is a date. You can find the latest here: 
     * https://developer.gocardless.com/api-reference/#api-usage-making-requests
     * 
     */
    @JsonProperty("gocardless_version")
    private String gocardlessVersion;

    @JsonProperty("sourceType")
    private Gocardless sourceType;

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data
     * before this date will not be replicated.
     * 
     */
    @JsonProperty("start_date")
    private String startDate;

    @JsonCreator
    public SourceGocardless(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("gocardless_environment") Optional<? extends GoCardlessAPIEnvironment> gocardlessEnvironment,
            @JsonProperty("gocardless_version") String gocardlessVersion,
            @JsonProperty("start_date") String startDate) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(gocardlessEnvironment, "gocardlessEnvironment");
        Utils.checkNotNull(gocardlessVersion, "gocardlessVersion");
        Utils.checkNotNull(startDate, "startDate");
        this.accessToken = accessToken;
        this.gocardlessEnvironment = gocardlessEnvironment;
        this.gocardlessVersion = gocardlessVersion;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceGocardless(
            String accessToken,
            String gocardlessVersion,
            String startDate) {
        this(accessToken, Optional.empty(), gocardlessVersion, startDate);
    }

    /**
     * Gocardless API TOKEN
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * Environment you are trying to connect to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GoCardlessAPIEnvironment> gocardlessEnvironment() {
        return (Optional<GoCardlessAPIEnvironment>) gocardlessEnvironment;
    }

    /**
     * GoCardless version. This is a date. You can find the latest here: 
     * https://developer.gocardless.com/api-reference/#api-usage-making-requests
     * 
     */
    @JsonIgnore
    public String gocardlessVersion() {
        return gocardlessVersion;
    }

    @JsonIgnore
    public Gocardless sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data
     * before this date will not be replicated.
     * 
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Gocardless API TOKEN
     */
    public SourceGocardless withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Environment you are trying to connect to.
     */
    public SourceGocardless withGocardlessEnvironment(GoCardlessAPIEnvironment gocardlessEnvironment) {
        Utils.checkNotNull(gocardlessEnvironment, "gocardlessEnvironment");
        this.gocardlessEnvironment = Optional.ofNullable(gocardlessEnvironment);
        return this;
    }

    /**
     * Environment you are trying to connect to.
     */
    public SourceGocardless withGocardlessEnvironment(Optional<? extends GoCardlessAPIEnvironment> gocardlessEnvironment) {
        Utils.checkNotNull(gocardlessEnvironment, "gocardlessEnvironment");
        this.gocardlessEnvironment = gocardlessEnvironment;
        return this;
    }

    /**
     * GoCardless version. This is a date. You can find the latest here: 
     * https://developer.gocardless.com/api-reference/#api-usage-making-requests
     * 
     */
    public SourceGocardless withGocardlessVersion(String gocardlessVersion) {
        Utils.checkNotNull(gocardlessVersion, "gocardlessVersion");
        this.gocardlessVersion = gocardlessVersion;
        return this;
    }

    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data
     * before this date will not be replicated.
     * 
     */
    public SourceGocardless withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceGocardless other = (SourceGocardless) o;
        return 
            java.util.Objects.deepEquals(this.accessToken, other.accessToken) &&
            java.util.Objects.deepEquals(this.gocardlessEnvironment, other.gocardlessEnvironment) &&
            java.util.Objects.deepEquals(this.gocardlessVersion, other.gocardlessVersion) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessToken,
            gocardlessEnvironment,
            gocardlessVersion,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceGocardless.class,
                "accessToken", accessToken,
                "gocardlessEnvironment", gocardlessEnvironment,
                "gocardlessVersion", gocardlessVersion,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private Optional<? extends GoCardlessAPIEnvironment> gocardlessEnvironment;
 
        private String gocardlessVersion;
 
        private String startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Gocardless API TOKEN
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Environment you are trying to connect to.
         */
        public Builder gocardlessEnvironment(GoCardlessAPIEnvironment gocardlessEnvironment) {
            Utils.checkNotNull(gocardlessEnvironment, "gocardlessEnvironment");
            this.gocardlessEnvironment = Optional.ofNullable(gocardlessEnvironment);
            return this;
        }

        /**
         * Environment you are trying to connect to.
         */
        public Builder gocardlessEnvironment(Optional<? extends GoCardlessAPIEnvironment> gocardlessEnvironment) {
            Utils.checkNotNull(gocardlessEnvironment, "gocardlessEnvironment");
            this.gocardlessEnvironment = gocardlessEnvironment;
            return this;
        }

        /**
         * GoCardless version. This is a date. You can find the latest here: 
         * https://developer.gocardless.com/api-reference/#api-usage-making-requests
         * 
         */
        public Builder gocardlessVersion(String gocardlessVersion) {
            Utils.checkNotNull(gocardlessVersion, "gocardlessVersion");
            this.gocardlessVersion = gocardlessVersion;
            return this;
        }

        /**
         * UTC date and time in the format 2017-01-25T00:00:00Z. Any data
         * before this date will not be replicated.
         * 
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceGocardless build() {
            if (gocardlessEnvironment == null) {
                gocardlessEnvironment = _SINGLETON_VALUE_GocardlessEnvironment.value();
            }
            return new SourceGocardless(
                accessToken,
                gocardlessEnvironment,
                gocardlessVersion,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends GoCardlessAPIEnvironment>> _SINGLETON_VALUE_GocardlessEnvironment =
                new LazySingletonValue<>(
                        "gocardless_environment",
                        "\"sandbox\"",
                        new TypeReference<Optional<? extends GoCardlessAPIEnvironment>>() {});

        private static final LazySingletonValue<Gocardless> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"gocardless\"",
                        new TypeReference<Gocardless>() {});
    }
}

