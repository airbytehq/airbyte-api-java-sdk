/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class DestinationS3CSVCommaSeparatedValues {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compression")
    private Optional<? extends DestinationS3Compression> compression;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flattening")
    private Optional<? extends DestinationS3Flattening> flattening;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format_type")
    private Optional<? extends DestinationS3FormatType> formatType;

    @JsonCreator
    public DestinationS3CSVCommaSeparatedValues(
            @JsonProperty("compression") Optional<? extends DestinationS3Compression> compression,
            @JsonProperty("flattening") Optional<? extends DestinationS3Flattening> flattening,
            @JsonProperty("format_type") Optional<? extends DestinationS3FormatType> formatType) {
        Utils.checkNotNull(compression, "compression");
        Utils.checkNotNull(flattening, "flattening");
        Utils.checkNotNull(formatType, "formatType");
        this.additionalProperties = new HashMap<>();
        this.compression = compression;
        this.flattening = flattening;
        this.formatType = formatType;
    }
    
    public DestinationS3CSVCommaSeparatedValues() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationS3Compression> compression() {
        return (Optional<DestinationS3Compression>) compression;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationS3Flattening> flattening() {
        return (Optional<DestinationS3Flattening>) flattening;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationS3FormatType> formatType() {
        return (Optional<DestinationS3FormatType>) formatType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public DestinationS3CSVCommaSeparatedValues withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public DestinationS3CSVCommaSeparatedValues withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
     */
    public DestinationS3CSVCommaSeparatedValues withCompression(DestinationS3Compression compression) {
        Utils.checkNotNull(compression, "compression");
        this.compression = Optional.ofNullable(compression);
        return this;
    }

    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
     */
    public DestinationS3CSVCommaSeparatedValues withCompression(Optional<? extends DestinationS3Compression> compression) {
        Utils.checkNotNull(compression, "compression");
        this.compression = compression;
        return this;
    }

    public DestinationS3CSVCommaSeparatedValues withFlattening(DestinationS3Flattening flattening) {
        Utils.checkNotNull(flattening, "flattening");
        this.flattening = Optional.ofNullable(flattening);
        return this;
    }

    public DestinationS3CSVCommaSeparatedValues withFlattening(Optional<? extends DestinationS3Flattening> flattening) {
        Utils.checkNotNull(flattening, "flattening");
        this.flattening = flattening;
        return this;
    }

    public DestinationS3CSVCommaSeparatedValues withFormatType(DestinationS3FormatType formatType) {
        Utils.checkNotNull(formatType, "formatType");
        this.formatType = Optional.ofNullable(formatType);
        return this;
    }

    public DestinationS3CSVCommaSeparatedValues withFormatType(Optional<? extends DestinationS3FormatType> formatType) {
        Utils.checkNotNull(formatType, "formatType");
        this.formatType = formatType;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationS3CSVCommaSeparatedValues other = (DestinationS3CSVCommaSeparatedValues) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.compression, other.compression) &&
            Objects.deepEquals(this.flattening, other.flattening) &&
            Objects.deepEquals(this.formatType, other.formatType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            compression,
            flattening,
            formatType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationS3CSVCommaSeparatedValues.class,
                "additionalProperties", additionalProperties,
                "compression", compression,
                "flattening", flattening,
                "formatType", formatType);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<? extends DestinationS3Compression> compression = Optional.empty();
 
        private Optional<? extends DestinationS3Flattening> flattening;
 
        private Optional<? extends DestinationS3FormatType> formatType;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
         */
        public Builder compression(DestinationS3Compression compression) {
            Utils.checkNotNull(compression, "compression");
            this.compression = Optional.ofNullable(compression);
            return this;
        }

        /**
         * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
         */
        public Builder compression(Optional<? extends DestinationS3Compression> compression) {
            Utils.checkNotNull(compression, "compression");
            this.compression = compression;
            return this;
        }

        public Builder flattening(DestinationS3Flattening flattening) {
            Utils.checkNotNull(flattening, "flattening");
            this.flattening = Optional.ofNullable(flattening);
            return this;
        }

        public Builder flattening(Optional<? extends DestinationS3Flattening> flattening) {
            Utils.checkNotNull(flattening, "flattening");
            this.flattening = flattening;
            return this;
        }

        public Builder formatType(DestinationS3FormatType formatType) {
            Utils.checkNotNull(formatType, "formatType");
            this.formatType = Optional.ofNullable(formatType);
            return this;
        }

        public Builder formatType(Optional<? extends DestinationS3FormatType> formatType) {
            Utils.checkNotNull(formatType, "formatType");
            this.formatType = formatType;
            return this;
        }
        
        public DestinationS3CSVCommaSeparatedValues build() {
            if (flattening == null) {
                flattening = _SINGLETON_VALUE_Flattening.value();
            }
            if (formatType == null) {
                formatType = _SINGLETON_VALUE_FormatType.value();
            }
            return new DestinationS3CSVCommaSeparatedValues(
                compression,
                flattening,
                formatType)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends DestinationS3Flattening>> _SINGLETON_VALUE_Flattening =
                new LazySingletonValue<>(
                        "flattening",
                        "\"No flattening\"",
                        new TypeReference<Optional<? extends DestinationS3Flattening>>() {});

        private static final LazySingletonValue<Optional<? extends DestinationS3FormatType>> _SINGLETON_VALUE_FormatType =
                new LazySingletonValue<>(
                        "format_type",
                        "\"CSV\"",
                        new TypeReference<Optional<? extends DestinationS3FormatType>>() {});
    }
}
