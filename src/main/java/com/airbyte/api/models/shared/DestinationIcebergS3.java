/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * DestinationIcebergS3 - S3 object storage
 */

public class DestinationIcebergS3 {

    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
     */
    @JsonProperty("access_key_id")
    private String accessKeyId;

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_bucket_region")
    private Optional<? extends DestinationIcebergS3BucketRegion> s3BucketRegion;

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_endpoint")
    private Optional<? extends String> s3Endpoint;

    /**
     * Use path style access
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("s3_path_style_access")
    private Optional<? extends Boolean> s3PathStyleAccess;

    /**
     * The Warehouse Uri for Iceberg
     */
    @JsonProperty("s3_warehouse_uri")
    private String s3WarehouseUri;

    /**
     * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
     */
    @JsonProperty("secret_access_key")
    private String secretAccessKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage_type")
    private Optional<? extends StorageType> storageType;

    @JsonCreator
    public DestinationIcebergS3(
            @JsonProperty("access_key_id") String accessKeyId,
            @JsonProperty("s3_bucket_region") Optional<? extends DestinationIcebergS3BucketRegion> s3BucketRegion,
            @JsonProperty("s3_endpoint") Optional<? extends String> s3Endpoint,
            @JsonProperty("s3_path_style_access") Optional<? extends Boolean> s3PathStyleAccess,
            @JsonProperty("s3_warehouse_uri") String s3WarehouseUri,
            @JsonProperty("secret_access_key") String secretAccessKey,
            @JsonProperty("storage_type") Optional<? extends StorageType> storageType) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        Utils.checkNotNull(s3Endpoint, "s3Endpoint");
        Utils.checkNotNull(s3PathStyleAccess, "s3PathStyleAccess");
        Utils.checkNotNull(s3WarehouseUri, "s3WarehouseUri");
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        Utils.checkNotNull(storageType, "storageType");
        this.accessKeyId = accessKeyId;
        this.s3BucketRegion = s3BucketRegion;
        this.s3Endpoint = s3Endpoint;
        this.s3PathStyleAccess = s3PathStyleAccess;
        this.s3WarehouseUri = s3WarehouseUri;
        this.secretAccessKey = secretAccessKey;
        this.storageType = storageType;
    }
    
    public DestinationIcebergS3(
            String accessKeyId,
            String s3WarehouseUri,
            String secretAccessKey) {
        this(accessKeyId, Optional.empty(), Optional.empty(), Optional.empty(), s3WarehouseUri, secretAccessKey, Optional.empty());
    }

    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
     */
    @JsonIgnore
    public String accessKeyId() {
        return accessKeyId;
    }

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationIcebergS3BucketRegion> s3BucketRegion() {
        return (Optional<DestinationIcebergS3BucketRegion>) s3BucketRegion;
    }

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> s3Endpoint() {
        return (Optional<String>) s3Endpoint;
    }

    /**
     * Use path style access
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> s3PathStyleAccess() {
        return (Optional<Boolean>) s3PathStyleAccess;
    }

    /**
     * The Warehouse Uri for Iceberg
     */
    @JsonIgnore
    public String s3WarehouseUri() {
        return s3WarehouseUri;
    }

    /**
     * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public String secretAccessKey() {
        return secretAccessKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StorageType> storageType() {
        return (Optional<StorageType>) storageType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
     */
    public DestinationIcebergS3 withAccessKeyId(String accessKeyId) {
        Utils.checkNotNull(accessKeyId, "accessKeyId");
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    public DestinationIcebergS3 withS3BucketRegion(DestinationIcebergS3BucketRegion s3BucketRegion) {
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        this.s3BucketRegion = Optional.ofNullable(s3BucketRegion);
        return this;
    }

    /**
     * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
     */
    public DestinationIcebergS3 withS3BucketRegion(Optional<? extends DestinationIcebergS3BucketRegion> s3BucketRegion) {
        Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
        this.s3BucketRegion = s3BucketRegion;
        return this;
    }

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    public DestinationIcebergS3 withS3Endpoint(String s3Endpoint) {
        Utils.checkNotNull(s3Endpoint, "s3Endpoint");
        this.s3Endpoint = Optional.ofNullable(s3Endpoint);
        return this;
    }

    /**
     * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
     */
    public DestinationIcebergS3 withS3Endpoint(Optional<? extends String> s3Endpoint) {
        Utils.checkNotNull(s3Endpoint, "s3Endpoint");
        this.s3Endpoint = s3Endpoint;
        return this;
    }

    /**
     * Use path style access
     */
    public DestinationIcebergS3 withS3PathStyleAccess(boolean s3PathStyleAccess) {
        Utils.checkNotNull(s3PathStyleAccess, "s3PathStyleAccess");
        this.s3PathStyleAccess = Optional.ofNullable(s3PathStyleAccess);
        return this;
    }

    /**
     * Use path style access
     */
    public DestinationIcebergS3 withS3PathStyleAccess(Optional<? extends Boolean> s3PathStyleAccess) {
        Utils.checkNotNull(s3PathStyleAccess, "s3PathStyleAccess");
        this.s3PathStyleAccess = s3PathStyleAccess;
        return this;
    }

    /**
     * The Warehouse Uri for Iceberg
     */
    public DestinationIcebergS3 withS3WarehouseUri(String s3WarehouseUri) {
        Utils.checkNotNull(s3WarehouseUri, "s3WarehouseUri");
        this.s3WarehouseUri = s3WarehouseUri;
        return this;
    }

    /**
     * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
     */
    public DestinationIcebergS3 withSecretAccessKey(String secretAccessKey) {
        Utils.checkNotNull(secretAccessKey, "secretAccessKey");
        this.secretAccessKey = secretAccessKey;
        return this;
    }

    public DestinationIcebergS3 withStorageType(StorageType storageType) {
        Utils.checkNotNull(storageType, "storageType");
        this.storageType = Optional.ofNullable(storageType);
        return this;
    }

    public DestinationIcebergS3 withStorageType(Optional<? extends StorageType> storageType) {
        Utils.checkNotNull(storageType, "storageType");
        this.storageType = storageType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationIcebergS3 other = (DestinationIcebergS3) o;
        return 
            java.util.Objects.deepEquals(this.accessKeyId, other.accessKeyId) &&
            java.util.Objects.deepEquals(this.s3BucketRegion, other.s3BucketRegion) &&
            java.util.Objects.deepEquals(this.s3Endpoint, other.s3Endpoint) &&
            java.util.Objects.deepEquals(this.s3PathStyleAccess, other.s3PathStyleAccess) &&
            java.util.Objects.deepEquals(this.s3WarehouseUri, other.s3WarehouseUri) &&
            java.util.Objects.deepEquals(this.secretAccessKey, other.secretAccessKey) &&
            java.util.Objects.deepEquals(this.storageType, other.storageType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKeyId,
            s3BucketRegion,
            s3Endpoint,
            s3PathStyleAccess,
            s3WarehouseUri,
            secretAccessKey,
            storageType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationIcebergS3.class,
                "accessKeyId", accessKeyId,
                "s3BucketRegion", s3BucketRegion,
                "s3Endpoint", s3Endpoint,
                "s3PathStyleAccess", s3PathStyleAccess,
                "s3WarehouseUri", s3WarehouseUri,
                "secretAccessKey", secretAccessKey,
                "storageType", storageType);
    }
    
    public final static class Builder {
 
        private String accessKeyId;
 
        private Optional<? extends DestinationIcebergS3BucketRegion> s3BucketRegion;
 
        private Optional<? extends String> s3Endpoint;
 
        private Optional<? extends Boolean> s3PathStyleAccess;
 
        private String s3WarehouseUri;
 
        private String secretAccessKey;
 
        private Optional<? extends StorageType> storageType;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;.
         */
        public Builder accessKeyId(String accessKeyId) {
            Utils.checkNotNull(accessKeyId, "accessKeyId");
            this.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
         */
        public Builder s3BucketRegion(DestinationIcebergS3BucketRegion s3BucketRegion) {
            Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
            this.s3BucketRegion = Optional.ofNullable(s3BucketRegion);
            return this;
        }

        /**
         * The region of the S3 bucket. See &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"&gt;here&lt;/a&gt; for all region codes.
         */
        public Builder s3BucketRegion(Optional<? extends DestinationIcebergS3BucketRegion> s3BucketRegion) {
            Utils.checkNotNull(s3BucketRegion, "s3BucketRegion");
            this.s3BucketRegion = s3BucketRegion;
            return this;
        }

        /**
         * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
         */
        public Builder s3Endpoint(String s3Endpoint) {
            Utils.checkNotNull(s3Endpoint, "s3Endpoint");
            this.s3Endpoint = Optional.ofNullable(s3Endpoint);
            return this;
        }

        /**
         * Your S3 endpoint url. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use"&gt;here&lt;/a&gt;
         */
        public Builder s3Endpoint(Optional<? extends String> s3Endpoint) {
            Utils.checkNotNull(s3Endpoint, "s3Endpoint");
            this.s3Endpoint = s3Endpoint;
            return this;
        }

        /**
         * Use path style access
         */
        public Builder s3PathStyleAccess(boolean s3PathStyleAccess) {
            Utils.checkNotNull(s3PathStyleAccess, "s3PathStyleAccess");
            this.s3PathStyleAccess = Optional.ofNullable(s3PathStyleAccess);
            return this;
        }

        /**
         * Use path style access
         */
        public Builder s3PathStyleAccess(Optional<? extends Boolean> s3PathStyleAccess) {
            Utils.checkNotNull(s3PathStyleAccess, "s3PathStyleAccess");
            this.s3PathStyleAccess = s3PathStyleAccess;
            return this;
        }

        /**
         * The Warehouse Uri for Iceberg
         */
        public Builder s3WarehouseUri(String s3WarehouseUri) {
            Utils.checkNotNull(s3WarehouseUri, "s3WarehouseUri");
            this.s3WarehouseUri = s3WarehouseUri;
            return this;
        }

        /**
         * The corresponding secret to the access key ID. Read more &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;here&lt;/a&gt;
         */
        public Builder secretAccessKey(String secretAccessKey) {
            Utils.checkNotNull(secretAccessKey, "secretAccessKey");
            this.secretAccessKey = secretAccessKey;
            return this;
        }

        public Builder storageType(StorageType storageType) {
            Utils.checkNotNull(storageType, "storageType");
            this.storageType = Optional.ofNullable(storageType);
            return this;
        }

        public Builder storageType(Optional<? extends StorageType> storageType) {
            Utils.checkNotNull(storageType, "storageType");
            this.storageType = storageType;
            return this;
        }
        
        public DestinationIcebergS3 build() {
            if (s3BucketRegion == null) {
                s3BucketRegion = _SINGLETON_VALUE_S3BucketRegion.value();
            }
            if (s3Endpoint == null) {
                s3Endpoint = _SINGLETON_VALUE_S3Endpoint.value();
            }
            if (s3PathStyleAccess == null) {
                s3PathStyleAccess = _SINGLETON_VALUE_S3PathStyleAccess.value();
            }
            if (storageType == null) {
                storageType = _SINGLETON_VALUE_StorageType.value();
            }
            return new DestinationIcebergS3(
                accessKeyId,
                s3BucketRegion,
                s3Endpoint,
                s3PathStyleAccess,
                s3WarehouseUri,
                secretAccessKey,
                storageType);
        }

        private static final LazySingletonValue<Optional<? extends DestinationIcebergS3BucketRegion>> _SINGLETON_VALUE_S3BucketRegion =
                new LazySingletonValue<>(
                        "s3_bucket_region",
                        "\"\"",
                        new TypeReference<Optional<? extends DestinationIcebergS3BucketRegion>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_S3Endpoint =
                new LazySingletonValue<>(
                        "s3_endpoint",
                        "\"\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_S3PathStyleAccess =
                new LazySingletonValue<>(
                        "s3_path_style_access",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends StorageType>> _SINGLETON_VALUE_StorageType =
                new LazySingletonValue<>(
                        "storage_type",
                        "\"S3\"",
                        new TypeReference<Optional<? extends StorageType>>() {});
    }
}

