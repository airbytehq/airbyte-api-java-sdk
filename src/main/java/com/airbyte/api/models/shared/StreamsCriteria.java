/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class StreamsCriteria {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("criteria")
    private Optional<? extends SearchCriteria> criteria;

    @JsonProperty("value")
    private String value;

    @JsonCreator
    public StreamsCriteria(
            @JsonProperty("criteria") Optional<? extends SearchCriteria> criteria,
            @JsonProperty("value") String value) {
        Utils.checkNotNull(criteria, "criteria");
        Utils.checkNotNull(value, "value");
        this.criteria = criteria;
        this.value = value;
    }
    
    public StreamsCriteria(
            String value) {
        this(Optional.empty(), value);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchCriteria> criteria() {
        return (Optional<SearchCriteria>) criteria;
    }

    @JsonIgnore
    public String value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StreamsCriteria withCriteria(SearchCriteria criteria) {
        Utils.checkNotNull(criteria, "criteria");
        this.criteria = Optional.ofNullable(criteria);
        return this;
    }

    public StreamsCriteria withCriteria(Optional<? extends SearchCriteria> criteria) {
        Utils.checkNotNull(criteria, "criteria");
        this.criteria = criteria;
        return this;
    }

    public StreamsCriteria withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamsCriteria other = (StreamsCriteria) o;
        return 
            java.util.Objects.deepEquals(this.criteria, other.criteria) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            criteria,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreamsCriteria.class,
                "criteria", criteria,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<? extends SearchCriteria> criteria;
 
        private String value;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder criteria(SearchCriteria criteria) {
            Utils.checkNotNull(criteria, "criteria");
            this.criteria = Optional.ofNullable(criteria);
            return this;
        }

        public Builder criteria(Optional<? extends SearchCriteria> criteria) {
            Utils.checkNotNull(criteria, "criteria");
            this.criteria = criteria;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public StreamsCriteria build() {
            if (criteria == null) {
                criteria = _SINGLETON_VALUE_Criteria.value();
            }
            return new StreamsCriteria(
                criteria,
                value);
        }

        private static final LazySingletonValue<Optional<? extends SearchCriteria>> _SINGLETON_VALUE_Criteria =
                new LazySingletonValue<>(
                        "criteria",
                        "\"contains\"",
                        new TypeReference<Optional<? extends SearchCriteria>>() {});
    }
}

