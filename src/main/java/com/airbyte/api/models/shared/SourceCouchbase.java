/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceCouchbase {

    /**
     * The name of the bucket to sync data from
     */
    @JsonProperty("bucket")
    private String bucket;

    /**
     * The connection string for the Couchbase server (e.g., couchbase://localhost or couchbases://example.com)
     */
    @JsonProperty("connection_string")
    private String connectionString;

    /**
     * The password to use for authentication
     */
    @JsonProperty("password")
    private String password;

    @JsonProperty("sourceType")
    private Couchbase sourceType;

    /**
     * The date from which you'd like to replicate data for incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If not set, all data will be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    /**
     * The username to use for authentication
     */
    @JsonProperty("username")
    private String username;

    @JsonCreator
    public SourceCouchbase(
            @JsonProperty("bucket") String bucket,
            @JsonProperty("connection_string") String connectionString,
            @JsonProperty("password") String password,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(bucket, "bucket");
        Utils.checkNotNull(connectionString, "connectionString");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(username, "username");
        this.bucket = bucket;
        this.connectionString = connectionString;
        this.password = password;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.username = username;
    }
    
    public SourceCouchbase(
            String bucket,
            String connectionString,
            String password,
            String username) {
        this(bucket, connectionString, password, Optional.empty(), username);
    }

    /**
     * The name of the bucket to sync data from
     */
    @JsonIgnore
    public String bucket() {
        return bucket;
    }

    /**
     * The connection string for the Couchbase server (e.g., couchbase://localhost or couchbases://example.com)
     */
    @JsonIgnore
    public String connectionString() {
        return connectionString;
    }

    /**
     * The password to use for authentication
     */
    @JsonIgnore
    public String password() {
        return password;
    }

    @JsonIgnore
    public Couchbase sourceType() {
        return sourceType;
    }

    /**
     * The date from which you'd like to replicate data for incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If not set, all data will be replicated.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * The username to use for authentication
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the bucket to sync data from
     */
    public SourceCouchbase withBucket(String bucket) {
        Utils.checkNotNull(bucket, "bucket");
        this.bucket = bucket;
        return this;
    }

    /**
     * The connection string for the Couchbase server (e.g., couchbase://localhost or couchbases://example.com)
     */
    public SourceCouchbase withConnectionString(String connectionString) {
        Utils.checkNotNull(connectionString, "connectionString");
        this.connectionString = connectionString;
        return this;
    }

    /**
     * The password to use for authentication
     */
    public SourceCouchbase withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * The date from which you'd like to replicate data for incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If not set, all data will be replicated.
     */
    public SourceCouchbase withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date from which you'd like to replicate data for incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If not set, all data will be replicated.
     */
    public SourceCouchbase withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The username to use for authentication
     */
    public SourceCouchbase withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceCouchbase other = (SourceCouchbase) o;
        return 
            Objects.deepEquals(this.bucket, other.bucket) &&
            Objects.deepEquals(this.connectionString, other.connectionString) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bucket,
            connectionString,
            password,
            sourceType,
            startDate,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceCouchbase.class,
                "bucket", bucket,
                "connectionString", connectionString,
                "password", password,
                "sourceType", sourceType,
                "startDate", startDate,
                "username", username);
    }
    
    public final static class Builder {
 
        private String bucket;
 
        private String connectionString;
 
        private String password;
 
        private Optional<OffsetDateTime> startDate = Optional.empty();
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the bucket to sync data from
         */
        public Builder bucket(String bucket) {
            Utils.checkNotNull(bucket, "bucket");
            this.bucket = bucket;
            return this;
        }

        /**
         * The connection string for the Couchbase server (e.g., couchbase://localhost or couchbases://example.com)
         */
        public Builder connectionString(String connectionString) {
            Utils.checkNotNull(connectionString, "connectionString");
            this.connectionString = connectionString;
            return this;
        }

        /**
         * The password to use for authentication
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * The date from which you'd like to replicate data for incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If not set, all data will be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date from which you'd like to replicate data for incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If not set, all data will be replicated.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The username to use for authentication
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public SourceCouchbase build() {
            return new SourceCouchbase(
                bucket,
                connectionString,
                password,
                startDate,
                username);
        }

        private static final LazySingletonValue<Couchbase> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"couchbase\"",
                        new TypeReference<Couchbase>() {});
    }
}
