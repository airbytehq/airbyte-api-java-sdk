/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;

public class SourceBasecamp {

    @JsonProperty("account_id")
    private double accountId;

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_refresh_token_2")
    private String clientRefreshToken2;

    @JsonProperty("client_secret")
    private String clientSecret;

    @JsonProperty("sourceType")
    private Basecamp sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceBasecamp(
            @JsonProperty("account_id") double accountId,
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_refresh_token_2") String clientRefreshToken2,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientRefreshToken2, "clientRefreshToken2");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(startDate, "startDate");
        this.accountId = accountId;
        this.clientId = clientId;
        this.clientRefreshToken2 = clientRefreshToken2;
        this.clientSecret = clientSecret;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    @JsonIgnore
    public double accountId() {
        return accountId;
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String clientRefreshToken2() {
        return clientRefreshToken2;
    }

    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    @JsonIgnore
    public Basecamp sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceBasecamp withAccountId(double accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public SourceBasecamp withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public SourceBasecamp withClientRefreshToken2(String clientRefreshToken2) {
        Utils.checkNotNull(clientRefreshToken2, "clientRefreshToken2");
        this.clientRefreshToken2 = clientRefreshToken2;
        return this;
    }

    public SourceBasecamp withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    public SourceBasecamp withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceBasecamp other = (SourceBasecamp) o;
        return 
            java.util.Objects.deepEquals(this.accountId, other.accountId) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientRefreshToken2, other.clientRefreshToken2) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountId,
            clientId,
            clientRefreshToken2,
            clientSecret,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceBasecamp.class,
                "accountId", accountId,
                "clientId", clientId,
                "clientRefreshToken2", clientRefreshToken2,
                "clientSecret", clientSecret,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Double accountId;
 
        private String clientId;
 
        private String clientRefreshToken2;
 
        private String clientSecret;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountId(double accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientRefreshToken2(String clientRefreshToken2) {
            Utils.checkNotNull(clientRefreshToken2, "clientRefreshToken2");
            this.clientRefreshToken2 = clientRefreshToken2;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceBasecamp build() {
            return new SourceBasecamp(
                accountId,
                clientId,
                clientRefreshToken2,
                clientSecret,
                startDate);
        }

        private static final LazySingletonValue<Basecamp> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"basecamp\"",
                        new TypeReference<Basecamp>() {});
    }
}

