/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SourceReddit {

    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Specifies exact keyword and reduces distractions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exact")
    private Optional<Boolean> exact;

    /**
     * Includes mature content
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_over_18")
    private Optional<Boolean> includeOver18;

    /**
     * Max records per page limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Optional<Double> limit;

    /**
     * Specifies the query for searching in reddits and subreddits
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<String> query;

    @JsonProperty("sourceType")
    private Reddit sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    /**
     * Subreddits for exploration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subreddits")
    private Optional<? extends List<Object>> subreddits;

    @JsonCreator
    public SourceReddit(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("exact") Optional<Boolean> exact,
            @JsonProperty("include_over_18") Optional<Boolean> includeOver18,
            @JsonProperty("limit") Optional<Double> limit,
            @JsonProperty("query") Optional<String> query,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("subreddits") Optional<? extends List<Object>> subreddits) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(exact, "exact");
        Utils.checkNotNull(includeOver18, "includeOver18");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(subreddits, "subreddits");
        this.apiKey = apiKey;
        this.exact = exact;
        this.includeOver18 = includeOver18;
        this.limit = limit;
        this.query = query;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.subreddits = subreddits;
    }
    
    public SourceReddit(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), startDate, Optional.empty());
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Specifies exact keyword and reduces distractions
     */
    @JsonIgnore
    public Optional<Boolean> exact() {
        return exact;
    }

    /**
     * Includes mature content
     */
    @JsonIgnore
    public Optional<Boolean> includeOver18() {
        return includeOver18;
    }

    /**
     * Max records per page limit
     */
    @JsonIgnore
    public Optional<Double> limit() {
        return limit;
    }

    /**
     * Specifies the query for searching in reddits and subreddits
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    @JsonIgnore
    public Reddit sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    /**
     * Subreddits for exploration
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> subreddits() {
        return (Optional<List<Object>>) subreddits;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceReddit withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Specifies exact keyword and reduces distractions
     */
    public SourceReddit withExact(boolean exact) {
        Utils.checkNotNull(exact, "exact");
        this.exact = Optional.ofNullable(exact);
        return this;
    }

    /**
     * Specifies exact keyword and reduces distractions
     */
    public SourceReddit withExact(Optional<Boolean> exact) {
        Utils.checkNotNull(exact, "exact");
        this.exact = exact;
        return this;
    }

    /**
     * Includes mature content
     */
    public SourceReddit withIncludeOver18(boolean includeOver18) {
        Utils.checkNotNull(includeOver18, "includeOver18");
        this.includeOver18 = Optional.ofNullable(includeOver18);
        return this;
    }

    /**
     * Includes mature content
     */
    public SourceReddit withIncludeOver18(Optional<Boolean> includeOver18) {
        Utils.checkNotNull(includeOver18, "includeOver18");
        this.includeOver18 = includeOver18;
        return this;
    }

    /**
     * Max records per page limit
     */
    public SourceReddit withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Max records per page limit
     */
    public SourceReddit withLimit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Specifies the query for searching in reddits and subreddits
     */
    public SourceReddit withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * Specifies the query for searching in reddits and subreddits
     */
    public SourceReddit withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    public SourceReddit withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Subreddits for exploration
     */
    public SourceReddit withSubreddits(List<Object> subreddits) {
        Utils.checkNotNull(subreddits, "subreddits");
        this.subreddits = Optional.ofNullable(subreddits);
        return this;
    }

    /**
     * Subreddits for exploration
     */
    public SourceReddit withSubreddits(Optional<? extends List<Object>> subreddits) {
        Utils.checkNotNull(subreddits, "subreddits");
        this.subreddits = subreddits;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceReddit other = (SourceReddit) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.exact, other.exact) &&
            Objects.deepEquals(this.includeOver18, other.includeOver18) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.query, other.query) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.subreddits, other.subreddits);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            exact,
            includeOver18,
            limit,
            query,
            sourceType,
            startDate,
            subreddits);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceReddit.class,
                "apiKey", apiKey,
                "exact", exact,
                "includeOver18", includeOver18,
                "limit", limit,
                "query", query,
                "sourceType", sourceType,
                "startDate", startDate,
                "subreddits", subreddits);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<Boolean> exact = Optional.empty();
 
        private Optional<Boolean> includeOver18;
 
        private Optional<Double> limit;
 
        private Optional<String> query;
 
        private OffsetDateTime startDate;
 
        private Optional<? extends List<Object>> subreddits = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Specifies exact keyword and reduces distractions
         */
        public Builder exact(boolean exact) {
            Utils.checkNotNull(exact, "exact");
            this.exact = Optional.ofNullable(exact);
            return this;
        }

        /**
         * Specifies exact keyword and reduces distractions
         */
        public Builder exact(Optional<Boolean> exact) {
            Utils.checkNotNull(exact, "exact");
            this.exact = exact;
            return this;
        }

        /**
         * Includes mature content
         */
        public Builder includeOver18(boolean includeOver18) {
            Utils.checkNotNull(includeOver18, "includeOver18");
            this.includeOver18 = Optional.ofNullable(includeOver18);
            return this;
        }

        /**
         * Includes mature content
         */
        public Builder includeOver18(Optional<Boolean> includeOver18) {
            Utils.checkNotNull(includeOver18, "includeOver18");
            this.includeOver18 = includeOver18;
            return this;
        }

        /**
         * Max records per page limit
         */
        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Max records per page limit
         */
        public Builder limit(Optional<Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Specifies the query for searching in reddits and subreddits
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Specifies the query for searching in reddits and subreddits
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Subreddits for exploration
         */
        public Builder subreddits(List<Object> subreddits) {
            Utils.checkNotNull(subreddits, "subreddits");
            this.subreddits = Optional.ofNullable(subreddits);
            return this;
        }

        /**
         * Subreddits for exploration
         */
        public Builder subreddits(Optional<? extends List<Object>> subreddits) {
            Utils.checkNotNull(subreddits, "subreddits");
            this.subreddits = subreddits;
            return this;
        }
        
        public SourceReddit build() {
            if (includeOver18 == null) {
                includeOver18 = _SINGLETON_VALUE_IncludeOver18.value();
            }
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (query == null) {
                query = _SINGLETON_VALUE_Query.value();
            }            return new SourceReddit(
                apiKey,
                exact,
                includeOver18,
                limit,
                query,
                startDate,
                subreddits);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IncludeOver18 =
                new LazySingletonValue<>(
                        "include_over_18",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "\"1000\"",
                        new TypeReference<Optional<Double>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Query =
                new LazySingletonValue<>(
                        "query",
                        "\"airbyte\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Reddit> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"reddit\"",
                        new TypeReference<Reddit>() {});
    }
}

