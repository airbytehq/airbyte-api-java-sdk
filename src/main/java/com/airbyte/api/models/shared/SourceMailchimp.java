/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class SourceMailchimp {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaign_id")
    private Optional<? extends String> campaignId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceMailchimpAuthentication> credentials;

    @JsonProperty("sourceType")
    private SourceMailchimpMailchimp sourceType;

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    public SourceMailchimp(
            @JsonProperty("campaign_id") Optional<? extends String> campaignId,
            @JsonProperty("credentials") Optional<? extends SourceMailchimpAuthentication> credentials,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(campaignId, "campaignId");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(startDate, "startDate");
        this.campaignId = campaignId;
        this.credentials = credentials;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    public Optional<? extends String> campaignId() {
        return campaignId;
    }

    public Optional<? extends SourceMailchimpAuthentication> credentials() {
        return credentials;
    }

    public SourceMailchimpMailchimp sourceType() {
        return sourceType;
    }

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    public Optional<? extends OffsetDateTime> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceMailchimp withCampaignId(String campaignId) {
        Utils.checkNotNull(campaignId, "campaignId");
        this.campaignId = Optional.ofNullable(campaignId);
        return this;
    }

    public SourceMailchimp withCampaignId(Optional<? extends String> campaignId) {
        Utils.checkNotNull(campaignId, "campaignId");
        this.campaignId = campaignId;
        return this;
    }

    public SourceMailchimp withCredentials(SourceMailchimpAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    public SourceMailchimp withCredentials(Optional<? extends SourceMailchimpAuthentication> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    public SourceMailchimp withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    public SourceMailchimp withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMailchimp other = (SourceMailchimp) o;
        return 
            java.util.Objects.deepEquals(this.campaignId, other.campaignId) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            campaignId,
            credentials,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMailchimp.class,
                "campaignId", campaignId,
                "credentials", credentials,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> campaignId = Optional.empty();
 
        private Optional<? extends SourceMailchimpAuthentication> credentials = Optional.empty();
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder campaignId(String campaignId) {
            Utils.checkNotNull(campaignId, "campaignId");
            this.campaignId = Optional.ofNullable(campaignId);
            return this;
        }

        public Builder campaignId(Optional<? extends String> campaignId) {
            Utils.checkNotNull(campaignId, "campaignId");
            this.campaignId = campaignId;
            return this;
        }

        public Builder credentials(SourceMailchimpAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        public Builder credentials(Optional<? extends SourceMailchimpAuthentication> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceMailchimp build() {
            return new SourceMailchimp(
                campaignId,
                credentials,
                startDate);
        }

        private static final LazySingletonValue<SourceMailchimpMailchimp> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"mailchimp\"",
                        new TypeReference<SourceMailchimpMailchimp>() {});
    }
}

