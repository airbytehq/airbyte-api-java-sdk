/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class SourceMailchimp {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends SourceMailchimpAuthentication> credentials;

    /**
     * Technical fields used to identify datacenter to send request to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_center")
    private Optional<? extends String> dataCenter;

    @JsonProperty("sourceType")
    private SourceMailchimpMailchimp sourceType;

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    @JsonCreator
    public SourceMailchimp(
            @JsonProperty("credentials") Optional<? extends SourceMailchimpAuthentication> credentials,
            @JsonProperty("data_center") Optional<? extends String> dataCenter,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(dataCenter, "dataCenter");
        Utils.checkNotNull(startDate, "startDate");
        this.credentials = credentials;
        this.dataCenter = dataCenter;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceMailchimp() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceMailchimpAuthentication> credentials() {
        return (Optional<SourceMailchimpAuthentication>) credentials;
    }

    /**
     * Technical fields used to identify datacenter to send request to
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> dataCenter() {
        return (Optional<String>) dataCenter;
    }

    @JsonIgnore
    public SourceMailchimpMailchimp sourceType() {
        return sourceType;
    }

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return (Optional<OffsetDateTime>) startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceMailchimp withCredentials(SourceMailchimpAuthentication credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    public SourceMailchimp withCredentials(Optional<? extends SourceMailchimpAuthentication> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Technical fields used to identify datacenter to send request to
     */
    public SourceMailchimp withDataCenter(String dataCenter) {
        Utils.checkNotNull(dataCenter, "dataCenter");
        this.dataCenter = Optional.ofNullable(dataCenter);
        return this;
    }

    /**
     * Technical fields used to identify datacenter to send request to
     */
    public SourceMailchimp withDataCenter(Optional<? extends String> dataCenter) {
        Utils.checkNotNull(dataCenter, "dataCenter");
        this.dataCenter = dataCenter;
        return this;
    }

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    public SourceMailchimp withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    public SourceMailchimp withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMailchimp other = (SourceMailchimp) o;
        return 
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.dataCenter, other.dataCenter) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentials,
            dataCenter,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceMailchimp.class,
                "credentials", credentials,
                "dataCenter", dataCenter,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceMailchimpAuthentication> credentials = Optional.empty();
 
        private Optional<? extends String> dataCenter = Optional.empty();
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(SourceMailchimpAuthentication credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        public Builder credentials(Optional<? extends SourceMailchimpAuthentication> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Technical fields used to identify datacenter to send request to
         */
        public Builder dataCenter(String dataCenter) {
            Utils.checkNotNull(dataCenter, "dataCenter");
            this.dataCenter = Optional.ofNullable(dataCenter);
            return this;
        }

        /**
         * Technical fields used to identify datacenter to send request to
         */
        public Builder dataCenter(Optional<? extends String> dataCenter) {
            Utils.checkNotNull(dataCenter, "dataCenter");
            this.dataCenter = dataCenter;
            return this;
        }

        /**
         * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceMailchimp build() {
            return new SourceMailchimp(
                credentials,
                dataCenter,
                startDate);
        }

        private static final LazySingletonValue<SourceMailchimpMailchimp> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"mailchimp\"",
                        new TypeReference<SourceMailchimpMailchimp>() {});
    }
}

