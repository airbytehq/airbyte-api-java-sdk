/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ProjectSecret {

    /**
     * Mixpanel project secret. See the &lt;a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret"&gt;docs&lt;/a&gt; for more information on how to obtain this.
     */
    @JsonProperty("api_secret")
    private String apiSecret;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("option_title")
    private Optional<? extends SourceMixpanelSchemasOptionTitle> optionTitle;

    @JsonCreator
    public ProjectSecret(
            @JsonProperty("api_secret") String apiSecret) {
        Utils.checkNotNull(apiSecret, "apiSecret");
        this.apiSecret = apiSecret;
        this.optionTitle = Builder._SINGLETON_VALUE_OptionTitle.value();
    }

    /**
     * Mixpanel project secret. See the &lt;a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret"&gt;docs&lt;/a&gt; for more information on how to obtain this.
     */
    @JsonIgnore
    public String apiSecret() {
        return apiSecret;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceMixpanelSchemasOptionTitle> optionTitle() {
        return (Optional<SourceMixpanelSchemasOptionTitle>) optionTitle;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Mixpanel project secret. See the &lt;a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret"&gt;docs&lt;/a&gt; for more information on how to obtain this.
     */
    public ProjectSecret withApiSecret(String apiSecret) {
        Utils.checkNotNull(apiSecret, "apiSecret");
        this.apiSecret = apiSecret;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProjectSecret other = (ProjectSecret) o;
        return 
            Objects.deepEquals(this.apiSecret, other.apiSecret) &&
            Objects.deepEquals(this.optionTitle, other.optionTitle);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiSecret,
            optionTitle);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProjectSecret.class,
                "apiSecret", apiSecret,
                "optionTitle", optionTitle);
    }
    
    public final static class Builder {
 
        private String apiSecret;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Mixpanel project secret. See the &lt;a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret"&gt;docs&lt;/a&gt; for more information on how to obtain this.
         */
        public Builder apiSecret(String apiSecret) {
            Utils.checkNotNull(apiSecret, "apiSecret");
            this.apiSecret = apiSecret;
            return this;
        }
        
        public ProjectSecret build() {
            return new ProjectSecret(
                apiSecret);
        }

        private static final LazySingletonValue<Optional<? extends SourceMixpanelSchemasOptionTitle>> _SINGLETON_VALUE_OptionTitle =
                new LazySingletonValue<>(
                        "option_title",
                        "\"Project Secret\"",
                        new TypeReference<Optional<? extends SourceMixpanelSchemasOptionTitle>>() {});
    }
}

