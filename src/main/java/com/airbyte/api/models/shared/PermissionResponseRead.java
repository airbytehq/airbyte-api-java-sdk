/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * PermissionResponseRead
 * 
 * <p>Reformat PermissionResponse with permission scope
 */
public class PermissionResponseRead {

    @JsonProperty("permissionId")
    private String permissionId;

    /**
     * Describes what actions/endpoints the permission entitles to
     */
    @JsonProperty("permissionType")
    private PermissionType permissionType;

    /**
     * Scope of a single permission, e.g. workspace, organization
     */
    @JsonProperty("scope")
    private PermissionScope scope;

    @JsonProperty("scopeId")
    private String scopeId;

    /**
     * Internal Airbyte user ID
     */
    @JsonProperty("userId")
    private String userId;

    @JsonCreator
    public PermissionResponseRead(
            @JsonProperty("permissionId") String permissionId,
            @JsonProperty("permissionType") PermissionType permissionType,
            @JsonProperty("scope") PermissionScope scope,
            @JsonProperty("scopeId") String scopeId,
            @JsonProperty("userId") String userId) {
        Utils.checkNotNull(permissionId, "permissionId");
        Utils.checkNotNull(permissionType, "permissionType");
        Utils.checkNotNull(scope, "scope");
        Utils.checkNotNull(scopeId, "scopeId");
        Utils.checkNotNull(userId, "userId");
        this.permissionId = permissionId;
        this.permissionType = permissionType;
        this.scope = scope;
        this.scopeId = scopeId;
        this.userId = userId;
    }

    @JsonIgnore
    public String permissionId() {
        return permissionId;
    }

    /**
     * Describes what actions/endpoints the permission entitles to
     */
    @JsonIgnore
    public PermissionType permissionType() {
        return permissionType;
    }

    /**
     * Scope of a single permission, e.g. workspace, organization
     */
    @JsonIgnore
    public PermissionScope scope() {
        return scope;
    }

    @JsonIgnore
    public String scopeId() {
        return scopeId;
    }

    /**
     * Internal Airbyte user ID
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PermissionResponseRead withPermissionId(String permissionId) {
        Utils.checkNotNull(permissionId, "permissionId");
        this.permissionId = permissionId;
        return this;
    }

    /**
     * Describes what actions/endpoints the permission entitles to
     */
    public PermissionResponseRead withPermissionType(PermissionType permissionType) {
        Utils.checkNotNull(permissionType, "permissionType");
        this.permissionType = permissionType;
        return this;
    }

    /**
     * Scope of a single permission, e.g. workspace, organization
     */
    public PermissionResponseRead withScope(PermissionScope scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }

    public PermissionResponseRead withScopeId(String scopeId) {
        Utils.checkNotNull(scopeId, "scopeId");
        this.scopeId = scopeId;
        return this;
    }

    /**
     * Internal Airbyte user ID
     */
    public PermissionResponseRead withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PermissionResponseRead other = (PermissionResponseRead) o;
        return 
            Objects.deepEquals(this.permissionId, other.permissionId) &&
            Objects.deepEquals(this.permissionType, other.permissionType) &&
            Objects.deepEquals(this.scope, other.scope) &&
            Objects.deepEquals(this.scopeId, other.scopeId) &&
            Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            permissionId,
            permissionType,
            scope,
            scopeId,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PermissionResponseRead.class,
                "permissionId", permissionId,
                "permissionType", permissionType,
                "scope", scope,
                "scopeId", scopeId,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private String permissionId;
 
        private PermissionType permissionType;
 
        private PermissionScope scope;
 
        private String scopeId;
 
        private String userId;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder permissionId(String permissionId) {
            Utils.checkNotNull(permissionId, "permissionId");
            this.permissionId = permissionId;
            return this;
        }

        /**
         * Describes what actions/endpoints the permission entitles to
         */
        public Builder permissionType(PermissionType permissionType) {
            Utils.checkNotNull(permissionType, "permissionType");
            this.permissionType = permissionType;
            return this;
        }

        /**
         * Scope of a single permission, e.g. workspace, organization
         */
        public Builder scope(PermissionScope scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }

        public Builder scopeId(String scopeId) {
            Utils.checkNotNull(scopeId, "scopeId");
            this.scopeId = scopeId;
            return this;
        }

        /**
         * Internal Airbyte user ID
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public PermissionResponseRead build() {
            return new PermissionResponseRead(
                permissionId,
                permissionType,
                scope,
                scopeId,
                userId);
        }
    }
}
