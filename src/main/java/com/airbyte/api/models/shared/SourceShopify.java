/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;


public class SourceShopify {

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends ShopifyAuthorizationMethod> credentials;

    /**
     * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
     */
    @JsonProperty("shop")
    private String shop;

    @JsonProperty("sourceType")
    private SourceShopifyShopify sourceType;

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends LocalDate> startDate;

    public SourceShopify(
            @JsonProperty("credentials") Optional<? extends ShopifyAuthorizationMethod> credentials,
            @JsonProperty("shop") String shop,
            @JsonProperty("start_date") Optional<? extends LocalDate> startDate) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(shop, "shop");
        Utils.checkNotNull(startDate, "startDate");
        this.credentials = credentials;
        this.shop = shop;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    public Optional<? extends ShopifyAuthorizationMethod> credentials() {
        return credentials;
    }

    /**
     * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
     */
    public String shop() {
        return shop;
    }

    public SourceShopifyShopify sourceType() {
        return sourceType;
    }

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    public Optional<? extends LocalDate> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    public SourceShopify withCredentials(ShopifyAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    public SourceShopify withCredentials(Optional<? extends ShopifyAuthorizationMethod> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
     */
    public SourceShopify withShop(String shop) {
        Utils.checkNotNull(shop, "shop");
        this.shop = shop;
        return this;
    }

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    public SourceShopify withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    public SourceShopify withStartDate(Optional<? extends LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceShopify other = (SourceShopify) o;
        return 
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.shop, other.shop) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentials,
            shop,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceShopify.class,
                "credentials", credentials,
                "shop", shop,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends ShopifyAuthorizationMethod> credentials = Optional.empty();
 
        private String shop;
 
        private Optional<? extends LocalDate> startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The authorization method to use to retrieve data from Shopify
         */
        public Builder credentials(ShopifyAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * The authorization method to use to retrieve data from Shopify
         */
        public Builder credentials(Optional<? extends ShopifyAuthorizationMethod> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
         */
        public Builder shop(String shop) {
            Utils.checkNotNull(shop, "shop");
            this.shop = shop;
            return this;
        }

        /**
         * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
         */
        public Builder startDate(Optional<? extends LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceShopify build() {
            if (startDate == null) {
                startDate = _SINGLETON_VALUE_StartDate.value();
            }
            return new SourceShopify(
                credentials,
                shop,
                startDate);
        }

        private static final LazySingletonValue<SourceShopifyShopify> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"shopify\"",
                        new TypeReference<SourceShopifyShopify>() {});

        private static final LazySingletonValue<Optional<? extends LocalDate>> _SINGLETON_VALUE_StartDate =
                new LazySingletonValue<>(
                        "start_date",
                        "\"2020-01-01\"",
                        new TypeReference<Optional<? extends LocalDate>>() {});
    }
}

