/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;

public class SourceShopify {

    /**
     * Defines what would be a date range per single BULK Job
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bulk_window_in_days")
    private Optional<? extends Long> bulkWindowInDays;

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends ShopifyAuthorizationMethod> credentials;

    /**
     * Defines which API type (REST/BULK) to use to fetch `Transactions` data. If you are a `Shopify Plus` user, leave the default value to speed up the fetch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fetch_transactions_user_id")
    private Optional<? extends Boolean> fetchTransactionsUserId;

    /**
     * The threshold, after which the single BULK Job should be checkpointed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_checkpoint_interval")
    private Optional<? extends Long> jobCheckpointInterval;

    /**
     * If enabled, the `Product Variants` stream attempts to include `Presentment prices` field (may affect the performance).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_product_variants_include_pres_prices")
    private Optional<? extends Boolean> jobProductVariantsIncludePresPrices;

    /**
     * The max time in seconds, after which the single BULK Job should be `CANCELED` and retried. The bigger the value the longer the BULK Job is allowed to run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_termination_threshold")
    private Optional<? extends Long> jobTerminationThreshold;

    /**
     * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
     */
    @JsonProperty("shop")
    private String shop;

    @JsonProperty("sourceType")
    private SourceShopifyShopify sourceType;

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends LocalDate> startDate;

    @JsonCreator
    public SourceShopify(
            @JsonProperty("bulk_window_in_days") Optional<? extends Long> bulkWindowInDays,
            @JsonProperty("credentials") Optional<? extends ShopifyAuthorizationMethod> credentials,
            @JsonProperty("fetch_transactions_user_id") Optional<? extends Boolean> fetchTransactionsUserId,
            @JsonProperty("job_checkpoint_interval") Optional<? extends Long> jobCheckpointInterval,
            @JsonProperty("job_product_variants_include_pres_prices") Optional<? extends Boolean> jobProductVariantsIncludePresPrices,
            @JsonProperty("job_termination_threshold") Optional<? extends Long> jobTerminationThreshold,
            @JsonProperty("shop") String shop,
            @JsonProperty("start_date") Optional<? extends LocalDate> startDate) {
        Utils.checkNotNull(bulkWindowInDays, "bulkWindowInDays");
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(fetchTransactionsUserId, "fetchTransactionsUserId");
        Utils.checkNotNull(jobCheckpointInterval, "jobCheckpointInterval");
        Utils.checkNotNull(jobProductVariantsIncludePresPrices, "jobProductVariantsIncludePresPrices");
        Utils.checkNotNull(jobTerminationThreshold, "jobTerminationThreshold");
        Utils.checkNotNull(shop, "shop");
        Utils.checkNotNull(startDate, "startDate");
        this.bulkWindowInDays = bulkWindowInDays;
        this.credentials = credentials;
        this.fetchTransactionsUserId = fetchTransactionsUserId;
        this.jobCheckpointInterval = jobCheckpointInterval;
        this.jobProductVariantsIncludePresPrices = jobProductVariantsIncludePresPrices;
        this.jobTerminationThreshold = jobTerminationThreshold;
        this.shop = shop;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceShopify(
            String shop) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), shop, Optional.empty());
    }

    /**
     * Defines what would be a date range per single BULK Job
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> bulkWindowInDays() {
        return (Optional<Long>) bulkWindowInDays;
    }

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShopifyAuthorizationMethod> credentials() {
        return (Optional<ShopifyAuthorizationMethod>) credentials;
    }

    /**
     * Defines which API type (REST/BULK) to use to fetch `Transactions` data. If you are a `Shopify Plus` user, leave the default value to speed up the fetch.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> fetchTransactionsUserId() {
        return (Optional<Boolean>) fetchTransactionsUserId;
    }

    /**
     * The threshold, after which the single BULK Job should be checkpointed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> jobCheckpointInterval() {
        return (Optional<Long>) jobCheckpointInterval;
    }

    /**
     * If enabled, the `Product Variants` stream attempts to include `Presentment prices` field (may affect the performance).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> jobProductVariantsIncludePresPrices() {
        return (Optional<Boolean>) jobProductVariantsIncludePresPrices;
    }

    /**
     * The max time in seconds, after which the single BULK Job should be `CANCELED` and retried. The bigger the value the longer the BULK Job is allowed to run.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> jobTerminationThreshold() {
        return (Optional<Long>) jobTerminationThreshold;
    }

    /**
     * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
     */
    @JsonIgnore
    public String shop() {
        return shop;
    }

    @JsonIgnore
    public SourceShopifyShopify sourceType() {
        return sourceType;
    }

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LocalDate> startDate() {
        return (Optional<LocalDate>) startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Defines what would be a date range per single BULK Job
     */
    public SourceShopify withBulkWindowInDays(long bulkWindowInDays) {
        Utils.checkNotNull(bulkWindowInDays, "bulkWindowInDays");
        this.bulkWindowInDays = Optional.ofNullable(bulkWindowInDays);
        return this;
    }

    /**
     * Defines what would be a date range per single BULK Job
     */
    public SourceShopify withBulkWindowInDays(Optional<? extends Long> bulkWindowInDays) {
        Utils.checkNotNull(bulkWindowInDays, "bulkWindowInDays");
        this.bulkWindowInDays = bulkWindowInDays;
        return this;
    }

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    public SourceShopify withCredentials(ShopifyAuthorizationMethod credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * The authorization method to use to retrieve data from Shopify
     */
    public SourceShopify withCredentials(Optional<? extends ShopifyAuthorizationMethod> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Defines which API type (REST/BULK) to use to fetch `Transactions` data. If you are a `Shopify Plus` user, leave the default value to speed up the fetch.
     */
    public SourceShopify withFetchTransactionsUserId(boolean fetchTransactionsUserId) {
        Utils.checkNotNull(fetchTransactionsUserId, "fetchTransactionsUserId");
        this.fetchTransactionsUserId = Optional.ofNullable(fetchTransactionsUserId);
        return this;
    }

    /**
     * Defines which API type (REST/BULK) to use to fetch `Transactions` data. If you are a `Shopify Plus` user, leave the default value to speed up the fetch.
     */
    public SourceShopify withFetchTransactionsUserId(Optional<? extends Boolean> fetchTransactionsUserId) {
        Utils.checkNotNull(fetchTransactionsUserId, "fetchTransactionsUserId");
        this.fetchTransactionsUserId = fetchTransactionsUserId;
        return this;
    }

    /**
     * The threshold, after which the single BULK Job should be checkpointed.
     */
    public SourceShopify withJobCheckpointInterval(long jobCheckpointInterval) {
        Utils.checkNotNull(jobCheckpointInterval, "jobCheckpointInterval");
        this.jobCheckpointInterval = Optional.ofNullable(jobCheckpointInterval);
        return this;
    }

    /**
     * The threshold, after which the single BULK Job should be checkpointed.
     */
    public SourceShopify withJobCheckpointInterval(Optional<? extends Long> jobCheckpointInterval) {
        Utils.checkNotNull(jobCheckpointInterval, "jobCheckpointInterval");
        this.jobCheckpointInterval = jobCheckpointInterval;
        return this;
    }

    /**
     * If enabled, the `Product Variants` stream attempts to include `Presentment prices` field (may affect the performance).
     */
    public SourceShopify withJobProductVariantsIncludePresPrices(boolean jobProductVariantsIncludePresPrices) {
        Utils.checkNotNull(jobProductVariantsIncludePresPrices, "jobProductVariantsIncludePresPrices");
        this.jobProductVariantsIncludePresPrices = Optional.ofNullable(jobProductVariantsIncludePresPrices);
        return this;
    }

    /**
     * If enabled, the `Product Variants` stream attempts to include `Presentment prices` field (may affect the performance).
     */
    public SourceShopify withJobProductVariantsIncludePresPrices(Optional<? extends Boolean> jobProductVariantsIncludePresPrices) {
        Utils.checkNotNull(jobProductVariantsIncludePresPrices, "jobProductVariantsIncludePresPrices");
        this.jobProductVariantsIncludePresPrices = jobProductVariantsIncludePresPrices;
        return this;
    }

    /**
     * The max time in seconds, after which the single BULK Job should be `CANCELED` and retried. The bigger the value the longer the BULK Job is allowed to run.
     */
    public SourceShopify withJobTerminationThreshold(long jobTerminationThreshold) {
        Utils.checkNotNull(jobTerminationThreshold, "jobTerminationThreshold");
        this.jobTerminationThreshold = Optional.ofNullable(jobTerminationThreshold);
        return this;
    }

    /**
     * The max time in seconds, after which the single BULK Job should be `CANCELED` and retried. The bigger the value the longer the BULK Job is allowed to run.
     */
    public SourceShopify withJobTerminationThreshold(Optional<? extends Long> jobTerminationThreshold) {
        Utils.checkNotNull(jobTerminationThreshold, "jobTerminationThreshold");
        this.jobTerminationThreshold = jobTerminationThreshold;
        return this;
    }

    /**
     * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
     */
    public SourceShopify withShop(String shop) {
        Utils.checkNotNull(shop, "shop");
        this.shop = shop;
        return this;
    }

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    public SourceShopify withStartDate(LocalDate startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
     */
    public SourceShopify withStartDate(Optional<? extends LocalDate> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceShopify other = (SourceShopify) o;
        return 
            java.util.Objects.deepEquals(this.bulkWindowInDays, other.bulkWindowInDays) &&
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.fetchTransactionsUserId, other.fetchTransactionsUserId) &&
            java.util.Objects.deepEquals(this.jobCheckpointInterval, other.jobCheckpointInterval) &&
            java.util.Objects.deepEquals(this.jobProductVariantsIncludePresPrices, other.jobProductVariantsIncludePresPrices) &&
            java.util.Objects.deepEquals(this.jobTerminationThreshold, other.jobTerminationThreshold) &&
            java.util.Objects.deepEquals(this.shop, other.shop) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bulkWindowInDays,
            credentials,
            fetchTransactionsUserId,
            jobCheckpointInterval,
            jobProductVariantsIncludePresPrices,
            jobTerminationThreshold,
            shop,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceShopify.class,
                "bulkWindowInDays", bulkWindowInDays,
                "credentials", credentials,
                "fetchTransactionsUserId", fetchTransactionsUserId,
                "jobCheckpointInterval", jobCheckpointInterval,
                "jobProductVariantsIncludePresPrices", jobProductVariantsIncludePresPrices,
                "jobTerminationThreshold", jobTerminationThreshold,
                "shop", shop,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> bulkWindowInDays;
 
        private Optional<? extends ShopifyAuthorizationMethod> credentials = Optional.empty();
 
        private Optional<? extends Boolean> fetchTransactionsUserId;
 
        private Optional<? extends Long> jobCheckpointInterval;
 
        private Optional<? extends Boolean> jobProductVariantsIncludePresPrices;
 
        private Optional<? extends Long> jobTerminationThreshold;
 
        private String shop;
 
        private Optional<? extends LocalDate> startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Defines what would be a date range per single BULK Job
         */
        public Builder bulkWindowInDays(long bulkWindowInDays) {
            Utils.checkNotNull(bulkWindowInDays, "bulkWindowInDays");
            this.bulkWindowInDays = Optional.ofNullable(bulkWindowInDays);
            return this;
        }

        /**
         * Defines what would be a date range per single BULK Job
         */
        public Builder bulkWindowInDays(Optional<? extends Long> bulkWindowInDays) {
            Utils.checkNotNull(bulkWindowInDays, "bulkWindowInDays");
            this.bulkWindowInDays = bulkWindowInDays;
            return this;
        }

        /**
         * The authorization method to use to retrieve data from Shopify
         */
        public Builder credentials(ShopifyAuthorizationMethod credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * The authorization method to use to retrieve data from Shopify
         */
        public Builder credentials(Optional<? extends ShopifyAuthorizationMethod> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Defines which API type (REST/BULK) to use to fetch `Transactions` data. If you are a `Shopify Plus` user, leave the default value to speed up the fetch.
         */
        public Builder fetchTransactionsUserId(boolean fetchTransactionsUserId) {
            Utils.checkNotNull(fetchTransactionsUserId, "fetchTransactionsUserId");
            this.fetchTransactionsUserId = Optional.ofNullable(fetchTransactionsUserId);
            return this;
        }

        /**
         * Defines which API type (REST/BULK) to use to fetch `Transactions` data. If you are a `Shopify Plus` user, leave the default value to speed up the fetch.
         */
        public Builder fetchTransactionsUserId(Optional<? extends Boolean> fetchTransactionsUserId) {
            Utils.checkNotNull(fetchTransactionsUserId, "fetchTransactionsUserId");
            this.fetchTransactionsUserId = fetchTransactionsUserId;
            return this;
        }

        /**
         * The threshold, after which the single BULK Job should be checkpointed.
         */
        public Builder jobCheckpointInterval(long jobCheckpointInterval) {
            Utils.checkNotNull(jobCheckpointInterval, "jobCheckpointInterval");
            this.jobCheckpointInterval = Optional.ofNullable(jobCheckpointInterval);
            return this;
        }

        /**
         * The threshold, after which the single BULK Job should be checkpointed.
         */
        public Builder jobCheckpointInterval(Optional<? extends Long> jobCheckpointInterval) {
            Utils.checkNotNull(jobCheckpointInterval, "jobCheckpointInterval");
            this.jobCheckpointInterval = jobCheckpointInterval;
            return this;
        }

        /**
         * If enabled, the `Product Variants` stream attempts to include `Presentment prices` field (may affect the performance).
         */
        public Builder jobProductVariantsIncludePresPrices(boolean jobProductVariantsIncludePresPrices) {
            Utils.checkNotNull(jobProductVariantsIncludePresPrices, "jobProductVariantsIncludePresPrices");
            this.jobProductVariantsIncludePresPrices = Optional.ofNullable(jobProductVariantsIncludePresPrices);
            return this;
        }

        /**
         * If enabled, the `Product Variants` stream attempts to include `Presentment prices` field (may affect the performance).
         */
        public Builder jobProductVariantsIncludePresPrices(Optional<? extends Boolean> jobProductVariantsIncludePresPrices) {
            Utils.checkNotNull(jobProductVariantsIncludePresPrices, "jobProductVariantsIncludePresPrices");
            this.jobProductVariantsIncludePresPrices = jobProductVariantsIncludePresPrices;
            return this;
        }

        /**
         * The max time in seconds, after which the single BULK Job should be `CANCELED` and retried. The bigger the value the longer the BULK Job is allowed to run.
         */
        public Builder jobTerminationThreshold(long jobTerminationThreshold) {
            Utils.checkNotNull(jobTerminationThreshold, "jobTerminationThreshold");
            this.jobTerminationThreshold = Optional.ofNullable(jobTerminationThreshold);
            return this;
        }

        /**
         * The max time in seconds, after which the single BULK Job should be `CANCELED` and retried. The bigger the value the longer the BULK Job is allowed to run.
         */
        public Builder jobTerminationThreshold(Optional<? extends Long> jobTerminationThreshold) {
            Utils.checkNotNull(jobTerminationThreshold, "jobTerminationThreshold");
            this.jobTerminationThreshold = jobTerminationThreshold;
            return this;
        }

        /**
         * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
         */
        public Builder shop(String shop) {
            Utils.checkNotNull(shop, "shop");
            this.shop = shop;
            return this;
        }

        /**
         * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
         */
        public Builder startDate(LocalDate startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
         */
        public Builder startDate(Optional<? extends LocalDate> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceShopify build() {
            if (bulkWindowInDays == null) {
                bulkWindowInDays = _SINGLETON_VALUE_BulkWindowInDays.value();
            }
            if (fetchTransactionsUserId == null) {
                fetchTransactionsUserId = _SINGLETON_VALUE_FetchTransactionsUserId.value();
            }
            if (jobCheckpointInterval == null) {
                jobCheckpointInterval = _SINGLETON_VALUE_JobCheckpointInterval.value();
            }
            if (jobProductVariantsIncludePresPrices == null) {
                jobProductVariantsIncludePresPrices = _SINGLETON_VALUE_JobProductVariantsIncludePresPrices.value();
            }
            if (jobTerminationThreshold == null) {
                jobTerminationThreshold = _SINGLETON_VALUE_JobTerminationThreshold.value();
            }
            if (startDate == null) {
                startDate = _SINGLETON_VALUE_StartDate.value();
            }
            return new SourceShopify(
                bulkWindowInDays,
                credentials,
                fetchTransactionsUserId,
                jobCheckpointInterval,
                jobProductVariantsIncludePresPrices,
                jobTerminationThreshold,
                shop,
                startDate);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_BulkWindowInDays =
                new LazySingletonValue<>(
                        "bulk_window_in_days",
                        "30",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_FetchTransactionsUserId =
                new LazySingletonValue<>(
                        "fetch_transactions_user_id",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_JobCheckpointInterval =
                new LazySingletonValue<>(
                        "job_checkpoint_interval",
                        "100000",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_JobProductVariantsIncludePresPrices =
                new LazySingletonValue<>(
                        "job_product_variants_include_pres_prices",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_JobTerminationThreshold =
                new LazySingletonValue<>(
                        "job_termination_threshold",
                        "7200",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<SourceShopifyShopify> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"shopify\"",
                        new TypeReference<SourceShopifyShopify>() {});

        private static final LazySingletonValue<Optional<? extends LocalDate>> _SINGLETON_VALUE_StartDate =
                new LazySingletonValue<>(
                        "start_date",
                        "\"2020-01-01\"",
                        new TypeReference<Optional<? extends LocalDate>>() {});
    }
}

