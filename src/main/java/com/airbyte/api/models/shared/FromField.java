/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * FromField - Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
 */

public class FromField {

    /**
     * The number of dimensions the embedding model is generating
     */
    @JsonProperty("dimensions")
    private long dimensions;

    /**
     * Name of the field in the record that contains the embedding
     */
    @JsonProperty("field_name")
    private String fieldName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    private Optional<? extends DestinationWeaviateSchemasEmbeddingEmbedding5Mode> mode;

    @JsonCreator
    public FromField(
            @JsonProperty("dimensions") long dimensions,
            @JsonProperty("field_name") String fieldName) {
        Utils.checkNotNull(dimensions, "dimensions");
        Utils.checkNotNull(fieldName, "fieldName");
        this.dimensions = dimensions;
        this.fieldName = fieldName;
        this.mode = Builder._SINGLETON_VALUE_Mode.value();
    }

    /**
     * The number of dimensions the embedding model is generating
     */
    @JsonIgnore
    public long dimensions() {
        return dimensions;
    }

    /**
     * Name of the field in the record that contains the embedding
     */
    @JsonIgnore
    public String fieldName() {
        return fieldName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationWeaviateSchemasEmbeddingEmbedding5Mode> mode() {
        return (Optional<DestinationWeaviateSchemasEmbeddingEmbedding5Mode>) mode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The number of dimensions the embedding model is generating
     */
    public FromField withDimensions(long dimensions) {
        Utils.checkNotNull(dimensions, "dimensions");
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Name of the field in the record that contains the embedding
     */
    public FromField withFieldName(String fieldName) {
        Utils.checkNotNull(fieldName, "fieldName");
        this.fieldName = fieldName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FromField other = (FromField) o;
        return 
            java.util.Objects.deepEquals(this.dimensions, other.dimensions) &&
            java.util.Objects.deepEquals(this.fieldName, other.fieldName) &&
            java.util.Objects.deepEquals(this.mode, other.mode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dimensions,
            fieldName,
            mode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FromField.class,
                "dimensions", dimensions,
                "fieldName", fieldName,
                "mode", mode);
    }
    
    public final static class Builder {
 
        private Long dimensions;
 
        private String fieldName;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The number of dimensions the embedding model is generating
         */
        public Builder dimensions(long dimensions) {
            Utils.checkNotNull(dimensions, "dimensions");
            this.dimensions = dimensions;
            return this;
        }

        /**
         * Name of the field in the record that contains the embedding
         */
        public Builder fieldName(String fieldName) {
            Utils.checkNotNull(fieldName, "fieldName");
            this.fieldName = fieldName;
            return this;
        }
        
        public FromField build() {
            return new FromField(
                dimensions,
                fieldName);
        }

        private static final LazySingletonValue<Optional<? extends DestinationWeaviateSchemasEmbeddingEmbedding5Mode>> _SINGLETON_VALUE_Mode =
                new LazySingletonValue<>(
                        "mode",
                        "\"from_field\"",
                        new TypeReference<Optional<? extends DestinationWeaviateSchemasEmbeddingEmbedding5Mode>>() {});
    }
}

