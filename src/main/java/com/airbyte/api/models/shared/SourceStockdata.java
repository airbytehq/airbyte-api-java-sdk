/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SourceStockdata {

    @JsonProperty("api_key")
    private String apiKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter_entities")
    private Optional<Boolean> filterEntities;

    /**
     * Specify the industries of entities which have been identified within the article.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("industries")
    private Optional<? extends List<Object>> industries;

    @JsonProperty("sourceType")
    private Stockdata sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symbols")
    private Optional<? extends List<Object>> symbols;

    @JsonCreator
    public SourceStockdata(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("filter_entities") Optional<Boolean> filterEntities,
            @JsonProperty("industries") Optional<? extends List<Object>> industries,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("symbols") Optional<? extends List<Object>> symbols) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(filterEntities, "filterEntities");
        Utils.checkNotNull(industries, "industries");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(symbols, "symbols");
        this.apiKey = apiKey;
        this.filterEntities = filterEntities;
        this.industries = industries;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.symbols = symbols;
    }
    
    public SourceStockdata(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), startDate, Optional.empty());
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    @JsonIgnore
    public Optional<Boolean> filterEntities() {
        return filterEntities;
    }

    /**
     * Specify the industries of entities which have been identified within the article.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> industries() {
        return (Optional<List<Object>>) industries;
    }

    @JsonIgnore
    public Stockdata sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> symbols() {
        return (Optional<List<Object>>) symbols;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceStockdata withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    public SourceStockdata withFilterEntities(boolean filterEntities) {
        Utils.checkNotNull(filterEntities, "filterEntities");
        this.filterEntities = Optional.ofNullable(filterEntities);
        return this;
    }

    public SourceStockdata withFilterEntities(Optional<Boolean> filterEntities) {
        Utils.checkNotNull(filterEntities, "filterEntities");
        this.filterEntities = filterEntities;
        return this;
    }

    /**
     * Specify the industries of entities which have been identified within the article.
     */
    public SourceStockdata withIndustries(List<Object> industries) {
        Utils.checkNotNull(industries, "industries");
        this.industries = Optional.ofNullable(industries);
        return this;
    }

    /**
     * Specify the industries of entities which have been identified within the article.
     */
    public SourceStockdata withIndustries(Optional<? extends List<Object>> industries) {
        Utils.checkNotNull(industries, "industries");
        this.industries = industries;
        return this;
    }

    public SourceStockdata withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    public SourceStockdata withSymbols(List<Object> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = Optional.ofNullable(symbols);
        return this;
    }

    public SourceStockdata withSymbols(Optional<? extends List<Object>> symbols) {
        Utils.checkNotNull(symbols, "symbols");
        this.symbols = symbols;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceStockdata other = (SourceStockdata) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.filterEntities, other.filterEntities) &&
            Objects.deepEquals(this.industries, other.industries) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.symbols, other.symbols);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            filterEntities,
            industries,
            sourceType,
            startDate,
            symbols);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceStockdata.class,
                "apiKey", apiKey,
                "filterEntities", filterEntities,
                "industries", industries,
                "sourceType", sourceType,
                "startDate", startDate,
                "symbols", symbols);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<Boolean> filterEntities;
 
        private Optional<? extends List<Object>> industries = Optional.empty();
 
        private OffsetDateTime startDate;
 
        private Optional<? extends List<Object>> symbols = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        public Builder filterEntities(boolean filterEntities) {
            Utils.checkNotNull(filterEntities, "filterEntities");
            this.filterEntities = Optional.ofNullable(filterEntities);
            return this;
        }

        public Builder filterEntities(Optional<Boolean> filterEntities) {
            Utils.checkNotNull(filterEntities, "filterEntities");
            this.filterEntities = filterEntities;
            return this;
        }

        /**
         * Specify the industries of entities which have been identified within the article.
         */
        public Builder industries(List<Object> industries) {
            Utils.checkNotNull(industries, "industries");
            this.industries = Optional.ofNullable(industries);
            return this;
        }

        /**
         * Specify the industries of entities which have been identified within the article.
         */
        public Builder industries(Optional<? extends List<Object>> industries) {
            Utils.checkNotNull(industries, "industries");
            this.industries = industries;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        public Builder symbols(List<Object> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = Optional.ofNullable(symbols);
            return this;
        }

        public Builder symbols(Optional<? extends List<Object>> symbols) {
            Utils.checkNotNull(symbols, "symbols");
            this.symbols = symbols;
            return this;
        }
        
        public SourceStockdata build() {
            if (filterEntities == null) {
                filterEntities = _SINGLETON_VALUE_FilterEntities.value();
            }            return new SourceStockdata(
                apiKey,
                filterEntities,
                industries,
                startDate,
                symbols);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_FilterEntities =
                new LazySingletonValue<>(
                        "filter_entities",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Stockdata> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"stockdata\"",
                        new TypeReference<Stockdata>() {});
    }
}

