/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SourceSftpSSHKeyAuthentication {

    /**
     * Connect through ssh key
     */
    @JsonProperty("auth_method")
    private SourceSftpSchemasAuthMethod authMethod;

    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    @JsonProperty("auth_ssh_key")
    private String authSshKey;

    @JsonCreator
    public SourceSftpSSHKeyAuthentication(
            @JsonProperty("auth_ssh_key") String authSshKey) {
        Utils.checkNotNull(authSshKey, "authSshKey");
        this.authMethod = Builder._SINGLETON_VALUE_AuthMethod.value();
        this.authSshKey = authSshKey;
    }

    /**
     * Connect through ssh key
     */
    @JsonIgnore
    public SourceSftpSchemasAuthMethod authMethod() {
        return authMethod;
    }

    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    @JsonIgnore
    public String authSshKey() {
        return authSshKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    public SourceSftpSSHKeyAuthentication withAuthSshKey(String authSshKey) {
        Utils.checkNotNull(authSshKey, "authSshKey");
        this.authSshKey = authSshKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSftpSSHKeyAuthentication other = (SourceSftpSSHKeyAuthentication) o;
        return 
            Objects.deepEquals(this.authMethod, other.authMethod) &&
            Objects.deepEquals(this.authSshKey, other.authSshKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authMethod,
            authSshKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSftpSSHKeyAuthentication.class,
                "authMethod", authMethod,
                "authSshKey", authSshKey);
    }
    
    public final static class Builder {
 
        private String authSshKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
         */
        public Builder authSshKey(String authSshKey) {
            Utils.checkNotNull(authSshKey, "authSshKey");
            this.authSshKey = authSshKey;
            return this;
        }
        
        public SourceSftpSSHKeyAuthentication build() {
            return new SourceSftpSSHKeyAuthentication(
                authSshKey);
        }

        private static final LazySingletonValue<SourceSftpSchemasAuthMethod> _SINGLETON_VALUE_AuthMethod =
                new LazySingletonValue<>(
                        "auth_method",
                        "\"SSH_KEY_AUTH\"",
                        new TypeReference<SourceSftpSchemasAuthMethod>() {});
    }
}

