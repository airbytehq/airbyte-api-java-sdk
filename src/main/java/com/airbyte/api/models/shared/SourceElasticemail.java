/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourceElasticemail {

    @JsonProperty("api_key")
    private String apiKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<OffsetDateTime> from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope_type")
    private Optional<? extends ScopeType> scopeType;

    @JsonProperty("sourceType")
    private Elasticemail sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceElasticemail(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("from") Optional<OffsetDateTime> from,
            @JsonProperty("scope_type") Optional<? extends ScopeType> scopeType,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(scopeType, "scopeType");
        Utils.checkNotNull(startDate, "startDate");
        this.apiKey = apiKey;
        this.from = from;
        this.scopeType = scopeType;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceElasticemail(
            String apiKey,
            OffsetDateTime startDate) {
        this(apiKey, Optional.empty(), Optional.empty(), startDate);
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> from() {
        return from;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ScopeType> scopeType() {
        return (Optional<ScopeType>) scopeType;
    }

    @JsonIgnore
    public Elasticemail sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceElasticemail withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    public SourceElasticemail withFrom(OffsetDateTime from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public SourceElasticemail withFrom(Optional<OffsetDateTime> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public SourceElasticemail withScopeType(ScopeType scopeType) {
        Utils.checkNotNull(scopeType, "scopeType");
        this.scopeType = Optional.ofNullable(scopeType);
        return this;
    }

    public SourceElasticemail withScopeType(Optional<? extends ScopeType> scopeType) {
        Utils.checkNotNull(scopeType, "scopeType");
        this.scopeType = scopeType;
        return this;
    }

    public SourceElasticemail withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceElasticemail other = (SourceElasticemail) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.from, other.from) &&
            Objects.deepEquals(this.scopeType, other.scopeType) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            from,
            scopeType,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceElasticemail.class,
                "apiKey", apiKey,
                "from", from,
                "scopeType", scopeType,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<OffsetDateTime> from = Optional.empty();
 
        private Optional<? extends ScopeType> scopeType = Optional.empty();
 
        private OffsetDateTime startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        public Builder from(OffsetDateTime from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<OffsetDateTime> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder scopeType(ScopeType scopeType) {
            Utils.checkNotNull(scopeType, "scopeType");
            this.scopeType = Optional.ofNullable(scopeType);
            return this;
        }

        public Builder scopeType(Optional<? extends ScopeType> scopeType) {
            Utils.checkNotNull(scopeType, "scopeType");
            this.scopeType = scopeType;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceElasticemail build() {
            return new SourceElasticemail(
                apiKey,
                from,
                scopeType,
                startDate);
        }

        private static final LazySingletonValue<Elasticemail> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"elasticemail\"",
                        new TypeReference<Elasticemail>() {});
    }
}
