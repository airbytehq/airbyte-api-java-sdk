/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class SourcePardot {

    /**
     * The Consumer Key that can be found when viewing your app in Salesforce
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * The Consumer Secret that can be found when viewing your app in Salesforce
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_sandbox")
    private Optional<Boolean> isSandbox;

    /**
     * The maximum number of records to return per request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    private Optional<String> pageSize;

    /**
     * Pardot Business ID, can be found at Setup &gt; Pardot &gt; Pardot Account Setup
     */
    @JsonProperty("pardot_business_unit_id")
    private String pardotBusinessUnitId;

    /**
     * Salesforce Refresh Token used for Airbyte to access your Salesforce account. If you don't know what this is, follow this &lt;a href="https://medium.com/@bpmmendis94/obtain-access-refresh-tokens-from-salesforce-rest-api-a324fe4ccd9b"&gt;guide&lt;/a&gt; to retrieve it.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private Pardot sourceType;

    /**
     * UTC date and time in the format 2000-01-01T00:00:00Z. Any data before this date will not be replicated. Defaults to the year Pardot was released.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<OffsetDateTime> startDate;

    @JsonCreator
    public SourcePardot(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("is_sandbox") Optional<Boolean> isSandbox,
            @JsonProperty("page_size") Optional<String> pageSize,
            @JsonProperty("pardot_business_unit_id") String pardotBusinessUnitId,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("start_date") Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(isSandbox, "isSandbox");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(pardotBusinessUnitId, "pardotBusinessUnitId");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(startDate, "startDate");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.isSandbox = isSandbox;
        this.pageSize = pageSize;
        this.pardotBusinessUnitId = pardotBusinessUnitId;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourcePardot(
            String clientId,
            String clientSecret,
            String pardotBusinessUnitId,
            String refreshToken) {
        this(clientId, clientSecret, Optional.empty(), Optional.empty(), pardotBusinessUnitId, refreshToken, Optional.empty());
    }

    /**
     * The Consumer Key that can be found when viewing your app in Salesforce
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * The Consumer Secret that can be found when viewing your app in Salesforce
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false.
     */
    @JsonIgnore
    public Optional<Boolean> isSandbox() {
        return isSandbox;
    }

    /**
     * The maximum number of records to return per request
     */
    @JsonIgnore
    public Optional<String> pageSize() {
        return pageSize;
    }

    /**
     * Pardot Business ID, can be found at Setup &gt; Pardot &gt; Pardot Account Setup
     */
    @JsonIgnore
    public String pardotBusinessUnitId() {
        return pardotBusinessUnitId;
    }

    /**
     * Salesforce Refresh Token used for Airbyte to access your Salesforce account. If you don't know what this is, follow this &lt;a href="https://medium.com/@bpmmendis94/obtain-access-refresh-tokens-from-salesforce-rest-api-a324fe4ccd9b"&gt;guide&lt;/a&gt; to retrieve it.
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    @JsonIgnore
    public Pardot sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2000-01-01T00:00:00Z. Any data before this date will not be replicated. Defaults to the year Pardot was released.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The Consumer Key that can be found when viewing your app in Salesforce
     */
    public SourcePardot withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The Consumer Secret that can be found when viewing your app in Salesforce
     */
    public SourcePardot withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false.
     */
    public SourcePardot withIsSandbox(boolean isSandbox) {
        Utils.checkNotNull(isSandbox, "isSandbox");
        this.isSandbox = Optional.ofNullable(isSandbox);
        return this;
    }

    /**
     * Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false.
     */
    public SourcePardot withIsSandbox(Optional<Boolean> isSandbox) {
        Utils.checkNotNull(isSandbox, "isSandbox");
        this.isSandbox = isSandbox;
        return this;
    }

    /**
     * The maximum number of records to return per request
     */
    public SourcePardot withPageSize(String pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * The maximum number of records to return per request
     */
    public SourcePardot withPageSize(Optional<String> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Pardot Business ID, can be found at Setup &gt; Pardot &gt; Pardot Account Setup
     */
    public SourcePardot withPardotBusinessUnitId(String pardotBusinessUnitId) {
        Utils.checkNotNull(pardotBusinessUnitId, "pardotBusinessUnitId");
        this.pardotBusinessUnitId = pardotBusinessUnitId;
        return this;
    }

    /**
     * Salesforce Refresh Token used for Airbyte to access your Salesforce account. If you don't know what this is, follow this &lt;a href="https://medium.com/@bpmmendis94/obtain-access-refresh-tokens-from-salesforce-rest-api-a324fe4ccd9b"&gt;guide&lt;/a&gt; to retrieve it.
     */
    public SourcePardot withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * UTC date and time in the format 2000-01-01T00:00:00Z. Any data before this date will not be replicated. Defaults to the year Pardot was released.
     */
    public SourcePardot withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * UTC date and time in the format 2000-01-01T00:00:00Z. Any data before this date will not be replicated. Defaults to the year Pardot was released.
     */
    public SourcePardot withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePardot other = (SourcePardot) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.isSandbox, other.isSandbox) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.pardotBusinessUnitId, other.pardotBusinessUnitId) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientSecret,
            isSandbox,
            pageSize,
            pardotBusinessUnitId,
            refreshToken,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePardot.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "isSandbox", isSandbox,
                "pageSize", pageSize,
                "pardotBusinessUnitId", pardotBusinessUnitId,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<Boolean> isSandbox;
 
        private Optional<String> pageSize;
 
        private String pardotBusinessUnitId;
 
        private String refreshToken;
 
        private Optional<OffsetDateTime> startDate;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Consumer Key that can be found when viewing your app in Salesforce
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * The Consumer Secret that can be found when viewing your app in Salesforce
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false.
         */
        public Builder isSandbox(boolean isSandbox) {
            Utils.checkNotNull(isSandbox, "isSandbox");
            this.isSandbox = Optional.ofNullable(isSandbox);
            return this;
        }

        /**
         * Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false.
         */
        public Builder isSandbox(Optional<Boolean> isSandbox) {
            Utils.checkNotNull(isSandbox, "isSandbox");
            this.isSandbox = isSandbox;
            return this;
        }

        /**
         * The maximum number of records to return per request
         */
        public Builder pageSize(String pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * The maximum number of records to return per request
         */
        public Builder pageSize(Optional<String> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Pardot Business ID, can be found at Setup &gt; Pardot &gt; Pardot Account Setup
         */
        public Builder pardotBusinessUnitId(String pardotBusinessUnitId) {
            Utils.checkNotNull(pardotBusinessUnitId, "pardotBusinessUnitId");
            this.pardotBusinessUnitId = pardotBusinessUnitId;
            return this;
        }

        /**
         * Salesforce Refresh Token used for Airbyte to access your Salesforce account. If you don't know what this is, follow this &lt;a href="https://medium.com/@bpmmendis94/obtain-access-refresh-tokens-from-salesforce-rest-api-a324fe4ccd9b"&gt;guide&lt;/a&gt; to retrieve it.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * UTC date and time in the format 2000-01-01T00:00:00Z. Any data before this date will not be replicated. Defaults to the year Pardot was released.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * UTC date and time in the format 2000-01-01T00:00:00Z. Any data before this date will not be replicated. Defaults to the year Pardot was released.
         */
        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourcePardot build() {
            if (isSandbox == null) {
                isSandbox = _SINGLETON_VALUE_IsSandbox.value();
            }
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            if (startDate == null) {
                startDate = _SINGLETON_VALUE_StartDate.value();
            }
            return new SourcePardot(
                clientId,
                clientSecret,
                isSandbox,
                pageSize,
                pardotBusinessUnitId,
                refreshToken,
                startDate);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IsSandbox =
                new LazySingletonValue<>(
                        "is_sandbox",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "page_size",
                        "\"1000\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Pardot> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"pardot\"",
                        new TypeReference<Pardot>() {});

        private static final LazySingletonValue<Optional<OffsetDateTime>> _SINGLETON_VALUE_StartDate =
                new LazySingletonValue<>(
                        "start_date",
                        "\"2007-01-01T00:00:00Z\"",
                        new TypeReference<Optional<OffsetDateTime>>() {});
    }
}
