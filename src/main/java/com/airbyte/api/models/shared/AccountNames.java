/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * AccountNames
 * 
 * <p>Account Names Predicates Config.
 */
public class AccountNames {

    /**
     * Account Name is a string value for comparing with the specified predicate.
     */
    @JsonProperty("name")
    private String name;

    /**
     * An Operator that will be used to filter accounts. The Contains predicate has features for matching words, matching inflectional forms of words, searching using wildcard characters, and searching using proximity. The Equals is used to return all rows where account name is equal(=) to the string that you provided
     */
    @JsonProperty("operator")
    private Operator operator;

    @JsonCreator
    public AccountNames(
            @JsonProperty("name") String name,
            @JsonProperty("operator") Operator operator) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(operator, "operator");
        this.name = name;
        this.operator = operator;
    }

    /**
     * Account Name is a string value for comparing with the specified predicate.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * An Operator that will be used to filter accounts. The Contains predicate has features for matching words, matching inflectional forms of words, searching using wildcard characters, and searching using proximity. The Equals is used to return all rows where account name is equal(=) to the string that you provided
     */
    @JsonIgnore
    public Operator operator() {
        return operator;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Account Name is a string value for comparing with the specified predicate.
     */
    public AccountNames withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * An Operator that will be used to filter accounts. The Contains predicate has features for matching words, matching inflectional forms of words, searching using wildcard characters, and searching using proximity. The Equals is used to return all rows where account name is equal(=) to the string that you provided
     */
    public AccountNames withOperator(Operator operator) {
        Utils.checkNotNull(operator, "operator");
        this.operator = operator;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountNames other = (AccountNames) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.operator, other.operator);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            operator);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountNames.class,
                "name", name,
                "operator", operator);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Operator operator;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Account Name is a string value for comparing with the specified predicate.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * An Operator that will be used to filter accounts. The Contains predicate has features for matching words, matching inflectional forms of words, searching using wildcard characters, and searching using proximity. The Equals is used to return all rows where account name is equal(=) to the string that you provided
         */
        public Builder operator(Operator operator) {
            Utils.checkNotNull(operator, "operator");
            this.operator = operator;
            return this;
        }
        
        public AccountNames build() {
            return new AccountNames(
                name,
                operator);
        }
    }
}
