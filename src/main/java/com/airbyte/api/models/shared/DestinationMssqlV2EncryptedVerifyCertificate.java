/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * DestinationMssqlV2EncryptedVerifyCertificate
 * 
 * <p>Verify and use the certificate provided by the server.
 */
public class DestinationMssqlV2EncryptedVerifyCertificate {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostNameInCertificate")
    private Optional<String> hostNameInCertificate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends DestinationMssqlV2SchemasSslMethodName> name;

    /**
     * Specifies the name of the trust store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustStoreName")
    private Optional<String> trustStoreName;

    /**
     * Specifies the password of the trust store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustStorePassword")
    private Optional<String> trustStorePassword;

    @JsonCreator
    public DestinationMssqlV2EncryptedVerifyCertificate(
            @JsonProperty("hostNameInCertificate") Optional<String> hostNameInCertificate,
            @JsonProperty("name") Optional<? extends DestinationMssqlV2SchemasSslMethodName> name,
            @JsonProperty("trustStoreName") Optional<String> trustStoreName,
            @JsonProperty("trustStorePassword") Optional<String> trustStorePassword) {
        Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(trustStoreName, "trustStoreName");
        Utils.checkNotNull(trustStorePassword, "trustStorePassword");
        this.additionalProperties = new HashMap<>();
        this.hostNameInCertificate = hostNameInCertificate;
        this.name = name;
        this.trustStoreName = trustStoreName;
        this.trustStorePassword = trustStorePassword;
    }
    
    public DestinationMssqlV2EncryptedVerifyCertificate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    @JsonIgnore
    public Optional<String> hostNameInCertificate() {
        return hostNameInCertificate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationMssqlV2SchemasSslMethodName> name() {
        return (Optional<DestinationMssqlV2SchemasSslMethodName>) name;
    }

    /**
     * Specifies the name of the trust store.
     */
    @JsonIgnore
    public Optional<String> trustStoreName() {
        return trustStoreName;
    }

    /**
     * Specifies the password of the trust store.
     */
    @JsonIgnore
    public Optional<String> trustStorePassword() {
        return trustStorePassword;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    @JsonAnySetter
    public DestinationMssqlV2EncryptedVerifyCertificate withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }    

    public DestinationMssqlV2EncryptedVerifyCertificate withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    public DestinationMssqlV2EncryptedVerifyCertificate withHostNameInCertificate(String hostNameInCertificate) {
        Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
        this.hostNameInCertificate = Optional.ofNullable(hostNameInCertificate);
        return this;
    }

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    public DestinationMssqlV2EncryptedVerifyCertificate withHostNameInCertificate(Optional<String> hostNameInCertificate) {
        Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
        this.hostNameInCertificate = hostNameInCertificate;
        return this;
    }

    public DestinationMssqlV2EncryptedVerifyCertificate withName(DestinationMssqlV2SchemasSslMethodName name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public DestinationMssqlV2EncryptedVerifyCertificate withName(Optional<? extends DestinationMssqlV2SchemasSslMethodName> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Specifies the name of the trust store.
     */
    public DestinationMssqlV2EncryptedVerifyCertificate withTrustStoreName(String trustStoreName) {
        Utils.checkNotNull(trustStoreName, "trustStoreName");
        this.trustStoreName = Optional.ofNullable(trustStoreName);
        return this;
    }

    /**
     * Specifies the name of the trust store.
     */
    public DestinationMssqlV2EncryptedVerifyCertificate withTrustStoreName(Optional<String> trustStoreName) {
        Utils.checkNotNull(trustStoreName, "trustStoreName");
        this.trustStoreName = trustStoreName;
        return this;
    }

    /**
     * Specifies the password of the trust store.
     */
    public DestinationMssqlV2EncryptedVerifyCertificate withTrustStorePassword(String trustStorePassword) {
        Utils.checkNotNull(trustStorePassword, "trustStorePassword");
        this.trustStorePassword = Optional.ofNullable(trustStorePassword);
        return this;
    }

    /**
     * Specifies the password of the trust store.
     */
    public DestinationMssqlV2EncryptedVerifyCertificate withTrustStorePassword(Optional<String> trustStorePassword) {
        Utils.checkNotNull(trustStorePassword, "trustStorePassword");
        this.trustStorePassword = trustStorePassword;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationMssqlV2EncryptedVerifyCertificate other = (DestinationMssqlV2EncryptedVerifyCertificate) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.hostNameInCertificate, other.hostNameInCertificate) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.trustStoreName, other.trustStoreName) &&
            Objects.deepEquals(this.trustStorePassword, other.trustStorePassword);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            hostNameInCertificate,
            name,
            trustStoreName,
            trustStorePassword);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DestinationMssqlV2EncryptedVerifyCertificate.class,
                "additionalProperties", additionalProperties,
                "hostNameInCertificate", hostNameInCertificate,
                "name", name,
                "trustStoreName", trustStoreName,
                "trustStorePassword", trustStorePassword);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<String> hostNameInCertificate = Optional.empty();
 
        private Optional<? extends DestinationMssqlV2SchemasSslMethodName> name;
 
        private Optional<String> trustStoreName = Optional.empty();
 
        private Optional<String> trustStorePassword = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
         */
        public Builder hostNameInCertificate(String hostNameInCertificate) {
            Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
            this.hostNameInCertificate = Optional.ofNullable(hostNameInCertificate);
            return this;
        }

        /**
         * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
         */
        public Builder hostNameInCertificate(Optional<String> hostNameInCertificate) {
            Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
            this.hostNameInCertificate = hostNameInCertificate;
            return this;
        }

        public Builder name(DestinationMssqlV2SchemasSslMethodName name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends DestinationMssqlV2SchemasSslMethodName> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Specifies the name of the trust store.
         */
        public Builder trustStoreName(String trustStoreName) {
            Utils.checkNotNull(trustStoreName, "trustStoreName");
            this.trustStoreName = Optional.ofNullable(trustStoreName);
            return this;
        }

        /**
         * Specifies the name of the trust store.
         */
        public Builder trustStoreName(Optional<String> trustStoreName) {
            Utils.checkNotNull(trustStoreName, "trustStoreName");
            this.trustStoreName = trustStoreName;
            return this;
        }

        /**
         * Specifies the password of the trust store.
         */
        public Builder trustStorePassword(String trustStorePassword) {
            Utils.checkNotNull(trustStorePassword, "trustStorePassword");
            this.trustStorePassword = Optional.ofNullable(trustStorePassword);
            return this;
        }

        /**
         * Specifies the password of the trust store.
         */
        public Builder trustStorePassword(Optional<String> trustStorePassword) {
            Utils.checkNotNull(trustStorePassword, "trustStorePassword");
            this.trustStorePassword = trustStorePassword;
            return this;
        }
        
        public DestinationMssqlV2EncryptedVerifyCertificate build() {
            if (name == null) {
                name = _SINGLETON_VALUE_Name.value();
            }
            return new DestinationMssqlV2EncryptedVerifyCertificate(
                hostNameInCertificate,
                name,
                trustStoreName,
                trustStorePassword)
                .withAdditionalProperties(additionalProperties);
        }

        private static final LazySingletonValue<Optional<? extends DestinationMssqlV2SchemasSslMethodName>> _SINGLETON_VALUE_Name =
                new LazySingletonValue<>(
                        "name",
                        "\"encrypted_verify_certificate\"",
                        new TypeReference<Optional<? extends DestinationMssqlV2SchemasSslMethodName>>() {});
    }
}
