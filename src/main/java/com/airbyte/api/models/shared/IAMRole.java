/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class IAMRole {

    /**
     * Name of the credentials
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials_title")
    private Optional<? extends CredentialsTitle> credentialsTitle;

    /**
     * Will assume this role to write data to s3
     */
    @JsonProperty("role_arn")
    private String roleArn;

    @JsonCreator
    public IAMRole(
            @JsonProperty("role_arn") String roleArn) {
        Utils.checkNotNull(roleArn, "roleArn");
        this.credentialsTitle = Builder._SINGLETON_VALUE_CredentialsTitle.value();
        this.roleArn = roleArn;
    }

    /**
     * Name of the credentials
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CredentialsTitle> credentialsTitle() {
        return (Optional<CredentialsTitle>) credentialsTitle;
    }

    /**
     * Will assume this role to write data to s3
     */
    @JsonIgnore
    public String roleArn() {
        return roleArn;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Will assume this role to write data to s3
     */
    public IAMRole withRoleArn(String roleArn) {
        Utils.checkNotNull(roleArn, "roleArn");
        this.roleArn = roleArn;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IAMRole other = (IAMRole) o;
        return 
            Objects.deepEquals(this.credentialsTitle, other.credentialsTitle) &&
            Objects.deepEquals(this.roleArn, other.roleArn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentialsTitle,
            roleArn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IAMRole.class,
                "credentialsTitle", credentialsTitle,
                "roleArn", roleArn);
    }
    
    public final static class Builder {
 
        private String roleArn;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Will assume this role to write data to s3
         */
        public Builder roleArn(String roleArn) {
            Utils.checkNotNull(roleArn, "roleArn");
            this.roleArn = roleArn;
            return this;
        }
        
        public IAMRole build() {
            return new IAMRole(
                roleArn);
        }

        private static final LazySingletonValue<Optional<? extends CredentialsTitle>> _SINGLETON_VALUE_CredentialsTitle =
                new LazySingletonValue<>(
                        "credentials_title",
                        "\"IAM Role\"",
                        new TypeReference<Optional<? extends CredentialsTitle>>() {});
    }
}
