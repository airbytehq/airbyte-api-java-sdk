/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceZohoExpense {

    @JsonProperty("client_id")
    private String clientId;

    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * The domain suffix for the Zoho Expense API based on your data center location (e.g., 'com', 'eu', 'in', etc.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_center")
    private Optional<? extends SourceZohoExpenseDataCenter> dataCenter;

    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private ZohoExpense sourceType;

    @JsonCreator
    public SourceZohoExpense(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("data_center") Optional<? extends SourceZohoExpenseDataCenter> dataCenter,
            @JsonProperty("refresh_token") String refreshToken) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(dataCenter, "dataCenter");
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.dataCenter = dataCenter;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceZohoExpense(
            String clientId,
            String clientSecret,
            String refreshToken) {
        this(clientId, clientSecret, Optional.empty(), refreshToken);
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * The domain suffix for the Zoho Expense API based on your data center location (e.g., 'com', 'eu', 'in', etc.)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceZohoExpenseDataCenter> dataCenter() {
        return (Optional<SourceZohoExpenseDataCenter>) dataCenter;
    }

    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    @JsonIgnore
    public ZohoExpense sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceZohoExpense withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public SourceZohoExpense withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * The domain suffix for the Zoho Expense API based on your data center location (e.g., 'com', 'eu', 'in', etc.)
     */
    public SourceZohoExpense withDataCenter(SourceZohoExpenseDataCenter dataCenter) {
        Utils.checkNotNull(dataCenter, "dataCenter");
        this.dataCenter = Optional.ofNullable(dataCenter);
        return this;
    }

    /**
     * The domain suffix for the Zoho Expense API based on your data center location (e.g., 'com', 'eu', 'in', etc.)
     */
    public SourceZohoExpense withDataCenter(Optional<? extends SourceZohoExpenseDataCenter> dataCenter) {
        Utils.checkNotNull(dataCenter, "dataCenter");
        this.dataCenter = dataCenter;
        return this;
    }

    public SourceZohoExpense withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceZohoExpense other = (SourceZohoExpense) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.dataCenter, other.dataCenter) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientSecret,
            dataCenter,
            refreshToken,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceZohoExpense.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "dataCenter", dataCenter,
                "refreshToken", refreshToken,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<? extends SourceZohoExpenseDataCenter> dataCenter;
 
        private String refreshToken;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The domain suffix for the Zoho Expense API based on your data center location (e.g., 'com', 'eu', 'in', etc.)
         */
        public Builder dataCenter(SourceZohoExpenseDataCenter dataCenter) {
            Utils.checkNotNull(dataCenter, "dataCenter");
            this.dataCenter = Optional.ofNullable(dataCenter);
            return this;
        }

        /**
         * The domain suffix for the Zoho Expense API based on your data center location (e.g., 'com', 'eu', 'in', etc.)
         */
        public Builder dataCenter(Optional<? extends SourceZohoExpenseDataCenter> dataCenter) {
            Utils.checkNotNull(dataCenter, "dataCenter");
            this.dataCenter = dataCenter;
            return this;
        }

        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }
        
        public SourceZohoExpense build() {
            if (dataCenter == null) {
                dataCenter = _SINGLETON_VALUE_DataCenter.value();
            }
            return new SourceZohoExpense(
                clientId,
                clientSecret,
                dataCenter,
                refreshToken);
        }

        private static final LazySingletonValue<Optional<? extends SourceZohoExpenseDataCenter>> _SINGLETON_VALUE_DataCenter =
                new LazySingletonValue<>(
                        "data_center",
                        "\"com\"",
                        new TypeReference<Optional<? extends SourceZohoExpenseDataCenter>>() {});

        private static final LazySingletonValue<ZohoExpense> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"zoho-expense\"",
                        new TypeReference<ZohoExpense>() {});
    }
}
