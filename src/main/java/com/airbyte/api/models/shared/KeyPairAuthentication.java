/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class KeyPairAuthentication {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private Optional<? extends DestinationSnowflakeSchemasCredentialsAuthType> authType;

    /**
     * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/destinations/snowflake"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonProperty("private_key")
    private String privateKey;

    /**
     * Passphrase for private key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_key_password")
    private Optional<? extends String> privateKeyPassword;

    public KeyPairAuthentication(
            @JsonProperty("private_key") String privateKey,
            @JsonProperty("private_key_password") Optional<? extends String> privateKeyPassword) {
        Utils.checkNotNull(privateKey, "privateKey");
        Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.privateKey = privateKey;
        this.privateKeyPassword = privateKeyPassword;
    }

    public Optional<? extends DestinationSnowflakeSchemasCredentialsAuthType> authType() {
        return authType;
    }

    /**
     * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/destinations/snowflake"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    public String privateKey() {
        return privateKey;
    }

    /**
     * Passphrase for private key
     */
    public Optional<? extends String> privateKeyPassword() {
        return privateKeyPassword;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/destinations/snowflake"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
     */
    public KeyPairAuthentication withPrivateKey(String privateKey) {
        Utils.checkNotNull(privateKey, "privateKey");
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Passphrase for private key
     */
    public KeyPairAuthentication withPrivateKeyPassword(String privateKeyPassword) {
        Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
        this.privateKeyPassword = Optional.ofNullable(privateKeyPassword);
        return this;
    }

    /**
     * Passphrase for private key
     */
    public KeyPairAuthentication withPrivateKeyPassword(Optional<? extends String> privateKeyPassword) {
        Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
        this.privateKeyPassword = privateKeyPassword;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KeyPairAuthentication other = (KeyPairAuthentication) o;
        return 
            java.util.Objects.deepEquals(this.authType, other.authType) &&
            java.util.Objects.deepEquals(this.privateKey, other.privateKey) &&
            java.util.Objects.deepEquals(this.privateKeyPassword, other.privateKeyPassword);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authType,
            privateKey,
            privateKeyPassword);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KeyPairAuthentication.class,
                "authType", authType,
                "privateKey", privateKey,
                "privateKeyPassword", privateKeyPassword);
    }
    
    public final static class Builder {
 
        private String privateKey;
 
        private Optional<? extends String> privateKeyPassword = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * RSA Private key to use for Snowflake connection. See the &lt;a href="https://docs.airbyte.com/integrations/destinations/snowflake"&gt;docs&lt;/a&gt; for more information on how to obtain this key.
         */
        public Builder privateKey(String privateKey) {
            Utils.checkNotNull(privateKey, "privateKey");
            this.privateKey = privateKey;
            return this;
        }

        /**
         * Passphrase for private key
         */
        public Builder privateKeyPassword(String privateKeyPassword) {
            Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
            this.privateKeyPassword = Optional.ofNullable(privateKeyPassword);
            return this;
        }

        /**
         * Passphrase for private key
         */
        public Builder privateKeyPassword(Optional<? extends String> privateKeyPassword) {
            Utils.checkNotNull(privateKeyPassword, "privateKeyPassword");
            this.privateKeyPassword = privateKeyPassword;
            return this;
        }
        
        public KeyPairAuthentication build() {
            if (authType == null) {
                authType = _SINGLETON_VALUE_AuthType.value();
            }
            return new KeyPairAuthentication(
                privateKey,
                privateKeyPassword);
        }

        private static final LazySingletonValue<Optional<? extends DestinationSnowflakeSchemasCredentialsAuthType>> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"Key Pair Authentication\"",
                        new TypeReference<Optional<? extends DestinationSnowflakeSchemasCredentialsAuthType>>() {});
    }
}

