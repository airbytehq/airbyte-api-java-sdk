/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class SourceAsana {

    /**
     * Choose how to authenticate to Github
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    private Optional<? extends AuthenticationMechanism> credentials;

    /**
     * Globally unique identifiers for the organization exports
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_export_ids")
    private Optional<? extends java.util.List<java.lang.Object>> organizationExportIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    private Optional<? extends SourceAsanaAsana> sourceType;

    /**
     * This flag is used for testing purposes for certain streams that return a lot of data. This flag is not meant to be enabled for prod.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test_mode")
    private Optional<? extends Boolean> testMode;

    @JsonCreator
    public SourceAsana(
            @JsonProperty("credentials") Optional<? extends AuthenticationMechanism> credentials,
            @JsonProperty("organization_export_ids") Optional<? extends java.util.List<java.lang.Object>> organizationExportIds,
            @JsonProperty("test_mode") Optional<? extends Boolean> testMode) {
        Utils.checkNotNull(credentials, "credentials");
        Utils.checkNotNull(organizationExportIds, "organizationExportIds");
        Utils.checkNotNull(testMode, "testMode");
        this.credentials = credentials;
        this.organizationExportIds = organizationExportIds;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.testMode = testMode;
    }
    
    public SourceAsana() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Choose how to authenticate to Github
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AuthenticationMechanism> credentials() {
        return (Optional<AuthenticationMechanism>) credentials;
    }

    /**
     * Globally unique identifiers for the organization exports
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<java.lang.Object>> organizationExportIds() {
        return (Optional<java.util.List<java.lang.Object>>) organizationExportIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceAsanaAsana> sourceType() {
        return (Optional<SourceAsanaAsana>) sourceType;
    }

    /**
     * This flag is used for testing purposes for certain streams that return a lot of data. This flag is not meant to be enabled for prod.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> testMode() {
        return (Optional<Boolean>) testMode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Choose how to authenticate to Github
     */
    public SourceAsana withCredentials(AuthenticationMechanism credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = Optional.ofNullable(credentials);
        return this;
    }

    /**
     * Choose how to authenticate to Github
     */
    public SourceAsana withCredentials(Optional<? extends AuthenticationMechanism> credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }

    /**
     * Globally unique identifiers for the organization exports
     */
    public SourceAsana withOrganizationExportIds(java.util.List<java.lang.Object> organizationExportIds) {
        Utils.checkNotNull(organizationExportIds, "organizationExportIds");
        this.organizationExportIds = Optional.ofNullable(organizationExportIds);
        return this;
    }

    /**
     * Globally unique identifiers for the organization exports
     */
    public SourceAsana withOrganizationExportIds(Optional<? extends java.util.List<java.lang.Object>> organizationExportIds) {
        Utils.checkNotNull(organizationExportIds, "organizationExportIds");
        this.organizationExportIds = organizationExportIds;
        return this;
    }

    /**
     * This flag is used for testing purposes for certain streams that return a lot of data. This flag is not meant to be enabled for prod.
     */
    public SourceAsana withTestMode(boolean testMode) {
        Utils.checkNotNull(testMode, "testMode");
        this.testMode = Optional.ofNullable(testMode);
        return this;
    }

    /**
     * This flag is used for testing purposes for certain streams that return a lot of data. This flag is not meant to be enabled for prod.
     */
    public SourceAsana withTestMode(Optional<? extends Boolean> testMode) {
        Utils.checkNotNull(testMode, "testMode");
        this.testMode = testMode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAsana other = (SourceAsana) o;
        return 
            java.util.Objects.deepEquals(this.credentials, other.credentials) &&
            java.util.Objects.deepEquals(this.organizationExportIds, other.organizationExportIds) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.testMode, other.testMode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            credentials,
            organizationExportIds,
            sourceType,
            testMode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAsana.class,
                "credentials", credentials,
                "organizationExportIds", organizationExportIds,
                "sourceType", sourceType,
                "testMode", testMode);
    }
    
    public final static class Builder {
 
        private Optional<? extends AuthenticationMechanism> credentials = Optional.empty();
 
        private Optional<? extends java.util.List<java.lang.Object>> organizationExportIds = Optional.empty();
 
        private Optional<? extends Boolean> testMode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Choose how to authenticate to Github
         */
        public Builder credentials(AuthenticationMechanism credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * Choose how to authenticate to Github
         */
        public Builder credentials(Optional<? extends AuthenticationMechanism> credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }

        /**
         * Globally unique identifiers for the organization exports
         */
        public Builder organizationExportIds(java.util.List<java.lang.Object> organizationExportIds) {
            Utils.checkNotNull(organizationExportIds, "organizationExportIds");
            this.organizationExportIds = Optional.ofNullable(organizationExportIds);
            return this;
        }

        /**
         * Globally unique identifiers for the organization exports
         */
        public Builder organizationExportIds(Optional<? extends java.util.List<java.lang.Object>> organizationExportIds) {
            Utils.checkNotNull(organizationExportIds, "organizationExportIds");
            this.organizationExportIds = organizationExportIds;
            return this;
        }

        /**
         * This flag is used for testing purposes for certain streams that return a lot of data. This flag is not meant to be enabled for prod.
         */
        public Builder testMode(boolean testMode) {
            Utils.checkNotNull(testMode, "testMode");
            this.testMode = Optional.ofNullable(testMode);
            return this;
        }

        /**
         * This flag is used for testing purposes for certain streams that return a lot of data. This flag is not meant to be enabled for prod.
         */
        public Builder testMode(Optional<? extends Boolean> testMode) {
            Utils.checkNotNull(testMode, "testMode");
            this.testMode = testMode;
            return this;
        }
        
        public SourceAsana build() {
            return new SourceAsana(
                credentials,
                organizationExportIds,
                testMode);
        }

        private static final LazySingletonValue<Optional<? extends SourceAsanaAsana>> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"asana\"",
                        new TypeReference<Optional<? extends SourceAsanaAsana>>() {});
    }
}

