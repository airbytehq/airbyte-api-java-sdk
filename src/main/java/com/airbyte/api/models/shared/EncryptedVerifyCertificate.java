/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * EncryptedVerifyCertificate - Verify and use the certificate provided by the server.
 */

public class EncryptedVerifyCertificate {

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostNameInCertificate")
    private Optional<String> hostNameInCertificate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssl_method")
    private Optional<? extends DestinationMssqlSchemasSslMethodSslMethod> sslMethod;

    @JsonCreator
    public EncryptedVerifyCertificate(
            @JsonProperty("hostNameInCertificate") Optional<String> hostNameInCertificate) {
        Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
        this.hostNameInCertificate = hostNameInCertificate;
        this.sslMethod = Builder._SINGLETON_VALUE_SslMethod.value();
    }
    
    public EncryptedVerifyCertificate() {
        this(Optional.empty());
    }

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    @JsonIgnore
    public Optional<String> hostNameInCertificate() {
        return hostNameInCertificate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DestinationMssqlSchemasSslMethodSslMethod> sslMethod() {
        return (Optional<DestinationMssqlSchemasSslMethodSslMethod>) sslMethod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    public EncryptedVerifyCertificate withHostNameInCertificate(String hostNameInCertificate) {
        Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
        this.hostNameInCertificate = Optional.ofNullable(hostNameInCertificate);
        return this;
    }

    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    public EncryptedVerifyCertificate withHostNameInCertificate(Optional<String> hostNameInCertificate) {
        Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
        this.hostNameInCertificate = hostNameInCertificate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EncryptedVerifyCertificate other = (EncryptedVerifyCertificate) o;
        return 
            Objects.deepEquals(this.hostNameInCertificate, other.hostNameInCertificate) &&
            Objects.deepEquals(this.sslMethod, other.sslMethod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hostNameInCertificate,
            sslMethod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EncryptedVerifyCertificate.class,
                "hostNameInCertificate", hostNameInCertificate,
                "sslMethod", sslMethod);
    }
    
    public final static class Builder {
 
        private Optional<String> hostNameInCertificate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
         */
        public Builder hostNameInCertificate(String hostNameInCertificate) {
            Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
            this.hostNameInCertificate = Optional.ofNullable(hostNameInCertificate);
            return this;
        }

        /**
         * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
         */
        public Builder hostNameInCertificate(Optional<String> hostNameInCertificate) {
            Utils.checkNotNull(hostNameInCertificate, "hostNameInCertificate");
            this.hostNameInCertificate = hostNameInCertificate;
            return this;
        }
        
        public EncryptedVerifyCertificate build() {
            return new EncryptedVerifyCertificate(
                hostNameInCertificate);
        }

        private static final LazySingletonValue<Optional<? extends DestinationMssqlSchemasSslMethodSslMethod>> _SINGLETON_VALUE_SslMethod =
                new LazySingletonValue<>(
                        "ssl_method",
                        "\"encrypted_verify_certificate\"",
                        new TypeReference<Optional<? extends DestinationMssqlSchemasSslMethodSslMethod>>() {});
    }
}

