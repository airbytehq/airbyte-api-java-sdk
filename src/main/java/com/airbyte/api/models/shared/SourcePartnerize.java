/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourcePartnerize {

    /**
     * The application key identifies the network you are making the request against. Find it in your account settings under 'User Application Key' at https://console.partnerize.com.
     */
    @JsonProperty("application_key")
    private String applicationKey;

    @JsonProperty("sourceType")
    private Partnerize sourceType;

    /**
     * The user API key identifies the user on whose behalf the request is made. Find it in your account settings under 'User API Key' at https://console.partnerize.com.
     */
    @JsonProperty("user_api_key")
    private String userApiKey;

    @JsonCreator
    public SourcePartnerize(
            @JsonProperty("application_key") String applicationKey,
            @JsonProperty("user_api_key") String userApiKey) {
        Utils.checkNotNull(applicationKey, "applicationKey");
        Utils.checkNotNull(userApiKey, "userApiKey");
        this.applicationKey = applicationKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.userApiKey = userApiKey;
    }

    /**
     * The application key identifies the network you are making the request against. Find it in your account settings under 'User Application Key' at https://console.partnerize.com.
     */
    @JsonIgnore
    public String applicationKey() {
        return applicationKey;
    }

    @JsonIgnore
    public Partnerize sourceType() {
        return sourceType;
    }

    /**
     * The user API key identifies the user on whose behalf the request is made. Find it in your account settings under 'User API Key' at https://console.partnerize.com.
     */
    @JsonIgnore
    public String userApiKey() {
        return userApiKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The application key identifies the network you are making the request against. Find it in your account settings under 'User Application Key' at https://console.partnerize.com.
     */
    public SourcePartnerize withApplicationKey(String applicationKey) {
        Utils.checkNotNull(applicationKey, "applicationKey");
        this.applicationKey = applicationKey;
        return this;
    }

    /**
     * The user API key identifies the user on whose behalf the request is made. Find it in your account settings under 'User API Key' at https://console.partnerize.com.
     */
    public SourcePartnerize withUserApiKey(String userApiKey) {
        Utils.checkNotNull(userApiKey, "userApiKey");
        this.userApiKey = userApiKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePartnerize other = (SourcePartnerize) o;
        return 
            Objects.deepEquals(this.applicationKey, other.applicationKey) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.userApiKey, other.userApiKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            applicationKey,
            sourceType,
            userApiKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePartnerize.class,
                "applicationKey", applicationKey,
                "sourceType", sourceType,
                "userApiKey", userApiKey);
    }
    
    public final static class Builder {
 
        private String applicationKey;
 
        private String userApiKey;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The application key identifies the network you are making the request against. Find it in your account settings under 'User Application Key' at https://console.partnerize.com.
         */
        public Builder applicationKey(String applicationKey) {
            Utils.checkNotNull(applicationKey, "applicationKey");
            this.applicationKey = applicationKey;
            return this;
        }

        /**
         * The user API key identifies the user on whose behalf the request is made. Find it in your account settings under 'User API Key' at https://console.partnerize.com.
         */
        public Builder userApiKey(String userApiKey) {
            Utils.checkNotNull(userApiKey, "userApiKey");
            this.userApiKey = userApiKey;
            return this;
        }
        
        public SourcePartnerize build() {
            return new SourcePartnerize(
                applicationKey,
                userApiKey);
        }

        private static final LazySingletonValue<Partnerize> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"partnerize\"",
                        new TypeReference<Partnerize>() {});
    }
}
