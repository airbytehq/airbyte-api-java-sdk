/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class SourceAmplitude {

    /**
     * According to &lt;a href="https://amplitude.com/docs/apis/analytics/dashboard-rest#query-parameters"&gt;Considerations&lt;/a&gt; the grouping by `Country` is optional, if you're facing issues fetching the stream, or checking the connection please set this to `False` instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_users_group_by_country")
    private Optional<Boolean> activeUsersGroupByCountry;

    /**
     * Amplitude API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonProperty("api_key")
    private String apiKey;

    /**
     * Amplitude data region server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_region")
    private Optional<? extends DataRegion> dataRegion;

    /**
     * According to &lt;a href="https://www.docs.developers.amplitude.com/analytics/apis/export-api/#considerations"&gt;Considerations&lt;/a&gt; too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_time_range")
    private Optional<Long> requestTimeRange;

    /**
     * Amplitude Secret Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonProperty("secret_key")
    private String secretKey;

    @JsonProperty("sourceType")
    private Amplitude sourceType;

    /**
     * UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonCreator
    public SourceAmplitude(
            @JsonProperty("active_users_group_by_country") Optional<Boolean> activeUsersGroupByCountry,
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("data_region") Optional<? extends DataRegion> dataRegion,
            @JsonProperty("request_time_range") Optional<Long> requestTimeRange,
            @JsonProperty("secret_key") String secretKey,
            @JsonProperty("start_date") OffsetDateTime startDate) {
        Utils.checkNotNull(activeUsersGroupByCountry, "activeUsersGroupByCountry");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(dataRegion, "dataRegion");
        Utils.checkNotNull(requestTimeRange, "requestTimeRange");
        Utils.checkNotNull(secretKey, "secretKey");
        Utils.checkNotNull(startDate, "startDate");
        this.activeUsersGroupByCountry = activeUsersGroupByCountry;
        this.apiKey = apiKey;
        this.dataRegion = dataRegion;
        this.requestTimeRange = requestTimeRange;
        this.secretKey = secretKey;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
    }
    
    public SourceAmplitude(
            String apiKey,
            String secretKey,
            OffsetDateTime startDate) {
        this(Optional.empty(), apiKey, Optional.empty(), Optional.empty(), secretKey, startDate);
    }

    /**
     * According to &lt;a href="https://amplitude.com/docs/apis/analytics/dashboard-rest#query-parameters"&gt;Considerations&lt;/a&gt; the grouping by `Country` is optional, if you're facing issues fetching the stream, or checking the connection please set this to `False` instead.
     */
    @JsonIgnore
    public Optional<Boolean> activeUsersGroupByCountry() {
        return activeUsersGroupByCountry;
    }

    /**
     * Amplitude API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    /**
     * Amplitude data region server
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataRegion> dataRegion() {
        return (Optional<DataRegion>) dataRegion;
    }

    /**
     * According to &lt;a href="https://www.docs.developers.amplitude.com/analytics/apis/export-api/#considerations"&gt;Considerations&lt;/a&gt; too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.
     */
    @JsonIgnore
    public Optional<Long> requestTimeRange() {
        return requestTimeRange;
    }

    /**
     * Amplitude Secret Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
     */
    @JsonIgnore
    public String secretKey() {
        return secretKey;
    }

    @JsonIgnore
    public Amplitude sourceType() {
        return sourceType;
    }

    /**
     * UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * According to &lt;a href="https://amplitude.com/docs/apis/analytics/dashboard-rest#query-parameters"&gt;Considerations&lt;/a&gt; the grouping by `Country` is optional, if you're facing issues fetching the stream, or checking the connection please set this to `False` instead.
     */
    public SourceAmplitude withActiveUsersGroupByCountry(boolean activeUsersGroupByCountry) {
        Utils.checkNotNull(activeUsersGroupByCountry, "activeUsersGroupByCountry");
        this.activeUsersGroupByCountry = Optional.ofNullable(activeUsersGroupByCountry);
        return this;
    }

    /**
     * According to &lt;a href="https://amplitude.com/docs/apis/analytics/dashboard-rest#query-parameters"&gt;Considerations&lt;/a&gt; the grouping by `Country` is optional, if you're facing issues fetching the stream, or checking the connection please set this to `False` instead.
     */
    public SourceAmplitude withActiveUsersGroupByCountry(Optional<Boolean> activeUsersGroupByCountry) {
        Utils.checkNotNull(activeUsersGroupByCountry, "activeUsersGroupByCountry");
        this.activeUsersGroupByCountry = activeUsersGroupByCountry;
        return this;
    }

    /**
     * Amplitude API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
     */
    public SourceAmplitude withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Amplitude data region server
     */
    public SourceAmplitude withDataRegion(DataRegion dataRegion) {
        Utils.checkNotNull(dataRegion, "dataRegion");
        this.dataRegion = Optional.ofNullable(dataRegion);
        return this;
    }

    /**
     * Amplitude data region server
     */
    public SourceAmplitude withDataRegion(Optional<? extends DataRegion> dataRegion) {
        Utils.checkNotNull(dataRegion, "dataRegion");
        this.dataRegion = dataRegion;
        return this;
    }

    /**
     * According to &lt;a href="https://www.docs.developers.amplitude.com/analytics/apis/export-api/#considerations"&gt;Considerations&lt;/a&gt; too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.
     */
    public SourceAmplitude withRequestTimeRange(long requestTimeRange) {
        Utils.checkNotNull(requestTimeRange, "requestTimeRange");
        this.requestTimeRange = Optional.ofNullable(requestTimeRange);
        return this;
    }

    /**
     * According to &lt;a href="https://www.docs.developers.amplitude.com/analytics/apis/export-api/#considerations"&gt;Considerations&lt;/a&gt; too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.
     */
    public SourceAmplitude withRequestTimeRange(Optional<Long> requestTimeRange) {
        Utils.checkNotNull(requestTimeRange, "requestTimeRange");
        this.requestTimeRange = requestTimeRange;
        return this;
    }

    /**
     * Amplitude Secret Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
     */
    public SourceAmplitude withSecretKey(String secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = secretKey;
        return this;
    }

    /**
     * UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    public SourceAmplitude withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAmplitude other = (SourceAmplitude) o;
        return 
            Objects.deepEquals(this.activeUsersGroupByCountry, other.activeUsersGroupByCountry) &&
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.dataRegion, other.dataRegion) &&
            Objects.deepEquals(this.requestTimeRange, other.requestTimeRange) &&
            Objects.deepEquals(this.secretKey, other.secretKey) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            activeUsersGroupByCountry,
            apiKey,
            dataRegion,
            requestTimeRange,
            secretKey,
            sourceType,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceAmplitude.class,
                "activeUsersGroupByCountry", activeUsersGroupByCountry,
                "apiKey", apiKey,
                "dataRegion", dataRegion,
                "requestTimeRange", requestTimeRange,
                "secretKey", secretKey,
                "sourceType", sourceType,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> activeUsersGroupByCountry;
 
        private String apiKey;
 
        private Optional<? extends DataRegion> dataRegion;
 
        private Optional<Long> requestTimeRange;
 
        private String secretKey;
 
        private OffsetDateTime startDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * According to &lt;a href="https://amplitude.com/docs/apis/analytics/dashboard-rest#query-parameters"&gt;Considerations&lt;/a&gt; the grouping by `Country` is optional, if you're facing issues fetching the stream, or checking the connection please set this to `False` instead.
         */
        public Builder activeUsersGroupByCountry(boolean activeUsersGroupByCountry) {
            Utils.checkNotNull(activeUsersGroupByCountry, "activeUsersGroupByCountry");
            this.activeUsersGroupByCountry = Optional.ofNullable(activeUsersGroupByCountry);
            return this;
        }

        /**
         * According to &lt;a href="https://amplitude.com/docs/apis/analytics/dashboard-rest#query-parameters"&gt;Considerations&lt;/a&gt; the grouping by `Country` is optional, if you're facing issues fetching the stream, or checking the connection please set this to `False` instead.
         */
        public Builder activeUsersGroupByCountry(Optional<Boolean> activeUsersGroupByCountry) {
            Utils.checkNotNull(activeUsersGroupByCountry, "activeUsersGroupByCountry");
            this.activeUsersGroupByCountry = activeUsersGroupByCountry;
            return this;
        }

        /**
         * Amplitude API Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
         */
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Amplitude data region server
         */
        public Builder dataRegion(DataRegion dataRegion) {
            Utils.checkNotNull(dataRegion, "dataRegion");
            this.dataRegion = Optional.ofNullable(dataRegion);
            return this;
        }

        /**
         * Amplitude data region server
         */
        public Builder dataRegion(Optional<? extends DataRegion> dataRegion) {
            Utils.checkNotNull(dataRegion, "dataRegion");
            this.dataRegion = dataRegion;
            return this;
        }

        /**
         * According to &lt;a href="https://www.docs.developers.amplitude.com/analytics/apis/export-api/#considerations"&gt;Considerations&lt;/a&gt; too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.
         */
        public Builder requestTimeRange(long requestTimeRange) {
            Utils.checkNotNull(requestTimeRange, "requestTimeRange");
            this.requestTimeRange = Optional.ofNullable(requestTimeRange);
            return this;
        }

        /**
         * According to &lt;a href="https://www.docs.developers.amplitude.com/analytics/apis/export-api/#considerations"&gt;Considerations&lt;/a&gt; too big time range in request can cause a timeout error. In this case, set shorter time interval in hours.
         */
        public Builder requestTimeRange(Optional<Long> requestTimeRange) {
            Utils.checkNotNull(requestTimeRange, "requestTimeRange");
            this.requestTimeRange = requestTimeRange;
            return this;
        }

        /**
         * Amplitude Secret Key. See the &lt;a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide"&gt;setup guide&lt;/a&gt; for more information on how to obtain this key.
         */
        public Builder secretKey(String secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = secretKey;
            return this;
        }

        /**
         * UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public SourceAmplitude build() {
            if (activeUsersGroupByCountry == null) {
                activeUsersGroupByCountry = _SINGLETON_VALUE_ActiveUsersGroupByCountry.value();
            }
            if (dataRegion == null) {
                dataRegion = _SINGLETON_VALUE_DataRegion.value();
            }
            if (requestTimeRange == null) {
                requestTimeRange = _SINGLETON_VALUE_RequestTimeRange.value();
            }            return new SourceAmplitude(
                activeUsersGroupByCountry,
                apiKey,
                dataRegion,
                requestTimeRange,
                secretKey,
                startDate);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ActiveUsersGroupByCountry =
                new LazySingletonValue<>(
                        "active_users_group_by_country",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends DataRegion>> _SINGLETON_VALUE_DataRegion =
                new LazySingletonValue<>(
                        "data_region",
                        "\"Standard Server\"",
                        new TypeReference<Optional<? extends DataRegion>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_RequestTimeRange =
                new LazySingletonValue<>(
                        "request_time_range",
                        "24",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Amplitude> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"amplitude\"",
                        new TypeReference<Amplitude>() {});
    }
}

