/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class SourceSalesforce {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    private Optional<? extends AuthType> authType;

    /**
     * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client ID&lt;/a&gt;
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client secret&lt;/a&gt;
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * Toggle to use Bulk API (this might cause empty fields for some streams)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("force_use_bulk_api")
    private Optional<? extends Boolean> forceUseBulkApi;

    /**
     * Toggle if you're using a &lt;a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&amp;type=5"&gt;Salesforce Sandbox&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_sandbox")
    private Optional<? extends Boolean> isSandbox;

    /**
     * Enter your application's &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm"&gt;Salesforce Refresh Token&lt;/a&gt; used for Airbyte to access your Salesforce account.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    @JsonProperty("sourceType")
    private SourceSalesforceSalesforce sourceType;

    /**
     * Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<? extends OffsetDateTime> startDate;

    /**
     * Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (&gt;1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streams_criteria")
    private Optional<? extends java.util.List<StreamsCriteria>> streamsCriteria;

    public SourceSalesforce(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("force_use_bulk_api") Optional<? extends Boolean> forceUseBulkApi,
            @JsonProperty("is_sandbox") Optional<? extends Boolean> isSandbox,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("start_date") Optional<? extends OffsetDateTime> startDate,
            @JsonProperty("streams_criteria") Optional<? extends java.util.List<StreamsCriteria>> streamsCriteria) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(forceUseBulkApi, "forceUseBulkApi");
        Utils.checkNotNull(isSandbox, "isSandbox");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(streamsCriteria, "streamsCriteria");
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.forceUseBulkApi = forceUseBulkApi;
        this.isSandbox = isSandbox;
        this.refreshToken = refreshToken;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.streamsCriteria = streamsCriteria;
    }

    public Optional<? extends AuthType> authType() {
        return authType;
    }

    /**
     * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client ID&lt;/a&gt;
     */
    public String clientId() {
        return clientId;
    }

    /**
     * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client secret&lt;/a&gt;
     */
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * Toggle to use Bulk API (this might cause empty fields for some streams)
     */
    public Optional<? extends Boolean> forceUseBulkApi() {
        return forceUseBulkApi;
    }

    /**
     * Toggle if you're using a &lt;a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&amp;type=5"&gt;Salesforce Sandbox&lt;/a&gt;
     */
    public Optional<? extends Boolean> isSandbox() {
        return isSandbox;
    }

    /**
     * Enter your application's &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm"&gt;Salesforce Refresh Token&lt;/a&gt; used for Airbyte to access your Salesforce account.
     */
    public String refreshToken() {
        return refreshToken;
    }

    public SourceSalesforceSalesforce sourceType() {
        return sourceType;
    }

    /**
     * Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.
     */
    public Optional<? extends OffsetDateTime> startDate() {
        return startDate;
    }

    /**
     * Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (&gt;1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.
     */
    public Optional<? extends java.util.List<StreamsCriteria>> streamsCriteria() {
        return streamsCriteria;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client ID&lt;/a&gt;
     */
    public SourceSalesforce withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client secret&lt;/a&gt;
     */
    public SourceSalesforce withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Toggle to use Bulk API (this might cause empty fields for some streams)
     */
    public SourceSalesforce withForceUseBulkApi(boolean forceUseBulkApi) {
        Utils.checkNotNull(forceUseBulkApi, "forceUseBulkApi");
        this.forceUseBulkApi = Optional.ofNullable(forceUseBulkApi);
        return this;
    }

    /**
     * Toggle to use Bulk API (this might cause empty fields for some streams)
     */
    public SourceSalesforce withForceUseBulkApi(Optional<? extends Boolean> forceUseBulkApi) {
        Utils.checkNotNull(forceUseBulkApi, "forceUseBulkApi");
        this.forceUseBulkApi = forceUseBulkApi;
        return this;
    }

    /**
     * Toggle if you're using a &lt;a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&amp;type=5"&gt;Salesforce Sandbox&lt;/a&gt;
     */
    public SourceSalesforce withIsSandbox(boolean isSandbox) {
        Utils.checkNotNull(isSandbox, "isSandbox");
        this.isSandbox = Optional.ofNullable(isSandbox);
        return this;
    }

    /**
     * Toggle if you're using a &lt;a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&amp;type=5"&gt;Salesforce Sandbox&lt;/a&gt;
     */
    public SourceSalesforce withIsSandbox(Optional<? extends Boolean> isSandbox) {
        Utils.checkNotNull(isSandbox, "isSandbox");
        this.isSandbox = isSandbox;
        return this;
    }

    /**
     * Enter your application's &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm"&gt;Salesforce Refresh Token&lt;/a&gt; used for Airbyte to access your Salesforce account.
     */
    public SourceSalesforce withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.
     */
    public SourceSalesforce withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.
     */
    public SourceSalesforce withStartDate(Optional<? extends OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (&gt;1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.
     */
    public SourceSalesforce withStreamsCriteria(java.util.List<StreamsCriteria> streamsCriteria) {
        Utils.checkNotNull(streamsCriteria, "streamsCriteria");
        this.streamsCriteria = Optional.ofNullable(streamsCriteria);
        return this;
    }

    /**
     * Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (&gt;1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.
     */
    public SourceSalesforce withStreamsCriteria(Optional<? extends java.util.List<StreamsCriteria>> streamsCriteria) {
        Utils.checkNotNull(streamsCriteria, "streamsCriteria");
        this.streamsCriteria = streamsCriteria;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceSalesforce other = (SourceSalesforce) o;
        return 
            java.util.Objects.deepEquals(this.authType, other.authType) &&
            java.util.Objects.deepEquals(this.clientId, other.clientId) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.forceUseBulkApi, other.forceUseBulkApi) &&
            java.util.Objects.deepEquals(this.isSandbox, other.isSandbox) &&
            java.util.Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.streamsCriteria, other.streamsCriteria);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authType,
            clientId,
            clientSecret,
            forceUseBulkApi,
            isSandbox,
            refreshToken,
            sourceType,
            startDate,
            streamsCriteria);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceSalesforce.class,
                "authType", authType,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "forceUseBulkApi", forceUseBulkApi,
                "isSandbox", isSandbox,
                "refreshToken", refreshToken,
                "sourceType", sourceType,
                "startDate", startDate,
                "streamsCriteria", streamsCriteria);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<? extends Boolean> forceUseBulkApi;
 
        private Optional<? extends Boolean> isSandbox;
 
        private String refreshToken;
 
        private Optional<? extends OffsetDateTime> startDate = Optional.empty();
 
        private Optional<? extends java.util.List<StreamsCriteria>> streamsCriteria = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client ID&lt;/a&gt;
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Enter your Salesforce developer application's &lt;a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG"&gt;Client secret&lt;/a&gt;
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * Toggle to use Bulk API (this might cause empty fields for some streams)
         */
        public Builder forceUseBulkApi(boolean forceUseBulkApi) {
            Utils.checkNotNull(forceUseBulkApi, "forceUseBulkApi");
            this.forceUseBulkApi = Optional.ofNullable(forceUseBulkApi);
            return this;
        }

        /**
         * Toggle to use Bulk API (this might cause empty fields for some streams)
         */
        public Builder forceUseBulkApi(Optional<? extends Boolean> forceUseBulkApi) {
            Utils.checkNotNull(forceUseBulkApi, "forceUseBulkApi");
            this.forceUseBulkApi = forceUseBulkApi;
            return this;
        }

        /**
         * Toggle if you're using a &lt;a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&amp;type=5"&gt;Salesforce Sandbox&lt;/a&gt;
         */
        public Builder isSandbox(boolean isSandbox) {
            Utils.checkNotNull(isSandbox, "isSandbox");
            this.isSandbox = Optional.ofNullable(isSandbox);
            return this;
        }

        /**
         * Toggle if you're using a &lt;a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&amp;type=5"&gt;Salesforce Sandbox&lt;/a&gt;
         */
        public Builder isSandbox(Optional<? extends Boolean> isSandbox) {
            Utils.checkNotNull(isSandbox, "isSandbox");
            this.isSandbox = isSandbox;
            return this;
        }

        /**
         * Enter your application's &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm"&gt;Salesforce Refresh Token&lt;/a&gt; used for Airbyte to access your Salesforce account.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.
         */
        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.
         */
        public Builder startDate(Optional<? extends OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (&gt;1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.
         */
        public Builder streamsCriteria(java.util.List<StreamsCriteria> streamsCriteria) {
            Utils.checkNotNull(streamsCriteria, "streamsCriteria");
            this.streamsCriteria = Optional.ofNullable(streamsCriteria);
            return this;
        }

        /**
         * Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (&gt;1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.
         */
        public Builder streamsCriteria(Optional<? extends java.util.List<StreamsCriteria>> streamsCriteria) {
            Utils.checkNotNull(streamsCriteria, "streamsCriteria");
            this.streamsCriteria = streamsCriteria;
            return this;
        }
        
        public SourceSalesforce build() {
            if (forceUseBulkApi == null) {
                forceUseBulkApi = _SINGLETON_VALUE_ForceUseBulkApi.value();
            }
            if (isSandbox == null) {
                isSandbox = _SINGLETON_VALUE_IsSandbox.value();
            }
            return new SourceSalesforce(
                clientId,
                clientSecret,
                forceUseBulkApi,
                isSandbox,
                refreshToken,
                startDate,
                streamsCriteria);
        }

        private static final LazySingletonValue<Optional<? extends AuthType>> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"Client\"",
                        new TypeReference<Optional<? extends AuthType>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_ForceUseBulkApi =
                new LazySingletonValue<>(
                        "force_use_bulk_api",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_IsSandbox =
                new LazySingletonValue<>(
                        "is_sandbox",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<SourceSalesforceSalesforce> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"salesforce\"",
                        new TypeReference<SourceSalesforceSalesforce>() {});
    }
}

