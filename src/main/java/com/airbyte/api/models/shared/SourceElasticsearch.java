/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SourceElasticsearch {

    /**
     * The type of authentication to be used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authenticationMethod")
    private Optional<? extends SourceElasticsearchAuthenticationMethod> authenticationMethod;

    /**
     * The full url of the Elasticsearch server
     */
    @JsonProperty("endpoint")
    private String endpoint;

    @JsonProperty("sourceType")
    private SourceElasticsearchElasticsearch sourceType;

    @JsonCreator
    public SourceElasticsearch(
            @JsonProperty("authenticationMethod") Optional<? extends SourceElasticsearchAuthenticationMethod> authenticationMethod,
            @JsonProperty("endpoint") String endpoint) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        Utils.checkNotNull(endpoint, "endpoint");
        this.authenticationMethod = authenticationMethod;
        this.endpoint = endpoint;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }
    
    public SourceElasticsearch(
            String endpoint) {
        this(Optional.empty(), endpoint);
    }

    /**
     * The type of authentication to be used
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceElasticsearchAuthenticationMethod> authenticationMethod() {
        return (Optional<SourceElasticsearchAuthenticationMethod>) authenticationMethod;
    }

    /**
     * The full url of the Elasticsearch server
     */
    @JsonIgnore
    public String endpoint() {
        return endpoint;
    }

    @JsonIgnore
    public SourceElasticsearchElasticsearch sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The type of authentication to be used
     */
    public SourceElasticsearch withAuthenticationMethod(SourceElasticsearchAuthenticationMethod authenticationMethod) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        this.authenticationMethod = Optional.ofNullable(authenticationMethod);
        return this;
    }

    /**
     * The type of authentication to be used
     */
    public SourceElasticsearch withAuthenticationMethod(Optional<? extends SourceElasticsearchAuthenticationMethod> authenticationMethod) {
        Utils.checkNotNull(authenticationMethod, "authenticationMethod");
        this.authenticationMethod = authenticationMethod;
        return this;
    }

    /**
     * The full url of the Elasticsearch server
     */
    public SourceElasticsearch withEndpoint(String endpoint) {
        Utils.checkNotNull(endpoint, "endpoint");
        this.endpoint = endpoint;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceElasticsearch other = (SourceElasticsearch) o;
        return 
            Objects.deepEquals(this.authenticationMethod, other.authenticationMethod) &&
            Objects.deepEquals(this.endpoint, other.endpoint) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authenticationMethod,
            endpoint,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceElasticsearch.class,
                "authenticationMethod", authenticationMethod,
                "endpoint", endpoint,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceElasticsearchAuthenticationMethod> authenticationMethod = Optional.empty();
 
        private String endpoint;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of authentication to be used
         */
        public Builder authenticationMethod(SourceElasticsearchAuthenticationMethod authenticationMethod) {
            Utils.checkNotNull(authenticationMethod, "authenticationMethod");
            this.authenticationMethod = Optional.ofNullable(authenticationMethod);
            return this;
        }

        /**
         * The type of authentication to be used
         */
        public Builder authenticationMethod(Optional<? extends SourceElasticsearchAuthenticationMethod> authenticationMethod) {
            Utils.checkNotNull(authenticationMethod, "authenticationMethod");
            this.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * The full url of the Elasticsearch server
         */
        public Builder endpoint(String endpoint) {
            Utils.checkNotNull(endpoint, "endpoint");
            this.endpoint = endpoint;
            return this;
        }
        
        public SourceElasticsearch build() {
            return new SourceElasticsearch(
                authenticationMethod,
                endpoint);
        }

        private static final LazySingletonValue<SourceElasticsearchElasticsearch> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"elasticsearch\"",
                        new TypeReference<SourceElasticsearchElasticsearch>() {});
    }
}
