/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SourceCimis {

    @JsonProperty("api_key")
    private String apiKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daily_data_items")
    private Optional<? extends List<Object>> dailyDataItems;

    @JsonProperty("end_date")
    private OffsetDateTime endDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly_data_items")
    private Optional<? extends List<Object>> hourlyDataItems;

    @JsonProperty("sourceType")
    private Cimis sourceType;

    @JsonProperty("start_date")
    private OffsetDateTime startDate;

    @JsonProperty("targets")
    private List<Object> targets;

    @JsonProperty("targets_type")
    private TargetsType targetsType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit_of_measure")
    private Optional<? extends UnitOfMeasure> unitOfMeasure;

    @JsonCreator
    public SourceCimis(
            @JsonProperty("api_key") String apiKey,
            @JsonProperty("daily_data_items") Optional<? extends List<Object>> dailyDataItems,
            @JsonProperty("end_date") OffsetDateTime endDate,
            @JsonProperty("hourly_data_items") Optional<? extends List<Object>> hourlyDataItems,
            @JsonProperty("start_date") OffsetDateTime startDate,
            @JsonProperty("targets") List<Object> targets,
            @JsonProperty("targets_type") TargetsType targetsType,
            @JsonProperty("unit_of_measure") Optional<? extends UnitOfMeasure> unitOfMeasure) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(dailyDataItems, "dailyDataItems");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(hourlyDataItems, "hourlyDataItems");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(targets, "targets");
        Utils.checkNotNull(targetsType, "targetsType");
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.apiKey = apiKey;
        this.dailyDataItems = dailyDataItems;
        this.endDate = endDate;
        this.hourlyDataItems = hourlyDataItems;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.startDate = startDate;
        this.targets = targets;
        this.targetsType = targetsType;
        this.unitOfMeasure = unitOfMeasure;
    }
    
    public SourceCimis(
            String apiKey,
            OffsetDateTime endDate,
            OffsetDateTime startDate,
            List<Object> targets,
            TargetsType targetsType) {
        this(apiKey, Optional.empty(), endDate, Optional.empty(), startDate, targets, targetsType, Optional.empty());
    }

    @JsonIgnore
    public String apiKey() {
        return apiKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> dailyDataItems() {
        return (Optional<List<Object>>) dailyDataItems;
    }

    @JsonIgnore
    public OffsetDateTime endDate() {
        return endDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> hourlyDataItems() {
        return (Optional<List<Object>>) hourlyDataItems;
    }

    @JsonIgnore
    public Cimis sourceType() {
        return sourceType;
    }

    @JsonIgnore
    public OffsetDateTime startDate() {
        return startDate;
    }

    @JsonIgnore
    public List<Object> targets() {
        return targets;
    }

    @JsonIgnore
    public TargetsType targetsType() {
        return targetsType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UnitOfMeasure> unitOfMeasure() {
        return (Optional<UnitOfMeasure>) unitOfMeasure;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceCimis withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    public SourceCimis withDailyDataItems(List<Object> dailyDataItems) {
        Utils.checkNotNull(dailyDataItems, "dailyDataItems");
        this.dailyDataItems = Optional.ofNullable(dailyDataItems);
        return this;
    }

    public SourceCimis withDailyDataItems(Optional<? extends List<Object>> dailyDataItems) {
        Utils.checkNotNull(dailyDataItems, "dailyDataItems");
        this.dailyDataItems = dailyDataItems;
        return this;
    }

    public SourceCimis withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    public SourceCimis withHourlyDataItems(List<Object> hourlyDataItems) {
        Utils.checkNotNull(hourlyDataItems, "hourlyDataItems");
        this.hourlyDataItems = Optional.ofNullable(hourlyDataItems);
        return this;
    }

    public SourceCimis withHourlyDataItems(Optional<? extends List<Object>> hourlyDataItems) {
        Utils.checkNotNull(hourlyDataItems, "hourlyDataItems");
        this.hourlyDataItems = hourlyDataItems;
        return this;
    }

    public SourceCimis withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    public SourceCimis withTargets(List<Object> targets) {
        Utils.checkNotNull(targets, "targets");
        this.targets = targets;
        return this;
    }

    public SourceCimis withTargetsType(TargetsType targetsType) {
        Utils.checkNotNull(targetsType, "targetsType");
        this.targetsType = targetsType;
        return this;
    }

    public SourceCimis withUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = Optional.ofNullable(unitOfMeasure);
        return this;
    }

    public SourceCimis withUnitOfMeasure(Optional<? extends UnitOfMeasure> unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = unitOfMeasure;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceCimis other = (SourceCimis) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.dailyDataItems, other.dailyDataItems) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.hourlyDataItems, other.hourlyDataItems) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.targets, other.targets) &&
            Objects.deepEquals(this.targetsType, other.targetsType) &&
            Objects.deepEquals(this.unitOfMeasure, other.unitOfMeasure);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            dailyDataItems,
            endDate,
            hourlyDataItems,
            sourceType,
            startDate,
            targets,
            targetsType,
            unitOfMeasure);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceCimis.class,
                "apiKey", apiKey,
                "dailyDataItems", dailyDataItems,
                "endDate", endDate,
                "hourlyDataItems", hourlyDataItems,
                "sourceType", sourceType,
                "startDate", startDate,
                "targets", targets,
                "targetsType", targetsType,
                "unitOfMeasure", unitOfMeasure);
    }
    
    public final static class Builder {
 
        private String apiKey;
 
        private Optional<? extends List<Object>> dailyDataItems = Optional.empty();
 
        private OffsetDateTime endDate;
 
        private Optional<? extends List<Object>> hourlyDataItems = Optional.empty();
 
        private OffsetDateTime startDate;
 
        private List<Object> targets;
 
        private TargetsType targetsType;
 
        private Optional<? extends UnitOfMeasure> unitOfMeasure = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        public Builder dailyDataItems(List<Object> dailyDataItems) {
            Utils.checkNotNull(dailyDataItems, "dailyDataItems");
            this.dailyDataItems = Optional.ofNullable(dailyDataItems);
            return this;
        }

        public Builder dailyDataItems(Optional<? extends List<Object>> dailyDataItems) {
            Utils.checkNotNull(dailyDataItems, "dailyDataItems");
            this.dailyDataItems = dailyDataItems;
            return this;
        }

        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        public Builder hourlyDataItems(List<Object> hourlyDataItems) {
            Utils.checkNotNull(hourlyDataItems, "hourlyDataItems");
            this.hourlyDataItems = Optional.ofNullable(hourlyDataItems);
            return this;
        }

        public Builder hourlyDataItems(Optional<? extends List<Object>> hourlyDataItems) {
            Utils.checkNotNull(hourlyDataItems, "hourlyDataItems");
            this.hourlyDataItems = hourlyDataItems;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        public Builder targets(List<Object> targets) {
            Utils.checkNotNull(targets, "targets");
            this.targets = targets;
            return this;
        }

        public Builder targetsType(TargetsType targetsType) {
            Utils.checkNotNull(targetsType, "targetsType");
            this.targetsType = targetsType;
            return this;
        }

        public Builder unitOfMeasure(UnitOfMeasure unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = Optional.ofNullable(unitOfMeasure);
            return this;
        }

        public Builder unitOfMeasure(Optional<? extends UnitOfMeasure> unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }
        
        public SourceCimis build() {
            return new SourceCimis(
                apiKey,
                dailyDataItems,
                endDate,
                hourlyDataItems,
                startDate,
                targets,
                targetsType,
                unitOfMeasure);
        }

        private static final LazySingletonValue<Cimis> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"cimis\"",
                        new TypeReference<Cimis>() {});
    }
}

