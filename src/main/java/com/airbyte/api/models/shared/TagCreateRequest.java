/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class TagCreateRequest {

    @JsonProperty("color")
    private String color;

    @JsonProperty("name")
    private String name;

    @JsonProperty("workspaceId")
    private String workspaceId;

    @JsonCreator
    public TagCreateRequest(
            @JsonProperty("color") String color,
            @JsonProperty("name") String name,
            @JsonProperty("workspaceId") String workspaceId) {
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.color = color;
        this.name = name;
        this.workspaceId = workspaceId;
    }

    @JsonIgnore
    public String color() {
        return color;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public TagCreateRequest withColor(String color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public TagCreateRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public TagCreateRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TagCreateRequest other = (TagCreateRequest) o;
        return 
            Objects.deepEquals(this.color, other.color) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            color,
            name,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TagCreateRequest.class,
                "color", color,
                "name", name,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private String color;
 
        private String name;
 
        private String workspaceId;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder color(String color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public TagCreateRequest build() {
            return new TagCreateRequest(
                color,
                name,
                workspaceId);
        }
    }
}
