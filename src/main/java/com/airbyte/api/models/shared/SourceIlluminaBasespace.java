/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class SourceIlluminaBasespace {

    /**
     * BaseSpace access token. Instructions for obtaining your access token can be found in the BaseSpace Developer Documentation.
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * Domain name of the BaseSpace instance (e.g., euw2.sh.basespace.illumina.com)
     */
    @JsonProperty("domain")
    private String domain;

    @JsonProperty("sourceType")
    private IlluminaBasespace sourceType;

    /**
     * Providing a user ID restricts the returned data to what that user can access. If you use the default ('current'), all data accessible to the user associated with the API key will be shown.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    private Optional<String> user;

    @JsonCreator
    public SourceIlluminaBasespace(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("domain") String domain,
            @JsonProperty("user") Optional<String> user) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(user, "user");
        this.accessToken = accessToken;
        this.domain = domain;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
        this.user = user;
    }
    
    public SourceIlluminaBasespace(
            String accessToken,
            String domain) {
        this(accessToken, domain, Optional.empty());
    }

    /**
     * BaseSpace access token. Instructions for obtaining your access token can be found in the BaseSpace Developer Documentation.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * Domain name of the BaseSpace instance (e.g., euw2.sh.basespace.illumina.com)
     */
    @JsonIgnore
    public String domain() {
        return domain;
    }

    @JsonIgnore
    public IlluminaBasespace sourceType() {
        return sourceType;
    }

    /**
     * Providing a user ID restricts the returned data to what that user can access. If you use the default ('current'), all data accessible to the user associated with the API key will be shown.
     */
    @JsonIgnore
    public Optional<String> user() {
        return user;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * BaseSpace access token. Instructions for obtaining your access token can be found in the BaseSpace Developer Documentation.
     */
    public SourceIlluminaBasespace withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Domain name of the BaseSpace instance (e.g., euw2.sh.basespace.illumina.com)
     */
    public SourceIlluminaBasespace withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * Providing a user ID restricts the returned data to what that user can access. If you use the default ('current'), all data accessible to the user associated with the API key will be shown.
     */
    public SourceIlluminaBasespace withUser(String user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    /**
     * Providing a user ID restricts the returned data to what that user can access. If you use the default ('current'), all data accessible to the user associated with the API key will be shown.
     */
    public SourceIlluminaBasespace withUser(Optional<String> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceIlluminaBasespace other = (SourceIlluminaBasespace) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.sourceType, other.sourceType) &&
            Objects.deepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            domain,
            sourceType,
            user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceIlluminaBasespace.class,
                "accessToken", accessToken,
                "domain", domain,
                "sourceType", sourceType,
                "user", user);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private String domain;
 
        private Optional<String> user;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * BaseSpace access token. Instructions for obtaining your access token can be found in the BaseSpace Developer Documentation.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Domain name of the BaseSpace instance (e.g., euw2.sh.basespace.illumina.com)
         */
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        /**
         * Providing a user ID restricts the returned data to what that user can access. If you use the default ('current'), all data accessible to the user associated with the API key will be shown.
         */
        public Builder user(String user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        /**
         * Providing a user ID restricts the returned data to what that user can access. If you use the default ('current'), all data accessible to the user associated with the API key will be shown.
         */
        public Builder user(Optional<String> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }
        
        public SourceIlluminaBasespace build() {
            if (user == null) {
                user = _SINGLETON_VALUE_User.value();
            }            return new SourceIlluminaBasespace(
                accessToken,
                domain,
                user);
        }

        private static final LazySingletonValue<IlluminaBasespace> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"illumina-basespace\"",
                        new TypeReference<IlluminaBasespace>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_User =
                new LazySingletonValue<>(
                        "user",
                        "\"current\"",
                        new TypeReference<Optional<String>>() {});
    }
}

