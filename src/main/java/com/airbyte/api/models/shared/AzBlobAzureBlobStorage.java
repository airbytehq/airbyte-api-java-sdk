/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class AzBlobAzureBlobStorage {

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sas_token")
    private Optional<String> sasToken;

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shared_key")
    private Optional<String> sharedKey;

    @JsonProperty("storage")
    private SourceFileSchemasProviderStorage storage;

    /**
     * The globally unique name of the storage account that the desired blob sits within. See &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank"&gt;here&lt;/a&gt; for more details.
     */
    @JsonProperty("storage_account")
    private String storageAccount;

    @JsonCreator
    public AzBlobAzureBlobStorage(
            @JsonProperty("sas_token") Optional<String> sasToken,
            @JsonProperty("shared_key") Optional<String> sharedKey,
            @JsonProperty("storage_account") String storageAccount) {
        Utils.checkNotNull(sasToken, "sasToken");
        Utils.checkNotNull(sharedKey, "sharedKey");
        Utils.checkNotNull(storageAccount, "storageAccount");
        this.sasToken = sasToken;
        this.sharedKey = sharedKey;
        this.storage = Builder._SINGLETON_VALUE_Storage.value();
        this.storageAccount = storageAccount;
    }
    
    public AzBlobAzureBlobStorage(
            String storageAccount) {
        this(Optional.empty(), Optional.empty(), storageAccount);
    }

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.
     */
    @JsonIgnore
    public Optional<String> sasToken() {
        return sasToken;
    }

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.
     */
    @JsonIgnore
    public Optional<String> sharedKey() {
        return sharedKey;
    }

    @JsonIgnore
    public SourceFileSchemasProviderStorage storage() {
        return storage;
    }

    /**
     * The globally unique name of the storage account that the desired blob sits within. See &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank"&gt;here&lt;/a&gt; for more details.
     */
    @JsonIgnore
    public String storageAccount() {
        return storageAccount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.
     */
    public AzBlobAzureBlobStorage withSasToken(String sasToken) {
        Utils.checkNotNull(sasToken, "sasToken");
        this.sasToken = Optional.ofNullable(sasToken);
        return this;
    }

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.
     */
    public AzBlobAzureBlobStorage withSasToken(Optional<String> sasToken) {
        Utils.checkNotNull(sasToken, "sasToken");
        this.sasToken = sasToken;
        return this;
    }

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.
     */
    public AzBlobAzureBlobStorage withSharedKey(String sharedKey) {
        Utils.checkNotNull(sharedKey, "sharedKey");
        this.sharedKey = Optional.ofNullable(sharedKey);
        return this;
    }

    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.
     */
    public AzBlobAzureBlobStorage withSharedKey(Optional<String> sharedKey) {
        Utils.checkNotNull(sharedKey, "sharedKey");
        this.sharedKey = sharedKey;
        return this;
    }

    /**
     * The globally unique name of the storage account that the desired blob sits within. See &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank"&gt;here&lt;/a&gt; for more details.
     */
    public AzBlobAzureBlobStorage withStorageAccount(String storageAccount) {
        Utils.checkNotNull(storageAccount, "storageAccount");
        this.storageAccount = storageAccount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AzBlobAzureBlobStorage other = (AzBlobAzureBlobStorage) o;
        return 
            Objects.deepEquals(this.sasToken, other.sasToken) &&
            Objects.deepEquals(this.sharedKey, other.sharedKey) &&
            Objects.deepEquals(this.storage, other.storage) &&
            Objects.deepEquals(this.storageAccount, other.storageAccount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sasToken,
            sharedKey,
            storage,
            storageAccount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AzBlobAzureBlobStorage.class,
                "sasToken", sasToken,
                "sharedKey", sharedKey,
                "storage", storage,
                "storageAccount", storageAccount);
    }
    
    public final static class Builder {
 
        private Optional<String> sasToken = Optional.empty();
 
        private Optional<String> sharedKey = Optional.empty();
 
        private String storageAccount;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.
         */
        public Builder sasToken(String sasToken) {
            Utils.checkNotNull(sasToken, "sasToken");
            this.sasToken = Optional.ofNullable(sasToken);
            return this;
        }

        /**
         * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.
         */
        public Builder sasToken(Optional<String> sasToken) {
            Utils.checkNotNull(sasToken, "sasToken");
            this.sasToken = sasToken;
            return this;
        }

        /**
         * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.
         */
        public Builder sharedKey(String sharedKey) {
            Utils.checkNotNull(sharedKey, "sharedKey");
            this.sharedKey = Optional.ofNullable(sharedKey);
            return this;
        }

        /**
         * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.
         */
        public Builder sharedKey(Optional<String> sharedKey) {
            Utils.checkNotNull(sharedKey, "sharedKey");
            this.sharedKey = sharedKey;
            return this;
        }

        /**
         * The globally unique name of the storage account that the desired blob sits within. See &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank"&gt;here&lt;/a&gt; for more details.
         */
        public Builder storageAccount(String storageAccount) {
            Utils.checkNotNull(storageAccount, "storageAccount");
            this.storageAccount = storageAccount;
            return this;
        }
        
        public AzBlobAzureBlobStorage build() {
            return new AzBlobAzureBlobStorage(
                sasToken,
                sharedKey,
                storageAccount);
        }

        private static final LazySingletonValue<SourceFileSchemasProviderStorage> _SINGLETON_VALUE_Storage =
                new LazySingletonValue<>(
                        "storage",
                        "\"AzBlob\"",
                        new TypeReference<SourceFileSchemasProviderStorage>() {});
    }
}
