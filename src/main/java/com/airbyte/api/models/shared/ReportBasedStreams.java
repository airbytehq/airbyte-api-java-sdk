/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class ReportBasedStreams {

    @JsonProperty("auth_type")
    private Raas authType;

    @JsonProperty("password")
    private String password;

    /**
     * Report IDs can be found by clicking the three dots on the right side of the report &gt; Web Service &gt; View URLs &gt; in JSON url copy everything between Workday tenant/ and ?format=json.
     */
    @JsonProperty("report_ids")
    private List<Object> reportIds;

    @JsonProperty("username")
    private String username;

    @JsonCreator
    public ReportBasedStreams(
            @JsonProperty("password") String password,
            @JsonProperty("report_ids") List<Object> reportIds,
            @JsonProperty("username") String username) {
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(reportIds, "reportIds");
        Utils.checkNotNull(username, "username");
        this.authType = Builder._SINGLETON_VALUE_AuthType.value();
        this.password = password;
        this.reportIds = reportIds;
        this.username = username;
    }

    @JsonIgnore
    public Raas authType() {
        return authType;
    }

    @JsonIgnore
    public String password() {
        return password;
    }

    /**
     * Report IDs can be found by clicking the three dots on the right side of the report &gt; Web Service &gt; View URLs &gt; in JSON url copy everything between Workday tenant/ and ?format=json.
     */
    @JsonIgnore
    public List<Object> reportIds() {
        return reportIds;
    }

    @JsonIgnore
    public String username() {
        return username;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public ReportBasedStreams withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * Report IDs can be found by clicking the three dots on the right side of the report &gt; Web Service &gt; View URLs &gt; in JSON url copy everything between Workday tenant/ and ?format=json.
     */
    public ReportBasedStreams withReportIds(List<Object> reportIds) {
        Utils.checkNotNull(reportIds, "reportIds");
        this.reportIds = reportIds;
        return this;
    }

    public ReportBasedStreams withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportBasedStreams other = (ReportBasedStreams) o;
        return 
            Objects.deepEquals(this.authType, other.authType) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.reportIds, other.reportIds) &&
            Objects.deepEquals(this.username, other.username);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authType,
            password,
            reportIds,
            username);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportBasedStreams.class,
                "authType", authType,
                "password", password,
                "reportIds", reportIds,
                "username", username);
    }
    
    public final static class Builder {
 
        private String password;
 
        private List<Object> reportIds;
 
        private String username;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * Report IDs can be found by clicking the three dots on the right side of the report &gt; Web Service &gt; View URLs &gt; in JSON url copy everything between Workday tenant/ and ?format=json.
         */
        public Builder reportIds(List<Object> reportIds) {
            Utils.checkNotNull(reportIds, "reportIds");
            this.reportIds = reportIds;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }
        
        public ReportBasedStreams build() {
            return new ReportBasedStreams(
                password,
                reportIds,
                username);
        }

        private static final LazySingletonValue<Raas> _SINGLETON_VALUE_AuthType =
                new LazySingletonValue<>(
                        "auth_type",
                        "\"RAAS\"",
                        new TypeReference<Raas>() {});
    }
}
