/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SourcePatchRequest {

    /**
     * The values required to configure the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    private Optional<? extends SourceConfiguration> configuration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Optional secretID obtained through the  OAuth redirect flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secretId")
    private Optional<String> secretId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspaceId")
    private Optional<String> workspaceId;

    @JsonCreator
    public SourcePatchRequest(
            @JsonProperty("configuration") Optional<? extends SourceConfiguration> configuration,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("secretId") Optional<String> secretId,
            @JsonProperty("workspaceId") Optional<String> workspaceId) {
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(secretId, "secretId");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.configuration = configuration;
        this.name = name;
        this.secretId = secretId;
        this.workspaceId = workspaceId;
    }
    
    public SourcePatchRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The values required to configure the source.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceConfiguration> configuration() {
        return (Optional<SourceConfiguration>) configuration;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Optional secretID obtained through the  OAuth redirect flow.
     */
    @JsonIgnore
    public Optional<String> secretId() {
        return secretId;
    }

    @JsonIgnore
    public Optional<String> workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The values required to configure the source.
     */
    public SourcePatchRequest withConfiguration(SourceConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = Optional.ofNullable(configuration);
        return this;
    }

    /**
     * The values required to configure the source.
     */
    public SourcePatchRequest withConfiguration(Optional<? extends SourceConfiguration> configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    public SourcePatchRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public SourcePatchRequest withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Optional secretID obtained through the  OAuth redirect flow.
     */
    public SourcePatchRequest withSecretId(String secretId) {
        Utils.checkNotNull(secretId, "secretId");
        this.secretId = Optional.ofNullable(secretId);
        return this;
    }

    /**
     * Optional secretID obtained through the  OAuth redirect flow.
     */
    public SourcePatchRequest withSecretId(Optional<String> secretId) {
        Utils.checkNotNull(secretId, "secretId");
        this.secretId = secretId;
        return this;
    }

    public SourcePatchRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = Optional.ofNullable(workspaceId);
        return this;
    }

    public SourcePatchRequest withWorkspaceId(Optional<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourcePatchRequest other = (SourcePatchRequest) o;
        return 
            Objects.deepEquals(this.configuration, other.configuration) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.secretId, other.secretId) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            configuration,
            name,
            secretId,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourcePatchRequest.class,
                "configuration", configuration,
                "name", name,
                "secretId", secretId,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceConfiguration> configuration = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> secretId = Optional.empty();
 
        private Optional<String> workspaceId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The values required to configure the source.
         */
        public Builder configuration(SourceConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        /**
         * The values required to configure the source.
         */
        public Builder configuration(Optional<? extends SourceConfiguration> configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Optional secretID obtained through the  OAuth redirect flow.
         */
        public Builder secretId(String secretId) {
            Utils.checkNotNull(secretId, "secretId");
            this.secretId = Optional.ofNullable(secretId);
            return this;
        }

        /**
         * Optional secretID obtained through the  OAuth redirect flow.
         */
        public Builder secretId(Optional<String> secretId) {
            Utils.checkNotNull(secretId, "secretId");
            this.secretId = secretId;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = Optional.ofNullable(workspaceId);
            return this;
        }

        public Builder workspaceId(Optional<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public SourcePatchRequest build() {
            return new SourcePatchRequest(
                configuration,
                name,
                secretId,
                workspaceId);
        }
    }
}

