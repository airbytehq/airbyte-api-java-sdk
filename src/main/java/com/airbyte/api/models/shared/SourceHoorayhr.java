/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.airbyte.api.models.shared;

import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class SourceHoorayhr {

    @JsonProperty("hoorayhrpassword")
    private String hoorayhrpassword;

    @JsonProperty("hoorayhrusername")
    private String hoorayhrusername;

    @JsonProperty("sourceType")
    private Hoorayhr sourceType;

    @JsonCreator
    public SourceHoorayhr(
            @JsonProperty("hoorayhrpassword") String hoorayhrpassword,
            @JsonProperty("hoorayhrusername") String hoorayhrusername) {
        Utils.checkNotNull(hoorayhrpassword, "hoorayhrpassword");
        Utils.checkNotNull(hoorayhrusername, "hoorayhrusername");
        this.hoorayhrpassword = hoorayhrpassword;
        this.hoorayhrusername = hoorayhrusername;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    @JsonIgnore
    public String hoorayhrpassword() {
        return hoorayhrpassword;
    }

    @JsonIgnore
    public String hoorayhrusername() {
        return hoorayhrusername;
    }

    @JsonIgnore
    public Hoorayhr sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public SourceHoorayhr withHoorayhrpassword(String hoorayhrpassword) {
        Utils.checkNotNull(hoorayhrpassword, "hoorayhrpassword");
        this.hoorayhrpassword = hoorayhrpassword;
        return this;
    }

    public SourceHoorayhr withHoorayhrusername(String hoorayhrusername) {
        Utils.checkNotNull(hoorayhrusername, "hoorayhrusername");
        this.hoorayhrusername = hoorayhrusername;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceHoorayhr other = (SourceHoorayhr) o;
        return 
            Objects.deepEquals(this.hoorayhrpassword, other.hoorayhrpassword) &&
            Objects.deepEquals(this.hoorayhrusername, other.hoorayhrusername) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hoorayhrpassword,
            hoorayhrusername,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceHoorayhr.class,
                "hoorayhrpassword", hoorayhrpassword,
                "hoorayhrusername", hoorayhrusername,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private String hoorayhrpassword;
 
        private String hoorayhrusername;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder hoorayhrpassword(String hoorayhrpassword) {
            Utils.checkNotNull(hoorayhrpassword, "hoorayhrpassword");
            this.hoorayhrpassword = hoorayhrpassword;
            return this;
        }

        public Builder hoorayhrusername(String hoorayhrusername) {
            Utils.checkNotNull(hoorayhrusername, "hoorayhrusername");
            this.hoorayhrusername = hoorayhrusername;
            return this;
        }
        
        public SourceHoorayhr build() {
            return new SourceHoorayhr(
                hoorayhrpassword,
                hoorayhrusername);
        }

        private static final LazySingletonValue<Hoorayhr> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"hoorayhr\"",
                        new TypeReference<Hoorayhr>() {});
    }
}
