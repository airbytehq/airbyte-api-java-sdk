/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.airbyte.api.models.shared;


import com.airbyte.api.utils.LazySingletonValue;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SourceYoutubeAnalytics {

    @JsonProperty("credentials")
    private AuthenticateViaOAuth20 credentials;

    @JsonProperty("sourceType")
    private SourceYoutubeAnalyticsYoutubeAnalytics sourceType;

    @JsonCreator
    public SourceYoutubeAnalytics(
            @JsonProperty("credentials") AuthenticateViaOAuth20 credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        this.sourceType = Builder._SINGLETON_VALUE_SourceType.value();
    }

    @JsonIgnore
    public AuthenticateViaOAuth20 credentials() {
        return credentials;
    }

    @JsonIgnore
    public SourceYoutubeAnalyticsYoutubeAnalytics sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SourceYoutubeAnalytics withCredentials(AuthenticateViaOAuth20 credentials) {
        Utils.checkNotNull(credentials, "credentials");
        this.credentials = credentials;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceYoutubeAnalytics other = (SourceYoutubeAnalytics) o;
        return 
            Objects.deepEquals(this.credentials, other.credentials) &&
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            credentials,
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SourceYoutubeAnalytics.class,
                "credentials", credentials,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private AuthenticateViaOAuth20 credentials;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder credentials(AuthenticateViaOAuth20 credentials) {
            Utils.checkNotNull(credentials, "credentials");
            this.credentials = credentials;
            return this;
        }
        
        public SourceYoutubeAnalytics build() {
            return new SourceYoutubeAnalytics(
                credentials);
        }

        private static final LazySingletonValue<SourceYoutubeAnalyticsYoutubeAnalytics> _SINGLETON_VALUE_SourceType =
                new LazySingletonValue<>(
                        "sourceType",
                        "\"youtube-analytics\"",
                        new TypeReference<SourceYoutubeAnalyticsYoutubeAnalytics>() {});
    }
}

