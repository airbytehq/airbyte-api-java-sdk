/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.airbyte.api;

import com.airbyte.api.models.errors.SDKError;
import com.airbyte.api.models.operations.SDKMethodInterfaces.*;
import com.airbyte.api.utils.HTTPClient;
import com.airbyte.api.utils.HTTPRequest;
import com.airbyte.api.utils.JSON;
import com.airbyte.api.utils.SerializedBody;
import com.airbyte.api.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class Destinations implements
            MethodCallCreateDestination,
            MethodCallDeleteDestination,
            MethodCallGetDestination,
            MethodCallListDestinations,
            MethodCallPatchDestination,
            MethodCallPutDestination {

    private final SDKConfiguration sdkConfiguration;

    Destinations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.airbyte.api.models.operations.CreateDestinationRequestBuilder createDestination() {
        return new com.airbyte.api.models.operations.CreateDestinationRequestBuilder(this);
    }

    /**
     * Create a destination
     * Creates a destination given a name, workspace id, and a json blob containing the configuration for the source.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.CreateDestinationResponse createDestination(
            Optional<? extends com.airbyte.api.models.shared.DestinationCreateRequest> request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                baseUrl,
                "/destinations");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<Optional<? extends com.airbyte.api.models.shared.DestinationCreateRequest>>() {});
        SerializedBody serializedRequestBody = com.airbyte.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.CreateDestinationResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.CreateDestinationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.CreateDestinationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.DestinationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.DestinationResponse>() {});
                res.withDestinationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
        }

        return res;
    }


    public com.airbyte.api.models.operations.DeleteDestinationRequestBuilder deleteDestination() {
        return new com.airbyte.api.models.operations.DeleteDestinationRequestBuilder(this);
    }

    /**
     * Delete a Destination
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.DeleteDestinationResponse deleteDestination(
            com.airbyte.api.models.operations.DeleteDestinationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                com.airbyte.api.models.operations.DeleteDestinationRequest.class,
                baseUrl,
                "/destinations/{destinationId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.DeleteDestinationResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.DeleteDestinationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.DeleteDestinationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public com.airbyte.api.models.operations.GetDestinationRequestBuilder getDestination() {
        return new com.airbyte.api.models.operations.GetDestinationRequestBuilder(this);
    }

    /**
     * Get Destination details
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.GetDestinationResponse getDestination(
            com.airbyte.api.models.operations.GetDestinationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                com.airbyte.api.models.operations.GetDestinationRequest.class,
                baseUrl,
                "/destinations/{destinationId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.GetDestinationResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.GetDestinationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.GetDestinationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.DestinationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.DestinationResponse>() {});
                res.withDestinationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
        }

        return res;
    }


    public com.airbyte.api.models.operations.ListDestinationsRequestBuilder listDestinations() {
        return new com.airbyte.api.models.operations.ListDestinationsRequestBuilder(this);
    }

    /**
     * List destinations
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.ListDestinationsResponse listDestinations(
            com.airbyte.api.models.operations.ListDestinationsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                baseUrl,
                "/destinations");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.airbyte.api.utils.Utils.getQueryParams(
                com.airbyte.api.models.operations.ListDestinationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.ListDestinationsResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.ListDestinationsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.ListDestinationsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.DestinationsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.DestinationsResponse>() {});
                res.withDestinationsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
        }

        return res;
    }


    public com.airbyte.api.models.operations.PatchDestinationRequestBuilder patchDestination() {
        return new com.airbyte.api.models.operations.PatchDestinationRequestBuilder(this);
    }

    /**
     * Update a Destination
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.PatchDestinationResponse patchDestination(
            com.airbyte.api.models.operations.PatchDestinationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                com.airbyte.api.models.operations.PatchDestinationRequest.class,
                baseUrl,
                "/destinations/{destinationId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.airbyte.api.models.operations.PatchDestinationRequest>() {});
        SerializedBody serializedRequestBody = com.airbyte.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "destinationPatchRequest", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.PatchDestinationResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.PatchDestinationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.PatchDestinationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.DestinationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.DestinationResponse>() {});
                res.withDestinationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
        }

        return res;
    }


    public com.airbyte.api.models.operations.PutDestinationRequestBuilder putDestination() {
        return new com.airbyte.api.models.operations.PutDestinationRequestBuilder(this);
    }

    /**
     * Update a Destination and fully overwrite it
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.airbyte.api.models.operations.PutDestinationResponse putDestination(
            com.airbyte.api.models.operations.PutDestinationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.airbyte.api.utils.Utils.generateURL(
                com.airbyte.api.models.operations.PutDestinationRequest.class,
                baseUrl,
                "/destinations/{destinationId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.airbyte.api.models.operations.PutDestinationRequest>() {});
        SerializedBody serializedRequestBody = com.airbyte.api.utils.Utils.serializeRequestBody(
                _convertedRequest, "destinationPutRequest", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.airbyte.api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.airbyte.api.models.operations.PutDestinationResponse.Builder resBuilder = 
            com.airbyte.api.models.operations.PutDestinationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.airbyte.api.models.operations.PutDestinationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.airbyte.api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.airbyte.api.models.shared.DestinationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.airbyte.api.models.shared.DestinationResponse>() {});
                res.withDestinationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
        }

        return res;
    }

}
